@ $DefenseTable_8023984C
{
.Element:Normal 00000000
.Element:Throw	FFFFFFFF
.Element:End
}

@ $Script_80239E70
{
    0:  Call  802694A4  ( 00000001 )
   10:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   28:  Switch  *Var0
   34:  	Case  ==  00000008
   40:  		Call  LoadStarPowerScript ( )
   4C:  		ExecWait  *Var0
   58:  		Return
   60:  EndSwitch
   68:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   80:  Switch  *Var2
   8C:  	Case  ==  00000095
   98:  		Call  SetBattleFlagBits ( 00004000 .False )
   AC:  		Set   *VarE  00000001
   BC:  		Set   *VarF  00000002
   CC:  		ExecWait  $Script_8023A4D4
   D8:  	Case  ==  00000096
   E4:  		Call  SetBattleFlagBits ( 00004000 .False )
   F8:  		Set   *VarE  00000002
  108:  		Set   *VarF  00000003
  118:  		ExecWait  $Script_8023A4D4
  124:  	Case  ==  00000097
  130:  		Call  SetBattleFlagBits ( 00004000 .False )
  144:  		Set   *VarE  00000003
  154:  		Set   *VarF  00000005		%not nerfed
  164:  		ExecWait  $Script_8023A4D4
  170:  	Case  ==  00000098
  17C:  		Call  SetBattleFlagBits ( 00004000 .False )
  190:  		ExecWait  $Script_8023AA64
  19C:  	Case  ==  00000099
  1A8:  		ExecWait  $Script_8023AF7C
  1B4:  	Case  ==  0000009A
  1C0:  		ExecWait  $Script_8023B6FC
  1CC:  EndSwitch
  1D4:  Return
  1DC:  End
}

@ $Script_8023A4D4
{
    0:  Call  EnableIdleScript  ( .Actor:Partner 00000000 )
   14:  Call  UseIdleAnimation  ( .Actor:Partner .False )
   28:  Call  LoadActionCommand ( .ActionCommand:Jump )
   38:  Call  802A9000 ( )
   44:  Call  8026919C      ( $???_8023A4B4 )
   54:  Call  UseBattleCamPreset    ( 00000034 )
   64:  Call  BattleCamTargetActor  ( .Actor:Self )
   74:  Call  InitTargetIterator ( )
   80:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0003 )
   98:  Call  SetGoalToTarget   ( .Actor:Partner )
   A8:  Call  AddGoalPos    ( .Actor:Partner FFFFFFEC 00000000 00000000 )
   C4:  Call  SetActorSpeed ( .Actor:Partner *Fixed[5.0] )
   D8:  Call  FlyToGoal     ( .Actor:Partner 00000000 FFFFFFF6 .Easing:CosInOut )
   F4:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0000 )
  10C:  Wait  3`
  118:  Call  802A9120      ( 00000020 00000003 )
  12C:  Call  PlaySoundAtActor  ( .Actor:Partner 00002004 )
  140:  Call  UseBattleCamPreset    ( 00000034 )
  150:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0014 )
  168:  Call  AddGoalPos    ( .Actor:Partner 00000000 0000000A 00000000 )
  184:  Call  FlyToGoal     ( .Actor:Partner 00000005 00000000 .Easing:Linear )
  1A0:  Wait  2`
  1AC:  ChildThread
  1B4:  	Wait  3`
  1C0:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0004 )
  1D8:  EndChildThread
  1E0:  Call  UseBattleCamPreset    ( 00000034 )
  1F0:  Call  AddGoalPos        ( .Actor:Partner FFFFFFE6 00000019 00000000 )
  20C:  Call  FlyToGoal ( .Actor:Partner 00000014 FFFFFFEC .Easing:QuarticOut )
  228:  Call  PlaySoundAtActor  ( .Actor:Partner 00002005 )
  23C:  Call  EnableActorBlur   ( .Actor:Partner 00000001 )
  250:  Call  SetGoalToTarget   ( .Actor:Partner )
  260:  Call  AddGoalPos        ( .Actor:Partner FFFFFFF6 00000000 00000000 )
  27C:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000C0005 )
  294:  Call  FlyToGoal ( .Actor:Partner 00000005 00000000 .Easing:Linear )
  2B0:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000014 00000000 00000001 00000010 )
  2D4:  If  *Var0  ==  .HitResult:Miss % 6
  2E4:  	ChildThread
  2EC:  		Wait  5`
  2F8:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0001 )
  310:  	EndChildThread
  318:  	Call  SetGoalToTarget   ( .Actor:Partner )
  328:  	Call  AddGoalPos    ( .Actor:Partner 00000028 0000000A 00000000 )
  344:  	Call  FlyToGoal     ( .Actor:Partner 0000000A FFFFFFEC .Easing:QuadraticOut )
  360:  	Wait  20`
  36C:  	Call  EnableActorBlur   ( .Actor:Partner 00000000 )
  380:  	Call  SetGoalToHome ( .Actor:Partner )
  390:  	Call  SetActorSpeed ( .Actor:Partner *Fixed[8.0] )
  3A4:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0003 )
  3BC:  	Call  FlyToGoal     ( .Actor:Partner 00000000 FFFFFFFB .Easing:Linear )
  3D8:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0002 )
  3F0:  	Return
  3F8:  EndIf
  400:  Call  EnableActorBlur   ( .Actor:Partner 00000000 )
  414:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0006 )
  42C:  Wait  2`
  438:  Call  GetActionCommandResult    ( *Var0 )
  448:  Switch  *Var0
  454:  	Case  >  00000000
  460:  		Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:0 00000004 00000000 *VarF 00000070 )
				If *VarF > 2`
					%Recover some FP
					Set  	*VarC 1
					Call 	$Function_FPHeal ( *VarC )
					Call	GetActorPos ( .Actor:Partner *Var4 *Var5 *Var6 )
					Add		*Var4 10
					Add		*Var5 12
					Call	PlayEffect ( 00000040 00000001 *Var4 *Var5 *Var6 *VarC 00000000 00000000 00000000 00000000 00000000 00000000 )				
				EndIf
  484:  	Default
  48C:  		Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:0 00000004 00000000 *VarE 00000030 )
  4B0:  EndSwitch
  4B8:  Call  PlaySoundAtActor  ( .Actor:Partner 00000000 )
  4CC:  Switch  *Var0
  4D8:  	CaseOR  ==  .HitResult:Hit % 0
  4E4:  	CaseOR  ==  00000002 % 2
  4F0:  		SetConst  *VarA  000C0017
  500:  		ExecWait  $Script_8023A30C
  50C:  	EndCaseGroup
  514:  	CaseOR  ==  00000001 % 1
  520:  	CaseOR  ==  00000003 % 3
  52C:  		SetConst  *VarA  000C0005
  53C:  		ExecWait  $Script_8023A164
  548:  	EndCaseGroup
  550:  EndSwitch
  558:  Call  EnableIdleScript  ( .Actor:Partner 00000001 )
  56C:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  580:  Return
  588:  End
}



%Airlift
%Removes enemies with 100% chance if they are at least 25% suseptible
%However, Airlift can only be used (successfully) once per battle

#new:Function $DisableAirLift
{
PUSH	RA
ADDI	V0, R0, 1
SAB		V0, $AirLiftBool
POP		RA
JR		RA
ORI		V0, R0, 2
}

%Calculate airlift difficulty?
%hm... looks like it gives you a bonus if enemy is statused or at low HP

%Decomp says this
/%
ApiStatus func_80238CE0_700A60(ScriptInstance* script, s32 isInitialCall) {
    BattleStatus* battleStatus = &gBattleStatus;
    Actor* partnerActor = battleStatus->partnerActor;
    Actor* targetActor = get_actor(partnerActor->targetActorID);
    ActorPart* targetActorPart = get_actor_part(targetActor, partnerActor->targetPartIndex);
    s32 airLiftChance = targetActor->staticActorData->airLiftChance;
    s32 temp = 100 - (targetActor->currentHP * 100) / targetActor->maxHP;

    if (targetActor->transStatus == 14) {
        airLiftChance = 0;
    }

    if (targetActorPart->eventFlags & 0x20) {
        airLiftChance = 0;
    }

    if (airLiftChance > 0) {
        airLiftChance = airLiftChance + ((airLiftChance * temp) / 100);

        if (airLiftChance > 100) {
            airLiftChance = 100;
        }

        if (targetActor->debuff != 0) {
            airLiftChance = (airLiftChance * 150) / 100;

            if (airLiftChance > 150) {
                airLiftChance = 150;
            }
        }
    }

    script->varTable[0] = airLiftChance;

    return ApiStatus_DONE2;
}
%/

@ $Function_80238CE0
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S0, 10 (SP)
    8:  LAW       S0, 800DC14C		%partner pointer
   10:  SW        S2, 18 (SP)
   14:  COPY      S2, A0
   18:  SW        RA, 1C (SP)
   1C:  SW        S1, 14 (SP)
   20:  JAL       ~Func:get_actor	%locate target
   24:  LH        A0, 428 (S0)
   28:  COPY      S1, V0			%S1 = target actor
   2C:  LB        A1, 426 (S0)
   30:  JAL       ~Func:get_actor_part	%locate target part
   34:  COPY      A0, S1
   38:  LHU        A0, 1B8 (S1)		%load HP? (Fix this for 2 byte health)
   3C:  SLL       V1, A0, 1			%HP x 2
   40:  ADDU      V1, V1, A0		%HP x 3
   44:  SLL       V1, V1, 3			%HP x 24
   48:  ADDU      V1, V1, A0		%HP x 25
   4C:  LHU        A0, 1BA (S1)		%load max hp? (Fix this for 2 byte health)
   50:  SLL       V1, V1, 2			%HP x 100
   54:  BNE       A0, R0, .o60		
   58:  DIV       V1, A0			%HP x 100 / Max HP (HP percentage)
   5C:  BREAK     1C00				%Division by 0 exception
        .o60
   60:  LI        AT, FFFF			%FFFF
   64:  BNE       A0, AT, .o78		%if health = 65535 (*not possible in base game?)
   68:  LUI       AT, 8000			%80000000
   6C:  BNE       V1, AT, .o78		%if V1 = 80000000
   70:  NOP
   74:  BREAK     1800				%overflow exception?
        .o78
   78:  MFLO      V1
   7C:  COPY      A1, V0
   80:  LW        A0, 8 (S1)
   84:  LI        V0, 64
   88:  LBU       A0, 19 (A0)
   8C:  SUBU      A2, V0, V1
   90:  LB        V1, 218 (S1)			%is transparent?
   94:  LI        V0, E
   98:  BEQL      V1, V0, .oA0
   9C:  CLEAR     A0
        .oA0
   A0:  LW        V0, 7C (A1)
   A4:  ANDI      V0, V0, 20
   A8:  BNEL      V0, R0, .oB0
   AC:  CLEAR     A0
        .oB0
   B0:  BLEZ      A0, .o124				%skip calculations if chance is 0
   B4:  MULT      A0, A2
   B8:  MFLO      V1
   BC:  LI        A1, 51EB851F			%??? why 
   C4:  MULT      V1, A1
   C8:  SRA       V1, V1, 1F
   CC:  MFHI      A2
   D0:  SRA       V0, A2, 5
   D4:  SUBU      V0, V0, V1
   D8:  ADDU      A0, A0, V0
   DC:  SLTI      V0, A0, 65
   E0:  BEQL      V0, R0, .oE8
   E4:  LI        A0, 64
        .oE8
   E8:  LB        V0, 210 (S1)			%Status
   EC:  BEQ       V0, R0, .o124
		NOP
		%Not completely sure how this is airliftchance * 150 / 100, but I'm changing it to * 2
		SLL		  A0, A0, 1
		/%
   F0:  SLL       V1, A0, 2				%A0 * 4
   F4:  ADDU      V1, V1, A0			%A0 * 5
   F8:  SLL       V0, V1, 4				%A0 * 80
   FC:  SUBU      V0, V0, V1			%A0 * 75
  100:  SLL       V0, V0, 1				%A0 * 150
  104:  MULT      V0, A1				%(A0 * 150) * A1	( = 51EB851F)
  108:  SRA       V0, V0, 1F			%? highest bit?
  10C:  MFHI      A3					%(A0 * 150) * A1 (highest bits)
  110:  SRA       V1, A3, 5				% ((A0 * 150) * A1) / 32
  114:  SUBU      A0, V1, V0			% ((A0 * 150) * A1) / 32
		%/
  118:  SLTI      V0, A0, 97
  11C:  BEQL      V0, R0, .o124
  120:  LI        A0, 96		
        .o124
  124:  SW        A0, 84 (S2)			%Return status chances
  128:  LW        RA, 1C (SP)
  12C:  LW        S2, 18 (SP)
  130:  LW        S1, 14 (SP)
  134:  LW        S0, 10 (SP)
  138:  LI        V0, 2
  13C:  JR        RA
  140:  ADDIU     SP, SP, 20
}

@ $Script_8023AF7C
{
    0:  Call  InitTargetIterator ( )
    C:  Call  $Function_80238CE0 ( )
		If    *Var0 < 50`
			Set *Var0 0`
		Else
			Set *Var0 100`
		EndIf
   18:  Call  LoadActionCommand ( .ActionCommand:AirLift )
   28:  Call  802A9000  ( *Var0 )
   38:  Call  SetupMashMeter    ( 00000001 00000064 00000000 00000000 00000000 00000000 )
   5C:  Call  80269344  ( 00000000 )
   6C:  Call  InitTargetIterator ( )
   78:  Call  SetGoalToTarget   ( .Actor:Partner )
   88:  Call  GetDistanceToGoal ( .Actor:Partner *Var0 )
   9C:  Div   *Var0  00000004
   AC:  Call  UseBattleCamPreset    ( 00000034 )
   BC:  Call  SetBattleCamOffsetZ   ( 00000008 )
   CC:  Call  MoveBattleCamOver ( *Var0 )
   DC:  Sub   *Var0  0000000C
   EC:  If  *Var0  <  00000000
   FC:  	Set   *Var0  00000000
  10C:  EndIf
  114:  Call  80269344  ( *Var0 )
  124:  Call  SetActorSpeed     ( .Actor:Partner *Fixed[5.0] )
  138:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000C0003 )
  150:  Call  FlyToGoal ( .Actor:Partner 00000000 FFFFFFFC .Easing:CosInOut )
  16C:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000C0001 )
  184:  Wait  15`
  190:  Call  SetBattleCamOffsetZ   ( 00000000 )
  1A0:  Call  AddBattleCamZoom  ( FFFFFF60 )
  1B0:  Call  MoveBattleCamOver ( 00000014 )
  1C0:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000C0015 )
  1D8:  Call  SetAnimationRate  ( .Actor:Partner 00000000 *Fixed[2.0] )
  1F0:  Wait  2`
  1FC:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000004 00000000 00000001 00000010 )
  220:  If  *Var0  ==  .HitResult:Miss % 6
  230:  	Call  CloseActionCommandInfo ( )
  23C:  	Call  UseBattleCamPreset    ( 00000033 )
  24C:  	Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  268:  	Add   *Var1  00000014
  278:  	Call  SetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
  294:  	Call  FlyToGoal     ( .Actor:Partner 0000000A FFFFFFF6 .Easing:CosIn )
  2B0:  	Call  SetAnimationRate      ( .Actor:Partner 00000000 *Fixed[8.0] )
  2C8:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0001 )
  2E0:  	Wait  10`
  2EC:  	Call  SetGoalToHome ( .Actor:Partner )
  2FC:  	Call  SetActorSpeed ( .Actor:Partner *Fixed[4.0] )
  310:  	Call  SetAnimationRate      ( .Actor:Partner 00000000 *Fixed[1.0] )
  328:  	Call  SetActorYaw   ( .Actor:Self 000000B4 )
  33C:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0003 )
  354:  	Call  FlyToGoal     ( .Actor:Partner 00000000 00000000 .Easing:Linear )
  370:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0002 )
  388:  	Return
  390:  EndIf
  398:  Wait  3`
  3A4:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:8000 00000004 00000000 00000000 00000030 )		%weird flags
  3C8:  Call  $Function_80238CE0 ( )
		If *Var0 > 0`			%can it return negative numbers? (probably not, looking at the function)
			If    *Var0 < 50`
				Set *Var0 0`
			Else
				Set *Var0 100`
			EndIf
		EndIf
  3D4:  If  *Var0  !=  .HitResult:TriggeredExplode % FFFFFFFF
  3E4:  	Call  802A9184  ( 00000000 00000057 00000003 00000000 )
  400:  	Call  SetBattleFlagBits ( 00004000 .False )
  414:  	ChildThread
  41C:  		Wait  1`
  428:  		Call  GetActionResult   ( *Var1 )
  438:  		Div   *Var1  0000000A
  448:  		Add   *Var1  00000001
  458:  		Loop  00000058
  464:  			Call  GetActionResult   ( *Var0 )
  474:  			Set   *Var2  *Var1
  484:  			Mul   *Var2  0000000A
  494:  			If  *Var0  >  *Var2								%camera zoom level?
  4A4:  				Call  SetBattleCamOffsetZ   ( 00000000 )
  4B4:  				Call  AddBattleCamZoom      ( FFFFFFFE )
  4C4:  				Call  MoveBattleCamOver     ( 0000000A )
  4D4:  				Add   *Var1  00000001
  4E4:  			EndIf
  4EC:  			Wait  1`
  4F8:  		EndLoop
  500:  	EndChildThread
  508:  	Wait  90`
  514:  	Call  GetActionSuccessCopy  ( *Var0 )
  524:  Else
  52C:  	Call  CloseActionCommandInfo ( )
  538:  	Set   *Var0  00000000
  548:  EndIf
  550:  Switch  *Var0			%Success or fail?
  55C:  	Case  ==  00000001
  568:  		Call  UseBattleCamPreset    ( 00000003 )
  578:  		Call  GetOwnerTarget    ( *Var0 *Var1 )
  58C:  		Call  DispatchEvent     ( *Var0 .Event:BlowAway )
  5A0:  		Call  $Function_80238E24    ( *Var0 )
  5B0:  		Wait  30`
  5BC:  		Call  GetOwnerTarget    ( *Var0 *Var1 )
  5D0:  		Call  SetBattleFlagBits ( 01000000 .True )
  5E4:  		Call  RemoveActor       ( *Var0 )
				Call  $DisableAirLift   ( )
  5F4:  	Default
  5FC:  		Call  GetOwnerTarget        ( *Var0 *Var1 )
  610:  		Call  DispatchEvent ( *Var0 .Event:AirLiftFailed )
  624:  		Call  UseBattleCamPreset    ( 00000033 )
  634:  		Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  650:  		Add   *Var1  00000014
  660:  		Call  SetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
  67C:  		Call  FlyToGoal     ( .Actor:Partner 00000005 FFFFFFF6 .Easing:CosIn )
  698:  		Call  SetAnimationRate      ( .Actor:Partner 00000000 *Fixed[8.0] )
  6B0:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0001 )
  6C8:  		Wait  10`
				Call  $FreeTurn ( )
  6D4:  EndSwitch
  6DC:  Call  80280818 ( )
  6E8:  Call  SetGoalToHome ( .Actor:Partner )
  6F8:  Call  SetActorSpeed ( .Actor:Partner *Fixed[12.0] )
  70C:  Call  SetAnimationRate  ( .Actor:Partner 00000000 *Fixed[1.0] )
  724:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0003 )
  73C:  Call  FlyToGoal     ( .Actor:Partner 00000000 00000000 .Easing:Linear )
  758:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000C0002 )
  770:  Return
  778:  End
}