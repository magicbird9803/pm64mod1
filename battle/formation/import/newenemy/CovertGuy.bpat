% Automatically dumped from section 10

#new:Actor $CovertGuy
{
% stats
[Index]        EEb 
[Level]        53`b 
[MaxHP]        50`b 
[Coins]         1`b 
[Flags]       00000000 
[StatusTable] $StatusTable_CovertGuy 
% ai
[PartsCount]   2`s 
[PartsTable] $PartsTable_CovertGuy 
[Script]      $Script_Init_CovertGuy 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:Function $Function_80218880_CG
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S2, 18 (SP)
    8:  DADDU     S2, A0, R0
    C:  SW        RA, 1C (SP)
   10:  SW        S1, 14 (SP)
   14:  SW        S0, 10 (SP)
   18:  SDC1      F20, 20 (SP)
   1C:  BEQ       A1, R0, .o130
   20:  LW        S0, C (S2)
   24:  JAL       8002ACE4
   28:  ADDIU     A0, R0, 24
   2C:  DADDU     S1, V0, R0
   30:  SW        S1, 70 (S2)
   34:  LW        A1, 0 (S0)
   38:  ADDIU     S0, S0, 4
   3C:  JAL       ~Func:get_variable
   40:  DADDU     A0, S2, R0
   44:  SW        V0, 20 (S1)
   48:  LW        A1, 0 (S0)
   4C:  ADDIU     S0, S0, 4
   50:  JAL       ~Func:get_float_variable
   54:  DADDU     A0, S2, R0
   58:  SWC1      F0, 0 (S1)
   5C:  LW        A1, 0 (S0)
   60:  ADDIU     S0, S0, 4
   64:  JAL       ~Func:get_float_variable
   68:  DADDU     A0, S2, R0
   6C:  SWC1      F0, 4 (S1)
   70:  LW        A1, 0 (S0)
   74:  ADDIU     S0, S0, 4
   78:  JAL       ~Func:get_float_variable
   7C:  DADDU     A0, S2, R0
   80:  SWC1      F0, 8 (S1)
   84:  LW        A1, 0 (S0)
   88:  ADDIU     S0, S0, 4
   8C:  JAL       ~Func:get_variable
   90:  DADDU     A0, S2, R0
   94:  SW        V0, 1C (S1)
   98:  LW        A1, 0 (S0)
   9C:  JAL       ~Func:get_float_variable
   A0:  DADDU     A0, S2, R0
   A4:  LW        A0, 20 (S1)
   A8:  JAL       80130F58
   AC:  SWC1      F0, 10 (S1)
   B0:  DADDU     S0, V0, R0
   B4:  LWC1      F12, 8 (S0)
   B8:  LWC1      F14, 10 (S0)
   BC:  LW        A2, 0 (S1)
   C0:  JAL       ~Func:dist2D
   C4:  LW        A3, 8 (S1)
   C8:  LWC1      F12, 8 (S0)
   CC:  LWC1      F14, 10 (S0)
   D0:  LW        A2, 0 (S1)
   D4:  LW        A3, 8 (S1)
   D8:  JAL       80029C80
   DC:  MOV.S     F20, F0
   E0:  LWC1      F4, 10 (S1)
   E4:  LWC1      F6, 1C (S1)
   E8:  CVT.S.W   F6, F6
   EC:  MUL.S     F4, F4, F6
   F0:  NOP
   F4:  LIF       F2, 0.5
   FC:  NOP
  100:  MUL.S     F4, F4, F2
  104:  NOP
  108:  SWC1      F0, C (S1)
  10C:  LWC1      F0, 4 (S1)
  110:  LWC1      F2, C (S0)
  114:  SUB.S     F0, F0, F2
  118:  MOV.S     F2, F6
  11C:  DIV.S     F0, F0, F6
  120:  ADD.S     F4, F4, F0
  124:  DIV.S     F20, F20, F2
  128:  SWC1      F20, 14 (S1)
  12C:  SWC1      F4, 18 (S1)
        .o130
  130:  LW        S1, 70 (S2)
  134:  JAL       80130F58
  138:  LW        A0, 20 (S1)
  13C:  DADDU     S0, V0, R0
  140:  BNE       S0, R0, .o158
  144:  NOP
  148:  JAL       8002AD2C
  14C:  LW        A0, 70 (S2)
  150:  BEQ       R0, R0, .o1FC
  154:  ADDIU     V0, R0, 2
        .o158
  158:  LWC1      F12, C (S1)
  15C:  JAL       ~Func:sin_deg
  160:  NOP
  164:  LWC1      F2, 14 (S1)
  168:  MUL.S     F2, F2, F0
  16C:  NOP
  170:  LWC1      F0, 8 (S0)
  174:  ADD.S     F0, F0, F2
  178:  SWC1      F0, 8 (S0)
  17C:  JAL       ~Func:cos_deg
  180:  LWC1      F12, C (S1)
  184:  LWC1      F2, 14 (S1)
  188:  MUL.S     F2, F2, F0
  18C:  NOP
  190:  LWC1      F0, 10 (S0)
  194:  SUB.S     F0, F0, F2
  198:  SWC1      F0, 10 (S0)
  19C:  LWC1      F0, C (S0)
  1A0:  LWC1      F2, 18 (S1)
  1A4:  ADD.S     F0, F0, F2
  1A8:  SWC1      F0, C (S0)
  1AC:  LWC1      F0, 18 (S1)
  1B0:  LWC1      F2, 10 (S1)
  1B4:  LW        V0, 1C (S1)
  1B8:  SUB.S     F0, F0, F2
  1BC:  ADDIU     V0, V0, FFFF
  1C0:  SW        V0, 1C (S1)
  1C4:  BLTZ      V0, .o1D4
  1C8:  SWC1      F0, 18 (S1)
  1CC:  BEQ       R0, R0, .o1FC
  1D0:  DADDU     V0, R0, R0
        .o1D4
  1D4:  LWC1      F0, 0 (S1)
  1D8:  SWC1      F0, 8 (S0)
  1DC:  LWC1      F0, 4 (S1)
  1E0:  SWC1      F0, C (S0)
  1E4:  LWC1      F0, 8 (S1)
  1E8:  SWC1      F0, 10 (S0)
  1EC:  SW        R0, 18 (S1)
  1F0:  JAL       8002AD2C
  1F4:  LW        A0, 70 (S2)
  1F8:  ADDIU     V0, R0, 1
        .o1FC
  1FC:  LW        RA, 1C (SP)
  200:  LW        S2, 18 (SP)
  204:  LW        S1, 14 (SP)
  208:  LW        S0, 10 (SP)
  20C:  LDC1      F20, 20 (SP)
  210:  JR        RA
  214:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218A98_CG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S2, 18 (SP)
    8:  DADDU     S2, A0, R0
    C:  SW        RA, 1C (SP)
   10:  SW        S1, 14 (SP)
   14:  SW        S0, 10 (SP)
   18:  LW        S0, C (S2)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  JAL       80130F58
   2C:  DADDU     A0, V0, R0
   30:  LW        A1, 0 (S0)
   34:  ADDIU     S0, S0, 4
   38:  DADDU     S1, V0, R0
   3C:  LWC1      F0, 8 (S1)
   40:  TRUNC.W.S F2, F0
   44:  MFC1      A2, F2
   48:  JAL       ~Func:set_variable
   4C:  DADDU     A0, S2, R0
   50:  LW        A1, 0 (S0)
   54:  ADDIU     S0, S0, 4
   58:  LWC1      F0, C (S1)
   5C:  TRUNC.W.S F2, F0
   60:  MFC1      A2, F2
   64:  JAL       ~Func:set_variable
   68:  DADDU     A0, S2, R0
   6C:  LWC1      F0, 10 (S1)
   70:  LW        A1, 0 (S0)
   74:  TRUNC.W.S F2, F0
   78:  MFC1      A2, F2
   7C:  JAL       ~Func:set_variable
   80:  DADDU     A0, S2, R0
   84:  LW        RA, 1C (SP)
   88:  LW        S2, 18 (SP)
   8C:  LW        S1, 14 (SP)
   90:  LW        S0, 10 (SP)
   94:  ADDIU     V0, R0, 2
   98:  JR        RA
   9C:  ADDIU     SP, SP, 20
}

#new:Function $Function_80218B38_CG
{
    0:  ADDIU     SP, SP, FFC0
    4:  SW        S3, 2C (SP)
    8:  DADDU     S3, A0, R0
    C:  SW        S0, 20 (SP)
   10:  DADDU     S0, R0, R0
   14:  SW        S2, 28 (SP)
   18:  LIA       S2, 800DC070
   20:  SW        S4, 30 (SP)
   24:  LIA       S4, 8010F290
   2C:  SW        S5, 34 (SP)
   30:  ADDIU     A0, R0, FFFF
   34:  SW        RA, 38 (SP)
   38:  SW        S1, 24 (SP)
   3C:  LB        V0, AE (S2)
   40:  LW        S1, C (S3)
   44:  BNE       V0, A0, .o54
   48:  DADDU     S5, S4, R0
   4C:  SW        R0, 10 (SP)
   50:  ADDIU     S0, R0, 1
        .o54
   54:  LB        V0, AF (S2)
   58:  BNE       V0, A0, .o70
   5C:  SLL       V0, S0, 2
   60:  ADDU      V1, SP, V0
   64:  ADDIU     V0, R0, 1
   68:  SW        V0, 10 (V1)
   6C:  ADDU      S0, S0, V0
        .o70
   70:  LB        V0, B0 (S2)
   74:  BNE       V0, A0, .o8C
   78:  SLL       V0, S0, 2
   7C:  ADDU      V1, SP, V0
   80:  ADDIU     V0, R0, 2
   84:  SW        V0, 10 (V1)
   88:  ADDIU     S0, S0, 1
        .o8C
   8C:  JAL       ~Func:rand_int
   90:  ADDIU     A0, R0, 2
   94:  ADDIU     A0, S0, FFFF
   98:  JAL       ~Func:rand_int
   9C:  ADDIU     S0, V0, 2
   A0:  SLL       V0, V0, 2
   A4:  ADDU      V0, SP, V0
   A8:  LW        V1, 10 (V0)
   AC:  ADDIU     V0, R0, 1
   B0:  BEQ       V1, V0, .o124
   B4:  SLTI      V0, V1, 2
   B8:  BEQ       V0, R0, .oD0
   BC:  ADDIU     V0, R0, 2
   C0:  BEQL      V1, R0, .oE0
   C4:  SB        S0, AE (S2)
   C8:  BEQ       R0, R0, .o194
   CC:  NOP
        .oD0
   D0:  BEQL      V1, V0, .o16C
   D4:  SB        S0, B0 (S2)
   D8:  BEQ       R0, R0, .o194
   DC:  NOP
        .oE0
   E0:  LW        A1, 0 (S1)
   E4:  LB        V0, 1 (S4)
   E8:  ADDIU     S1, S1, 4
   EC:  SLL       V0, V0, 2
   F0:  LTW       A2, V0 ($IntTable_80228748_CG)
   FC:  JAL       ~Func:set_variable
  100:  DADDU     A0, S3, R0
  104:  LB        V0, 1 (S4)
  108:  LW        A1, 0 (S1)
  10C:  SLL       V0, V0, 2
  110:  LTW       A2, V0 ($IntTable_80228754_CG)
  11C:  BEQ       R0, R0, .o18C
  120:  DADDU     A0, S3, R0
        .o124
  124:  SB        S0, AF (S2)
  128:  LW        A1, 0 (S1)
  12C:  LB        V0, 0 (S5)
  130:  ADDIU     S1, S1, 4
  134:  SLL       V0, V0, 2
  138:  LTW       A2, V0 ($IntTable_80228760_CG)
  144:  JAL       ~Func:set_variable
  148:  DADDU     A0, S3, R0
  14C:  LB        V0, 0 (S5)
  150:  LW        A1, 0 (S1)
  154:  SLL       V0, V0, 2
  158:  LTW       A2, V0 ($IntTable_8022876C_CG)
  164:  BEQ       R0, R0, .o18C
  168:  DADDU     A0, S3, R0
        .o16C
  16C:  LW        A1, 0 (S1)
  170:  ADDIU     S1, S1, 4
  174:  DADDU     A0, S3, R0
  178:  JAL       ~Func:set_variable
  17C:  ADDIU     A2, R0, 16C
  180:  DADDU     A0, S3, R0
  184:  LW        A1, 0 (S1)
  188:  ADDIU     A2, R0, 4F
        .o18C
  18C:  JAL       ~Func:set_variable
  190:  NOP
        .o194
  194:  LW        RA, 38 (SP)
  198:  LW        S5, 34 (SP)
  19C:  LW        S4, 30 (SP)
  1A0:  LW        S3, 2C (SP)
  1A4:  LW        S2, 28 (SP)
  1A8:  LW        S1, 24 (SP)
  1AC:  LW        S0, 20 (SP)
  1B0:  ADDIU     V0, R0, 2
  1B4:  JR        RA
  1B8:  ADDIU     SP, SP, 40
}

#new:Function $Function_80218CF4_CG
{
    0:  ADDIU     SP, SP, FFE8
    4:  LIA       V1, 800DC070
    C:  ADDIU     A2, R0, FFFF
   10:  SW        RA, 10 (SP)
   14:  LB        V0, AE (V1)
   18:  BEQ       V0, A2, .o38
   1C:  LW        A1, C (A0)
   20:  LB        V0, AF (V1)
   24:  BEQ       V0, A2, .o38
   28:  NOP
   2C:  LB        V0, B0 (V1)
   30:  BNE       V0, A2, .o44
   34:  NOP
        .o38
   38:  LW        A1, 0 (A1)
   3C:  BEQ       R0, R0, .o48
   40:  DADDU     A2, R0, R0
        .o44
   44:  LW        A1, 0 (A1)
        .o48
   48:  JAL       ~Func:set_variable
   4C:  NOP
   50:  LW        RA, 10 (SP)
   54:  ADDIU     V0, R0, 2
   58:  JR        RA
   5C:  ADDIU     SP, SP, 18
}

#new:Function $Function_80218D54_CG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:IdleAnimations $IdleAnimations_CovertGuy_Hammer
{
.Status:Normal    003F0103
.Status:Stone     003F0101
.Status:Sleep     003F010F
.Status:Poison    003F0103
.Status:Stop      003F0101
.Status:Static    003F0103
.Status:Paralyze  003F0101
.Status:Dizzy     003F0112
.Status:Fear      003F0112
.Status:End
}

#new:IdleAnimations $IdleAnimations_CovertGuy_Slingshot
{
.Status:Normal    003F0102
.Status:Stone     003F0100
.Status:Sleep     003F010F
.Status:Poison    003F0102
.Status:Stop      003F0100
.Status:Static    003F0102
.Status:Paralyze  003F0100
.Status:Dizzy     003F0112
.Status:Fear      003F0112
.Status:End
}

#new:IdleAnimations $IdleAnimations_Pebble_CG
{
.Status:Normal    003F0110
.Status:End
}

#new:DefenseTable $DefenseTable_CovertGuy
{
.Element:Normal 00000002 %better armor now
.Element:Shock  FFFFFFFF %weak
.Element:End
}

#new:StatusTable $StatusTable_CovertGuy %statuses are paralyze and shrink
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      20`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   50`
.Status:Shrink     50`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_CovertGuy
{
00800000 01000000 001E00FF $IdleAnimations_CovertGuy_Hammer $DefenseTable_CovertGuy 00000000 00000000 FFF30000 00000000 
00120001 02000000 001800FF $IdleAnimations_Pebble_CG $DefenseTable_CovertGuy 00000000 00000000 FFF60000 00000000 
}

#new:Script $Script_Init_CovertGuy
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_CovertGuy )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_CovertGuy )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_CovertGuy )
   3C:  Call     SetActorVar 	( .Actor:Self 00000002 00000001 )
   54:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
		Call     SetActorVar 	( .Actor:Self 00000004 00000000 )
		Call     SetActorVar 	( .Actor:Self 00000005 00000000 ) %speaking flags (used for the anti-invis text)
   6C:  Call     8027D75C ( FFFFFF81 *Var[0] )
   80:  If  *Var[0]  !=  00000000 
   90:  	Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
   A8:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_CovertGuy_Slingshot )
   C0:  	Call     SetAnimation 	( .Actor:Self 00000001 003F0102 )
   D8:  EndIf
   E0:  Return
   E8:  End
}

#new:Script $Script_Idle_CovertGuy
{
    0:  Return
    8:  End
}

#new:Script $Script_802276D4_CG
{
    0:  Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
   18:  If  *Var[0]  ==  00000000 
   28:  	Return
   30:  EndIf
   38:  Call     GetLastDamage 	( .Actor:Self *Var[0] )
   4C:  If  *Var[0]  ==  00000000 
   5C:  	Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
   74:  	Return
   7C:  EndIf
   84:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   98:  If  *Var[0]  &  0035D000 
   A8:  	Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
   C0:  	Return
   C8:  EndIf
   D0:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   E8:  Switch  *Var[0] 
   F4:  	Case  ==  00000000 
  100:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0102 )
  118:  	Case  ==  00000001 
  124:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0103 )
  13C:  EndSwitch
  144:  Label    00000000 
  150:  Call     GetBattleFlags ( *Var[0] )
  160:  If  *Var[0]  &  00000100 
  170:  	Wait     00000001 
  17C:  	Goto     00000000 
  188:  EndIf
  190:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  1A8:  Switch  *Var[0] 
  1B4:  	Case  ==  00000000 
  1C0:  		Call     SetActorVar 	( .Actor:Self 00000002 00000001 )
  1D8:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_CovertGuy_Hammer )
  1F0:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0117 )
  208:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  224:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
  238:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  254:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  274:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0119 )
  28C:  		Wait     00000005 
  298:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0103 )
  2B0:  	Case  ==  00000001 
  2BC:  		Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
  2D4:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_CovertGuy_Slingshot )
  2EC:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0118 )
  304:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  320:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
  334:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  350:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  370:  		Call     SetAnimation 	( .Actor:Self 00000001 003F011A )
  388:  		Wait     00000005 
  394:  		Call     SetAnimation 	( .Actor:Self 00000001 003F0102 )
  3AC:  EndSwitch
		Call  $Function_Vanish ( 2` ) %Use those 2 turns to charge up some really good attacks
  3B4:  Wait     0000000A 
  3C0:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
  3D8:  Return
  3E0:  End
}

#new:Script $Script_HandleEvent_CovertGuy
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   28:  Switch  *Var[0] 
   34:  	Case  ==  .Event:HitCombo
   40:  		SetConst  *Var[0]  00000001 
   50:  		SetConst  *Var[1]  003F010B 
   60:  		ExecWait DoNormalHit 
   6C:  		Call     SetActorVar 	( .Actor:Self 00000003 00000001 )
   84:  	Case  ==  .Event:Hit
   90:  		SetConst  *Var[0]  00000001 
   A0:  		SetConst  *Var[1]  003F010B 
   B0:  		ExecWait DoNormalHit 
   BC:  		Call     SetActorVar 	( .Actor:Self 00000003 00000001 )
   D4:  		ExecWait $Script_802276D4_CG 
   E0:  	Case  ==  .Event:BurnHit
   EC:  		SetConst  *Var[0]  00000001 
   FC:  		SetConst  *Var[1]  003F010D 
  10C:  		SetConst  *Var[2]  003F010E 
  11C:  		ExecWait DoBurnHit 
  128:  		Call     SetActorVar 	( .Actor:Self 00000003 00000001 )
  140:  		ExecWait $Script_802276D4_CG 
  14C:  	Case  ==  .Event:BurnDeath
  158:  		SetConst  *Var[0]  00000001 
  168:  		SetConst  *Var[1]  003F010D 
  178:  		SetConst  *Var[2]  003F010E 
  188:  		ExecWait DoBurnHit 
  194:  		SetConst  *Var[0]  00000001 
  1A4:  		SetConst  *Var[1]  003F010E 
  1B4:  		ExecWait DoDeath 
  1C0:  		Return
  1C8:  	Case  ==  .Event:SpinSmashHit
  1D4:  		SetConst  *Var[0]  00000001 
  1E4:  		SetConst  *Var[1]  003F010B 
  1F4:  		ExecWait 8029B998 
  200:  		Call     SetActorVar 	( .Actor:Self 00000003 00000001 )
  218:  		ExecWait $Script_802276D4_CG 
  224:  	Case  ==  .Event:SpinSmashDeath
  230:  		SetConst  *Var[0]  00000001 
  240:  		SetConst  *Var[1]  003F010B 
  250:  		ExecWait 8029B998 
  25C:  		SetConst  *Var[0]  00000001 
  26C:  		SetConst  *Var[1]  003F010C 
  27C:  		ExecWait DoDeath 
  288:  		Return
  290:  	Case  ==  00000017
  29C:  		SetConst  *Var[0]  00000001 
  2AC:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  2C4:  		If  *Var[1]  ==  00000000 
  2D4:  			SetConst  *Var[1]  003F0102 
  2E4:  		Else
  2EC:  			SetConst  *Var[1]  003F0103 
  2FC:  		EndIf
  304:  		ExecWait DoImmune 
  310:  	CaseOR  ==  .Event:Immune
  31C:  	CaseOR  ==  .Event:AirLiftFailed
  328:  		SetConst  *Var[0]  00000001 
  338:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  350:  		If  *Var[1]  ==  00000000 
  360:  			SetConst  *Var[1]  003F0102 
  370:  		Else
  378:  			SetConst  *Var[1]  003F0103 
  388:  		EndIf
  390:  		ExecWait DoImmune 
  39C:  		ExecWait $Script_802276D4_CG 
  3A8:  	EndCaseGroup
  3B0:  	Case  ==  .Event:Death
  3BC:  		SetConst  *Var[0]  00000001 
  3CC:  		SetConst  *Var[1]  003F010B 
  3DC:  		ExecWait DoNormalHit 
  3E8:  		Wait     0000000A 
  3F4:  		SetConst  *Var[0]  00000001 
  404:  		SetConst  *Var[1]  003F010C 
  414:  		ExecWait DoDeath 
  420:  		Return
  428:  	Case  ==  .Event:RecoverStatus
  434:  		SetConst  *Var[0]  00000001 
  444:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  45C:  		If  *Var[1]  ==  00000000 
  46C:  			SetConst  *Var[1]  003F0102 
  47C:  		Else
  484:  			SetConst  *Var[1]  003F0103 
  494:  		EndIf
  49C:  		ExecWait DoRecover 
  4A8:  	Case  ==  .Event:ScareAway
  4B4:  		SetConst  *Var[0]  00000001 
  4C4:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  4DC:  		If  *Var[1]  ==  00000000 
  4EC:  			SetConst  *Var[1]  003F0106 
  4FC:  		Else
  504:  			SetConst  *Var[1]  003F0107 
  514:  		EndIf
  51C:  		SetConst  *Var[2]  003F0111 
  52C:  		ExecWait DoScareAway 
  538:  		Return
  540:  	Case  ==  .Event:BeginAirLift
  54C:  		SetConst  *Var[0]  00000001 
  55C:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  574:  		If  *Var[1]  ==  00000000 
  584:  			SetConst  *Var[1]  003F0106 
  594:  		Else
  59C:  			SetConst  *Var[1]  003F0107 
  5AC:  		EndIf
  5B4:  		ExecWait DoAirLift 
  5C0:  	Case  ==  .Event:BlowAway
  5CC:  		SetConst  *Var[0]  00000001 
  5DC:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  5F4:  		If  *Var[1]  ==  00000000 
  604:  			SetConst  *Var[1]  003F0106 
  614:  		Else
  61C:  			SetConst  *Var[1]  003F0107 
  62C:  		EndIf
  634:  		ExecWait DoBlowAway 
  640:  		Return
  648:  	Default
  650:  EndSwitch
  658:  Call     UseIdleAnimation 	( .Actor:Self .True )
  66C:  Return
  674:  End
}

#new:Script $Script_SlingshotAttack_CG
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Set *Flag[01] 0 %a go-invis flag
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *Var[0] )
   4C:  If  *Var[0]  ==  .Phase:FirstStrike
   5C:  	Call     UseBattleCamPreset 	( 00000002 )
   6C:  	Call     MoveBattleCamOver 	( 00000001 )
   7C:  EndIf
   84:  Call     PlaySoundAtActor 	( .Actor:Self 000002E7 )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 003F0115 )
   B0:  Wait     0000000C 
   BC:  Wait     0000000C 
   C8:  Call     SetAnimation 	( .Actor:Self 00000001 003F0116 )
   E0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   FC:  Add  *Var[0]  0000000A 
  10C:  Add  *Var[1]  0000000A 
  11C:  Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  13C:  Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  158:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  16C:  If  *Var[0]  &  00080000 
  17C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  19C:  EndIf
  1A4:  Call     PlaySoundAtActor 	( .Actor:Self 000002E8 )
  1B8:  Call     8026FA00 ( FFFFFF81 00000002 00000002 00000000 00000000 )
  1D8:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  1FC:  Switch  *Var[0] 
  208:  	CaseOR  ==  00000006 
  214:  	CaseOR  ==  00000005 
  220:  		Set  *Var[A]  *Var[0] 
  230:  		Thread
  238:  			Loop     
  244:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  260:  				Call     GetPartOffset 	( .Actor:Self 00000002 *Var[3] *Var[4] *Var[5] )
  280:  				If  *Var[0]  >  *Var[3] 
  290:  					BreakLoop
  298:  				EndIf
  2A0:  				Wait     00000001 
  2AC:  			EndLoop
  2B4:  			If  *Var[A]  ==  00000005 
  2C4:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2E8:  			EndIf
  2F0:  		EndThread
  2F8:  		Call     SetGoalToTarget 	( .Actor:Self )
  308:  		Call     AddGoalPos 	( .Actor:Self FFFFFF9C 00000000 00000000 )
  324:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  340:  		Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[36.0] ) %14 -> 36
  358:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.001953125] )
  370:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000000 .True )
  398:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  3B4:  		Call     YieldTurn   	( )
  3C0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3DC:  		Wait     0000000F 
  3E8:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  400:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  414:  		Call     UseIdleAnimation 	( .Actor:Self .True )
				Call     GetStatusFlags ( .Actor:Self *Var[4] )
				If  *Var[4]  &  04002000
					Return %don't go invis if you're already invis
				EndIf
				%Call $Function_Vanish ( 1` )
				Call	 GetActorVar (.Actor:Self 00000005 *Var[C])
				If *Var[C] !& 00000001
					Call     ActorSpeak  	( $YouKnowTheRules .Actor:Self 00000001 003F0105 003F0102 ) % time to charge
					Add	*Var[C] 00000001
					Call SetActorVar (.Actor:Self 00000005 *Var[C])
				EndIf
				Thread
					Wait     0000000A 
					Call     PlaySoundAtActor 	( .Actor:Self 000002DB )
				EndThread
				Thread
					Call     8026BF48 ( 00000001 )
					Call     VanishActor 	( .Actor:Self 00000001 )
					Call     8026BF48 ( 00000000 )
				EndThread
				%Call $Function_Vanish ( 1` )
  428:  		Return
  430:  	EndCaseGroup
  438:  EndSwitch
  440:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  454:  Call     SetGoalToTarget 	( .Actor:Self )
  464:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  480:  Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[36.0] ) %14 -> 36
  498:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.001953125] )
  4B0:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000000 .True )
  4D8:  Wait     00000002 
  4E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080364 0000000C 00000020 ) %12 damage with some shrink turns
  50C:  Switch  *Var[0] 
  518:  	CaseOR  ==  00000000 
  524:  	CaseOR  ==  00000002 
  530:  		Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  550:  		Sub  *Var[0]  00000064 
  560:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  578:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 0000001E .True )
  5A0:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  5BC:  		Call     YieldTurn   	( )
  5C8:  	EndCaseGroup
  5D0:  EndSwitch
  5D8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5EC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  600:  Return
  608:  End
}

#new:IntTable $IntTable_80228748_CG
{
00000166 00000167 00000168 
}

#new:IntTable $IntTable_80228754_CG
{
00000049 0000004A 0000004B 
}

#new:IntTable $IntTable_80228760_CG
{
00000169 0000016A 0000016B 
}

#new:IntTable $IntTable_8022876C_CG
{
0000004C 0000004D 0000004E 
}

#new:Script $Script_80228778_CG
{
    0:  Label    00000000 
    C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[A] )
   24:  Switch  *Var[A] 
   30:  	Case  ==  00000000 
   3C:  	Case  ==  00000001 
   48:  		Call     GetActorPos 	( .Actor:Player *Var[1] *Var[2] *Var[3] )
   64:  		Set  *Var[2]  00000000 
   74:  		Sub  *Var[3]  00000001 
   84:  		Call     $Function_80218B38_CG ( *Var[4] *Var[5] )
   98:  		Call     MakeItemEntity ( *Var[4] *Var[1] *Var[2] *Var[3] 00000001 00000000 )
   BC:  		Call     SetActorVar 	( .Actor:Self 00000001 *Var[0] )
   D4:  		Add  *Var[1]  0000001E 
   E4:  		Call     $Function_80218880_CG ( *Var[0] *Var[1] *Var[2] *Var[3] 00000014 *Fixed[1.0] )
  108:  		Add  *Var[1]  00000014 
  118:  		Call     $Function_80218880_CG ( *Var[0] *Var[1] *Var[2] *Var[3] 0000000A *Fixed[1.0] )
  13C:  		Add  *Var[1]  0000000A 
  14C:  		Call     $Function_80218880_CG ( *Var[0] *Var[1] *Var[2] *Var[3] 00000005 *Fixed[1.0] )
  170:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  188:  	Case  ==  00000002 
  194:  		Call     ShowMessageBox ( *Var[5] 0000003C )
  1A8:  		Sub  *Var[1]  00000096 
  1B8:  		Call     $Function_80218880_CG ( *Var[0] *Var[1] *Var[2] *Var[3] 0000001E *Fixed[1.0] )
  1DC:  		Call     RemoveItemEntity 	( *Var[0] )
  1EC:  		Call     SetActorVar 	( .Actor:Self 00000000 00000003 )
  204:  		Return
  20C:  EndSwitch
  214:  Wait     00000001 
  220:  Goto     00000000 
  22C:  Return
  234:  End
}

% Immediately vanishes owner of calling script.
#new:Function $Function_Vanish % ( duration )
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	SW		S1, 14 (SP)
	SW		S2, 18 (SP)
	% get turn count
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S1, A0, R0
	ANDI	V0, V0, 00FF
	% add electify status
	LW		A0, 148 (S1)
	JAL		~Func:get_actor
	DADDU	S2, V0, R0
	ORI		S2, S2, 0E00
	SH		S2, 218 (V0)
	% return
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	LW		S2, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

#string $YouKnowTheRules
{
[STYLE:Right]So you're going invisible, huh?[BR]
Well, I can do that too![BR]
[Wait][END]
}

#new:Script $Script_HammerAttack_CG
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Set *Flag[01] 0 %a go-invis flag
	Loop 2
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 003F0107 )
   8C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   A0:  Call     SetGoalToTarget 	( .Actor:Self )
   B0:  Call     AddGoalPos 	( .Actor:Self 00000046 00000000 00000000 )
   CC:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   E4:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  100:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  11C:  Call     SetAnimation 	( .Actor:Self 00000001 003F0107 )
  134:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  148:  Call     SetGoalToTarget 	( .Actor:Self )
  158:  Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:  If  *Var[1]  !&  00080000 
  17C:  	Call     AddGoalPos 	( .Actor:Self 00000014 00000000 00000000 )
  198:  EndIf
  1A0:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  1B8:  Call     SetAnimation 	( .Actor:Self 00000001 003F0103 )
  1D0:  Wait     0000000A 
  1DC:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  1F4:  Thread
  1FC:  	Wait     00000004 
  208:  	Call     PlaySoundAtActor 	( .Actor:Self 00000327 )
  21C:  EndThread
  224:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  248:  Switch  *Var[0] 
  254:  	CaseOR  ==  00000006 
  260:  	CaseOR  ==  00000005 
  26C:  		Set  *Var[A]  *Var[0] 
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 003F010A )
  294:  		Wait     00000006 
  2A0:  		If  *Var[A]  ==  00000005 
  2B0:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2D4:  		EndIf
  2DC:  		Wait     0000000F 
  2E8:  		Call     UseBattleCamPreset 	( 00000002 )
  2F8:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  %30C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  328:  		SetConst  *Var[0]  00000001 
  338:  		SetConst  *Var[1]  003F0107 
  %348:  		ExecWait DoReturnHome 
  %354:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  %36C:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  %380:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  %394:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  %3A8:  		Return
				Set *Flag[01] 1
				Goto 64
  3B0:  	EndCaseGroup
  3B8:  EndSwitch
  3C0:  Call     SetAnimation 	( .Actor:Self 00000001 003F010A )
  3D8:  Wait     00000005 
  3E4:  Wait     00000002 
  3F0:  Wait     00000002 
  3FC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80001164 00000009 00000020 ) %9 * 2 with some sleep turns
  424:  Switch  *Var[0] 
  430:  	CaseOR  ==  00000000 
  43C:  	CaseOR  ==  00000002 
  448:  		Set  *Flag[00]  00000000 
  458:  		Call     GetBattleFlags ( *Var[0] )
  468:  		If  *Var[0]  !&  80000000 
  478:  			Call     $Function_80218CF4_CG ( *Var[0] )
  488:  			If  *Var[0]  !=  FFFFFFFF 
  498:  				Set  *Flag[00]  00000001 
  4A8:  			EndIf
  4B0:  		EndIf
  4B8:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  4CC:  		If  *Var[0]  <=  00000000 
  4DC:  			Wait     00000014 
  4E8:  			Goto     00000064 
  4F4:  		EndIf
  4FC:  		Call     GetStatusFlags ( .Actor:Self *Var[1] )
  510:  		If  *Var[1]  &  00080000 
  520:  			Wait     00000014 
  52C:  			Goto     00000064 
  538:  		EndIf
  540:  		Call     GetStatusFlags ( .Actor:Player *Var[1] )
  554:  		If  *Var[1]  &  40100000 
  564:  			Wait     00000014 
  570:  			Goto     00000064 
  57C:  		EndIf
  584:  		If  *Flag[00]  ==  00000001 
  594:  			Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
  5AC:  			Exec     $Script_80228778_CG 
  5B8:  			Wait     00000008 
  5C4:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0107 )
  5DC:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5F8:  			Add  *Var[0]  00000046 
  608:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  61C:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  638:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  650:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0103 )
  668:  			Label    00000000 
  674:  			Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  68C:  			If  *Var[0]  !=  00000000 
  69C:  				Wait     00000001 
  6A8:  				Goto     00000000 
  6B4:  			EndIf
  6BC:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0107 )
  6D4:  			Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  6EC:  			Call     $Function_80218A98_CG ( *Var[0] *Var[1] *Var[2] *Var[3] )
  708:  			Add  *Var[1]  00000014 
  718:  			Sub  *Var[3]  00000002 
  728:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  73C:  			Call     SetGoalPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
  758:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  770:  			Thread
  778:  				Wait     00000005 
  784:  				Call     PlaySoundAtActor 	( .Actor:Self 000020DC )
  798:  				Call     $Function_80218D54_CG ( 000000C8 0000000A )
  7AC:  			EndThread
  7B4:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0109 )
  7CC:  			Wait     00000005 
  7D8:  			Call     SetActorVar 	( .Actor:Self 00000000 00000002 )
  7F0:  			Sub  *Var[1]  00000007 
  800:  			Call     PlayEffect  	( ~FX:Firework:White *Var[1] *Var[2] *Var[3] *Fixed[1.0] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  844:  			Wait     00000028 
  850:  		Else
  858:  			Wait     00000008 
  864:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0107 )
  87C:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  898:  			Add  *Var[0]  00000046 
  8A8:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  8BC:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8D8:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  8F0:  			Call     SetAnimation 	( .Actor:Self 00000001 003F0103 )
  908:  			Wait     0000000A 
  914:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  930:  			Add  *Var[1]  0000000A 
  940:  			Call     PlayEffect  	( ~FX:EmoteIcon:Question 00000000 *Var[0] *Var[1] *Var[2] 00000019 FFFFFFD3 00000014 00000000 00000000 00000000 00000000 00000000 )
  984:  			Wait     00000014 
  990:  		EndIf
  %998:  		Label    00000064 
			EndCaseGroup
		EndSwitch
	EndLoop
				Label    00000064 
				Call SetActorYaw ( .Actor:Self 000000B4 )
  9A4:  		Call     UseBattleCamPreset 	( 00000002 )
  9B4:  		SetConst  *Var[0]  00000001 
  9C4:  		SetConst  *Var[1]  003F0107 
  9D4:  		ExecWait DoReturnHome 
  %9E0:  	EndCaseGroup
  %9E8:  EndSwitch
		Call     GetStatusFlags ( .Actor:Self *Var[4] )
		If  *Var[4]  &  04002000
			Set *Flag[01] 0 %don't go invis if you're already invis
		EndIf
		If *Flag[01] == 1
			Call	 GetActorVar (.Actor:Self 00000005 *Var[C])
			If *Var[C] !& 00000001
				Call     ActorSpeak  	( $YouKnowTheRules .Actor:Self 00000001 003F0105 003F0102 ) % time to charge
				Add	*Var[C] 00000001
				Call SetActorVar (.Actor:Self 00000005 *Var[C])
			EndIf
			Thread
				Wait     0000000A 
				Call     PlaySoundAtActor 	( .Actor:Self 000002DB )
			EndThread
			Thread
				Call     8026BF48 ( 00000001 )
				Call     VanishActor 	( .Actor:Self 00000001 )
				Call     8026BF48 ( 00000000 )
			EndThread
			%Call $Function_Vanish ( 1` )
		EndIf
		Call SetActorYaw ( .Actor:Self 00000000 )
  9F0:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  A04:  Call     UseIdleAnimation 	( .Actor:Self .True )
  A18:  Return
  A20:  End
}

#new:Script $Script_TakeTurn_CovertGuy
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
   38:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_CovertGuy_Slingshot )
   50:  	Call     SetAnimation 	( .Actor:Self 00000001 003F0102 )
   68:  EndIf
   70:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   88:  Switch  *Var[0] 
   94:  	Case  ==  00000000 
   A0:  		ExecWait $Script_SlingshotAttack_CG 
   AC:  	Case  ==  00000001 
   B8:  		ExecWait $Script_HammerAttack_CG 
   C4:  EndSwitch
		%Remove arbitrary invisibility
		%Now he will only go invisible in response to being attacked or him missing
		/%
		Call     GetActorVar 	( .Actor:Self 00000004 *Var[9] )
		Add *Var[9] 1
		Mod *Var[9] 4
		Call     SetActorVar 	( .Actor:Self 00000004 *Var[9] )
		If *Var[9] == 00000002 %lmao
			Thread
				Wait     0000000A 
				Call     PlaySoundAtActor 	( .Actor:Self 000002DB )
			EndThread
			Thread
				Call     8026BF48 ( 00000001 )
				Call     VanishActor 	( .Actor:Self 00000002 )
				Call     8026BF48 ( 00000000 )
			EndThread
			%Call $Function_Vanish ( 2` )
		EndIf
		%/
   CC:  Return
   D4:  End
}
