#new:Function $Function_80218000_DG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:Function $Function_80218500_01 {
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       ~Func:length2D
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  CLEAR     A0
   44:  LI        A2, 5A
   48:  COPY      A1, A0
   4C:  LA        A3, $FloatTable_DarkGoomba
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  COPY      A2, V1
   90:  COPY      A0, V1
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_DarkGoomba)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_DarkGoomba)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  COPY      V1, A2
   F0:  COPY      V1, A0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  LI        V0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  LI        V0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_8021868C_DG {
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S4, 20 (SP)
    8:  COPY      S4, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  LW        S2, C (S4)
   24:  LW        A1, 0 (S2)
   28:  JAL       ~Func:get_variable
   2C:  ADDIU     S2, S2, 4
   30:  LW        A1, 0 (S2)
   34:  ADDIU     S2, S2, 4
   38:  COPY      A0, S4
   3C:  JAL       ~Func:get_variable
   40:  COPY      S0, V0
   44:  LW        A1, 0 (S2)
   48:  ADDIU     S2, S2, 4
   4C:  COPY      A0, S4
   50:  JAL       ~Func:get_variable
   54:  COPY      S1, V0
   58:  COPY      S3, V0
   5C:  LW        A1, 0 (S2)
   60:  ADDIU     S2, S2, 4
   64:  COPY      A0, S4
   68:  JAL       ~Func:get_variable
   6C:  SUBU      S3, S3, S0
   70:  COPY      S0, V0
   74:  COPY      A0, S4
   78:  LW        A1, 0 (S2)
   7C:  JAL       ~Func:get_variable
   80:  SUBU      S0, S0, S1
   84:  BNE       S3, R0, .oA0
   88:  NOP
   8C:  BNE       S0, R0, .oA0
   90:  COPY      A0, S4
   94:  LW        A1, 0 (S2)
   98:  BEQ       R0, R0, .oC8
   9C:  COPY      A2, V0
        .oA0
   A0:  MTC1      S3, F12
   A4:  NOP
   A8:  CVT.S.W   F12, F12
   AC:  MTC1      S0, F14
   B0:  NOP
   B4:  JAL       $Function_80218500_01
   B8:  CVT.S.W   F14, F14
   BC:  COPY      A0, S4
   C0:  LW        A1, 0 (S2)
   C4:  ADDIU     A2, V0, FFA6
        .oC8
   C8:  JAL       ~Func:set_variable
   CC:  NOP
   D0:  LI        V0, 2
   D4:  LW        RA, 24 (SP)
   D8:  LW        S4, 20 (SP)
   DC:  LW        S3, 1C (SP)
   E0:  LW        S2, 18 (SP)
   E4:  LW        S1, 14 (SP)
   E8:  LW        S0, 10 (SP)
   EC:  JR        RA
   F0:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218458_DG
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       8011D82C
    C:  ADDIU     A0, R0, 1
   10:  DADDU     A0, R0, R0
   14:  ADDIU     V0, R0, 1
   18:  DADDU     A1, A0, R0
   1C:  DADDU     A2, A0, R0
   20:  LAW       V1, 801512F0
   28:  DADDU     A3, A0, R0
   2C:  JAL       8011BE5C
   30:  SB        V0, 0 (V1)
   34:  LW        RA, 10 (SP)
   38:  ADDIU     V0, R0, 2
   3C:  JR        RA
   40:  ADDIU     SP, SP, 18
}

#new:Function $Function_8021849C_DG
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  LW        V0, C (A0)
    C:  JAL       ~Func:get_variable
   10:  LW        A1, 0 (V0)
   14:  DADDU     A0, R0, R0
   18:  DADDU     A1, A0, R0
   1C:  DADDU     A2, A0, R0
   20:  JAL       8011BE5C
   24:  ANDI      A3, V0, FF
   28:  LW        RA, 10 (SP)
   2C:  ADDIU     V0, R0, 2
   30:  JR        RA
   34:  ADDIU     SP, SP, 18
}

#new:Function $Function_802184D4_DG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:DefenseTable $DefenseTable_DarkGoomba
{
.Element:Normal 00000000
.Element:Cosmic FFFFFFFD %star storm does 10 against them
.Element:End
}

#new:StatusTable $StatusTable_DarkGoomba %the only status with a reasonable chance of working is stop
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      20`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop       90`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_DarkGoomba
{
00800000 01000000 001600FF $IdleAnimations_DarkGoomba $DefenseTable_DarkGoomba 00000000 00000000 00F60000 00000000 
}

#new:Actor $DarkGoomba
{
% stats
[Index]        DCb 
[Level]        30`b %endgame enemy 
[MaxHP]        24`b  
[Coins]         1`b 
[Flags]       00000000 
[StatusTable] $StatusTable_DarkGoomba
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_DarkGoomba
[Script]      $Script_Init_DarkGoomba
% move effectiveness
[Escape]       30`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]    40`b 
[PowerBounce] 100`b 
[SpinSmash]     3`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:IdleAnimations $IdleAnimations_DarkGoomba
{
.Status:Normal    00620202
.Status:Stone     00620200
.Status:Sleep     0062020D
.Status:Poison    00620202
.Status:Stop      00620200
.Status:Static    00620202
.Status:Paralyze  00620200
.Status:Dizzy     0062020C
.Status:Fear      0062020C
.Status:End
}

#new:IdleAnimations $IdleAnimations_DarkGoomba_Moving
{
.Status:Normal    00620206
.Status:Stone     00620200
.Status:Sleep     0062020D
.Status:Poison    00620202
.Status:Stop      00620200
.Status:Static    00620206
.Status:Paralyze  00620200
.Status:Dizzy     0062020C
.Status:Fear      0062020C
.Status:End
}

#new:IdleAnimations $IdleAnimations_DarkGoomba_Charged
{
.Status:Normal    0062020D
.Status:Stone     0062020D
.Status:Sleep     0062020D
.Status:Poison    0062020D
.Status:Stop      0062020D
.Status:Static    0062020D
.Status:Paralyze  0062020D
.Status:Dizzy     0062020C
.Status:Fear      0062020C
.Status:End
}

#new:Script $Script_Init_DarkGoomba
{
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_DarkGoomba )
   14:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_DarkGoomba )
   28:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_DarkGoomba )
   %3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_DarkGoomba )
   50:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   68:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   80:  Return
   88:  End
}

/%
#new:Script $Script_NextTurn_DarkGoomba
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  Switch  *Var[0] 
   1C:  	Case  ==  .Phase:PlayerBegin
   28:  	Case  ==  .Phase:EnemyBegin
   34:  	Case  ==  .Phase:EnemyEnd
   40:  		Call     SetBattleVar 	( 00000001 00000000 )
   54:  		Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
   6C:  EndSwitch
   74:  Return
   7C:  End
}
%/

#new:Script $Script_Charge_DarkGoomba %also does the charge attack
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   64:  If  *Var[0]  ==  00000000 
   74:  	Call     UseBattleCamPreset 	( 0000000E )
   84:  	Call     BattleCamTargetActor ( .Actor:Self )
   94:  	Call     MoveBattleCamOver 	( 00000014 )
   A4:  	Wait     00000014 
   B0:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:PowerUp )
   C4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   E0:  	Add  *Var[1]  0000000A 
   F0:  	Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000002D 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  134:  	Call     SetAnimation 	( .Actor:Self 00000001 00620206 )
  14C:  	Wait     0000001E 
  158:  	Call     UseBattleCamPreset 	( 00000002 )
  168:  	Call     MoveBattleCamOver 	( 00000014 )
  178:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  194:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  1A8:  	Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  1C4:  	Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  %1E4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp ) %Call     PlaySoundAtActor 	( .Actor:Self 000020DD )
  1F8:  	Call     $Function_80218000_DG ( 00000080 0000000A )
  20C:  	Thread
  214:  		Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.5] )
  230:  	EndThread
  238:  	Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
  250:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba_Charged )
  268:  	Call     SetAnimation 	( .Actor:Self 00000001 00620208 )
  280:  	Call     EnableActorGlow 	( .Actor:Self .True )
  294:  	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .True )
  2B0:  	Wait     00000002 
  2BC:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  2D0:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  2E4:  	Return
  2EC:  EndIf
		/%
		%nah
		%add the monstar attack ;)
		Call     UseBattleCamPreset 	( 00000013 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamOffsetZ 	( 00000010 )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 0000001E )
		Wait 0000001E 
		Thread
			Call     $Function_80218458_DG ( )
			Call     MakeLerp    	( 00000000 000000C8 0000003C 00000001 )
			Label    00000000 
			Call     UpdateLerp  	( )
			Call     $Function_8021849C_DG ( *Var[0] )
			Wait     00000001 
			If  *Var[1]  ==  00000001 
				Goto     00000000 
			EndIf
		EndThread
		Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp )
		Call     $Function_802184D4_DG ( 00000050 00000078 )
		Call     UseBattleCamPreset 	( 00000013 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamZoom  	( 00000064 )
		Call     SetBattleCamOffsetZ 	( 00000020 )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 0000003C )
		Wait     0000003C 
		Call     PlaySoundAtActor 	( .Actor:Self 000002EA )
		Call     PlaySoundAtActor 	( .Actor:Self 0000036E )
		Thread
			Wait     0000000A 
			Loop     00000012 
				Call     RandInt     	( 00000096 *Var[0] )
				Add  *Var[0]  00000064 
				Call     $Function_802184D4_DG ( *Var[0] 00000014 )
				Wait     0000000A 
			EndLoop
		EndThread
		Thread
			Loop     0000003C 
				Call     RandInt     	( 00000001 *Var[0] )
				Add  *Var[0]  00000002 
				Call     RandInt     	( 00000190 *Var[1] )
				Sub  *Var[1]  00000064 
				Call     RandInt     	( 00000064 *Var[2] )
				Sub  *Var[2]  00000032 
				Set  *Var[3]  *Var[1] 
				Sub  *Var[3]  000000C8 
				Set  *Var[4]  *Var[2] 
				Call     RandInt     	( 0000000A *Var[5] )
				Add  *Var[5]  0000000A 
				Call     PlayEffect  	( 0000000F *Var[0] *Var[1] 000000F0 *Var[2] *Var[3] 00000000 *Var[4] *Var[5] 00000000 00000000 00000000 00000000 00000000 )
				Wait     00000003 
			EndLoop
		EndThread
		Wait     00000008 
		Call     UseBattleCamPreset 	( 00000002 )
		Call     MoveBattleCamOver 	( 0000000A )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Add  *Var[1]  00000019 
		Add  *Var[2]  00000005 
		Call     PlayEffect  	( ~FX:RadialFlowOut:BlueSpikes *Var[0] *Var[1] *Var[2] *Fixed[0.80078125] 000000A0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call     SetAnimation 	( .Actor:Self 00000001 0062050D )
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000000 00000010 )
		Switch  *Var[0] 
			CaseOR  ==  00000006 
			CaseOR  ==  00000005 
				Set  *Var[A]  *Var[0] 
				Wait     000000AA 
				Call     SetAnimation 	( .Actor:Self 00000001 0062050A )
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
				Call     MakeLerp    	( 000000C8 00000000 0000003C 00000000 )
				Label    00000001 
				Call     UpdateLerp  	( )
				Call     $Function_8021849C_DG ( *Var[0] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000001 
				EndIf
				If  *Var[A]  ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Wait     00000014 
				Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
				Call     EnableActorGlow 	( .Actor:Self .False )
				Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
				Call     UseIdleAnimation 	( .Actor:Self .True )
				Return
			EndCaseGroup
		EndSwitch
		Wait     000000AA 
		Wait     00000002 
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000100 00000000 00000000 000000018 00000020 )
		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
		Call     EnableActorGlow 	( .Actor:Self .False )
		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
		Switch  *Var[0] 
			CaseOR  ==  00000000 
			CaseOR  ==  00000002 
				Call     SetAnimation 	( .Actor:Self 00000001 00620502 )
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
				Call     MakeLerp    	( 000000C8 00000000 0000003C 00000000 )
				Label    00000002 
				Call     UpdateLerp  	( )
				Call     $Function_8021849C_DG ( *Var[0] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000002 
				EndIf
				Wait     00000014 
			EndCaseGroup
		EndSwitch
		%/
  2F4:  Call     UseBattleCamPreset 	( 0000003F )
  304:  Call     BattleCamTargetActor ( .Actor:Self )
  314:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  32C:  Loop     00000014 
  338:  	Call     SetActorDispOffset ( FFFFFF81 00000001 00000000 00000000 )
  354:  	Wait     00000001 
  360:  	Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF 00000000 00000000 )
  37C:  	Wait     00000001 
  388:  EndLoop
  390:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  3AC:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  3D0:  Switch  *Var[0] 
  3DC:  	CaseOR  ==  00000006 
  3E8:  	CaseOR  ==  00000005 
  3F4:  		Set  *Var[A]  *Var[0] 
  404:  		Thread
  40C:  			Loop     
  418:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  434:  				Add  *Var[0]  0000001E 
  444:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  460:  				If  *Var[0]  >  *Var[3] 
  470:  					BreakLoop
  478:  				EndIf
  480:  				Wait     00000001 
  48C:  			EndLoop
  494:  			Call     UseBattleCamPreset 	( 00000001 )
  4A4:  			If  *Var[A]  ==  00000005 
  4B4:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4D8:  			EndIf
  4E0:  			Wait     0000000F 
  4EC:  			Call     UseBattleCamPreset 	( 00000002 )
  4FC:  		EndThread
  504:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  520:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  53C:  		Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  558:  		Call     SetGoalToTarget 	( .Actor:Self )
  568:  		Call     AddGoalPos 	( .Actor:Self FFFFFF38 00000000 00000000 )
  584:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.03] ) %0.01 -> 0.03
  598:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  5AC:  		Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  5CC:  		Call     8026F6EC ( FFFFFF81 )
  5DC:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  5F8:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  614:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  630:  		Call     SetActorPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  64C:  		Wait     00000014 
  658:  		Call     EnableActorGlow 	( .Actor:Self .False )
  66C:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  688:  		Call     YieldTurn   	( )
  694:  		Call     SetActorPos 	( .Actor:Self 0000012C 00000000 00000000 )
  6B0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6CC:  		Call     SetAnimation 	( .Actor:Self 00000001 00620206 )
  6E4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6F8:  		Call     SetGoalToHome 	( .Actor:Self )
  708:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  720:  		Call     SetAnimation 	( .Actor:Self 00000001 00620202 )
  738:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  750:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  768:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
  780:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  794:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7A8:  		Return
  7B0:  	EndCaseGroup
  7B8:  EndSwitch
  7C0:  Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  7DC:  Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  7F8:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  814:  Call     SetGoalToTarget 	( .Actor:Self )
  824:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.03] ) %0.01 -> 0.03
  838:  Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  84C:  Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  86C:  Wait     00000002 
  878:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 8020023C 00000018 00000020 ) %that's a lotta damage, and it has stop proc too
  8A0:  Switch  *Var[0] 
  8AC:  	CaseOR  ==  00000000 
  8B8:  	CaseOR  ==  00000002 
  8C4:  		Thread
  8CC:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  8E8:  			Set  *Var[0]  00000050 
  8F8:  			Loop     0000003C 
  904:  				Add  *Var[0]  00000012 
  914:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  930:  				Wait     00000001 
  93C:  			EndLoop
  944:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  960:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  97C:  		EndThread
  984:  		Call     UseBattleCamPreset 	( 00000002 )
  994:  		Call     8026F6EC ( FFFFFF81 )
  9A4:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.4] ) %0.8 -> 2.4
  9B8:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9D4:  		Set  *Var[1]  00000000 
  9E4:  		Sub  *Var[0]  00000032 
  9F4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A10:  		Call     JumpToGoal  	( .Actor:Self 0000001E 00000000 00000001 00000000 )
  A30:  		Sub  *Var[0]  00000028 
  A40:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A5C:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  A7C:  		Sub  *Var[0]  0000001E 
  A8C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AA8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  AC8:  		Wait     0000000A 
  AD4:  		Call     EnableActorGlow 	( .Actor:Self .False )
  AE8:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  B04:  		Call     YieldTurn   	( )
  B10:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  B24:  		Call     SetAnimation 	( .Actor:Self 00000001 00620206 )
  B3C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  B50:  		Call     SetGoalToHome 	( .Actor:Self )
  B60:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  B78:  		Call     SetAnimation 	( .Actor:Self 00000001 00620202 )
  B90:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  BA4:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  BBC:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
  BD4:  	EndCaseGroup
  BDC:  EndSwitch
	%
  BE4:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  BF8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  C0C:  Return
  C14:  End
}

%Charge on second turn (deterministic)
%Do not charge if others are charging
#new:Script $Script_TakeTurn_DarkGoomba %$Script_TakeTurn_802195F0
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	Call     SetBattleVar 	( 00000001 00000001 )
   34:  	ExecWait $Script_Headbonk_DarkGoomba 
   40:  	Return
   48:  EndIf
   50:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   68:  If  *Var[0]  ==  00000001 
			Call     SetBattleVar 	( 00000001 00000001 )
   78:  	ExecWait $Script_Charge_DarkGoomba %preform charge attack if charged
   84:  	Return
   8C:  EndIf
   94:  Call     GetBattleVar 	( 00000001 *Var[0] )
   C0:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
		Call     AddActorVar 	( .Actor:Self 00000001 00000001 )
		If  *Var[0]  ==  00000000 	%First turn (or post charging)
			Call     SetBattleVar 	( 00000001 00000001 )
			ExecWait $Script_Headbonk_DarkGoomba 
		Else
			Call	 GetBattleVar 	( 00000001 *Var1 )
			If *Var1 == 1
				Call     SetBattleVar 	( 00000001 00000002 )
				Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
				ExecWait $Script_Charge_DarkGoomba 
			Else
				Call     SetBattleVar 	( 00000001 00000001 )
				ExecWait $Script_Headbonk_DarkGoomba 
			EndIf
		EndIf
  218:  Return
  220:  End
}
% Origin: HEURISTIC
/%
#new:Script $Script_802198B0_DarkGoomba
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_Headbonk_DarkGoomba )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_DarkGoomba2 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_DarkGoomba2 )
   3C:  Return
   44:  End
%/
#new:Script $Script_Idle_DarkGoomba %$Script_Idle_802198FC
{
    0:  Label    0000000A 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add  *Var[0]  00000050 
   30:  Loop     *Var[0] 
   3C:  	Label    00000000 
   48:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
   5C:  	If  *Var[1]  &  0035D000 
   6C:  		Wait     00000001 
   78:  		Goto     00000000 
   84:  	EndIf
   8C:  	Wait     00000001 
   98:  EndLoop
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Add  *Var[0]  00000005 
   CC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
   E0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba_Moving )
   F8:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  114:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000000 *Var[0] )
		If *Var[0] == 00000001
			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba_Charged )
		Else
  128:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
		EndIf
  140:  Loop     00000014 
  14C:  	Label    00000001 
  158:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:  	If  *Var[1]  &  0035D000 
  17C:  		Wait     00000001 
  188:  		Goto     00000001 
  194:  	EndIf
  19C:  	Wait     00000001 
  1A8:  EndLoop
  1B0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Sub  *Var[0]  00000005 
  1DC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
  1F0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba_Moving )
  208:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  224:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000000 *Var[0] )
		If *Var[0] == 00000001
			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba_Charged )
		Else
  238:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
		EndIf
  250:  Loop     00000050 
  25C:  	Label    00000002 
  268:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  27C:  	If  *Var[1]  &  0035D000 
  28C:  		Wait     00000001 
  298:  		Goto     00000002 
  2A4:  	EndIf
  2AC:  	Wait     00000001 
  2B8:  EndLoop
  2C0:  Goto     0000000A 
  2CC:  Return
  2D4:  End
}

#new:Script $Script_HandleEvent_DarkGoomba %$Script_HandleEvent_80219BD8
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo
   70:  	CaseOR  ==  .Event:Hit
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  00620209 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  0062020E 
   DC:  		SetConst  *Var[2]  0062020F 
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  0062020E 
  124:  		SetConst  *Var[2]  0062020F 
  134:  		ExecWait DoBurnHit 
  140:  		SetConst  *Var[0]  00000001 
  150:  		SetConst  *Var[1]  0062020F 
  160:  		ExecWait DoDeath 
  16C:  		Return
  174:  	Case  ==  .Event:SpinSmashHit
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  00620209 
  1A0:  		ExecWait 8029B998 
  1AC:  	Case  ==  .Event:SpinSmashDeath
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  00620209 
  1D8:  		ExecWait 8029B998 
  1E4:  		SetConst  *Var[0]  00000001 
  1F4:  		SetConst  *Var[1]  00620209 
  204:  		ExecWait DoDeath 
  210:  		Return
  218:  	Case  ==  .Event:ShockHit
  224:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  240:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  25C:  		Call     EnableActorGlow 	( .Actor:Self .False )
  270:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  28C:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  2A4:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
  2BC:  		SetConst  *Var[0]  00000001 
  2CC:  		SetConst  *Var[1]  00620209 
  2DC:  		ExecWait DoShockHit 
  2E8:  		SetConst  *Var[0]  00000001 
  2F8:  		SetConst  *Var[1]  00620209 
  308:  		ExecWait DoJumpBack 
  314:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  334:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  34C:  		Call     SetAnimation 	( .Actor:Self 00000001 0062020C )
  364:  		Call     SetGoalToHome 	( .Actor:Self )
  374:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  388:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  3A0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  3B8:  		Wait     00000005 
  3C4:  		Call     SetAnimation 	( .Actor:Self 00000001 00620202 )
  3DC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  3F0:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  410:  	Case  ==  .Event:ShockDeath
  41C:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  438:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  454:  		Call     EnableActorGlow 	( .Actor:Self .False )
  468:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  484:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  49C:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
  4B4:  		SetConst  *Var[0]  00000001 
  4C4:  		SetConst  *Var[1]  00620209 
  4D4:  		ExecWait DoShockHit 
  4E0:  		SetConst  *Var[0]  00000001 
  4F0:  		SetConst  *Var[1]  00620209 
  500:  		ExecWait DoDeath 
  50C:  		Return
  514:  	Case  ==  .Event:StarBeam
  520:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  538:  		If  *Var[0]  ==  00000001 
  548:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  564:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  580:  			Call     EnableActorGlow 	( .Actor:Self .False )
  594:  			Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  5B0:  			Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  5C8:  			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_DarkGoomba )
  5E0:  		EndIf
  5E8:  		SetConst  *Var[0]  00000001 
  5F8:  		SetConst  *Var[1]  00620209 
  608:  		ExecWait DoImmune 
  614:  	CaseOR  ==  00000017
  620:  	CaseOR  ==  .Event:Immune
  62C:  	CaseOR  ==  .Event:AirLiftFailed
  638:  		SetConst  *Var[0]  00000001 
  648:  		SetConst  *Var[1]  00620202 
  658:  		ExecWait DoImmune 
  664:  	EndCaseGroup
  66C:  	Case  ==  .Event:Death
  678:  		SetConst  *Var[0]  00000001 
  688:  		SetConst  *Var[1]  00620209 
  698:  		ExecWait DoNormalHit 
  6A4:  		Wait     0000000A 
  6B0:  		SetConst  *Var[0]  00000001 
  6C0:  		SetConst  *Var[1]  00620209
  6D0:  		ExecWait DoDeath 
  6DC:  		Return
  6E4:  	Case  ==  .Event:EndFirstStrike
  6F0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  708:  		Call     SetAnimation 	( .Actor:Self 00000001 00620206 )
  720:  		Call     SetGoalToHome 	( .Actor:Self )
  730:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  744:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  75C:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  774:  		Call     HPBarToHome 	( .Actor:Self )
  784:  	Case  ==  .Event:RecoverStatus
  790:  		SetConst  *Var[0]  00000001 
  7A0:  		SetConst  *Var[1]  00620202
  7B0:  		ExecWait DoRecover 
  7BC:  	Case  ==  .Event:ScareAway
  7C8:  		SetConst  *Var[0]  00000001 
  7D8:  		SetConst  *Var[1]  00620206 
  7E8:  		SetConst  *Var[2]  00620209 
  7F8:  		ExecWait DoScareAway 
  804:  		Return
  80C:  	Case  ==  .Event:BeginAirLift
  818:  		SetConst  *Var[0]  00000001 
  828:  		SetConst  *Var[1]  00620206 
  838:  		ExecWait DoAirLift 
  844:  	Case  ==  .Event:BlowAway
  850:  		SetConst  *Var[0]  00000001 
  860:  		SetConst  *Var[1]  00620209 
  870:  		ExecWait DoBlowAway 
  87C:  		Return
  884:  	Default
  88C:  EndSwitch
  894:  Call     SetAnimation 	( .Actor:Self 00000001 00620202 )
  8AC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8C0:  Call     UseIdleAnimation 	( .Actor:Self .True )
  8D4:  Return
  8DC:  End
}

#new:FloatTable $FloatTable_DarkGoomba %$FloatTable_8021A4BC
{
0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
0.999391 0.999848 1.0
}

#new:Script $Script_Headbonk_DarkGoomba %$Script_TakeTurn_8021A628
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  SetAnimation      ( .Actor:Self 00000001 00620206 )
   8C:  Call  SetGoalToTarget   ( .Actor:Self )
   9C:  Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
   CC:  Call  RunToGoal ( .Actor:Self 00000000 .False )
   E4:  Call  SetAnimation      ( .Actor:Self 00000001 00620202 )
   FC:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
  118:  Wait  1`
  124:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
  140:  Wait  5`
  14C:  Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  168:  Call  SetAnimation      ( .Actor:Self 00000001 00620208 )
  180:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  1A4:  Switch  *Var0 
  1B0:  	CaseOR  ==  .HitResult:Miss % 6
  1BC:  	CaseOR  ==  .HitResult:Lucky % 5
  1C8:  		Set   *VarA  *Var0 
  1D8:  		Call  SetGoalToTarget   ( .Actor:Self )
  1E8:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  204:  		Sub   *Var0  0000000A 
  214:  		Set   *Var1  0000000A 
  224:  		Add   *Var2  00000003 
  234:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  250:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
  264:  		Thread
  26C:  			Call  GetActorPos   ( .Actor:Self *Var1 *Var2 *Var0 )
  288:  			Set   *Var0  00000000 
  298:  			Loop  00000010 
  2A4:  				Call  GetActorPos   ( .Actor:Self *Var4 *Var5 *Var6 )
  2C0:  				Call  $Function_8021868C_DG ( *Var1 *Var2 *Var4 *Var5 *Var0 )
  2E0:  				Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var0 )
  2FC:  				Set   *Var1  *Var4 
  30C:  				Set   *Var2  *Var5 
  31C:  				Set   *Var3  *Var6 
  32C:  				Wait  1`
  338:  			EndLoop
  340:  		EndThread
  348:  		Thread
  350:  			Wait  6`
  35C:  			Call  SetAnimation  ( .Actor:Self 00000001 00620208 )
  374:  		EndThread
  37C:  		Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
  39C:  		Call  SetAnimation  ( .Actor:Self 00000001 0062020D )
  3B4:  		Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  3D0:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
  3EC:  		Wait  1`
  3F8:  		Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
  414:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
  430:  		Wait  1`
  43C:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  458:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
  474:  		Call  SetAnimation  ( .Actor:Self 00000001 00620209 )
  48C:  		Wait  5`
  498:  		If  *VarA  ==  .HitResult:Lucky % 5
  4A8:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  4CC:  		EndIf
  4D4:  		Wait  5`
  4E0:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  4FC:  		Call  SetAnimation      ( .Actor:Self 00000001 00620208 )
  514:  		Call  SetGoalToTarget   ( .Actor:Self )
  524:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  540:  		Add   *Var0  00000014 
  550:  		Set   *Var1  00000000 
  560:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  57C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
  590:  		Thread
  598:  			Wait  4`
  5A4:  			Set   *Var0  000000B4 
  5B4:  			Loop  00000004 
  5C0:  				Sub   *Var0  0000002D 
  5D0:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  5EC:  				Wait  1`
  5F8:  			EndLoop
  600:  			Call  SetAnimation  ( .Actor:Self 00000001 00620208 )
  618:  		EndThread
  620:  		Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
  640:  		Call  SetAnimation      ( .Actor:Self 00000001 0062020C )
  658:  		Wait  5`
  664:  		Call  UseBattleCamPreset    ( 00000002 )
  674:  		Call  YieldTurn ( )
  680:  		Call  SetActorYaw       ( .Actor:Self 000000B4 )
  694:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6B0:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
  6C8:  		Call  SetGoalToHome     ( .Actor:Self )
  6D8:  		Call  SetActorSpeed     ( .Actor:Self *Fixed[8.0] )
  6EC:  		Call  RunToGoal ( .Actor:Self 00000000 .False )
  704:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
  71C:  		Call  SetActorYaw       ( .Actor:Self 00000000 )
  730:  		Wait  5`
  73C:  		Call  SetAnimation      ( .Actor:Self 00000001 00620202 )
  754:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
  768:  		Call  JumpToGoal        ( .Actor:Self 00000005 .False .True .False )
  788:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  7A0:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  7B4:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  7C8:  		Return
  7D0:  	EndCaseGroup
  7D8:  	Default
				Loop 2
  7E0:  			Call  SetGoalToTarget       ( .Actor:Self )
  7F0:  			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
  804:  			Thread
  80C:  				Call  GetActorPos   ( .Actor:Self *Var1 *Var2 *Var0 )
  828:  				Set   *Var0  00000000 
  838:  				Loop  00000010 
  844:  					Call  GetActorPos   ( .Actor:Self *Var4 *Var5 *Var6 )
  860:  					Call  $Function_8021868C_DG ( *Var1 *Var2 *Var4 *Var5 *Var0 )
  880:  					Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var0 )
  89C:  					Set   *Var1  *Var4 
  8AC:  					Set   *Var2  *Var5 
  8BC:  					Set   *Var3  *Var6 
  8CC:  					Wait  1`
  8D8:  				EndLoop
  8E0:  			EndThread
  8E8:  			Thread
  8F0:  				Wait  6`
  8FC:  				Call  SetAnimation  ( .Actor:Self 00000001 00620208 )
  914:  			EndThread
  91C:  			Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
  93C:  			Call  SetAnimation  ( .Actor:Self 00000001 00620208 )
  954:  			Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  970:  			Wait  1`
  97C:  			Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
  998:  			Wait  1`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000007 00000020 )
				EndLoop
  9A4:  EndSwitch
  9D4:  Switch  *Var0 
  9E0:  	CaseOR  ==  .HitResult:Hit % 0
  9EC:  	CaseOR  ==  00000002 % 2
  9F8:  		Call  UseBattleCamPreset    ( 00000002 )
  A08:  		Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  A24:  		Wait  1`
  A30:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A4C:  		Wait  1`
  A58:  		Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
  A74:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  A90:  		Call  SetAnimation  ( .Actor:Self 00000001 00620202 )
  AA8:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  AC4:  		Add   *Var0  00000028 
  AD4:  		Set   *Var1  00000000 
  AE4:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  AF8:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  B14:  		Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  B34:  		Add   *Var0  0000001E 
  B44:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  B60:  		Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
  B80:  		Add   *Var0  00000014 
  B90:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  BAC:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  BCC:  		Call  SetAnimation  ( .Actor:Self 00000001 00620202 )
  BE4:  		Wait  3`
  BF0:  		Call  YieldTurn ( )
  BFC:  		Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
  C14:  		Call  SetAnimation  ( .Actor:Self 00000001 00620206 )
  C2C:  		Call  SetGoalToHome ( .Actor:Self )
  C3C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  C50:  		Call  RunToGoal     ( .Actor:Self 00000000 .False )
  C68:  		Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
  C80:  	EndCaseGroup
  C88:  EndSwitch
  C90:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  CA4:  Call  UseIdleAnimation  ( .Actor:Self .True )
  CB8:  Return
  CC0:  End
}