%Doople
%40 hp, 6 atk, 0 def
%At the start of battle she creates two clones with identical stats
%If there's only one left then it makes clones also

%	there are three attacks so its like 6x3 now

%At half health she casts one of three spells (*since there are three clones, all of them will be cast by the end)
%+2 atk
%+2 def
%+8 hp

% Define your graphics here
#define .AnimStop	00F40000
#define .AnimIdle	00F40002
#define .AnimPoison	00F40002
#define .AnimPain	00F4000A
#define .AnimDizzy	00F4000E
#define .AnimDead	00F4000A
#define .AnimSleep  00F4000D
#define .AnimBurn   00F4000C
#define .AnimBurn2  FFFFFFFF %doesn't exist (*but putting FFFFFFFF does work here)
#define .AnimRun	00F40004

#new:Actor $Doople
{
% stats
[Index]        F7b % index from ActorTable.xml
[Level]        48`b %pretty good SP gain
[MaxHP]        40`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Doople
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Doople 
[Script]      $Script_Init_Doople 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         36`b  36`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:SpecialFormation $DoopleCloneFormation
{
$DoopleClone	  $VoidPos 00000009 00000000 00000000 00000000 00000000 
}

#new:Vector3D $VoidPos
{
0` -1000` 0` 
}

#new:Actor $DoopleClone
{
% stats
[Index]        F7b 
[Level]         0`b %prevent you from infinitely farming SP (though if you're in the pit then you're probably close to max level)
[MaxHP]        40`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Doople
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Doople 
[Script]      $Script_Init_Doople 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         36`b  36`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}


#new:DefenseTable $DefenseTable_Doople
{
.Element:Normal 00000000
.Element:End
}

#new:StatusTable $StatusTable_Doople %low statuses
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      30`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      60`
.Status:Fear        0`
.Status:Static     30`
.Status:Paralyze   30`
.Status:Shrink     30`
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_Doople
{
00800000 01000000 001400FF $IdleAnimations_Doople $DefenseTable_Doople 00000000 00000000 00F60000 00000000 
}

#new:IdleAnimations $IdleAnimations_Doople
{
.Status:Normal    .AnimIdle
.Status:Stone     .AnimStop
.Status:Sleep     .AnimSleep
.Status:Poison    .AnimPoison
.Status:Stop      .AnimStop
.Status:Static    .AnimIdle
.Status:Paralyze  .AnimStop
.Status:Dizzy     .AnimDizzy
.Status:Fear      .AnimDizzy
.Status:End
}

#new:Script $Script_Init_Doople
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Doople )
	Call     BindIdle    	( .Actor:Self $Script_Idle_Doople )
    Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Doople )
	Call	 BindNextTurn	( .Actor:Self $Script_NextTurn_Doople )
	Call	 SetActorVar 	( .Actor:Self 00000001 00000000 ) %spells cast
	Call	 SetActorVar 	( .Actor:Self 00000002 00000001 ) %1st turn clone
	Call     SetBattleVar 	( 00000001 00000000 ) %global spell counter (prevent using same spell multiple times)
    Return
    End
}

#new:Script $Script_Init_DoopleClone %special case to prevent multiple scripts from interfering with each other
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Doople )
	Call     BindIdle    	( .Actor:Self $Script_Idle_Doople )
    Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Doople )
	Call	 BindNextTurn	( .Actor:Self $Script_NextTurn_Doople )
	Call	 SetActorVar 	( .Actor:Self 00000001 00000000 ) %spells cast
	Call	 SetActorVar 	( .Actor:Self 00000002 00000000 ) %1st turn clone
    Return
    End
}

#new:Script $Script_NextTurn_Doople
{
	Call	GetActorVar ( .Actor:Self 00000002 *Var[0] )
	If *Var[0] == 0
		%Call	 SetActorVar 	( .Actor:Self 00000002 00000001 ) %1st turn counter
		Return
	EndIf
	Call     GetBattlePhase ( *Var[0] )
	Switch   *Var[0] 
		Case == .Phase:PlayerBegin
			ExecWait $Script_GetOpenPosition
			If *Var[A] == FFFFFFFF
				Return
			EndIf
			ExecWait $Script_MakeClones
	EndSwitch
	Call	 SetActorVar 	( .Actor:Self 00000002 00000000 )
	Return
	End
}
%this doesn't work
/%
#new:Script $Script_CheckPosition %prevent cloning if there is an enemy to the left
	Set *Flag[01] .False
	Set *Flag[02] .False
	Set *Flag[03] .False
	Call     EnemyCreateTargetList 	( 00008002 )
	Call     InitTargetIterator 	( )
	Label    00000000 
	Call     GetOwnerTarget ( *Var[0] *Var[1] )
	Call     GetIndexFromHome 	( *Var[0] *Var[1] )
	Mod  *Var[1]  00000004 
	Switch  *Var[1] 
		Case  ==  00000001 
			Set  *Flag[01]  00000001 
		Case  ==  00000002 
			Set  *Flag[02]  00000001 
		Case  ==  00000003 
			Set  *Flag[03]  00000001 
	EndSwitch
	Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
	If  *Var[0]  !=  FFFFFFFF 
		Goto     00000000 
	EndIf
	Call GetIndexFromPos ( .Actor:Self *Var[9] )
	If  *Flag[01]  ==  00000001
		If *Var[9] > 1 %higher index means something is to the left
			Set  *Var[A]  00000000
			Return
		EndIf
	EndIf
	If  *Flag[02]  ==  00000000 
		If *Var[9] > 2
			Set  *Var[A]  00000000
			Return
		EndIf
	EndIf
	%
	If  *Flag[03]  ==  00000000 
		If *Var[9] > 3
			Set  *Var[A]  00000000
			Return
		EndIf
	EndIf
	%
	Set  *Var[A]  00000001
	Return
	End
%/

%returns index of open position
#new:Script $Script_GetOpenPosition %only checks positions 1 2 and 3
{
	Set *Flag[01] .False
	Set *Flag[02] .False
	Set *Flag[03] .False
	Call     EnemyCreateTargetList 	( 00008002 )
	Call     InitTargetIterator 	( )
	Label    00000000 
	Call     GetOwnerTarget ( *Var[0] *Var[1] )
	Call     GetIndexFromHome 	( *Var[0] *Var[1] )
	Mod  *Var[1]  00000004 
	Switch  *Var[1] 
		Case  ==  00000001 
			Set  *Flag[01]  00000001 
		Case  ==  00000002 
			Set  *Flag[02]  00000001 
		Case  ==  00000003 
			Set  *Flag[03]  00000001 
	EndSwitch
	Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
	If  *Var[0]  !=  FFFFFFFF 
		Goto     00000000 
	EndIf
	If  *Flag[03]  ==  00000000 
		Set  *Var[A]  00000003 
		Return
	EndIf
	If  *Flag[02]  ==  00000000 
		Set  *Var[A]  00000002 
		Return
	EndIf
	If  *Flag[01]  ==  00000000 
		Set  *Var[A]  00000001
		Return
	EndIf
	Set  *Var[A]  FFFFFFFF 
	Return
	End
}

#new:Script $Script_Idle_Doople
{
  Return
  End
}

#new:Script $Script_MakeClones %if there's space, make some clones
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     UseBattleCamPreset 	( 0000000E )
	Call     BattleCamTargetActor ( .Actor:Self )
	Wait     0000000F 
	Call     PlaySoundAtActor 	( .Actor:Self 000020B8 )
	Call     SetAnimation 	( .Actor:Self 00000001 00F40006 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     GetStatusFlags ( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add  *Var[1]  00000008 
		SetF  *Var[3]  *Fixed[0.40039062] 
	Else
		Add  *Var[1]  00000014 
		SetF  *Var[3]  *Fixed[1.0] 
	EndIf
	Call     PlayEffect  	( 00000013 00000001 *Var[0] *Var[1] *Var[2] *Var[3] 00000028 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Label 0
	ExecWait $Script_GetOpenPosition %find where to summon clones
	If *Var[A] == FFFFFFFF
		Call    SetAnimation 		( .Actor:Self 00000001 .AnimIdle )
		Call	EnableIdleScript 	( .Actor:Self .True )
		Call	UseIdleAnimation 	( .Actor:Self .True )
		Return %no more space, we're done summoning
	EndIf
	ExecWait $Script_MakeClones_B
	Goto 0
	Return
	End
}

#new:Script $Script_MakeClones_B
{
	Call	SummonEnemy      	( $DoopleCloneFormation 00000000 ) %drops enemy ID into *Var[0]
	Call	GetOwnerID 			( *Var[9] )
	If *Var[9] > *Var[0] %new pos is left of self
		Set		*Var[E]  450`
		Set		*Var[F]  -15`
	Else
		Set		*Var[E]  -450`
		Set		*Var[F]  15`		
	EndIf
	Call	GetActorHP		 	( .Actor:Self *Var[C] )
	Call	SetEnemyHP  		( *Var[0] *Var[C] )
	Call	SetActorRotation 	( *Var[0] 00000000 90` 00000000 )
	Call	GetActorPos       	( .Actor:Self *Var[1] *Var[2] *Var[3] )
	Call	SetActorPos       	( *Var[0] *Var[1] *Var[2] *Var[3] )
	Thread
		Set		*Var[B]	*Var[E]
		Loop		30`
			Add		*Var[B] *Var[F]
			Call	SetActorRotation 	( *Var[0] 00000000 *Var[B] 00000000 )
			Wait	1
		EndLoop
	EndThread
	Call	SetAnimation 		( *Var[0] 00000001 00F40007 )
	Call	SetGoalToIndex  	( *Var[0] *Var[A] )	
	Call	SetActorJumpGravity	( *Var[0] *Fixed[0.5] )
	Call	JumpToGoal			( *Var[0] 30` 00000000 00000001 00000000 )
	Call	SetAnimation 		( *Var[0] 00000001 00F40002 )
	Call	GetActorPos       	( *Var[0] *Var[1] *Var[2] *Var[3] )
	Call	ForceHomePos 		( *Var[0] *Var[1] *Var[2] *Var[3] )
	Call	GetActorVar 		( .Actor:Self 00000001 *Var[8] )
	Call	SetActorVar 		( *Var[0] 00000001 *Var[8] )
	Call	HPBarToHome    		( *Var[0] )
	Return
	End
}

#new:Script $Script_HandleEvent_Doople %to do: figure out how to stop sound glitches
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo
   70:  	CaseOR  ==  .Event:Hit
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  .AnimPain 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  .AnimBurn 
   DC:  		SetConst  *Var[2]  .AnimBurn2 
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  .AnimBurn 
  124:  		SetConst  *Var[2]  .AnimBurn2 
  134:  		ExecWait DoBurnHit 
  140:  		SetConst  *Var[0]  00000001 
  150:  		SetConst  *Var[1]  .AnimBurn2 
  160:  		ExecWait DoDeath 
  16C:  		Return
  174:  	Case  ==  .Event:SpinSmashHit
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  .AnimPain 
  1A0:  		ExecWait 8029B998 
  1AC:  	Case  ==  .Event:SpinSmashDeath
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  .AnimPain 
  1D8:  		ExecWait 8029B998 
  1E4:  		SetConst  *Var[0]  00000001 
  1F4:  		SetConst  *Var[1]  .AnimDead 
  204:  		ExecWait DoDeath 
  210:  		Return
  218:  	Case  ==  .Event:ShockHit
				Call     8026F6EC ( FFFFFF81 )
  218:  		SetConst  *Var[0]  00000001 
  228:  		SetConst  *Var[1]  .AnimPain
  238:  		ExecWait DoShockHit 
  244:  		SetConst  *Var[0]  00000001 
  254:  		SetConst  *Var[1]  .AnimPain 
  264:  		ExecWait DoJumpBack 
				SetConst  *Var[0]  00000001 
				SetConst  *Var[1]  00F40004 
				ExecWait DoReturnHome 
  378:  	Case  ==  .Event:ShockDeath
  384:  		SetConst  *Var[0]  00000001 
  394:  		SetConst  *Var[1]  .AnimPain 
  3A4:  		ExecWait DoShockHit 
  3B0:  		SetConst  *Var[0]  00000001 
  3C0:  		SetConst  *Var[1]  .AnimDead 
  3D0:  		ExecWait DoDeath 
  3DC:  		Return
  3E4:  	Case  ==  .Event:StarBeam
  3F0:  	CaseOR  ==  00000017
  3FC:  	CaseOR  ==  .Event:Immune
  408:  	CaseOR  ==  .Event:AirLiftFailed
  414:  		SetConst  *Var[0]  00000001 
  424:  		SetConst  *Var[1]  .AnimIdle 
  434:  		ExecWait DoImmune 
  440:  	EndCaseGroup
  448:  	Case  ==  .Event:Death
  454:  		SetConst  *Var[0]  00000001 
  464:  		SetConst  *Var[1]  .AnimPain 
  474:  		ExecWait DoNormalHit 
  480:  		Wait     0000000A 
  48C:  		SetConst  *Var[0]  00000001 
  49C:  		SetConst  *Var[1]  .AnimDead 
  4AC:  		ExecWait DoDeath 
  4B8:  		Return
  4C0:  	Case  ==  .Event:EndFirstStrike
  4CC:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  4E4:  		Call     SetAnimation 	( .Actor:Self 00000001 .AnimRun )
  4FC:  		Call     SetGoalToHome 	( .Actor:Self )
  50C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  520:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  538:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  550:  		Call     HPBarToHome 	( .Actor:Self )
  560:  	Case  ==  .Event:RecoverStatus
  56C:  		SetConst  *Var[0]  00000001 
  57C:  		SetConst  *Var[1]  .AnimIdle 
  58C:  		ExecWait DoRecover 
  598:  	Case  ==  .Event:ScareAway
  5A4:  		SetConst  *Var[0]  00000001 
  5B4:  		SetConst  *Var[1]  .AnimRun 
  5C4:  		SetConst  *Var[2]  .AnimPain 
  5D4:  		ExecWait DoScareAway 
  5E0:  		Return
  5E8:  	Case  ==  .Event:BeginAirLift
  5F4:  		SetConst  *Var[0]  00000001 
  604:  		SetConst  *Var[1]  .AnimRun 
  614:  		ExecWait DoAirLift 
  620:  	Case  ==  .Event:BlowAway
  62C:  		SetConst  *Var[0]  00000001 
  63C:  		SetConst  *Var[1]  .AnimPain 
  64C:  		ExecWait DoBlowAway 
  658:  		Return
  660:  	Default
  668:  EndSwitch
  670:  Call     SetAnimation 	( .Actor:Self 00000001 .AnimIdle )
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}

#new:Script $Script_TakeTurn_Doople
{
	ExecWait $Script_GetOpenPosition
	If *Var[A] == FFFFFFFF
		Goto 0
	EndIf
	ExecWait $Script_MakeClones
	Label 0
	Call	 GetActorVar ( .Actor:Self 00000001 *Var[8] )
	If *Var[8] == 0
		Call	GetActorHP ( .Actor:Self *Var[7] )
		Call	GetEnemyMaxHP ( .Actor:Self *Var[6] )
		Div *Var[6] 2
		If *Var[7] < *Var[6]
			ExecWait $Script_CastSpell
			Return
		EndIf
	EndIf
	ExecWait $Script_LungeAttack_Doople
	Return
	End
}

#new:Script $Script_CastSpell
{
	Call	SetActorVar ( .Actor:Self 00000001 00000001 )
	Label 0
	Call    GetBattleVar 	( 00000001 *Var[1] )
	If *Var[1] & 1
		If *Var[1] & 2
			If *Var[1] & 4
				Return %can't cast anything
			EndIf
		EndIf
	EndIf
	Call	RandInt	( 2` *Var[0] )
	Switch *Var[0]
		Case == 0
			If *Var[1] & 1
				Goto 0
			EndIf
			Set *Var[E] 0
			ConstOR *Var[1] 1
			Call SetBattleVar ( 00000001 *Var[1] )
			ExecWait $Script_CastSpellB
			Return
		Case == 1
			If *Var[1] & 2
				Goto 0
			EndIf
			Set *Var[E] 1
			ConstOR *Var[1] 2
			Call SetBattleVar ( 00000001 *Var[1] )
			ExecWait $Script_CastSpellB
			Return
		Case == 2
			If *Var[1] & 4
				Goto 0
			EndIf
			Set *Var[E] 2
			ConstOR *Var[1] 4
			Call SetBattleVar ( 00000001 *Var[1] )
			ExecWait $Script_CastSpellB
			Return
	EndSwitch
	Return
	End
}

#new:Script $Script_CastSpellB %actual animations n stuff
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     UseBattleCamPreset 	( 0000000E )
	Call     BattleCamTargetActor ( .Actor:Self )
	Wait     0000000F 
	Call     PlaySoundAtActor 	( .Actor:Self 000020B8 )
	Call     SetAnimation 	( .Actor:Self 00000001 00F40006 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     GetStatusFlags ( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add  *Var[1]  00000008 
		SetF  *Var[3]  *Fixed[0.40039062] 
	Else
		Add  *Var[1]  00000014 
		SetF  *Var[3]  *Fixed[1.0] 
	EndIf
	Call     PlayEffect  	( 00000013 00000001 *Var[0] *Var[1] *Var[2] *Var[3] 00000028 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Switch *Var[E]
		Case == 0
			Call     EnemyCreateTargetList 	( 00008002 )
			Call     InitTargetIterator	( )
			Label    00000000 
			Call     GetOwnerTarget 	( *Var[0] *Var[1] )
			Thread
				Wait     00000005 
				Call     PlaySoundAtActor    ( *Var[0] 0000206D )
				Call     PlaySoundAtActor    ( *Var[0] 00000214 )
				Wait     30` 
				Call     PlaySoundAtActor    ( *Var[0] 0000025C )
			EndThread
			Thread
				Call	8026BF48	( 00000001 )
				Call     HealActor  ( *Var[0] 00000008 00000001 ) %8 hp each
				Call	8026BF48	( 00000000 )
			EndThread
			Call     ChooseNextTarget    	( .Iter:Next *Var[0] )
			If       *Var[0]  !=  FFFFFFFF
				Goto     00000000 
			EndIf
			Call     8027114C 	( )
			Wait     1` 
			Call     UseBattleCamPreset 	( 00000002 )
			Wait     10` 
			Goto 3
		Case == 1
			Call     EnemyCreateTargetList 	( 00008002 )
			Call     InitTargetIterator	( )
			Label    00000001
			Call     GetOwnerTarget 	( *Var[0] *Var[1] )
			Thread
				Wait     00000005 
				Call     PlaySoundAtActor    ( *Var[0] 0000206D )
				Call     PlaySoundAtActor    ( *Var[0] 00000214 )
				Wait     30` 
				Call     PlaySoundAtActor    ( *Var[0] 0000025C )
			EndThread
			Thread
				Call	8026BF48	( 00000001 )
				Call	BoostAttack 	( *Var[0] 00000002 )
				Call	8026BF48	( 00000000 )
			EndThread
			Call     ChooseNextTarget    	( .Iter:Next *Var[0] )
			If       *Var[0]  !=  FFFFFFFF
				Goto     00000001
			EndIf
			Call     8027114C 	( )
			Wait     1` 
			Call     UseBattleCamPreset 	( 00000002 )
			Wait     10` 
			Goto 3
		Case == 2
			Call     EnemyCreateTargetList 	( 00008002 )
			Call     InitTargetIterator	( )
			Label    00000002
			Call     GetOwnerTarget 	( *Var[0] *Var[1] )
			Thread
				Wait     00000005 
				Call     PlaySoundAtActor    ( *Var[0] 0000206D )
				Call     PlaySoundAtActor    ( *Var[0] 00000214 )
				Wait     30` 
				Call     PlaySoundAtActor    ( *Var[0] 0000025C )
			EndThread
			Thread
				Call	8026BF48	( 00000001 )
				Call	BoostDefense 	( *Var[0] 00000002 )
				Call	8026BF48	( 00000000 )
			EndThread
			Call     ChooseNextTarget    	( .Iter:Next *Var[0] )
			If       *Var[0]  !=  FFFFFFFF
				Goto     00000002 
			EndIf
			Call     8027114C 	( )
			Wait     1` 
			Call     UseBattleCamPreset 	( 00000002 )
			Wait     10` 
			Goto 3
	EndSwitch
	Label 3
	Wait	 15`
	Call     SetAnimation 	( .Actor:Self 00000001 .AnimIdle )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Call     EnableIdleScript 	( .Actor:Self .True )	
	Return
	End
}

#new:Script $Script_LungeAttack_Doople
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00F40007 )
   8C:  Wait     00000014 
   98:  Call     SetActorSounds ( FFFFFF81 00000002 000002CB 00000000 )
   B4:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
   D8:  Switch  *Var[0] 
   E4:  	CaseOR  ==  .HitResult:Miss % 6
   F0:  	CaseOR  ==  .HitResult:Lucky % 5
   FC:  		Set  *Var[A]  *Var[0] 
  10C:  		Call     UseBattleCamPreset 	( 00000002 )
  11C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F40008 )
  134:  		Call     SetGoalToTarget 	( .Actor:Self )
  144:  		Call     AddGoalPos 	( .Actor:Self FFFFFF9C 00000000 00000000 )
  160:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  174:  		Call     JumpToGoal  	( .Actor:Self 00000011 00000000 00000001 00000000 )
  194:  		If  *Var[A]  ==  00000005 
  1A4:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  1C8:  		EndIf
  1D0:  		Wait     0000000A 
  1DC:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  		Call     SetActorPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  214:  		Call     SetAnimation 	( .Actor:Self 00000001 00F40002 )
  22C:  		Call     8026F838 ( FFFFFF81 00000002 )
  240:  		Wait     0000000F 
  24C:  		Call     YieldTurn   	( )
  258:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  26C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
				SetConst  *Var[0]  00000001 
				SetConst  *Var[1]  00F40004 
				ExecWait DoReturnHome 
  294:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  2AC:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  2C0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  2D4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  2E8:  		Return
  2F0:  	EndCaseGroup
  2F8:  EndSwitch
  300:  Call     SetAnimation 	( .Actor:Self 00000001 00F40008 )
  318:  Call     SetGoalToTarget 	( .Actor:Self )
  328:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
  33C:  If  *Var[A]  &  00080000 
  34C:  	Call     AddGoalPos 	( .Actor:Self *Fixed[4.0] *Fixed[-6.0] 00000000 )
  368:  Else
  370:  	Call     AddGoalPos 	( .Actor:Self 0000000A FFFFFFF1 00000000 )
  38C:  EndIf
  394:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  3A8:  Call     JumpToGoal  	( .Actor:Self 0000000C 00000000 00000001 00000000 )
  3C8:  Wait     00000002 
  3D4:  Call     SetGoalToTarget 	( .Actor:Self )
  3E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000020 )
  40C:  Switch  *Var[0] 
  418:  	CaseOR  ==  00000000 
  424:  	CaseOR  ==  00000002 
  430:  		Call     UseBattleCamPreset 	( 00000002 )
  440:  		Call     8026F838 ( FFFFFF81 00000002 )
  454:  		Call     SetAnimation 	( .Actor:Self 00000001 00F40009 )
  46C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  488:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  49C:  		Add  *Var[0]  0000001E 
  4AC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  4C8:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  4E8:  		Add  *Var[0]  00000014 
  4F8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  514:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  534:  		Wait     0000000A 
  540:  		Call     YieldTurn   	( )
				SetConst  *Var[0]  00000001 
				SetConst  *Var[1]  00F40004 
				ExecWait DoReturnHome 
  558:  	EndCaseGroup
  560:  EndSwitch
  568:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  57C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  590:  Return
  598:  End
}