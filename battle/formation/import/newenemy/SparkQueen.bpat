%Queen of the lil sparkies
%Name subject to change, haven't decided on 100% final name

%30 hp, 7 atk, 0 def 
%	regular attack has 50% chance of 1 turn paralyze
%	charge bolt: 15 atk + 2 turn paralyze
%	charge wave: 7 atk + 1 turn paralyze + 2 partner damage

%most of this code is reused from lil sparkies and various other enemies

%current problem: small lightning bolts are the wrong color
%unfortunately, they are not normal sprites since otherwise I could just change the animation value
%find sprites 0F - 10,11,12
%or sprites 06 - 08,09

#new:IdleAnimations $IdleAnimations_SparkQueen
{
.Status:Normal    00F10001
.Status:Stone     00F10000
.Status:Sleep     00F1000A
.Status:Poison    00F10001
.Status:Stop      00F10000
.Status:Static    00F10001
.Status:Paralyze  00F10000
.Status:Dizzy     00F1000F
.Status:Fear      00F1000F
.Status:End
}

#new:IdleAnimations $IdleAnimations_SmallBolts %not actually used
{
.Status:Normal    00F10012
.Status:Stone     00F10012
.Status:Sleep     00F10012
.Status:Poison    00F10012
.Status:Stop      00F10012
.Status:Static    00F10012
.Status:Paralyze  00F10012
.Status:Dizzy     00F10012
.Status:Fear      00F10012
.Status:End
}

#new:DefenseTable $DefenseTable_SparkQueen
{
.Element:Normal 00000000
.Element:Water FFFFFFFE
.Element:Shock  00000063
.Element:Throw FFFFFFFF
.Element:End
}

#new:StatusTable $StatusTable_SparkQueen %few statuses work
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0` %ofc it's not gonna work
.Status:Shrink     50`
.Status:Stop       50` 
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod    -3`
.Status:ParalyzeTurnMod  -3`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}

#new:PartsTable $PartsTable_SparkQueen
{
00020000 01000000 FF1400FF $IdleAnimations_SparkQueen $DefenseTable_SparkQueen 00000080 00000000 00000000 00000000 
00800001 02003200 FFE200FF 00000000 				  $DefenseTable_SparkQueen 00000080 00000000 00000000 00000000 %???? (used to change where the target position is?)
}

#new:Actor $SparkQueen
{
% stats
[Index]        F4b 
[Level]        39`b %miniboss, but in an endgame setting, she's not that strong
[MaxHP]        30`b
[Coins]         0`b 
[Flags]       00000200 
[StatusTable] $StatusTable_SparkQueen
% ai
[PartsCount]   2`s 
[PartsTable] $PartsTable_SparkQueen
[Script]      $Script_Init_SparkQueen 
% move effectiveness
[Escape]       20`b %not like you can run from this battle though
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         34`b  28`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:Script $Script_Init_SparkQueen
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_SparkQueen )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_SparkQueen )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_SparkQueen )
		Call	 SetActorVar ( .Actor:Self 00000001 00000000 ) %AI state
   68:  Return
   70:  End
}

#new:Script $Script_Idle_SparkQueen
{
    0:  SetPriority 00000063 
    C:  Call     $Function_80219188_SQ ( ) %float around?
   18:  Return
   20:  End
}

#new:Script $Script_HandleEvent_SparkQueen
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     $Function_80219658_SQ ( 00000000 )
   24:  Call     $Function_802196A4_SQ ( 00000001 )
   34:  Call     $Function_802196F0_SQ ( 00000000 )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo % 9
   70:  	CaseOR  ==  .Event:Hit % A
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  00F1000C 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  00F1000D 
   DC:  		SetConst  *Var[2]  00F1000E 
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath % 24
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  00F1000D 
  124:  		SetConst  *Var[2]  00F1000E 
  134:  		ExecWait DoBurnHit 
  140:  		Call     $Function_80219604_SQ ( )
  %14C:  		ExecWait $Script_8021E0E0_SQ 
  158:  		SetConst  *Var[0]  00000001 
  168:  		SetConst  *Var[1]  00F1000E 
  178:  		ExecWait DoDeath 
  184:  		Return
  18C:  	Case  ==  .Event:SpinSmashHit % B
  198:  		SetConst  *Var[0]  00000001 
  1A8:  		SetConst  *Var[1]  00F1000C 
  1B8:  		ExecWait DoSpinSmashHit 
  1C4:  	Case  ==  .Event:SpinSmashDeath % 21
  1D0:  		Call     $Function_80219604_SQ ( )
  %1DC:  		ExecWait $Script_8021E0E0_SQ 
  1E8:  		SetConst  *Var[0]  00000001 
  1F8:  		SetConst  *Var[1]  00F1000C 
  208:  		ExecWait DoSpinSmashHit 
  214:  		SetConst  *Var[0]  00000001 
  224:  		SetConst  *Var[1]  00F1000C 
  234:  		ExecWait DoDeath 
  240:  		Return
			Case  ==  .Event:StarBeam 
			  	Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
				If  *Var[0]  ==  00000001 
					Call     EnableActorGlow 	( .Actor:Self .False )
					Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
					Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
				EndIf
				SetConst  *Var[0]  00000001 
				SetConst  *Var[1]  00F10001 
				ExecWait DoImmune 
  248:  	CaseOR  ==  00000017 % 17
  254:  	CaseOR  ==  .Event:Immune % 19
  260:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  26C:  		SetConst  *Var[0]  00000001 
  27C:  		SetConst  *Var[1]  00F10001 
  28C:  		ExecWait DoImmune 
  298:  	EndCaseGroup
  2A0:  	Case  ==  .Event:Death % 20
  2AC:  		Call     $Function_80219604_SQ ( )
  %2B8:  		ExecWait $Script_8021E0E0_SQ 
  2C4:  		SetConst  *Var[0]  00000001 
  2D4:  		SetConst  *Var[1]  00F1000C 
  2E4:  		ExecWait DoNormalHit 
  2F0:  		Wait     0000000A 
  2FC:  		SetConst  *Var[0]  00000001 
  30C:  		SetConst  *Var[1]  00F1000C 
  31C:  		ExecWait DoDeath 
  328:  		Return
  330:  	Case  ==  .Event:RecoverStatus % 31
  33C:  		SetConst  *Var[0]  00000001 
  34C:  		SetConst  *Var[1]  00F10001 
  35C:  		ExecWait DoRecover 
  368:  	Case  ==  .Event:ScareAway % 39
  374:  		SetConst  *Var[0]  00000001 
  384:  		SetConst  *Var[1]  00F10003 
  394:  		SetConst  *Var[2]  00F1000C 
  3A4:  		ExecWait DoScareAway 
  3B0:  		Return
  3B8:  	Case  ==  .Event:BeginAirLift % 3A
  3C4:  		SetConst  *Var[0]  00000001 
  3D4:  		SetConst  *Var[1]  00F10003 
  3E4:  		ExecWait DoAirLift 
  3F0:  	Case  ==  .Event:BlowAway % 16
  3FC:  		SetConst  *Var[0]  00000001 
  40C:  		SetConst  *Var[1]  00F1000C 
  41C:  		ExecWait DoBlowAway 
  428:  		Return
  430:  	Default
  438:  EndSwitch
  440:  Call     $Function_80219658_SQ ( 00000001 )
  450:  Call     UseIdleAnimation 	( .Actor:Self .True )
  464:  Return
  46C:  End
}
   
%AI:
%alternate electro dash, charge, then either charge wave or charge bolt
%Below half health, can charge and attack on same turn
%Will not use charge wave if you have watt out

#new:Script $Script_TakeTurn_SparkQueen
{
	Call	 GetActorVar ( .Actor:Self 00000001 *Var[2] ) %AI state	
	Switch *Var[2]
		Case == 00000000
			Call	 SetActorVar ( .Actor:Self 00000001 00000001 )
			ExecWait $Script_ElectroDash_SparkQueen
		Case == 00000001
			ExecWait $Script_ChargeAttack_SparkQueen
			Call GetActorHP ( .Actor:Self *Var[3] )
			Call GetEnemyMaxHP ( .Actor:Self *Var[4] )
			Div *Var[4] 2
			If *Var[3] < *Var[4]
				Call	 SetActorVar ( .Actor:Self 00000001 00000000 )
				Call	RandInt ( 1` *Var[5] )
				If *Var[5] == 00000000
					Call     GetCurrentPartnerID 	( *Var[0] )		
					If  *Var[0]  ==  00000006 
						ExecWait $Script_ChargeBolt_SparkQueen
					Else
						ExecWait $Script_ChargeWave_SparkQueen
					EndIf
				Else
					ExecWait $Script_ChargeBolt_SparkQueen
				EndIf
			Else
				Call	 SetActorVar ( .Actor:Self 00000001 00000002 )
			EndIf
		Case == 00000002
			Call	 SetActorVar ( .Actor:Self 00000001 00000000 )
			Call	RandInt ( 1` *Var[3] )
			If *Var[3] == 00000000
				Call     GetCurrentPartnerID 	( *Var[0] )
				If  *Var[0]  ==  00000006 
					ExecWait $Script_ChargeBolt_SparkQueen
				Else
					ExecWait $Script_ChargeWave_SparkQueen
				EndIf
			Else
				ExecWait $Script_ChargeBolt_SparkQueen
			EndIf
	EndSwitch
	Return 
	End
}

#new:Script $Script_ElectroDash_SparkQueen %6 piercing damage 
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     UseBattleCamPreset 	( 00000013 )
   24:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
   40:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
   58:  Call     SetBattleCamZoom  	( 0000015E )
   68:  Call     SetBattleCamOffsetZ 	( 00000028 )
   78:  Call     MoveBattleCamOver 	( 00000050 )
   88:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   A0:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   B4:  Call     SetGoalToTarget 	( .Actor:Self )
   C4:  Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
   DC:  Call     $Function_802196F0_SQ ( 00000001 )
   EC:  Call     AddGoalPos 	( .Actor:Self 0000000F FFFFFFF6 00000005 )
  108:  Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  124:  Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  13C:  Call     $Function_802196F0_SQ ( 00000000 )
  14C:  Wait     00000005 
  158:  Call     $Function_80219658_SQ ( 00000000 )
  168:  Call     AddGoalPos 	( .Actor:Self 00000019 00000014 00000000 )
  184:  Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFEC .Easing:CosInOut )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 00F10005 )
  1B8:  Call     SetGoalToTarget 	( .Actor:Self )
  1C8:  Call     FlyToGoal  	( .Actor:Self 00000005 00000000 .Easing:CosInOut )
  1E4:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  208:  Switch  *Var[0] 
  214:  	CaseOR  ==  00000006 
  220:  	CaseOR  ==  00000005 
  22C:  		Set  *Var[A]  *Var[0] 
  23C:  		Thread
  244:  			Wait     00000005 
  250:  			Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  268:  		EndThread
  270:  		Call     SetGoalToTarget 	( .Actor:Self )
  280:  		Call     AddGoalPos 	( .Actor:Self FFFFFFD8 0000000A 00000000 )
  29C:  		Call     FlyToGoal  	( .Actor:Self 0000000A FFFFFFEC .Easing:QuadraticOut )
  2B8:  		If  *Var[A]  ==  00000005 
  2C8:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2EC:  		EndIf
  2F4:  		Call     $Function_802196A4_SQ ( 00000001 )
  304:  		Call     $Function_80219658_SQ ( 00000001 )
  314:  		Wait     00000014 
  320:  		Call     UseBattleCamPreset 	( 00000002 )
  330:  		Call     YieldTurn   	( )
  33C:  		Call     SetGoalToHome 	( .Actor:Self )
  34C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
  364:  		Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  380:  		Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  398:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3AC:  		Return
  3B4:  	EndCaseGroup
  3BC:  EndSwitch
  3C4:  Call     $Function_802196A4_SQ ( 00000000 )
  3D4:  Set  *Var[A]  00000028 
  3E4:  Call     AddBattleCamZoom  	( FFFFFFB5 )
  3F4:  Call     MoveBattleCamOver 	( *Var[A] )
  404:  Call     8024ECF8 ( 00000000 00000000 00000001 )
  41C:  Call     PlaySoundAtActor 	( .Actor:Self 00000289 )
  430:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  444:  If  *Var[0]  &  00080000 
  454:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  470:  	Add  *Var[1]  00000004 
  480:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[0.5205078] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	 $Function_SetRadialPalette ( *VarF )
  4C4:  Else
  4CC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4E8:  	Add  *Var[1]  0000000C 
  4F8:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[1.3007812] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	 $Function_SetRadialPalette ( *VarF )
  53C:  EndIf
  544:  Call     $Function_8021973C_SQ ( )
  550:  Set  *Var[9]  00000000 
  560:  	Call     SetAnimation 	( .Actor:Self 00000001 00F10006 )
  578:  	Loop     *Var[A] 
  584:  		Add  *Var[9]  00000003 
  594:  		If  *Var[9]  >  000000C8 
  5A4:  			Set  *Var[9]  000000C8 
  5B4:  		EndIf
  5BC:  		Call     $Function_80219780_SQ ( *Var[9] )
  5CC:  		Wait     00000001 
  5D8:  	EndLoop
  5E0:  	Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  5F8:  	Call     8026EA7C ( FFFFFF81 00000001 00000009 )
  610:  	Call     AddBattleCamZoom  	( 0000004B )
  620:  	Call     MoveBattleCamOver 	( 00000005 )
  630: 		Thread
  638:  		Wait     00000002 
  644:  		Call     $Function_80219780_SQ ( 00000000 )
  654:  	EndThread
  68C:  	Wait     00000002 
  698: 		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000020 0000FFFF 80010132 00000007 00000020 ) %7 piercing damage
  748:  	Switch  *Var[0] 
  754:  		CaseOR  ==  00000000 
  760:  		CaseOR  ==  00000002 
  76C:  			Call     UseBattleCamPreset 	( 00000002 )
  77C:  			Call     $Function_802196A4_SQ ( 00000001 )
  78C:  			Call     $Function_80219658_SQ ( 00000001 )
  79C:  			Call     AddGoalPos 	( .Actor:Self 00000019 0000000A 00000000 )
  7B8:  			Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFF6 .Easing:CosInOut )
  7D4:  			Wait     0000000F 
  7E0:  			Call     YieldTurn   	( )
  7EC:  			Call     SetGoalToHome 	( .Actor:Self )
  7FC:  			Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
  814:  			Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  830:  			Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  848:  		EndCaseGroup
  850:  	EndSwitch
  858:  Call     UseIdleAnimation 	( .Actor:Self .True )
  86C:  Return
  874:  End
}

#new:Script $Script_PowerShock_SparkQueen %3 turn paralyze
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     UseBattleCamPreset 	( 00000013 )
   24:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
   40:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
   58:  Call     SetBattleCamZoom  	( 0000015E )
   68:  Call     SetBattleCamOffsetZ 	( 00000028 )
   78:  Call     MoveBattleCamOver 	( 00000050 )
   88:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   A0:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   B4:  Call     SetGoalToTarget 	( .Actor:Self )
   C4:  Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
   DC:  Call     $Function_802196F0_SQ ( 00000001 )
   EC:  Call     AddGoalPos 	( .Actor:Self 0000000F FFFFFFF6 00000005 )
  108:  Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  124:  Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  13C:  Call     $Function_802196F0_SQ ( 00000000 )
  14C:  Wait     00000005 
  158:  Call     $Function_80219658_SQ ( 00000000 )
  168:  Call     AddGoalPos 	( .Actor:Self 00000019 00000014 00000000 )
  184:  Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFEC .Easing:CosInOut )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 00F10005 )
  1B8:  Call     SetGoalToTarget 	( .Actor:Self )
  1C8:  Call     FlyToGoal  	( .Actor:Self 00000005 00000000 .Easing:CosInOut )
  1E4:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  208:  Switch  *Var[0] 
  214:  	CaseOR  ==  00000006 
  220:  	CaseOR  ==  00000005 
  22C:  		Set  *Var[A]  *Var[0] 
  23C:  		Thread
  244:  			Wait     00000005 
  250:  			Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  268:  		EndThread
  270:  		Call     SetGoalToTarget 	( .Actor:Self )
  280:  		Call     AddGoalPos 	( .Actor:Self FFFFFFD8 0000000A 00000000 )
  29C:  		Call     FlyToGoal  	( .Actor:Self 0000000A FFFFFFEC .Easing:QuadraticOut )
  2B8:  		If  *Var[A]  ==  00000005 
  2C8:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2EC:  		EndIf
  2F4:  		Call     $Function_802196A4_SQ ( 00000001 )
  304:  		Call     $Function_80219658_SQ ( 00000001 )
  314:  		Wait     00000014 
  320:  		Call     UseBattleCamPreset 	( 00000002 )
  330:  		Call     YieldTurn   	( )
  33C:  		Call     SetGoalToHome 	( .Actor:Self )
  34C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
  364:  		Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  380:  		Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
  398:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3AC:  		Return
  3B4:  	EndCaseGroup
  3BC:  EndSwitch
  3C4:  Call     $Function_802196A4_SQ ( 00000000 )
  3D4:  Set  *Var[A]  0000004B 
  3E4:  Call     AddBattleCamZoom  	( FFFFFFB5 )
  3F4:  Call     MoveBattleCamOver 	( *Var[A] )
  404:  Call     8024ECF8 ( 00000000 00000000 00000001 )
  41C:  Call     PlaySoundAtActor 	( .Actor:Self 00000289 )
  430:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  444:  If  *Var[0]  &  00080000 
  454:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  470:  	Add  *Var[1]  00000004 
  480:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[0.5205078] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	 $Function_SetRadialPalette ( *VarF )
  4C4:  Else
  4CC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4E8:  	Add  *Var[1]  0000000C 
  4F8:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[1.3007812] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	 $Function_SetRadialPalette ( *VarF )
  53C:  EndIf
  544:  Call     $Function_8021973C_SQ ( )
  550:  Set  *Var[9]  00000000 
			Call     SetAnimation 	( .Actor:Self 00000001 00F10006 )
			Loop     4B 
				Add  *Var[9]  00000003 
				If  *Var[9]  >  000000C8 
					Set  *Var[9]  000000C8 
				EndIf
				Call     $Function_80219780_SQ ( *Var[9] )
				Wait     00000001 
			EndLoop
			Call     PlaySoundAtActor 	( .Actor:Self 0000028A )
			Thread %make watt bigger
				SetF  *Var[0]  *Fixed[1.0] 
				Loop     00000003 
					AddF  *Var[0]  *Fixed[0.40039062] 
					Call     SetActorScale 	( .Actor:Self *Var[0] *Var[0] *Var[0] )
					Wait     00000001 
				EndLoop
				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[1]  00000008 
				Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.8007812] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			EndThread
			Wait     0000000A %??
			Call     EnemyDamageTarget 	( .Actor:Self *Var[D] 08000020 0000FFFF 80010364 00000000 00000020 ) %3 turn paralyze :)
			Thread %shrink watt back to normal
				Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000014 00000000 )
				SetF  *Var[0]  *Fixed[2.2001953] 
				Loop     0000000C 
					SubF  *Var[0]  *Fixed[0.10058594] 
					Call     SetActorScale 	( .Actor:Self *Var[0] *Var[0] *Var[0] )
					Wait     00000001 
				EndLoop
				Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
				Call     SetAnimation 	( .Actor:Self FFFFFFFF 00F10001 )
			EndThread
			Switch  *Var[D] 
				CaseOR  ==  00000000 
				CaseOR  ==  00000002 
					Call     UseBattleCamPreset 	( 00000002 )
					Call     $Function_802196A4_SQ ( 00000001 )
					Call     $Function_80219658_SQ ( 00000001 )
					Call     AddGoalPos 	( .Actor:Self 00000019 0000000A 00000000 )
					Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFF6 .Easing:CosInOut )
					Wait     0000000F 
					Call     YieldTurn   	( )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     SetAnimation 	( .Actor:Self 00000001 00F10003 )
					Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
					Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
				EndCaseGroup
			EndSwitch
			Thread %fix lighting
				Call     MakeLerp    	( 000000C8 00000000 00000014 00000000 )
				Label    00000002
				Call     UpdateLerp  	( )
				Call     $Function_80219780_SQ ( *Var[0] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000002 
				EndIf
			EndThread
  858:  Call     UseIdleAnimation 	( .Actor:Self .True )
  86C:  Return
  874:  End
}

#new:Script $Script_ChargeAttack_SparkQueen
{
	Call     UseIdleAnimation 	( .Actor:Self .False ) 
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
    Call     SetTargetActor ( .Actor:Self .Actor:Player )
    Call     UseBattleCamPreset 	( 0000000E )
    Call     BattleCamTargetActor ( .Actor:Self )
    Call     MoveBattleCamOver 	( 0000000F )
    Wait     0000000F 
    Call     SetAnimation 	( .Actor:Self 00000001 00F1000A )
    Wait     00000005 
    Call     PlaySoundAtActor 	( .Actor:Self 000002F0 )
    Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call     GetStatusFlags ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00080000 
		%Sub  *Var[0]  00000006 
		%Add  *Var[1]  0000000C 
		%Sub  *Var[2]  00000002 
		Call     PlayEffect  	( ~FX:SnakingStatic *Var[0] *Var[1] *Var[2] *Fixed[0.7] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call	 $Function_SetStaticColors ( *VarF )
    Else
    	%Sub  *Var[0]  00000010 
    	%Add  *Var[1]  0000001F 
		%Sub  *Var[2]  00000002 
		Call     PlayEffect  	( ~FX:SnakingStatic *Var[0] *Var[1] *Var[2] *Fixed[0.4] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call	 $Function_SetStaticColors ( *VarF )
	EndIf
	Wait     0000001E 
	Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
	Call     EnableActorGlow 	( .Actor:Self .True )
	Call     UseBattleCamPreset 	( 00000002 )
	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .True )
	Call     UseIdleAnimation 	( .Actor:Self .True ) 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Return
	End
}

#new:Script $Script_ChargeBolt_SparkQueen
{
	Call     UseIdleAnimation 	( .Actor:Self .False ) 
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call	SetAnimation	( .Actor:Self 00000001 00F1000A )
	Call	$Function_DarkenBackground ( )
	Call	PlaySound		( 00000365 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub		*Var[2]  10`
	Call	PlayEffect		( 0000005E 00000000 *Var[0] *Var[1] *Var[2] *Var[0] 200` 0` *Fixed[4.0] 00000006 00000000 00000000 00000000 00000000 )
	Call	$Function_SetLightningPalette ( *VarF )
	Wait	10` 
	Call	$Function_ThunderFX ( )
	Wait	5` 
	Call	80254218 ( 0000000A )
	Call	ShakeCam ( 00000001 00000000 00000005 *Fixed[1.0] )
	Call	EnemyTestTarget ( .Actor:Self  *Var[0] 00000000 00000000 00000001 00000010 )
	Switch   *Var[0] 
		CaseOR   ==  00000006 % transparent
		CaseOR   ==  00000005 % lucky
			Goto	1
		EndCaseGroup
	EndSwitch
	Call	SetGoalToTarget	( .Actor:Self )
	Call	EnemyDamageTarget	( .Actor:Self *Var[0] 00000000 0000FFFF 80010264 0000000C 00000020 )
	Label	1
	Call	SetAnimation	( .Actor:Self 00000001 00F10001 )
	Wait	35` 
	Call	$Function_BrightenBackground ( )
	Call     EnableActorGlow 	( .Actor:Self .False )
	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
	Call     UseBattleCamPreset 	( 00000002 )
	Call     UseIdleAnimation 	( .Actor:Self .True ) 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Return
	End
}

#new:Function $Function_DarkenBackground
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o48
	SW        RA, 14 (SP)
	JAL       8011D82C
	ADDIU     A0, R0, 1
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	DADDU     A3, A0, R0
	LAW       V0, 801512F0
	ADDIU     V1, R0, 1
	JAL       8011BE5C
	SB        V1, 0 (V0)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
       .o48
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	LW        V1, 70 (S0)
	ADDIU     V0, R0, 14
	SUBU      V0, V0, V1
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	SW        V0, 70 (S0)
	SLTIU     V0, V0, 1
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	SLL       V0, V0, 1
	JR        RA
	ADDIU     SP, SP, 18
}
	
#new:Function $Function_BrightenBackground
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o1C
	SW        RA, 14 (SP)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o1C
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	LW        V0, 70 (S0)
	DADDU     A2, A0, R0
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	BEQ       V0, R0, .o58
	SW        V0, 70 (S0)
	BEQ       R0, R0, .o70
	DADDU     V0, R0, R0
	.o58
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	JAL       8011BE5C
	DADDU     A3, A0, R0
	ADDIU     V0, R0, 2
	.o70
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 18
}
	
#new:Function $Function_ThunderFX
{
	ADDIU     SP, SP, FFC0
	SW        RA, 24 (SP)
	SW        S2, 20 (SP)
	SW        S1, 1C (SP)
	SW        S0, 18 (SP)
	SDC1      F24, 38 (SP)
	SDC1      F22, 30 (SP)
	SDC1      F20, 28 (SP)
	JAL       ~Func:get_actor
	LW        A0, 148 (A0)
	JAL       ~Func:get_actor
	LH        A0, 428 (V0)
	DADDU     S0, V0, R0
	BEQ       S0, R0, .o128
	ADDIU     V0, R0, 2
	JAL       80149CB4
	ADDIU     A0, R0, 366
	LIO       V1, CCCCCCCD
	LBU       A0, 191 (S0)
	LBU       V0, 190 (S0)
	MULTU     A0, V1
	LWC1      F0, 188 (S0)
	SRL       V1, V0, 2
	ADDU      V0, V0, V1
	MTC1      V0, F6
	NOP
	CVT.S.W   F6, F6
	MUL.S     F6, F6, F0
	NOP
	ADDIU     V0, A0, FFFE
	MTC1      V0, F4
	NOP
	CVT.S.W   F4, F4
	MUL.S     F4, F4, F0
	NOP
	LWC1      F2, 148 (S0)
	LWC1      F22, 144 (S0)
	LWC1      F24, 14C (S0)
	MFHI      T0
	SRL       V0, T0, 3
	ANDI      V0, V0, FF
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	TRUNC.W.S F8, F6
	MFC1      S1, F8
	TRUNC.W.S F8, F4
	MFC1      S2, F8
	LW        V0, 0 (S0)
	ANDI      V0, V0, 8000
	BEQ       V0, R0, .oE8
	ADD.S     F20, F2, F0
	SRL       V0, A0, 1
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	SUB.S     F20, F20, F0
	.oE8
	JAL       800299FC
	ADDIU     A0, R0, 2
	ADDIU     A0, V0, 3
	MFC1      A1, F22
	MFC1      A2, F20
	MFC1      A3, F24
	MTC1      S1, F0
	NOP
	CVT.S.W   F0, F0
	SWC1      F0, 10 (SP)
	MTC1      S2, F0
	NOP
	CVT.S.W   F0, F0
	JAL       80070CD0
	SWC1      F0, 14 (SP)
	%Now to update the color of the lightning bolt (hopefully)
	%the shockwave thing has RGB values but the lightning bolt itself seems to have a palette in the effect data
	%problem: the second effect doesn't always exist
	%LW		 S1, C (V0)	%get pointer
	%ADDIU	 S2, R0, FF
	%SW		 S2, 90 (S1)
	%ADDIU	 S2, R0, 77
	%SW		 S2, 94 (S1)
	%ADDIU	 S2, R0, F7
	%SW		 S2, 98 (S1)
	%ADDIU	 S2, R0, FF
	%SW		 S2, 9C (S1)
	%ADDIU	 S2, R0, FF
	%SW		 S2, A0 (S1)
	%ADDIU	 S2, R0, FF
	%SW		 S2, A4 (S1)
	ADDIU     V0, R0, 2
	.o128
	LW        RA, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F24, 38 (SP)
	LDC1      F22, 30 (SP)
	LDC1      F20, 28 (SP)
	JR        RA
	ADDIU     SP, SP, 40
}

#new:Script $Script_ChargeWave_SparkQueen
{
	Call     UseIdleAnimation 	( .Actor:Self .False ) 
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
    Call     SetTargetActor ( .Actor:Self .Actor:Player )
    Call     UseBattleCamPreset 	( 0000000E )
    Call     BattleCamTargetActor ( .Actor:Self )
    Call     MoveBattleCamOver 	( 0000000F )
    Wait     0000000F 
    Call     SetAnimation 	( .Actor:Self 00000001 00F1000A )
    Wait     00000005 
    Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp )
	Wait	 0000000A
    Call     UseBattleCamPreset 	( 00000002 ) %preset E doesn't have mario on screen so the attack would basically be unblockable without this
	Wait	 0000000A							%the timing is really bad without some extra time for the zoom
    Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call     GetStatusFlags ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00080000 
		Call     PlayEffect  	( ~FX:SnakingStatic *Var[0] *Var[1] *Var[2] *Fixed[1.2] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call	 $Function_SetStaticColors ( *VarF )
    Else
    	%Sub  *Var[0]  00000010 
    	%Add  *Var[1]  0000001F 
		%Sub  *Var[2]  00000002 
		Call     PlayEffect  	( ~FX:SnakingStatic *Var[0] *Var[1] *Var[2] *Fixed[0.7] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call	 $Function_SetStaticColors ( *VarF )
	EndIf
    Call     GetStatusFlags ( .Actor:Self *Var[0] )
    If  *Var[0]  !&  00080000 
    	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
    	%Add  *Var[0]  0000000D 
    	%Set  *Var[1]  00000037 
    	Call     PlayEffect  	( ~FX:EnergyShockwave *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
    Else
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		%Add  *Var[0]  00000005 
		%Set  *Var[1]  00000016 
		Call     PlayEffect  	( ~FX:EnergyShockwave *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
    Wait     00000008 
    Call     SetGoalToTarget 	( .Actor:Self )
    Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000001 00000010 )
    Switch  *Var[A] 
    	CaseOR  ==  .HitResult:Miss % 6
    	CaseOR  ==  .HitResult:Lucky % 5
    		Call     SetTargetActor ( .Actor:Self .Actor:Partner )
    		Call     EnemyTestTarget ( .Actor:Self *Var[B] 00000000 00000000 00000001 00000010 )
    		Switch  *Var[B] 
    			Case  ==  .HitResult:Miss % 6
    				Call     SetAnimation 	( .Actor:Self 00000001 00F1000A )
    				Wait     0000001E 
    				Return
    			Default
    				Wait     00000002 
    				If  *Var[A]  ==  00000005 
    					Call     SetTargetActor ( .Actor:Self .Actor:Player )
    					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
    				EndIf
    				Wait     00000002 
					If *Var[B] != 00000005
						Call     SetTargetActor ( .Actor:Self .Actor:Partner )
						Call     SetGoalToTarget 	( .Actor:Self )
						Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 20000020 0000FFFF 80010164 00000002 00000020 )
					EndIf
    				Call     8026F44C ( 00010000 )
    				If  *Var[A]  !=  00000005 
    					Call     SetAnimation 	( .Actor:Self 00000001 00F1000A )
    				EndIf
    				Wait     0000001E 
    				Return
    		EndSwitch
    	EndCaseGroup
    	Default
    EndSwitch
    Call     8026BF48 ( 00000001 )
    Thread
    	Wait     00000007	%4 -> 7 to make this not as hard to block both
    	Call     SetTargetActor ( .Actor:Self .Actor:Partner )
    	Call     SetGoalToTarget 	( .Actor:Self )
    	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 20000020 0000FFFF 80010164 00000002 00000020 )
    	Call     8026BF48 ( 00000000 )
    EndThread
    Wait     00000002 
    Call     SetGoalToTarget 	( .Actor:Self )
	Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 20000110 0000FFFF 80010164 00000007 00000020 )
  	Call     UseBattleCamPreset 	( 00000002 )
	Call     EnableActorGlow 	( .Actor:Self .False )
	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
    Call     SetAnimation 	( .Actor:Self 00000001 00F10001 )
	Call     UseIdleAnimation 	( .Actor:Self .True ) 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Return
	End
}

%she has no allies to turbo charge
%so no need to have all the scripts for that



%lightning effect color swapping
#new:Function $Function_SetStaticColors
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%R
   1C:  SW			A1, 18 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, 77			%G
   24:  SW			A1, 1C (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, F7			%B
   2C:  SW			A1, 20 (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, FF			%R 2
   38:  SW			V1, 24 (A0)
   3C:  LW			A0, C (V0)
   40:  ADDIU		V1, R0, FF			%G 2
   44:  SW			V1, 28 (A0)
   48:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B 2
   4C:  SW			A1, 2C (V1)
		.end
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}

#new:Function $Function_SetLightningPalette
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%R
   1C:  SW			A1, 30 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%G
   24:  SW			A1, 34 (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B
   2C:  SW			A1, 38 (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, FF			%R 2
   38:  SW			V1, 40 (A0)
   3C:  LW			A0, C (V0)
   40:  ADDIU		V1, R0, 77			%G 2
   44:  SW			V1, 44 (A0)
   48:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, F7			%B 2
   4C:  SW			A1, 48 (V1)
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}

%lightning effect color swapping
#new:Function $Function_SetRadialPalette
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF77		%R + G
   1C:  SH			A1, 68 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, F7FF		%B + R2?
   24:  SH			A1, 6A (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, 77F7		%G2 + B2?
   2C:  SH			A1, 6C (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, 00FF		%supplemental data
   38:  SH			V1, 6E (A0)
		.end
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}


%so all this stuff is related to some effects
%and those effects constitute the lightning bolt sprites
%with the power of shady programming magic I made the lightning bolts pink (but the palette gets overwritten if you take Watt out :( )

%Disable / Reenable sprite? (Found with a 0 argument around the time that the bolts disappear, found with a 1 argument when they reappear)
%This doesn't really do much other than set something somewhere in the actor struct
#new:Function $Function_80219658_SQ
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S0, 10 (SP)
    8:  COPY		S0, A0
    C:  SW			RA, 18 (SP)
   10:  SW			S1, 14 (SP)
   14:  LW			A0, 148 (S0)		%owner battle id
   18:  JAL			~Func:get_actor		%use battle id to find actor pointer
   1C:  LW			S1, C (S0)			%(script arg position?)
   20:  COPY		A0, S0				%copy script pointer to A0
   24:  LW			A1, 0 (S1)			%get argument
   28:  JAL			~Func:get_variable	%get value of argument
   2C:  LW			S0, 94 (V0)			%actor pointer + 94 (Is this one of the actor variables?) (actor var 3)	(NOTE: This value is set to a heap head)
   30:  SW			V0, 4 (S0)			%store variable value at 4 + heap head pointer
   34:  LW			RA, 18 (SP)
   38:  LW			S1, 14 (SP)
   3C:  LW			S0, 10 (SP)
   40:  ADDIU		V0, R0, 2
   44:  JR			RA
   48:  ADDIU		SP, SP, 20
}

%set to 1 when going home?
#new:Function $Function_802196A4_SQ
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S0, 10 (SP)
    8:  COPY		S0, A0
    C:  SW			RA, 18 (SP)
   10:  SW			S1, 14 (SP)
   14:  LW			A0, 148 (S0)
   18:  JAL			~Func:get_actor
   1C:  LW			S1, C (S0)
   20:  COPY		A0, S0
   24:  LW			A1, 0 (S1)
   28:  JAL			~Func:get_variable
   2C:  LW			S0, 94 (V0)
   30:  SW			V0, C (S0)				%store var value at C + heap head
   34:  LW			RA, 18 (SP)
   38:  LW			S1, 14 (SP)
   3C:  LW			S0, 10 (SP)
   40:  ADDIU		V0, R0, 2
   44:  JR			RA
   48:  ADDIU		SP, SP, 20
}

%set to 0 while flying to goal
#new:Function $Function_802196F0_SQ
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S0, 10 (SP)
    8:  COPY		S0, A0
    C:  SW			RA, 18 (SP)
   10:  SW			S1, 14 (SP)
   14:  LW			A0, 148 (S0)
   18:  JAL			~Func:get_actor
   1C:  LW			S1, C (S0)
   20:  COPY		A0, S0
   24:  LW			A1, 0 (S1)
   28:  JAL			~Func:get_variable
   2C:  LW			S0, 94 (V0)
   30:  SW			V0, 10 (S0)				%store var value at 10 + heap head
   34:  LW			RA, 18 (SP)
   38:  LW			S1, 14 (SP)
   3C:  LW			S0, 10 (SP)
   40:  ADDIU		V0, R0, 2
   44:  JR			RA
   48:  ADDIU		SP, SP, 20
}

%ors some flags in relation to the heap pointer things
#new:Function $Function_80219604_SQ
{
    0:  ADDIU		SP, SP, FFE8
    4:  SW			RA, 10 (SP)
    8:  JAL			~Func:get_actor
    C:  LW			A0, 148 (A0)		%script owner
   10:  LW			A0, 94 (V0)			%heap head pointer
   14:  LW			V1, 14 (A0)			%load 14 + heap head
   18:  BEQ			V1, R0, .o2C		%check if it is 0, go to 2C
   1C:  SW			R0, 0 (A0)			%store 0 at 0 + heap head
   20:  LW			V0, 0 (V1)			%load from 14 + heap head
   24:  ORI			V0, V0, 10			%V0 |= 10
   28:  SW			V0, 0 (V1)			%store at 14 + heap head
        .o2C
   2C:  LW			V1, 18 (A0)			%load from 18 + heap head
   30:  BEQ			V1, R0, .o44		%check if 18 + heap head is 0, go to 44
   34:  NOP
   38:  LW			V0, 0 (V1)			%load from 18 + heap head
   3C:  ORI			V0, V0, 10			%V0 |= 0
   40:  SW			V0, 0 (V1)			%store at 18 + heap head
        .o44
   44:  LW			RA, 10 (SP)
   48:  ADDIU		V0, R0, 2
   4C:  JR			RA
   50:  ADDIU		SP, SP, 18
}

#new:Function $Function_8021973C_SQ
{
    0:  ADDIU		SP, SP, FFE8
    4:  SW			RA, 10 (SP)
    8:  JAL			8011D82C			%not in docs
    C:  ADDIU		A0, R0, 1
   10:  CLEAR		A0
   14:  ADDIU		V0, R0, 1
   18:  COPY		A1, A0
   1C:  COPY		A2, A0
   20:  LAW			V1, 801512F0		
   28:  COPY		A3, A0
   2C:  JAL			~Func:set_background_color_blend		%set to 0,0,0,0
   30:  SB			V0, 0 (V1)
   34:  LW			RA, 10 (SP)
   38:  ADDIU		V0, R0, 2
   3C:  JR			RA
   40:  ADDIU		SP, SP, 18
}
 
#new:Function $Function_80219780_SQ
{
    0:  ADDIU		SP, SP, FFE8
    4:  SW			RA, 10 (SP)
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  CLEAR		A0
   18:  COPY		A1, A0
   1C:  COPY		A2, A0			%set background color to (0,0,0,(input && FF))
   20:  JAL			~Func:set_background_color_blend
   24:  ANDI		A3, V0, FF
   28:  LW			RA, 10 (SP)
   2C:  ADDIU		V0, R0, 2
   30:  JR			RA
   34:  ADDIU		SP, SP, 18
}

%It mostly plays some effects
#new:Function $Function_80219188_SQ
{
    0:  ADDIU		SP, SP, FFB8
    4:  SW			RA, 2C (SP)
    8:  SW			S2, 28 (SP)
    C:  SW			S1, 24 (SP)
   10:  SW			S0, 20 (SP)
   14:  SDC1		F24, 40 (SP)
   18:  SDC1		F22, 38 (SP)
   1C:  SDC1		F20, 30 (SP)
   20:  LW			A0, 148 (A0)		%Script owner id
   24:  JAL			~Func:get_actor		%Get actor pointer
   28:  COPY		S0, A1				%???
   2C:  COPY		S1, V0				%S1 = actor pointer
   30:  BEQ			S0, R0, .o128		%check if original A1 is 0 (Skips drawing smoke effect when A1 == 0)
   34:  ADDIU		S2, S1, C			%S2 = (C + actor pointer) (why though?)
   38:  JAL			~Func:heap_malloc		%oh boy
   3C:  ADDIU		A0, R0, 20			%??? (allocate 20?)
   40:  COPY		S0, V0				%S0 = heap head pointer?
   44:  ADDIU		V0, R0, 1			%V0 = 1
   48:  ADDIU		A1, S1, 144			%actor pointer + 144 (currentpos X?)
   4C:  ADDIU		A2, S1, 148			%actor pointer + 148 (currentpos Y?)
   50:  SW			S0, 94 (S1)			%store heap head pointer to 94 + actor pointer (actorvar 3)
   54:  SW			V0, 4 (S0)			%set value at 4 + heap head to 1 
   58:  SW			R0, 8 (S0)			%set value at 8 + heap head to 0 
   5C:  SW			V0, C (S0)			%set value at C + heap head to 1 
   60:  SW			R0, 10 (S0)			%set value at 10 + heap head to 0
   64:  LB			V1, 210 (S1)		%load debuff status ID from actor pointer
   68:  ADDIU		V0, R0, A			%V0 = 10
   6C:  BEQ			V1, V0, .o84		%Check if debuff = A (shrink?) (go to o84 if yes)
   70:  ADDIU		A3, S1, 14C			%A3 = 14C + actor pointer (currentpos Z?)
   74:  LIF			F0, 1.0				%load 1
   7C:  BEQ			R0, R0, .o98		%go to o98
   80:  SWC1		F0, 10 (SP)			%push F0 onto stack?
        .o84			
   84:  LIO			AT, 3ECCCCCD		%load 0.4
   8C:  MTC1		AT, F0				%move to F0
   90:  NOP
   94:  SWC1		F0, 10 (SP)			%push F0 onto stack?
        .o98
   98:  ADDIU		V0, R0, A			%V0 = 5						Give her 10 bolts instead
   9C:  SW			V0, 14 (SP)			%push V0 onto stack
   A0:  SW			R0, 18 (SP)			%push 0 onto stack (why?)
   A4:  LW			A1, 0 (A1)			%Current pos X
   A8:  LW			A2, 0 (A2)			%Current pos Y
   AC:  LW			A3, 0 (A3)			%Current pos Z
		%ADDIU		A0, R0, 1
		%SAW		A0, $LightningBoltPalette
   B0:  JAL			800723B0			
		ADDIU		A0, R0, 2							%Palette 2
   %B4:  CLEAR		A0					%Set A0 to 0 
   B8:  ADDIU		A1, S1, 144			%A1 = Actor pointer + 144 (currentpos X pointer)
   BC:  SW			V0, 14 (S0)			%Store return value from function at 14 + heap head pointer (????)
   C0:  LB			V0, 210 (S1)		%Get debuff status again
   C4:  ADDIU		V1, R0, A			
   C8:  BEQ			V0, V1, .oE0		%Check against value A (shrink)
   CC:  ADDIU		A3, S1, 14C			%Currentpos Z pointer
   D0:  LIF			F0, 1.0				%Load 1.0
   D8:  BEQ			R0, R0, .oF4
   DC:  SWC1		F0, 10 (SP)			%Push F0
        .oE0
   E0:  LIO			AT, 3ECCCCCD		%Load 0.4
   E8:  MTC1		AT, F0
   EC:  NOP
   F0:  SWC1		F0, 10 (SP)			%Push F0
        .oF4
   F4:  ADDIU		V0, R0, A			%V0 = 5
   F8:  SW			V0, 14 (SP)			%push V0 onto stack			Give her 10 bolts instead
   FC:  SW			R0, 18 (SP)			%push 0 onto stack (why?)
  100:  LW			A1, 0 (A1)			
  104:  LUI			A2, C47A
  108:  LW			A3, 0 (A3)			%Currentpos Z
		%ADDIU		A0, R0, 1
		%SAW		A0, $LightningBoltPalette
  10C:  JAL			800723B0			
		ADDIU		A0, R0, 3							%Palette 2
  114:  SW			V0, 18 (S0)			%Store return value from function at 18 + heap head pointer (????)
  118:  ADDIU		V0, R0, 1			%V0 = 1
  11C:  SW			V0, 0 (S0)			%Store 1 at 0 + heap pointer
  120:  LB			V0, 210 (S1)		%yet again load status
  124:  SW			V0, 1C (S0)			%store status value at 1C + heap head pointer
        .o128
  128:  LW			S0, 88 (S2)			%load from (88 + C + actor pointer) (heap head pointer)
  12C:  LW			V0, 0 (S0)			%load from 0 + that value
  130:  BEQ			V0, R0, .o458		%go to 458 (the end) if V0 is 0
  134:  ADDIU		V0, R0, 2			%then set V0 to 2
  138:  LW			V0, 4 (S0)			%load from 4 + S0
  13C:  BEQ			V0, R0, .o174		%check if V0 is 0 again to go to 174
  140:  ADDIU		V0, R0, 8			%set V0 to 8
  144:  LB			V1, 210 (S1)		%get debuff ID from actor pointer
  148:  BEQ			V1, V0, .o174		%check if status is stop (skip to 174 if yes)
  14C:  NOP
  150:  LW			V0, 8 (S0)			%load from 8 + S0
  154:  ADDIU		V0, V0, F			%add F to V0
  158:  MTC1		V0, F12				%move that value to F12
  15C:  NOP
  160:  CVT.S.W		F12, F12			%convert V0 to actual float
  164:  JAL			~Func:clamp_angle	%clamp_angle in F12 to normal
  168:  SW			V0, 8 (S0)			%store V0 value into 8 + S0 again (So the value in V0 is an angle that gets incremented by 15 each frame and clamped to a normal value again)
  16C:  TRUNC.W.S	F6, F0				%Truncate angle from float to int
  170:  SWC1		F6, 8 (S0)			%Store angle back at 8 + S0
        .o174						
  174:  LIO			AT, 40C90FD0		%6.28318023682 ~= 2 pi
  17C:  MTC1		AT, F0				
  180:  LWC1		F12, 8 (S0)			%Load from angle at 8 + S0
  184:  CVT.S.W		F12, F12			%Convert F12 to float
  188:  MUL.S		F12, F12, F0		%Multiply F12 by 6.28
  18C:  NOP
  190:  LIF			F0, 360.0			%Load 360
  198:  JAL			~Func:sin_rad		%F0 = sin(F12) in radians
  19C:  DIV.S		F12, F12, F0		%Divide F12 by 360		(So angle is multiplied by pi/180, the degree to radian conversion factor)
  1A0:  LIF			F2, 3.0				%Load 3
  1A8:  NOP
  1AC:  MUL.S		F0, F0, F2			%Multiply sine of angle by 3
  1B0:  NOP
  1B4:  LH			V0, 152 (S1)		%sprite offset Y
  1B8:  MTC1		V0, F2				%move sprite offset to F0
  1BC:  NOP
  1C0:  CVT.S.W		F2, F2				%convert F0 to float
  1C4:  TRUNC.W.S	F6, F0				%convert sine of angle to int
  1C8:  MFC1		V1, F6				%move F6 to V1
  1CC:  NOP
  1D0:  SLL			V0, V1, 18			%V0 = V1 << 0x18 (24 bit shift)
  1D4:  LWC1		F0, 148 (S1)		%currentpos Y
  1D8:  SRA			V0, V0, 18			%V0 = V0 >> 0x18 (24 bit shift)
  1DC:  SB			V1, 19A (S1)		%Store lower byte of V1 to 19A + actor pointer (???)
  1E0:  ADD.S		F0, F0, F2			%sprite offset Y + currentpos Y
  1E4:  MTC1		V0, F2				%move V0 to F2
  1E8:  NOP
  1EC:  CVT.S.W		F2, F2				%convert F2 to float
  1F0:  LH			V0, 150 (S1)		%sprite offset X
  1F4:  ADD.S		F0, F0, F2			%F0 = (sprite offset Y + currentpos Y) + sine of angle
  1F8:  ADDIU		V1, R0, A			%set V1 to A
  1FC:  MTC1		V0, F2				%move V0 to F2
  200:  NOP
  204:  CVT.S.W		F2, F2				%convert F2 to float
  208:  CVT.D.S		F4, F0				%convert F4 to double (from F0)
  20C:  LWC1		F0, 144 (S1)		%currentpos X
  210:  LB			V0, 210 (S1)		%debuff status ID
  214:  ADD.S		F22, F0, F2			%F22 = (sprite offset X + currentpos X)
  %218:  LAD			F0, $ConstDouble_80232B38_SQ
		LIF			F0, 4.8				%Set F0 to 4.8
		CVT.D.S		F0, F0
  220:  BEQL		V0, V1, .o23C		%if V0 = V1 (debuff status ID = 10, shrink)
  224:  ADD.D		F0, F4, F0			%F0 = 4.8 + currentpos X
  228:  LIF			F1, 2.625			%F1 = 2.625
  230:  MTC1		R0, F0				%move 0 to F0
  234:  NOP
  238:  ADD.D		F0, F4, F0			%F0 = F4 (?)
        .o23C
  23C:  CVT.S.D		F20, F0				%F20 = (double)F0
  240:  LH			V0, 154 (S1)		%sprite offset Z
  244:  LWC1		F0, 14C (S1)		%currentpos Z
  248:  MTC1		V0, F2				%F2 = V0
  24C:  NOP
  250:  CVT.S.W		F2, F2				%convert F2 to float (spriteoffsetZ)
  254:  LW			V0, C (S0)			%Load from C + heap head
  258:  BEQ			V0, R0, .o3C0		%if V0 = 0, go to 3C0
  25C:  ADD.S		F24, F0, F2			%currentpos Z + spriteoffset Z
  260:  LW			V1, 10 (S0)			%load from 10 + heap head
  264:  BEQ			V1, R0, .o27C		%check if V1 = 0, go to 27C
  268:  ADDIU		V0, R0, 1			%set V0 to 1
  26C:  BEQ			V1, V0, .o318		%check if V1 = V0, go to 318
  270:  NOP
  274:  BEQ			R0, R0, .o3F8		%go to 3F8
  278:  NOP
        .o27C							%V1 = 0
  27C:  LW			V0, 14 (S0)			%load from 14 + heap head
  280:  BNE			V0, R0, .o2DC		%if V0 != 0, go to 2DC (If effect is loaded, skip stuff below)
  284:  ADDIU		V0, R0, A			%set V0 to A
  288:  LB			V1, 210 (S1)		%load debuff status ID
  28C:  BEQ			V1, V0, .o2A4		%if debuff status ID = 10, shrink, go to 2A4
  290:  NOP
  294:  LIF			F0, 1.0				%F0 = 1.0
  29C:  BEQ			R0, R0, .o2B8		%go to 2B8
  2A0:  SWC1		F0, 10 (SP)			%store F0 in stack
        .o2A4
  2A4:  LIO			AT, 3ECCCCCD		%Load 0.4
  2AC:  MTC1		AT, F0				%F0 = 0.4
  2B0:  NOP
  2B4:  SWC1		F0, 10 (SP)			%store F0 in stack
        .o2B8
		%ADDIU		A0, R0, 1
		%SAW			A0, $LightningBoltPalette
		ADDIU		A0, R0, 2							%Palette 2
  2BC:  MFC1		A1, F22				%A1 = spriteoffset X + currentpos X
  2C0:  MFC1		A2, F20				%A1 = (sprite offset Y + currentpos Y) + sine of angle
  2C4:  MFC1		A3, F24				%A1 = spriteoffset Z + currentpos Z
  2C8:  ADDIU		V0, R0, A			%V0 = 5
  2CC:  SW			V0, 14 (SP)			%store 5 in stack								Give her 10 bolts instead
  2D0:  JAL			800723B0			
  2D4:  SW			R0, 18 (SP)			%store 0 in stack
  2D8:  SW			V0, 14 (S0)			%store V0 at 14 + heap head
        .o2DC
  2DC:  LW			V1, 18 (S0)			%load from 18 + heap head (effect pointer from above?)
  2E0:  BEQ			V1, R0, .o2F8		%check if pointer is 0, if yes, go to 2F8
  2E4:  NOP
  2E8:  LW			V0, 0 (V1)			%load from pointer
  2EC:  ORI			V0, V0, 10			%V0 |= 10
  2F0:  SW			V0, 0 (V1)			%store V0 at V1 pointer
  2F4:  SW			R0, 18 (S0)			%store 0 at 18 + heap head (so this code sets pointer to 0)
        .o2F8
  2F8:  LW			V0, 14 (S0)			%load from 14 + heap head
  2FC:  LW			V0, C (V0)			%load from C + pointer (another effect pointer?)
  300:  SWC1		F22, 4 (V0)			%store spriteoffset X + currentpos X at 4 + V0 pointer
  304:  LW			V0, 14 (S0)			%load from 14 + heap head
  308:  LW			V0, C (V0)			%load from C + pointer in V0
  30C:  SWC1		F20, 8 (V0)			%store (sprite offset Y + currentpos Y) + sine of angle at 8 + V0 pointer
  310:  BEQ			R0, R0, .o3B4		%go to 3B4
  314:  LW			V0, 14 (S0)
        .o318
  318:  LW			V1, 14 (S0)
  31C:  BEQ			V1, R0, .o334
  320:  NOP
  324:  LW			V0, 0 (V1)
  328:  ORI			V0, V0, 10
  32C:  SW			V0, 0 (V1)
  330:  SW			R0, 14 (S0)
        .o334
  334:  LW			V0, 18 (S0)
  338:  BNE			V0, R0, .o39C
  33C:  NOP
  340:  LB			V1, 210 (S1)
  344:  ADDIU		V0, R0, A
  348:  BEQ			V1, V0, .o360
  34C:  NOP
  350:  LIF			F0, 1.0
  358:  BEQ			R0, R0, .o374
  35C:  SWC1		F0, 10 (SP)
        .o360
  360:  LIO			AT, 3ECCCCCD
  368:  MTC1		AT, F0
  36C:  NOP
  370:  SWC1		F0, 10 (SP)
        .o374
		%ADDIU		A0, R0, 1
		%SAW			A0, $LightningBoltPalette
  %374:  ADDIU		A0, R0, 1
		ADDIU		A0, R0, 3							%Palette 2
  378:  MFC1		A1, F22
  37C:  MFC1		A2, F20
  380:  MFC1		A3, F24
  384:  ADDIU		V0, R0, 5
  388:  SW			V0, 14 (SP)
  38C:  JAL			800723B0			
  390:  SW			R0, 18 (SP)
  394:  SW			V0, 18 (S0)
  398:  LW			V0, 18 (S0)
        .o39C
  39C:  LW			V0, C (V0)
  3A0:  SWC1		F22, 4 (V0)
  3A4:  LW			V0, 18 (S0)
  3A8:  LW			V0, C (V0)
  3AC:  SWC1		F20, 8 (V0)
  3B0:  LW			V0, 18 (S0)
        .o3B4
  3B4:  LW			V0, C (V0)
  3B8:  BEQ			R0, R0, .o3F8
  3BC:  SWC1		F24, C (V0)
        .o3C0
  3C0:  LW			V1, 14 (S0)
  3C4:  BEQ			V1, R0, .o3DC
  3C8:  NOP
  3CC:  LW			V0, 0 (V1)
  3D0:  ORI			V0, V0, 10
  3D4:  SW			V0, 0 (V1)
  3D8:  SW			R0, 14 (S0)
        .o3DC
  3DC:  LW			V1, 18 (S0)
  3E0:  BEQ			V1, R0, .o3F8
  3E4:  NOP
  3E8:  LW			V0, 0 (V1)
  3EC:  ORI			V0, V0, 10
  3F0:  SW			V0, 0 (V1)
  3F4:  SW			R0, 18 (S0)
        .o3F8
  3F8:  LB			V1, 210 (S1)
  3FC:  LW			V0, 1C (S0)
  400:  BEQ			V0, V1, .o454
  404:  CLEAR		V0
  408:  LW			V0, C (S0)
  40C:  BEQ			V0, R0, .o454
  410:  CLEAR		V0
  414:  LW			V1, 14 (S0)
  418:  BEQ			V1, R0, .o430
  41C:  NOP
  420:  LW			V0, 0 (V1)
  424:  ORI			V0, V0, 10
  428:  SW			V0, 0 (V1)
  42C:  SW			R0, 14 (S0)
        .o430
  430:  LW			V1, 18 (S0)
  434:  BEQ			V1, R0, .o44C
  438:  NOP
  43C:  LW			V0, 0 (V1)
  440:  ORI			V0, V0, 10
  444:  SW			V0, 0 (V1)
  448:  SW			R0, 18 (S0)
        .o44C
  44C:  LB			V1, 210 (S1)
  450:  CLEAR		V0
        .o454
  454:  SW			V1, 1C (S0)
        .o458
  458:  LW			RA, 2C (SP)
  45C:  LW			S2, 28 (SP)
  460:  LW			S1, 24 (SP)
  464:  LW			S0, 20 (SP)
  468:  LDC1		F24, 40 (SP)
  46C:  LDC1		F22, 38 (SP)
  470:  LDC1		F20, 30 (SP)
  474:  JR			RA
  478:  ADDIU		SP, SP, 48
}

/%
#new:ConstDouble $ConstDouble_80232B38_SQ
4.800000d
%/