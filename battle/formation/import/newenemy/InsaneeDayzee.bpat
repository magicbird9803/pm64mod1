%New Enemy: Insanee Dayzee

%attack power is relatively weak, but the attacks are hard to guard + have long sleep duration

%Old stats:
%(they were meant to be really annoying like amazy dayzees)
%Level 50
%18 hp, 5 atk (w 5 turn sleep), 0 def
%	(if player is stunned, does 3 damage to partner)
%	(if both are stunned, instadeath)
%	The insanee dayzee was meant to be a really strong enemy like the Amazy Dayzee
%	However, since I'm planning on putting them in the pit, 
% 	enemies that can instakill you if you don't specifically equip Feeling Fine are a bad idea

%New stats:
%Level 33
%15 hp, 10/1 atk (w 1 turn sleep), 0 def
%If player HP < 15, they will do a special song
%that prevents you from running and reduces attack/defense power by 2
%endgame glass cannons

#new:DefenseTable $DefenseTable_Insanee
{
.Element:Normal 00000000
.Element:Cosmic FFFFFFFD %star storm does 10 against them
.Element:End
}

#new:StatusTable $StatusTable_Insanee
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep     100` %weakness, but sleep is still a bad status though
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   50`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_Insanee
{
00800000 01000000 FE1E00FF $IdleAnimations_Insanee $DefenseTable_Insanee 00000000 00000000 00F80000 00000000 
}

#new:Actor $InsaneeDayzee
{
% stats
[Index]        DDb 
[Level]        33`b 
[MaxHP]        15`b 
[Coins]         4`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Insanee 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Insanee 
[Script]      $Script_Init_Insanee 
% move effectiveness
[Escape]        0`b %no escape
[Item]          0`b %???
[AirLift]      20`b %
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]    40`b 
[PowerBounce]   5`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  34`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -14`b  17`b % dx dy
[StatusIcon]    9`b  25`b % dx dy
}

%regular dayzees = 48
%palette 9
#new:IdleAnimations $IdleAnimations_Insanee %$IdleAnimations_8021D8A4
{
.Status:Normal    00480201
.Status:Stone     00480200
.Status:Sleep     0048020C
.Status:Poison    00480201
.Status:Stop      00480200
.Status:Static    00480201
.Status:Paralyze  00480200
.Status:Dizzy     0048020B
.Status:Fear      0048020B
.Status:End
}

#new:Script $Script_Init_Insanee %$Script_Init_8021D8F0
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Insanee )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Insanee )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Insanee )
		Call	 SetActorVar 	( .Actor:Self 00000001 00000000 )
   3C:  Return
   44:  End
}

#new:Script $Script_Idle_Insanee %$Script_Idle_8021D93C
{
    0:  Return
    8:  End
}

#new:Script $Script_Insanee_8021D94C %$Script_8021D94C
{
    0:  SetConst  *Var[0]  00000001 
   10:  SetConst  *Var[1]  00480203 
   20:  ExecWait DoReturnHome 
   2C:  Return
   34:  End
}

#new:Script $Script_HandleEvent_Insanee %$Script_HandleEvent_8021D988
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   28:  Switch  *Var[0] 
   34:  	CaseOR  ==  .Event:HitCombo
   40:  	CaseOR  ==  .Event:Hit
   4C:  		SetConst  *Var[0]  00000001 
   5C:  		SetConst  *Var[1]  00480208 
   6C:  		ExecWait DoNormalHit 
   78:  	EndCaseGroup
   80:  	Case  ==  .Event:BurnHit
   8C:  		SetConst  *Var[0]  00000001 
   9C:  		SetConst  *Var[1]  00480209 
   AC:  		SetConst  *Var[2]  0048020A 
   BC:  		ExecWait DoBurnHit 
   C8:  	Case  ==  .Event:BurnDeath
   D4:  		SetConst  *Var[0]  00000001 
   E4:  		SetConst  *Var[1]  00480209 
   F4:  		SetConst  *Var[2]  0048020A 
  104:  		ExecWait DoBurnHit 
  110:  		SetConst  *Var[0]  00000001 
  120:  		SetConst  *Var[1]  0048020A 
  130:  		ExecWait DoDeath 
  13C:  		Return
  144:  	Case  ==  .Event:SpinSmashHit
  150:  		SetConst  *Var[0]  00000001 
  160:  		SetConst  *Var[1]  00480208 
  170:  		ExecWait 8029B998 
  17C:  	Case  ==  .Event:SpinSmashDeath
  188:  		SetConst  *Var[0]  00000001 
  198:  		SetConst  *Var[1]  00480208 
  1A8:  		ExecWait 8029B998 
  1B4:  		SetConst  *Var[0]  00000001 
  1C4:  		SetConst  *Var[1]  00480208 
  1D4:  		ExecWait DoDeath 
  1E0:  		Return
  1E8:  	Case  ==  .Event:ShockHit
  1F4:  		SetConst  *Var[0]  00000001 
  204:  		SetConst  *Var[1]  00480208 
  214:  		ExecWait DoShockHit 
  220:  		SetConst  *Var[0]  00000001 
  230:  		SetConst  *Var[1]  00480208 
  240:  		ExecWait DoJumpBack 
  24C:  		ExecWait $Script_Insanee_8021D94C 
  258:  	Case  ==  .Event:ShockDeath
  264:  		SetConst  *Var[0]  00000001 
  274:  		SetConst  *Var[1]  00480208 
  284:  		ExecWait DoShockHit 
  290:  		SetConst  *Var[0]  00000001 
  2A0:  		SetConst  *Var[1]  00480208 
  2B0:  		ExecWait DoDeath 
  2BC:  		Return
  2C4:  	CaseOR  ==  00000017
  2D0:  	CaseOR  ==  .Event:Immune
  2DC:  	CaseOR  ==  .Event:AirLiftFailed
  2E8:  		SetConst  *Var[0]  00000001 
  2F8:  		SetConst  *Var[1]  00480201 
  308:  		ExecWait DoImmune 
  314:  	EndCaseGroup
  31C:  	Case  ==  .Event:Death
  328:  		SetConst  *Var[0]  00000001 
  338:  		SetConst  *Var[1]  00480208 
  348:  		ExecWait DoNormalHit 
  354:  		Wait     0000000A 
  360:  		SetConst  *Var[0]  00000001 
  370:  		SetConst  *Var[1]  00480208 
  380:  		ExecWait DoDeath 
  38C:  		Return
  394:  	Case  ==  .Event:RecoverStatus
  3A0:  		SetConst  *Var[0]  00000001 
  3B0:  		SetConst  *Var[1]  00480201 
  3C0:  		ExecWait DoRecover 
  3CC:  	Case  ==  .Event:ScareAway
  3D8:  		SetConst  *Var[0]  00000001 
  3E8:  		SetConst  *Var[1]  00480204 
  3F8:  		SetConst  *Var[2]  00480208 
  408:  		ExecWait DoScareAway 
  414:  		Return
  41C:  	Case  ==  .Event:BeginAirLift
  428:  		SetConst  *Var[0]  00000001 
  438:  		SetConst  *Var[1]  00480204 
  448:  		ExecWait DoAirLift 
  454:  	Case  ==  .Event:BlowAway
  460:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  474:  		If  *Var[0]  !&  0035D000 
  484:  			If  *Var[0]  &  00080000 
  494:  				Call     SetActorDispOffset ( FFFFFF81 00000000 00000001 00000000 )
  4B0:  			Else
  4B8:  				Call     SetActorDispOffset ( FFFFFF81 00000000 00000003 00000000 )
  4D4:  			EndIf
  4DC:  		EndIf
  4E4:  		SetConst  *Var[0]  00000001 
  4F4:  		SetConst  *Var[1]  00480208 
  504:  		ExecWait DoBlowAway 
  510:  		Return
  518:  	Default
  520:  EndSwitch
  528:  Call     UseIdleAnimation 	( .Actor:Self .True )
  53C:  Return
  544:  End
}

#new:Function $Function_DarkenBackground_Insanee
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o48
	SW        RA, 14 (SP)
	JAL       8011D82C
	ADDIU     A0, R0, 1
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	DADDU     A3, A0, R0
	LAW       V0, 801512F0
	ADDIU     V1, R0, 1
	JAL       8011BE5C
	SB        V1, 0 (V0)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
       .o48
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	LW        V1, 70 (S0)
	ADDIU     V0, R0, 14
	SUBU      V0, V0, V1
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	SW        V0, 70 (S0)
	SLTIU     V0, V0, 1
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	SLL       V0, V0, 1
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_BrightenBackground_Insanee
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o1C
	SW        RA, 14 (SP)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o1C
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	LW        V0, 70 (S0)
	DADDU     A2, A0, R0
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	BEQ       V0, R0, .o58
	SW        V0, 70 (S0)
	BEQ       R0, R0, .o70
	DADDU     V0, R0, R0
	.o58
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	JAL       8011BE5C
	DADDU     A3, A0, R0
	ADDIU     V0, R0, 2
	.o70
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU SP, SP, 18
}

#new:Script $Script_Insanee_CurseSing
{
	Call	UseIdleAnimation 	( .Actor:Self .False )
	%Call	8027C548 			( .Actor:Self .False )
	Call	$Function_DarkenBackground_Insanee ( )
	Wait	0000000A 
	Thread
		Call	SetAnimation 	( .Actor:Self 00000001 00480206 )
		Wait	00000028 
		Call	SetAnimation 	( .Actor:Self 00000001 00480207 )
	EndThread
	Wait	00000014 
	Call	SetMusicTrack 		( 00000001 .Song:UnusedFanfare 00000000 00000008 )
	Call	GetActorPos 	    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 15` 
	Add		*Var[2] 00000002 
	Loop	13` 
		Call	RandInt     	( 50` *Var[3] )
		Sub		*Var[3] 25` 
		Add		*Var[3] *Var[0] 
		Call	PlayEffect  	( 00000026 00000000 *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Wait	0000000A 
	EndLoop
	Wait	00000014 
	Call	SetAnimation 	( .Actor:Self 00000001 00480201 )
	Call	$Function_BrightenBackground_Insanee ( )
	Wait	0000000A 
	Call	$ShowCustomMessage	( 002F0045 90` )
	Wait	90`
    Call	PlaySoundAtActor	( .Actor:Player 000002D8 )
	Thread % added
		Call	8026BF48		( 00000001 )
		Call	BoostAttack		( .Actor:Player FFFFFFFE )
		Call	BoostDefense	( .Actor:Player FFFFFFFE )
		Call	8026BF48		( 00000000 )
	EndThread % added
	Call	$Function_SetEscape ( 00000000 ) %disable escape
	%Call	8027C548 			( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Insanee_Sing
{
	0:  Call     UseIdleAnimation 	( .Actor:Self .False )
	14:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
	/%
   28:  	Call     GetBattlePhase ( *Var[0] )
   %Insanee dayzees won't move when they do their normal attack
   38:  	If  *Var[0]  ==  .Phase:FirstStrike
   48:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   64:  		Call     SetActorPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   80:  	Else
   88:  		Call     UseBattleCamPreset 	( 0000003F )
   98:  		Call     BattleCamTargetActor ( .Actor:Self )
   A8:  		Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   C0:  		Call     MoveBattleCamOver 	( 00000046 )
   D0:  		Set  *Flag[00]  00000000 
   E0:  		Label    00000000 
   EC:  		If  *Flag[00]  ==  00000000 
   FC:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020E )
  114:  			Set  *Flag[00]  00000001 
  124:  		Else
  12C:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020F )
  144:  			Set  *Flag[00]  00000000 
  154:  		EndIf
  15C:  		Wait     00000001 
  168:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  17C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  198:  		Sub  *Var[0]  0000000D %make them slowly approach you
  1A8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  		Call     JumpToGoal  	( .Actor:Self 0000000D 00000000 00000001 00000000 )
  1E4:  		If  *Var[0]  >  00000000 
  1F4:  			Goto     00000000 
  200:  		EndIf
  208:  		If  *Flag[00]  ==  00000000 
  218:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020E )
  230:  			Set  *Flag[00]  00000001 
  240:  		Else
  248:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020F )
  260:  			Set  *Flag[00]  00000000 
  270:  		EndIf
  278:  		Wait     00000001 
  284:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  298:  		Call     SetGoalPos 	( .Actor:Self FFFFFFDD 00000000 0000000A )
  2B4:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  2D4:  	EndIf
  2DC:  	Call     SetAnimation 	( .Actor:Self 00000001 00480201 )
	%/
  2F4:  Wait     0000000A 
  300:  Thread
  308:  	Call     SetAnimation 	( .Actor:Self 00000001 00480206 )
  320:  	Wait     00000028 
  32C:  	Call     SetAnimation 	( .Actor:Self 00000001 00480207 )
  344:  EndThread
  34C:  Wait     00000014 
  358:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:DayzeeSong )
  36C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  Add  *Var[1]  00000019 
  398:  Add  *Var[2]  00000002 
		Call RandInt ( 00000010 *Var[C] ) %anywhere from 5 notes to 21 notes :)
		Add *Var[C] 5
  3A8:  Loop     *Var[C]
  3B4:  	Call     RandInt     	( 0000001E *Var[3] )
  3C8:  	Sub  *Var[3]  0000000F 
  3D8:  	Add  *Var[3]  *Var[0] 
  3E8:  	Call     PlayEffect  	( ~FX:MusicNote:Left *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  42C:  	Wait     0000000A 
  438:  EndLoop
  440:  Call     SetAnimation 	( .Actor:Self 00000001 00480201 )
  458:  Wait     0000000C 	%you need fast reflexes to get the guard (but it should be possible)
  464:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 10000000 00000000 00000001 00000010 )
  488:  Switch  *Var[0] 
  494:  	CaseOR  ==  00000006 
  4A0:  	CaseOR  ==  00000005 
  4AC:  		Set  *Var[A]  *Var[0] 
  4BC:  		If  *Var[A]  ==  00000005 
  4CC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4F0:  		EndIf
  4F8:  		Call     UseBattleCamPreset 	( 00000002 )
  508:  		Wait     0000000F 
  514:  		Call     YieldTurn   	( )
  520:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		ExecWait $Script_Insanee_8021D94C 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  5C8:  Call     SetGoalToTarget 	( .Actor:Self )
  5D8:  Wait     00000002
		Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001164 0000000E 00000020 ) %100% sleep for 1 turn
		Wait     00000006
		Call     SetTargetActor ( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001364 00000001 00000020 ) 
  60C:  Switch  *Var[F] 
  618:  	CaseOR  ==  00000000 
  624:  	CaseOR  ==  00000002 
  630:  		Call     UseBattleCamPreset 	( 00000002 )
  640:  		Call     MoveBattleCamOver 	( 0000000A )
  650:  		Wait     00000014 
  65C:  		Call     YieldTurn   	( )
  668:  		ExecWait $Script_Insanee_8021D94C 
  674:  	EndCaseGroup
  67C:  EndSwitch
  684:  Call     UseIdleAnimation 	( .Actor:Self .True )
  698:  Return
  6A0:  End
}

%old code
/%
#new:Script $Script_Insanee_Sing
	0:  Call     UseIdleAnimation 	( .Actor:Self .False )
	14:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
		Call     GetStatusFlags ( .Actor:Player *Var[C] )
  		If  *Var[C]  &  0035D000 
			Call     GetStatusFlags ( .Actor:Partner *Var[B] ) 
			If  *Var[B]  &  01000000
				%prep the doom song
				Call	 SetActorVar 	( .Actor:Self 00000001 00000001 )
			EndIf
		EndIf
		Call 	GetActorVar (.Actor:Self 00000001 *Var[C])
		If *Var[C] == 00000001
   28:  	Call     GetBattlePhase ( *Var[0] )
   %Insanee dayzees won't move unless they're doing their doom attack
   38:  	If  *Var[0]  ==  .Phase:FirstStrike
   48:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   64:  		Call     SetActorPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   80:  	Else
   88:  		Call     UseBattleCamPreset 	( 0000003F )
   98:  		Call     BattleCamTargetActor ( .Actor:Self )
   A8:  		Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   C0:  		Call     MoveBattleCamOver 	( 00000046 )
   D0:  		Set  *Flag[00]  00000000 
   E0:  		Label    00000000 
   EC:  		If  *Flag[00]  ==  00000000 
   FC:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020E )
  114:  			Set  *Flag[00]  00000001 
  124:  		Else
  12C:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020F )
  144:  			Set  *Flag[00]  00000000 
  154:  		EndIf
  15C:  		Wait     00000001 
  168:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  17C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  198:  		Sub  *Var[0]  0000000D %make them slowly approach you
  1A8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  		Call     JumpToGoal  	( .Actor:Self 0000000D 00000000 00000001 00000000 )
  1E4:  		If  *Var[0]  >  00000000 
  1F4:  			Goto     00000000 
  200:  		EndIf
  208:  		If  *Flag[00]  ==  00000000 
  218:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020E )
  230:  			Set  *Flag[00]  00000001 
  240:  		Else
  248:  			Call     SetAnimation 	( .Actor:Self 00000001 0048020F )
  260:  			Set  *Flag[00]  00000000 
  270:  		EndIf
  278:  		Wait     00000001 
  284:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  298:  		Call     SetGoalPos 	( .Actor:Self FFFFFFDD 00000000 0000000A )
  2B4:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  2D4:  	EndIf
  2DC:  	Call     SetAnimation 	( .Actor:Self 00000001 00480201 )
		EndIf
  2F4:  Wait     0000000A 
  300:  Thread
  308:  	Call     SetAnimation 	( .Actor:Self 00000001 00480206 )
  320:  	Wait     00000028 
  32C:  	Call     SetAnimation 	( .Actor:Self 00000001 00480207 )
  344:  EndThread
  34C:  Wait     00000014 
		Call 	GetActorVar (.Actor:Self 00000001 *Var[D])
		If *Var[D] == 00000001
			Call SetMusicTrack ( 00000001 .Song:UnusedFanfare 00000000 00000008 )			
		Else
  358:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:DayzeeSong )
		EndIf
  36C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  Add  *Var[1]  00000019 
  398:  Add  *Var[2]  00000002 
		Call RandInt ( 00000010 *Var[C] ) %anywhere from 5 notes to 21 notes :)
		Add *Var[C] 5
		Call 	GetActorVar (.Actor:Self 00000001 *Var[D])
		If *Var[D] == 00000001
			Set *Var[C] 11 %fixed 17 notes for doom attack
		EndIf
  3A8:  Loop     *Var[C]
  3B4:  	Call     RandInt     	( 0000001E *Var[3] )
  3C8:  	Sub  *Var[3]  0000000F 
  3D8:  	Add  *Var[3]  *Var[0] 
  3E8:  	Call     PlayEffect  	( ~FX:MusicNote:Left *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  42C:  	Wait     0000000A 
  438:  EndLoop
  440:  Call     SetAnimation 	( .Actor:Self 00000001 00480201 )
  458:  Wait     0000000A %you need fast reflexes to get the guard
  464:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
		Call 	GetActorVar (.Actor:Self 00000001 *Var[D])
		If *Var[D] == 00000001
			Set *Var[0] 0 %luck won't save you!
		EndIf
  488:  Switch  *Var[0] 
  494:  	CaseOR  ==  00000006 
  4A0:  	CaseOR  ==  00000005 
  4AC:  		Set  *Var[A]  *Var[0] 
  4BC:  		If  *Var[A]  ==  00000005 
  4CC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4F0:  		EndIf
  4F8:  		Call     UseBattleCamPreset 	( 00000002 )
  508:  		Wait     0000000F 
  514:  		Call     YieldTurn   	( )
  520:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		ExecWait $Script_Insanee_8021D94C 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  5C8:  Call     SetGoalToTarget 	( .Actor:Self )
  5D8:  Wait     00000002 
		%chooses between 3 attacks
		%the signature 5-turn sleep (player not stunned)
		%a 3 partner damage attack (player stunned, partner not stunned)
		%the ultimate insta-death attack (both stunned)
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[D] )
		If *Var[D] == 1
			Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001664 000000FF 00000020 ) %255 damage (always capped to 99 unless you have last stand and cloud 9) (rip mario)
			Wait	 00000004
			Call     SetTargetActor ( .Actor:Self .Actor:Partner )
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001664 000000FF 00000020 ) %no survivors
			%Call	 $KillMario ( ) %rip mario (1989-2020)
		Else
			Call     GetStatusFlags ( .Actor:Player *Var[C] )
			If  *Var[C]  !&  0035D000 
				Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001564 00000005 00000020 ) %100% sleep for 5 turns!
			Else
				Call     SetTargetActor ( .Actor:Self .Actor:Partner )
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001364 00000003 00000020 ) 
			EndIf
		EndIf
  60C:  Switch  *Var[F] 
  618:  	CaseOR  ==  00000000 
  624:  	CaseOR  ==  00000002 
  630:  		Call     UseBattleCamPreset 	( 00000002 )
  640:  		Call     MoveBattleCamOver 	( 0000000A )
  650:  		Wait     00000014 
  65C:  		Call     YieldTurn   	( )
  668:  		ExecWait $Script_Insanee_8021D94C 
  674:  	EndCaseGroup
  67C:  EndSwitch
  684:  Call     UseIdleAnimation 	( .Actor:Self .True )
  698:  Return
  6A0:  End
%/

%no escape
/%
#new:Script $Script_Insanee_RunAway
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     UseBattleCamPreset 	( 00000013 )
   24:  Call     SetBattleCamZoom  	( 0000012C )
   34:  Call     SetBattleCamOffsetZ 	( 0000001E )
   44:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   60:  Sub  *Var[0]  00000014 
   70:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
   88:  Call     MoveBattleCamOver 	( 0000001E )
   98:  Call     SetActorYaw 	( .Actor:Self 000000B4 )
   AC:  Call     SetAnimation 	( .Actor:Self 00000001 00480203 )
   C4:  Wait     0000000A 
   D0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   EC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[1.0] )
  100:  Sub  *Var[0]  00000014 
  110:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  12C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  144:  Wait     00000014 
  150:  Call     UseBattleCamPreset 	( 00000002 )
  160:  Call     EnableActorBlur 	( .Actor:Self 00000001 )
  174:  Call     SetAnimation 	( .Actor:Self 00000001 00480204 )
  18C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
  1A0:  Add  *Var[0]  000000C8 
  1B0:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  1E4:  Call     EnableActorBlur 	( .Actor:Self 00000000 )
  1F8:  Call     SetBattleFlagBits 	( 00040000 .True )
  20C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  220:  Call     RemoveActor 	( .Actor:Self )
  230:  Return
  238:  End
%/

#new:Script $Script_TakeTurn_Insanee %$Script_TakeTurn_8021E7BC
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	ExecWait $Script_Insanee_Sing 
   2C:  	Return
   34:  EndIf
		/%
   3C:  Call     GetActorHP  	( .Actor:Self *Var[0] )
   50:  Call     RandInt     	( 00000064 *Var[1] )
   64:  Switch  *Var[0] 
   70:  	Case  ==  00000001 
   7C:  		If  *Var[1]  <  0000000C %50 -> 12 
   8C:  			ExecWait $Script_Insanee_RunAway 
   98:  			Return
   A0:  		EndIf
   A8:  	Case  ==  00000002 
   B4:  		If  *Var[1]  <  00000008 %28 -> 8 
   C4:  			ExecWait $Script_Insanee_RunAway 
   D0:  			Return
   D8:  		EndIf
   E0:  	Case  ==  00000003 
   EC:  		If  *Var[1]  <  00000004 %14 -> 4
   FC:  			ExecWait $Script_Insanee_RunAway 
  108:  			Return
  110:  		EndIf
  150:  EndSwitch
		%/
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[2] )		%Only use the curse song once (Note that with multiple of them, they will all curse sing at the same time)
		If *Var[2] != 1
			Call     EnemyTestTarget ( .Actor:Self *Var[F] 10000000 00000000 00000001 00000010 ) %if you try to hide, it will use the curse song
			If *Var[F] == 6`
				ExecWait $Script_Insanee_CurseSing
				Call	SetActorVar ( .Actor:Self 00000001 00000001 )
				Return
			EndIf
			Call     GetPlayerHP 	( *Var[1] )
			If *Var[1] < 15`
				ExecWait $Script_Insanee_CurseSing
				Call	SetActorVar ( .Actor:Self 00000001 00000001 )
				Return
			EndIf
		EndIf
  158:  ExecWait $Script_Insanee_Sing
  164:  Return
  16C:  End
}