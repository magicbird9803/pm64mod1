%stats
%30 hp, 5 atk (x infinity)
%same def as regular koopatrol, but immunity to shock

#new:Actor $GoldKoopatrol
{
% stats
[Index]        DEb 
[Level]        32`b %boosted level since they're stronger 
[MaxHP]        25`b 
[Coins]        10`b	%gold armor is expensive 
[Flags]       00000000 
[StatusTable] $StatusTable_GoldKoopatrol
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_GoldKoopatrol 
[Script]      $Script_Init_GoldKoopatrol
% move effectiveness
[Escape]       60`b % they can't chase you that quickly in their heavy armor 
[Item]         60`b 
[AirLift]      15`b % gold is really heavy 
[Hurricane]    10`b % Bow's "Spook" as well
[UpAndAway]    15`b 
[PowerBounce]  85`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         32`b  42`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -15`b  32`b % dx dy
[StatusIcon]    5`b  32`b % dx dy
}

#new:Function $Function_802180D0_GK
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 20 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S0, 10 (SP)
   1C:  LW        S0, C (S1)
   20:  LW        A1, 0 (S0)
   24:  JAL       ~Func:get_variable
   28:  ADDIU     S0, S0, 4
   2C:  LW        A1, 0 (S0)
   30:  ADDIU     S0, S0, 4
   34:  DADDU     A0, S1, R0
   38:  JAL       ~Func:get_variable
   3C:  DADDU     S3, V0, R0
   40:  LW        A1, 0 (S0)
   44:  ADDIU     S0, S0, 4
   48:  DADDU     A0, S1, R0
   4C:  JAL       ~Func:get_variable
   50:  DADDU     S2, V0, R0
   54:  DADDU     A0, S1, R0
   58:  LW        A1, 0 (S0)
   5C:  JAL       ~Func:get_variable
   60:  DADDU     S0, V0, R0
   64:  LW        A0, 148 (S1)
   68:  JAL       ~Func:get_actor
   6C:  DADDU     S1, V0, R0
   70:  DADDU     V1, V0, R0
   74:  LW        V0, 8 (V1)
   78:  LBU       V0, 24 (V0)
   7C:  LW        A0, 8 (V1)
   80:  SUBU      S3, S3, V0
   84:  SB        S3, 194 (V1)
   88:  LBU       V0, 25 (A0)
   8C:  SUBU      S2, S2, V0
   90:  SB        S2, 195 (V1)
   94:  LBU       V0, 26 (A0)
   98:  SUBU      S0, S0, V0
   9C:  SB        S0, 196 (V1)
   A0:  LBU       A0, 27 (A0)
   A4:  SUBU      S1, S1, A0
   A8:  SB        S1, 197 (V1)
   AC:  LW        RA, 20 (SP)
   B0:  LW        S3, 1C (SP)
   B4:  LW        S2, 18 (SP)
   B8:  LW        S1, 14 (SP)
   BC:  LW        S0, 10 (SP)
   C0:  ADDIU     V0, R0, 2
   C4:  JR        RA
   C8:  ADDIU     SP, SP, 28
}

#new:Function $Function_8021819C_GK
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:IdleAnimations $IdleAnimations_GoldKoopatrol %$IdleAnimations_80220320_GK
{
.Status:Normal    00590101
.Status:Stone     00590100
.Status:Sleep     00590111
.Status:Poison    00590101
.Status:Stop      00590100
.Status:Static    00590101
.Status:Paralyze  00590100
.Status:Dizzy     00590113
.Status:Fear      00590113
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoldKoopatrolWalking %$IdleAnimations_8022036C_GK
{
.Status:Normal    00590103
.Status:Stone     00590100
.Status:Sleep     00590111
.Status:Poison    00590103
.Status:Stop      00590100
.Status:Static    00590103
.Status:Paralyze  00590100
.Status:Dizzy     00590113
.Status:Fear      00590113
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoldKoopatrolFlipped %$IdleAnimations_802203B8_GK
{
.Status:Normal    0059010F
.Status:Stone     00590110
.Status:Sleep     00590112
.Status:Poison    0059010F
.Status:Stop      00590110
.Status:Static    0059010F
.Status:Paralyze  00590110
.Status:Dizzy     00590114
.Status:Fear      00590114
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoldKoopatrolCharged %$IdleAnimations_80220404_GK
{
.Status:Normal    00590106
.Status:Stone     00590106
.Status:Sleep     00590106
.Status:Poison    00590106
.Status:Stop      00590106
.Status:Static    00590106
.Status:Paralyze  00590106
.Status:Dizzy     00590106
.Status:Fear      00590106
.Status:End
}

#new:DefenseTable $DefenseTable_GoldKoopatrol
{
.Element:Normal 00000003
.Element:Shock  00000063 %shock immune (because gold is a good conductor)
.Element:End
}

#new:DefenseTable $DefenseTable_GoldKoopatrolFlipped
{
.Element:Normal 00000001
.Element:Shock  00000063 %shock immune
.Element:End
}

#new:DefenseTable $DefenseTable_GoldKoopatrolCharged
{
.Element:Normal 00000003
.Element:Shock  00000063 %shock immune
.Element:End
}

#new:StatusTable $StatusTable_GoldKoopatrol %resistant to most statuses
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      50`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      10`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink     50`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -1`
.Status:End
}

#new:StatusTable $StatusTable_GoldKoopatrolCharged
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_GoldKoopatrol
{
00800000 01000000 002000FF $IdleAnimations_GoldKoopatrol $DefenseTable_GoldKoopatrol 00001010 00000000 00F40000 00000000 
}

#new:Actor $GoldKoopatrolSummoned
{
% stats
[Index]        4Cb 
[Level]        32`b 
[MaxHP]        25`b 
[Coins]         2`b 
[Flags]       00000000 
[StatusTable] $StatusTable_GoldKoopatrol
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_GoldKoopatrol
[Script]      $Script_Init_GoldKoopatrol 
% move effectiveness
[Escape]       60`b % they can't chase you that quickly in their heavy armor 
[Item]         60`b 
[AirLift]      15`b % gold is really heavy 
[Hurricane]    10`b % Bow's "Spook" as well
[UpAndAway]    15`b 
[PowerBounce]  85`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         32`b  42`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -15`b  32`b % dx dy
[StatusIcon]    5`b  32`b % dx dy
}

#new:Script $Script_Init_GoldKoopatrol
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_GoldKoopatrol )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_GoldKoopatrol )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_GoldKoopatrol )
   3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_GoldKoopatrol )
   50:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   68:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   80:  Call     GetIndexFromHome 	( .Actor:Self *Var[0] )
   94:  Call     SetActorVar 	( .Actor:Self 00000002 *Var[0] )
		Call     SetActorVar 	( .Actor:Self 0000000A 00000000 ) %a hit counter
   AC:  Switch  *Var[0] 
   B8:  	Case  ==  00000000 
   C4:  		Call     SetBattleVar 	( 00000004 00000000 )
   D8:  	Case  ==  00000001 
   E4:  		Call     SetBattleVar 	( 00000005 00000000 )
   F8:  	Case  ==  00000002 
  104:  		Call     SetBattleVar 	( 00000006 00000000 )
  118:  	Case  ==  00000003 
  124:  		Call     SetBattleVar 	( 00000007 00000000 )
  138:  EndSwitch
  140:  Return
  148:  End
}

#new:Script $Script_NextTurn_GoldKoopatrol
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  Switch  *Var[0] 
   1C:  	Case  ==  .Phase:PlayerBegin
   28:  	Case  ==  .Phase:EnemyBegin
   34:  	Case  ==  .Phase:EnemyEnd
   40:  		Call     SetBattleVar 	( 00000001 00000000 )
   54:  EndSwitch
   5C:  Return
   64:  End
}

#new:Script $Script_802207D4_GK
{
    0:  Switch  *Var[0] 
    C:  	Case  ==  00000000 
   18:  		If  *Var[1]  &  00041000 
   28:  			Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 0000000F )
   44:  			Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
   60:  			Call     $Function_802180D0_GK ( FFFFFFF6 00000014 0000000A 00000014 )
   7C:  		Else
   84:  			Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFC 00000020 )
   A0:  			Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
   BC:  			Call     $Function_802180D0_GK ( FFFFFFF1 00000020 00000005 00000020 )
   D8:  		EndIf
   E0:  	Case  ==  00000001 
   EC:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 0000000F )
  108:  		Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
  124:  		Call     $Function_802180D0_GK ( FFFFFFF6 00000014 0000000A 00000014 )
  140:  	Case  ==  00000002 
  14C:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFC 00000014 )
  168:  		Call     8027D4C8 ( FFFFFF81 00000001 00000000 FFFFFFFA )
  184:  		Call     $Function_802180D0_GK ( FFFFFFF1 00000016 00000005 00000016 )
  1A0:  EndSwitch
  1A8:  Return
  1B0:  End
}

#new:Script $Script_Idle_GoldKoopatrol %add some sparkle effect, but the fact that the koopatrol is walking complicates things
{
    0:  Label    00000000 
    C:  Call     RandInt     	( 00000050 *Var[A] )
   20:  Add  *Var[A]  00000050 
		Set *Var[D] 0
   30:  Loop     *Var[A] 
   3C:  	Label    00000001 
			Add *Var[D] 1
			Mod *Var[D] F
			If *Var[D] == 0
				Call     GetActorPos 	( .Actor:Self *Var[6] *Var[7] *Var[8] )
				Add  *Var[7]  00000013 
				Sub  *Var[8]  00000002 
				Call     PlayEffect  	( 00000011 00000002 *Var[6] *Var[7] *Var[8] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
				%copied from amazy dayzee idle script, but it isn't in the effect enum		
			EndIf
   48:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   60:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
   74:  	ExecWait $Script_802207D4_GK 
   80:  	If  *Var[0]  ==  00000001 
   90:  		Wait     00000001 
   9C:  		Goto     00000001 
   A8:  	EndIf
   B0:  	If  *Var[1]  &  0235D000 
   C0:  		Wait     00000001 
   CC:  		Goto     00000001 
   D8:  	EndIf
   E0:  	Wait     00000001 
   EC:  EndLoop
   F4:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  110:  Add  *Var[0]  00000005 
  120:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
  134:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolWalking )
  14C:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  168:  Call     8027A264 ( FFFFFF81 00000000 )
  17C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  194:  Switch  *Var[0] 
  1A0:  	Case  ==  00000000 
  1AC:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  1C4:  	Case  ==  00000001 
  1D0:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolFlipped )
  1E8:  EndSwitch
		%Set *Var[D] 0
  1F0:  Loop     00000014 
  1FC:  	Label    00000002 
			Add *Var[D] 1
			Mod *Var[D] F
			If *Var[D] == 0
				Call     GetActorPos 	( .Actor:Self *Var[6] *Var[7] *Var[8] )
				Add  *Var[7]  00000013 
				Sub  *Var[8]  00000002 
				Call     PlayEffect  	( 00000011 00000002 *Var[6] *Var[7] *Var[8] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
				%copied from amazy dayzee idle script, but it isn't in the effect enum		
			EndIf
  208:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  220:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  234:  	ExecWait $Script_802207D4_GK 
  240:  	If  *Var[0]  ==  00000001 
  250:  		Wait     00000001 
  25C:  		Goto     00000002 
  268:  	EndIf
  270:  	If  *Var[1]  &  0235D000 
  280:  		Wait     00000001 
  28C:  		Goto     00000002 
  298:  	EndIf
  2A0:  	Wait     00000001 
  2AC:  EndLoop
  2B4:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2D0:  Sub  *Var[0]  00000005 
  2E0:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
  2F4:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolWalking )
  30C:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  328:  Call     8027A264 ( FFFFFF81 00000000 )
  33C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  354:  Switch  *Var[0] 
  360:  	Case  ==  00000000 
  36C:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  384:  	Case  ==  00000001 
  390:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolFlipped )
  3A8:  EndSwitch
		%Set *Var[D] 0
  3B0:  Loop     00000050 
  3BC:  	Label    00000003 
			Add *Var[D] 1
			Mod *Var[D] F
			If *Var[D] == 0
				Call     GetActorPos 	( .Actor:Self *Var[6] *Var[7] *Var[8] )
				Add  *Var[7]  00000013 
				Sub  *Var[8]  00000002 
				Call     PlayEffect  	( 00000011 00000002 *Var[6] *Var[7] *Var[8] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
				%copied from amazy dayzee idle script, but it isn't in the effect enum		
			EndIf
  3C8:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  3E0:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  3F4:  	ExecWait $Script_802207D4_GK 
  400:  	If  *Var[0]  ==  00000001 
  410:  		Wait     00000001 
  41C:  		Goto     00000003 
  428:  	EndIf
  430:  	If  *Var[1]  &  0235D000 
  440:  		Wait     00000001 
  44C:  		Goto     00000003 
  458:  	EndIf
  460:  	Wait     00000001 
  46C:  EndLoop
  474:  Goto     00000000 
  480:  Return
  488:  End
}

#new:IntTable $IntTable_80220E1C_GK
{
00000009 00000010 00000016 0000001A 0000001E 00000020 00000021 00000020 
0000001E 0000001A 00000016 00000010 00000009 00000000 00000004 00000006 
00000007 00000006 00000004 00000000 00000002 00000000 
}

#new:Script $Script_HandleEvent_GoldKoopatrol
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorYaw 	( .Actor:Self 00000000 )
   3C:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   50:  Switch  *Var[0] 
   5C:  	CaseOR  ==  .Event:HitCombo
   68:  	CaseOR  ==  .Event:Hit
   74:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   8C:  		Switch  *Var[0] 
   98:  			CaseOR  ==  00000000 
   A4:  			CaseOR  ==  00000001 
   B0:  				SetConst  *Var[0]  00000001 
   C0:  				SetConst  *Var[1]  0059010B 
   D0:  				ExecWait DoNormalHit 
   DC:  			EndCaseGroup
   E4:  			Case  ==  00000002 
   F0:  				SetConst  *Var[0]  00000001 
  100:  				SetConst  *Var[1]  00590106 
  110:  				ExecWait DoNormalHit 
  11C:  		EndSwitch
  124:  	EndCaseGroup
  12C:  	Case  ==  .Event:BurnHit
  138:  		SetConst  *Var[0]  00000001 
  148:  		SetConst  *Var[1]  0059010C 
  158:  		SetConst  *Var[2]  0059010D 
  168:  		ExecWait DoBurnHit 
  174:  	Case  ==  .Event:BurnDeath
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  0059010C 
  1A0:  		SetConst  *Var[2]  0059010D 
  1B0:  		ExecWait DoBurnHit 
  1BC:  		SetConst  *Var[0]  00000001 
  1CC:  		SetConst  *Var[1]  0059010D 
  1DC:  		ExecWait DoDeath 
  1E8:  		Return
  1F0:  	Case  ==  .Event:SpinSmashHit
  1FC:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  214:  		Switch  *Var[0] 
  220:  			CaseOR  ==  00000000 
  22C:  			CaseOR  ==  00000001 
  238:  				SetConst  *Var[0]  00000001 
  248:  				SetConst  *Var[1]  0059010B 
  258:  				ExecWait 8029B998 
  264:  			EndCaseGroup
  26C:  			Case  ==  00000002 
  278:  				SetConst  *Var[0]  00000001 
  288:  				SetConst  *Var[1]  00590106 
  298:  				ExecWait 8029B998 
  2A4:  		EndSwitch
  2AC:  	Case  ==  .Event:SpinSmashDeath
  2B8:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  2D0:  		Switch  *Var[0] 
  2DC:  			CaseOR  ==  00000000 
  2E8:  			CaseOR  ==  00000001 
  2F4:  				SetConst  *Var[0]  00000001 
  304:  				SetConst  *Var[1]  0059010B 
  314:  				ExecWait 8029B998 
  320:  				SetConst  *Var[0]  00000001 
  330:  				SetConst  *Var[1]  0059010B 
  340:  				ExecWait DoDeath 
  34C:  			EndCaseGroup
  354:  			Case  ==  00000002 
  360:  				SetConst  *Var[0]  00000001 
  370:  				SetConst  *Var[1]  00590106 
  380:  				ExecWait 8029B998 
  38C:  				Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  3A4:  				Wait     00000005 
  3B0:  				SetConst  *Var[0]  00000001 
  3C0:  				SetConst  *Var[1]  0059010B 
  3D0:  				ExecWait DoDeath 
  3DC:  		EndSwitch
  3E4:  	Case  ==  .Event:FlipTrigger
  3F0:  		Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
  408:  		Call     SetActorVar 	( .Actor:Self 00000009 00000001 )
  420:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrolFlipped )
  438:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolFlipped )
  450:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 0000000F )
  46C:  		Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
  488:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00000010 .False )
  4A4:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .True )
  4BC:  		Call     SetAnimation 	( .Actor:Self 00000001 0059010B )
  4D4:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  4F0:  		Thread
  4F8:  			Wait     00000004 
  504:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000001E )
  520:  			Wait     00000001 
  52C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  548:  			Wait     00000001 
  554:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFE2 )
  570:  			Wait     00000001 
  57C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFC4 )
  598:  			Wait     00000001 
  5A4:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFB5 )
  5C0:  			Wait     00000001 
  5CC:  		EndThread
  5D4:  		UseIntBuffer $IntTable_80220E1C_GK 
  5E0:  		Loop     00000016 
  5EC:  			Get1Int  *Var[0] 
  5F8:  			Call     SetActorDispOffset ( FFFFFF81 00000000 *Var[0] 00000000 )
  614:  			Wait     00000001 
  620:  		EndLoop
  628:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  644:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  660:  		Call     SetAnimation 	( .Actor:Self 00000001 0059010F )
  678:  	Case  ==  .Event:ShockHit
  684:  		SetConst  *Var[0]  00000001 
  694:  		SetConst  *Var[1]  0059010B 
  6A4:  		ExecWait DoShockHit 
  6B0:  		SetConst  *Var[0]  00000001 
  6C0:  		SetConst  *Var[1]  0059010B 
  6D0:  		ExecWait DoJumpBack 
  6DC:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  6FC:  		SetConst  *Var[0]  00000001 
  70C:  		SetConst  *Var[1]  00590104 
  71C:  		ExecWait DoReturnHome 
  728:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  73C:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  75C:  	Case  ==  .Event:ShockDeath
  768:  		SetConst  *Var[0]  00000001 
  778:  		SetConst  *Var[1]  0059010B 
  788:  		ExecWait DoShockHit 
  794:  		SetConst  *Var[0]  00000001 
  7A4:  		SetConst  *Var[1]  0059010B 
  7B4:  		ExecWait DoDeath 
  7C0:  		Return
  7C8:  	Case  ==  .Event:StarBeam
  7D4:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  7EC:  		If  *Var[0]  ==  00000002 
  7FC:  			Call     SetStatusTable ( .Actor:Self $StatusTable_GoldKoopatrol )
  810:  			Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrol )
  828:  			Call     SetPartEventBits 	( .Actor:Self 00000001 00001000 .True )
  844:  			Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  85C:  			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  874:  			Call     GetStatusFlags ( .Actor:Self *Var[A] )
  888:  			If  *Var[A]  !&  18000000 
  898:  				Call     EnableActorGlow 	( .Actor:Self .False )
  8AC:  			EndIf
  8B4:  			Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  8D0:  			SetConst  *Var[0]  00000001 
  8E0:  			SetConst  *Var[1]  00590108 
  8F0:  			ExecWait DoImmune 
  8FC:  		EndIf
  904:  	CaseOR  ==  00000017
  910:  	CaseOR  ==  .Event:Immune
  91C:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  934:  		Switch  *Var[0] 
  940:  			Case  ==  00000000 
  94C:  				SetConst  *Var[0]  00000001 
  95C:  				SetConst  *Var[1]  00590107 
  96C:  				ExecWait DoImmune 
  978:  				Call     GetStatusFlags ( .Actor:Self *Var[0] )
  98C:  				If  *Var[0]  !&  0035D000 
  99C:  					Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  9B4:  					Wait     0000000A 
  9C0:  				EndIf
  9C8:  			Case  ==  00000001 
  9D4:  				SetConst  *Var[0]  00000001 
  9E4:  				SetConst  *Var[1]  0059010F 
  9F4:  				ExecWait DoImmune 
  A00:  			Case  ==  00000002 
  A0C:  				SetConst  *Var[0]  00000001 
  A1C:  				SetConst  *Var[1]  00590106 
  A2C:  				ExecWait DoImmune 
  A38:  		EndSwitch
  A40:  	EndCaseGroup
  A48:  	Case  ==  .Event:SpikeTaunt
  A54:  		Wait     0000000A 
  A60:  		Set  *Flag[00]  00000000 
  A70:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A8C:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  AA0:  		If  *Var[3]  &  00080000 
  AB0:  			Add  *Var[1]  00000010 
  AC0:  			Set  *Flag[00]  00000001 
  AD0:  		EndIf
  AD8:  		If  *Var[3]  &  00040000 
  AE8:  			Add  *Var[0]  FFFFFFF2 
  AF8:  			Add  *Var[1]  00000014 
  B08:  			Set  *Flag[00]  00000001 
  B18:  		EndIf
  B20:  		If  *Var[3]  &  00001000 
  B30:  			Add  *Var[0]  FFFFFFF2 
  B40:  			Add  *Var[1]  00000014 
  B50:  			Set  *Flag[00]  00000001 
  B60:  		EndIf
  B68:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[A] )
  B80:  		If  *Var[A]  ==  00000002 
  B90:  			Add  *Var[1]  00000017 
  BA0:  			Set  *Flag[00]  00000001 
  BB0:  		EndIf
  BB8:  		If  *Flag[00]  ==  00000000 
  BC8:  			Add  *Var[1]  0000002A 
  BD8:  		EndIf
  BE0:  		Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  C24:  		Wait     00000014 
  C30:  	Case  ==  .Event:Death
  C3C:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  C54:  		Switch  *Var[0] 
  C60:  			CaseOR  ==  00000000 
  C6C:  			CaseOR  ==  00000001 
  C78:  				SetConst  *Var[0]  00000001 
  C88:  				SetConst  *Var[1]  0059010B 
  C98:  				ExecWait DoNormalHit 
  CA4:  				Wait     0000000A 
  CB0:  				SetConst  *Var[0]  00000001 
  CC0:  				SetConst  *Var[1]  0059010B 
  CD0:  				ExecWait DoDeath 
  CDC:  				Return
  CE4:  			EndCaseGroup
  CEC:  			Case  ==  00000002 
  CF8:  				SetConst  *Var[0]  00000001 
  D08:  				SetConst  *Var[1]  00590106 
  D18:  				ExecWait DoNormalHit 
  D24:  				Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  D3C:  				Wait     00000005 
  D48:  				SetConst  *Var[0]  00000001 
  D58:  				SetConst  *Var[1]  0059010B 
  D68:  				ExecWait DoDeath 
  D74:  				Return
  D7C:  		EndSwitch
  D84:  	Case  ==  .Event:RecoverStatus
  D90:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  DA8:  		Switch  *Var[0] 
  DB4:  			Case  ==  00000000 
  DC0:  				SetConst  *Var[0]  00000001 
  DD0:  				SetConst  *Var[1]  00590101 
  DE0:  				ExecWait DoRecover 
  DEC:  			Case  ==  00000001 
  DF8:  				SetConst  *Var[0]  00000001 
  E08:  				SetConst  *Var[1]  0059010F 
  E18:  				ExecWait DoImmune 
  E24:  			Case  ==  00000002 
  E30:  				SetConst  *Var[0]  00000001 
  E40:  				SetConst  *Var[1]  00590106 
  E50:  				ExecWait DoRecover 
  E5C:  		EndSwitch
  E64:  	Case  ==  .Event:ScareAway
  E70:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  E88:  		Switch  *Var[0] 
  E94:  			CaseOR  ==  00000000 
  EA0:  			CaseOR  ==  00000002 
  EAC:  				SetConst  *Var[0]  00000001 
  EBC:  				SetConst  *Var[1]  00590104 
  ECC:  				SetConst  *Var[2]  0059010B 
  EDC:  				ExecWait DoScareAway 
  EE8:  				Return
  EF0:  			EndCaseGroup
  EF8:  			Case  ==  00000001 
  F04:  				SetConst  *Var[0]  00000001 
  F14:  				SetConst  *Var[1]  0059010F 
  F24:  				ExecWait DoImmune 
  F30:  		EndSwitch
  F38:  	Case  ==  .Event:BeginAirLift
  F44:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  F5C:  		Switch  *Var[0] 
  F68:  			Case  ==  00000000 
  F74:  				SetConst  *Var[0]  00000001 
  F84:  				SetConst  *Var[1]  00590116 
  F94:  				ExecWait DoAirLift 
  FA0:  			Case  ==  00000001 
  FAC:  				SetConst  *Var[0]  00000001 
  FBC:  				SetConst  *Var[1]  0059010F 
  FCC:  				ExecWait DoAirLift 
  FD8:  			Case  ==  00000002 
  FE4:  				SetConst  *Var[0]  00000001 
  FF4:  				SetConst  *Var[1]  0059010F 
 1004:  				ExecWait DoAirLift 
 1010:  		EndSwitch
 1018:  	Case  ==  .Event:BlowAway
 1024:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
 103C:  		Switch  *Var[0] 
 1048:  			Case  ==  00000000 
 1054:  				SetConst  *Var[0]  00000001 
 1064:  				SetConst  *Var[1]  00590116 
 1074:  			Case  ==  00000001 
 1080:  				SetConst  *Var[0]  00000001 
 1090:  				SetConst  *Var[1]  0059010F 
 10A0:  			Case  ==  00000002 
 10AC:  				SetConst  *Var[0]  00000001 
 10BC:  				SetConst  *Var[1]  0059010F 
 10CC:  		EndSwitch
 10D4:  		ExecWait DoBlowAway 
 10E0:  		Return
 10E8:  	Case  ==  .Event:AirLiftFailed
 10F4:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
 110C:  		Switch  *Var[0] 
 1118:  			Case  ==  00000000 
 1124:  				SetConst  *Var[0]  00000001 
 1134:  				SetConst  *Var[1]  00590101 
 1144:  			Case  ==  00000001 
 1150:  				SetConst  *Var[0]  00000001 
 1160:  				SetConst  *Var[1]  0059010F 
 1170:  			Case  ==  00000002 
 117C:  				SetConst  *Var[0]  00000001 
 118C:  				SetConst  *Var[1]  0059010F 
 119C:  		EndSwitch
 11A4:  		ExecWait DoImmune 
 11B0:  EndSwitch
 11B8:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
 11CC:  Call     UseIdleAnimation 	( .Actor:Self .True )
 11E0:  Return
 11E8:  End
}

#new:Script $Script_ShellToss_GK
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *Var[0] )
   4C:  If  *Var[0]  ==  .Phase:FirstStrike
   5C:  	Call     SetAnimation 	( .Actor:Self 00000001 00590106 )
   74:  Else
   7C:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   94:  	If  *Var[0]  ==  00000001 
   A4:  		Call     GetActorVar 	( .Actor:Self 00000009 *Var[0] )
   BC:  		Sub  *Var[0]  00000010 %very hard to keep flipped
   CC:  		If  *Var[0]  >  00000000 
   DC:  			Call     SetActorVar 	( .Actor:Self 00000009 *Var[0] )
   F4:  			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  110:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[3.0] )
  128:  			Wait     0000000F 
  134:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  14C:  			Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  164:  		Else
  16C:  			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  188:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[3.0] )
  1A0:  			Wait     0000000A 
  1AC:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  1C4:  			Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  1DC:  			Call     SetActorSounds ( FFFFFF81 00000002 00000000 00000000 )
  1F8:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:Jump )
  20C:  			Call     SetAnimation 	( .Actor:Self 00000001 0059010F )
  224:  			Set  *Var[0]  00000000 
  234:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  250:  			Thread
  258:  				Loop     00000005 
  264:  					Add  *Var[0]  0000000F 
  274:  					Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  290:  					Wait     00000001 
  29C:  				EndLoop
  2A4:  			EndThread
  2AC:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C8:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2E4:  			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  2F8:  			Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  318:  			Call     PlaySoundAtActor 	( .Actor:Self 000020BA )
  32C:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  348:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  364:  			Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  380:  			Call     SetAnimation 	( .Actor:Self 00000001 00590101 )
  398:  			Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  3B0:  			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  3C8:  			Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrol )
  3E0:  			Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFC 00000020 )
  3FC:  			Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
  418:  			Call     SetPartEventBits 	( .Actor:Self 00000001 00000010 .True )
  434:  			Call     SetActorFlagBits 	( .Actor:Self 00000400 .False )
  					%Increase attack by 2 :D
					Thread
						Call  8026BF48      ( 00000001 )
						Call  BoostAttack   ( .Actor:Self 00000002 )	%Golden koopatrols get a +2
						Call  8026BF48      ( 00000000 )
					EndThread
					Wait  30`
					%Call  WaitForBuffDone ( )
					%
  44C:  		EndIf
  484:  	EndIf
  48C:  	Call     UseBattleCamPreset 	( 0000003F )
  49C:  	Call     BattleCamTargetActor ( .Actor:Self )
  4AC:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  4C4:  	Wait     0000000A 
  4D0:  	Call     SetAnimation 	( .Actor:Self 00000001 00590107 )
  4E8:  	Wait     0000000A 
  4F4:  	Thread
  4FC:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  518:  		Add  *Var[1]  00000004 
  528:  		Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  56C:  		Wait     00000003 
  578:  		Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  5BC:  		Wait     00000002 
  5C8:  		Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  60C:  	EndThread
  614:  	Call     PlaySoundAtActor 	( .Actor:Self 00002021 )
  628:  	Call     SetAnimation 	( .Actor:Self 00000001 00590106 )
  640:  	Wait     0000000A 
  64C:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  664:  EndIf
  66C:  Call     PlaySoundAtActor 	( .Actor:Self 000020D3 )
  680:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  69C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000004 00000010 )
  6C0:  Switch  *Var[0] 
  6CC:  	CaseOR  ==  00000006 
  6D8:  	CaseOR  ==  00000005 
  6E4:  		Set  *Var[A]  *Var[0] 
  6F4:  		Call     SetGoalToTarget 	( .Actor:Self )
  704:  		Call     AddGoalPos 	( .Actor:Self FFFFFFD8 00000000 00000000 )
  720:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] ) %16 -> 15 heavier (BUT regular koopatrols are way faster now (22 speed))
  734:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  74C:  		Call     GetBattlePhase ( *Var[0] )
  75C:  		If  *Var[0]  ==  .Phase:FirstStrike
  76C:  			Call     UseBattleCamPreset 	( 00000005 )
  77C:  			Call     SetBattleCamZoom  	( 0000012C )
  78C:  			Call     SetBattleCamOffsetZ 	( 00000014 )
  79C:  			Call     MoveBattleCamOver 	( 0000000A )
  7AC:  			Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  7C4:  		EndIf
  7CC:  		If  *Var[A]  ==  00000005 
  7DC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  800:  		EndIf
  808:  		Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  820:  		Wait     00000008 
  82C:  		Call     8026F6EC ( FFFFFF81 )
  83C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  850:  		Wait     00000004 
  85C:  		Call     SetAnimation 	( .Actor:Self 00000001 00590116 )
  874:  		Wait     00000001 
  880:  		Call     SetAnimation 	( .Actor:Self 00000001 00590116 )
  898:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8B4:  		Add  *Var[1]  00000014 
  8C4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8E0:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
  8F4:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  914:  		Call     SetAnimation 	( .Actor:Self 00000001 00590116 )
  92C:  		Wait     00000006 
  938:  		Sub  *Var[1]  00000014 
  948:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  964:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  984:  		Call     UseBattleCamPreset 	( 00000002 )
  994:  		Call     YieldTurn   	( )
  9A0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  9B4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  9D0:  		Call     SetAnimation 	( .Actor:Self 00000001 00590116 )
  9E8:  		Call     SetGoalToHome 	( .Actor:Self )
  9F8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  A0C:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  A24:  		Call     SetAnimation 	( .Actor:Self 00000001 00590101 )
  A3C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  A54:  		Call     8026B438 ( FFFFFF81 00000001 00000000 )
  A6C:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  A80:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  A94:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  AA8:  		Return
  AB0:  	EndCaseGroup
  AB8:  EndSwitch
  AC0:  Call     SetGoalToTarget 	( .Actor:Self )
  AD0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] ) %16 -> 15 heavier (BUT regular koopatrols are way faster now (22 speed))
		Call     SetActorVar (.Actor:Self 0000000A 00000000 ) %reset hit count
		Set *Var[B] *Var[0] %get the hit result (if mario is stone, do not hit infinitely)
		Label    00000000  
		Call     SetGoalToTarget 	( .Actor:Self )
		Call	 GetActorVar (.Actor:Self 0000000A *Var[C] )
		If *Var[C] != 0
			Call     PlaySoundAtActor 	( .Actor:Self 00002021 )
			Call     SetAnimation 	( .Actor:Self 00000001 00590106 )
			Wait     0000000A 
			Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
			Call     PlaySoundAtActor 	( .Actor:Self 000020D3 )
			Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
			Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] ) %16 -> 15 heavier (BUT regular koopatrols are way faster now (22 speed))
		EndIf
  AE4:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  AFC:  Call     8026F6EC ( FFFFFF81 )
  B0C:  Wait     00000002 
  B18:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000006 00000020 )
  B64:  		Call     UseBattleCamPreset 	( 00000002 )
  B74:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B90:  		Add  *Var[0]  00000028 
  BA0:  		Set  *Var[1]  00000000 
  BB0:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  BC4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  BE0:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				If *Var[B] == .HitResult:Immune
					Goto 	1
				EndIf
				Call	 GetActorHP ( .Actor:Player *Var[C] )
				If *Var[C] == 0 %attacking while you're dead does nothing
					Goto 	1
				EndIf
				Call     GetBattleFlags ( *Var[E] )
				If  *Var[E]  &  80000000 
					Goto     1 
				EndIf
				Call     GetActorVar 	( .Actor:Self 0000000A *Var[C] )
				Add *Var[C] 1
				Call	 SetActorVar	( .Actor:Self 0000000A *Var[C] )
				Call     GetLastDamage 	( .Actor:Player *Var[E] )
				If  *Var[E]  ==  00000000 %if it isn't working, don't keep going
					Goto     1 
				EndIf
				Goto  0 %if none of the above conditions are met, keep going!
				Label 1
  C00:  		Add  *Var[0]  0000001E 
  C10:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  C2C:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  C4C:  		Add  *Var[0]  00000014 
  C5C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  C78:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  C98:  		Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  CB0:  		Wait     00000008 
  CBC:  		Call     YieldTurn   	( )
  CC8:  		SetConst  *Var[0]  00000001 
  CD8:  		SetConst  *Var[1]  00590104 
  CE8:  		ExecWait DoReturnHome 
  CF4:  		Call     SetAnimation 	( .Actor:Self 00000001 00590101 )
  D1C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D30:  Call     UseIdleAnimation 	( .Actor:Self .True )
  D44:  Return
  D4C:  End
}

#new:Script $Script_SuperShellToss_GK
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   64:  If  *Var[0]  ==  00000000 
   74:  	Call     UseBattleCamPreset 	( 0000000E )
   84:  	Call     BattleCamTargetActor ( .Actor:Self )
   94:  	Call     MoveBattleCamOver 	( 00000014 )
   A4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:PowerUp )
   B8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   D4:  	Add  *Var[1]  0000000A 
   E4:  	Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000002D 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  128:  	Call     SetAnimation 	( .Actor:Self 00000001 00590115 )
  140:  	Wait     0000001E 
  14C:  	Call     UseBattleCamPreset 	( 00000002 )
  15C:  	Call     MoveBattleCamOver 	( 00000014 )
  16C:  	Thread
  174:  		Wait     00000008 
  180:  		Call     SetAnimation 	( .Actor:Self 00000001 00590107 )
  198:  	EndThread
  1A0:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  1B4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1D0:  	Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1EC:  	Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  20C:  	Call     PlaySoundAtActor 	( .Actor:Self 000020BA )
  220:  	Call     $Function_8021819C_GK ( 00000080 0000000A )
  234:  	Thread
  23C:  		Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.5] )
  258:  	EndThread
  260:  	Call     SetAnimation 	( .Actor:Self 00000001 00590106 )
  278:  	Call     SetStatusTable ( .Actor:Self $StatusTable_GoldKoopatrolCharged )
  28C:  	Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrolCharged )
  2A4:  	Call     SetPartEventBits 	( .Actor:Self 00000001 00001000 .False )
  2C0:  	Call     SetActorVar 	( .Actor:Self 00000000 00000002 )
  2D8:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrolCharged )
  2F0:  	Call     EnableActorGlow 	( .Actor:Self .True )
  304:  	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .True )
  320:  	Wait     0000000A 
  32C:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  340:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  354:  	Return
  35C:  EndIf
  364:  Call     UseBattleCamPreset 	( 0000003F )
  374:  Call     BattleCamTargetActor ( .Actor:Self )
  384:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  39C:  Loop     00000014 
  3A8:  	Call     SetActorDispOffset ( FFFFFF81 00000001 00000000 00000000 )
  3C4:  	Wait     00000001 
  3D0:  	Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF 00000000 00000000 )
  3EC:  	Wait     00000001 
  3F8:  EndLoop
  400:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  41C:  Call     PlaySoundAtActor 	( .Actor:Self 0000037C )
  430:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  44C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000004 00000010 )
  470:  Switch  *Var[0] 
  47C:  	CaseOR  ==  00000006 
  488:  	CaseOR  ==  00000005 
  494:  		Set  *Var[A]  *Var[0] 
  4A4:  		Thread
  4AC:  			Loop     
  4B8:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  4D4:  				Add  *Var[0]  0000001E 
  4E4:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  500:  				If  *Var[0]  >  *Var[3] 
  510:  					BreakLoop
  518:  				EndIf
  520:  				Wait     00000001 
  52C:  			EndLoop
  534:  			Call     UseBattleCamPreset 	( 00000001 )
  544:  			If  *Var[A]  ==  00000005 
  554:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  578:  			EndIf
  580:  			Wait     0000000F 
  58C:  			Call     UseBattleCamPreset 	( 00000002 )
  59C:  		EndThread
  5A4:  		Thread
  5AC:  			Loop     0000001E 
  5B8:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5D4:  				Call     PlayEffect  	( ~FX:Steam:Ring *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  618:  				Wait     00000001 
  624:  			EndLoop
  62C:  		EndThread
  634:  		Call     SetGoalToTarget 	( .Actor:Self )
  644:  		Call     AddGoalPos 	( .Actor:Self FFFFFF38 00000000 00000000 )
  660:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %heavier but charge attack is faster
  674:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  68C:  		Wait     0000000F 
  698:  		Call     GetStatusFlags ( .Actor:Self *Var[A] )
  6AC:  		If  *Var[A]  !&  18000000 
  6BC:  			Call     EnableActorGlow 	( .Actor:Self .False )
  6D0:  		EndIf
  6D8:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  6F4:  		Call     YieldTurn   	( )
  700:  		Call     8026F6EC ( FFFFFF81 )
  710:  		Call     SetActorPos 	( .Actor:Self 0000012C 00000000 00000000 )
  72C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  748:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
  75C:  		Call     SetGoalToHome 	( .Actor:Self )
  76C:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  784:  		Call     SetAnimation 	( .Actor:Self 00000001 00590108 )
  79C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  7B4:  		Call     SetStatusTable ( .Actor:Self $StatusTable_GoldKoopatrol )
  7C8:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrol )
  7E0:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00001000 .True )
  7FC:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  814:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  82C:  		Wait     0000000A 
  838:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  84C:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  860:  		Return
  868:  	EndCaseGroup
  870:  EndSwitch
  878:  Thread
  880:  	Loop     0000001E 
  88C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8A8:  		Call     PlayEffect  	( ~FX:Steam:Ring *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8EC:  		Wait     00000001 
  8F8:  	EndLoop
  900:  EndThread
  908:  Call     SetGoalToTarget 	( .Actor:Self )
  918:  Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %16 -> 20 (heavier, but i'm making the charge attack faster)
		Call     SetActorVar (.Actor:Self 0000000A 00000000 ) %reset hit count
		Set *Var[B] *Var[0] %get the hit result (if mario is stone, do not hit infinitely)
		Label    00000000  
		Call     SetGoalToTarget 	( .Actor:Self )
		Call	 GetActorVar (.Actor:Self 0000000A *Var[C] )
		If *Var[C] != 0
			Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
			Call     PlaySoundAtActor 	( .Actor:Self 0000037C )
			Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
			Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %16 -> 20 (heavier, but i'm making the charge attack faster)
		EndIf
  92C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  944:  Wait     00000002 
  950:  Call     EnemyDamageTarget 	( .Actor:Self *Var[A] 00000000 0000FFFF 00000000 0000000C 00000020 ) %10 -> 12
  978:  Switch  *Var[A] 
  984:  	CaseOR  ==  00000000 
  990:  	CaseOR  ==  00000002 
  99C:  		Call     UseBattleCamPreset 	( 00000002 )
  9AC:  		Thread
  9B4:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000010 00000000 )
  9D0:  			Set  *Var[0]  00000000 
  9E0:  			Loop     0000003C 
  9EC:  				Add  *Var[0]  00000012 
  9FC:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  A18:  				Wait     00000001 
  A24:  			EndLoop
  A2C:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  A48:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  A64:  		EndThread
  A6C:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  A80:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A9C:  		Add  *Var[0]  00000032 
  AAC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AC8:  		Call     JumpToGoal  	( .Actor:Self 0000001E 00000000 00000001 00000000 )
  AE8:  		Add  *Var[0]  00000028 
  AF8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B14:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  B34:  		Add  *Var[0]  0000001E 
  B44:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B60:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				If *Var[B] == .HitResult:Immune
					Goto 	1
				EndIf
				Call	 GetActorHP ( .Actor:Player *Var[C] )
				If *Var[C] == 0 %attacking while you're dead does nothing
					Goto 	1
				EndIf
				Call     GetBattleFlags ( *Var[E] )
				If  *Var[E]  &  80000000 
					Goto     1 
				EndIf
				Call     GetActorVar 	( .Actor:Self 0000000A *Var[C] )
				Add *Var[C] 1
				Call	 SetActorVar	( .Actor:Self 0000000A *Var[C] )
				If *Var[C] > 7` %theres a bug where the ninth hit crashes the game
					Goto 1
				EndIf
				Call     GetLastDamage 	( .Actor:Player *Var[E] )
				If  *Var[E]  ==  00000000 %if it isn't working, don't keep going
					Goto     1 
				EndIf
				Goto  0 %if none of the above conditions are met, keep going!
				Label 1
  B80:  		Wait     00000014 
  B8C:  		Call     YieldTurn   	( )
  B98:  		Call     GetStatusFlags ( .Actor:Self *Var[A] )
  BAC:  		If  *Var[A]  !&  18000000 
  BBC:  			Call     EnableActorGlow 	( .Actor:Self .False )
  BD0:  		EndIf
  BD8:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  BF4:  		Call     8026F6EC ( FFFFFF81 )
  %C04:  		Call     SetActorPos 	( .Actor:Self 0000012C 00000000 00000000 )
  C20:  		SetConst  *Var[0]  00000001 
  C30:  		SetConst  *Var[1]  00590104 
  C40:  		ExecWait DoReturnHome 
  C4C:  		Call     SetAnimation 	( .Actor:Self 00000001 00590101 )
  C64:  		Call     SetStatusTable ( .Actor:Self $StatusTable_GoldKoopatrol )
  C78:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_GoldKoopatrol )
  C90:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00001000 .True )
  CAC:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  CC4:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoldKoopatrol )
  CDC:  	EndCaseGroup
  CE4:  EndSwitch
  CEC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D00:  Call     UseIdleAnimation 	( .Actor:Self .True )
  D14:  Return
  D1C:  End
}

#new:Script $Script_TakeTurn_GoldKoopatrol
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	Call     SetBattleVar 	( 00000001 00000001 )
   34:  	ExecWait $Script_ShellToss_GK 
   40:  	Return
   48:  EndIf
   50:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   68:  Switch  *Var[0] 
   74:  	Case  ==  00000000 
   80:  		Call     GetBattleVar 	( 00000001 *Var[0] )
   94:  		Switch  *Var[0] 
   A0:  			Case  ==  00000000 
   AC:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   C4:  				Switch  *Var[0] 
   D0:  					CaseOR  ==  00000000 
   DC:  					CaseOR  ==  00000001 
   E8:  						Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  100:  						Switch  *Var[0] 
  10C:  							Case  ==  00000000 
  118:  								Call     GetBattleVar 	( 00000004 *Var[1] )
  12C:  							Case  ==  00000001 
  138:  								Call     GetBattleVar 	( 00000005 *Var[1] )
  14C:  							Case  ==  00000002 
  158:  								Call     GetBattleVar 	( 00000006 *Var[1] )
  16C:  							Case  ==  00000003 
  178:  								Call     GetBattleVar 	( 00000007 *Var[1] )
  18C:  						EndSwitch
  194:  						If  *Var[1]  >=  00000002 
  1A4:  							Call     RandInt     	( 000003E8 *Var[0] )
  1B8:  							If  *Var[0]  <  0000012C 
  1C8:  								Call     SetBattleVar 	( 00000001 00000002 )
  1DC:  								ExecWait $Script_SuperShellToss_GK 
  1E8:  							Else
  1F0:  								Call     SetBattleVar 	( 00000001 00000001 )
  204:  								ExecWait $Script_ShellToss_GK 
  210:  							EndIf
  218:  							Return
  220:  						EndIf
  228:  					EndCaseGroup
  230:  					Case  ==  00000002 
  23C:  						Call     RandInt     	( 000003E8 *Var[0] )
  250:  						If  *Var[0]  <  0000012C 
  260:  							Call     SetBattleVar 	( 00000001 00000002 )
  274:  							ExecWait $Script_SuperShellToss_GK 
  280:  						Else
  288:  							Call     SetBattleVar 	( 00000001 00000001 )
  29C:  							ExecWait $Script_ShellToss_GK 
  2A8:  						EndIf
  2B0:  						Return
  2B8:  				EndSwitch
  2DC:  				Call     RandInt     	( 000003E8 *Var[0] )
  2F0:  				If  *Var[0]  <  0000012C 
  300:  					Call     SetBattleVar 	( 00000001 00000002 )
  314:  					ExecWait $Script_SuperShellToss_GK 
  320:  				Else
  328:  					Call     SetBattleVar 	( 00000001 00000001 )
  33C:  					ExecWait $Script_ShellToss_GK 
  348:  				EndIf
  350:  				Return
						/%	Get rid of all backup summoning to save space (and not make the chapter 4 encounter potentially ridiculous)
						Call	 GetActorHP (.Actor:Self *Var[C])
						If *Var[C] < 8`
							Call     RandInt     	( 000003E8 *Var[0] )
							If *GameByte[00A] == 3`
								Set *Var[0] 501` %don't summon
							EndIf
							If *Var[0] < 500`
								ExecWait $Script_SummonBackup_GK
								Return
							EndIf
						EndIf
						%/
  514:  			Case  ==  00000001 
  520:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  538:  				Switch  *Var[0] 
  544:  					CaseOR  ==  00000000 
  550:  					CaseOR  ==  00000001 
  55C:  						Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  574:  						Switch  *Var[0] 
  580:  							Case  ==  00000000 
  58C:  								Call     GetBattleVar 	( 00000004 *Var[1] )
  5A0:  							Case  ==  00000001 
  5AC:  								Call     GetBattleVar 	( 00000005 *Var[1] )
  5C0:  							Case  ==  00000002 
  5CC:  								Call     GetBattleVar 	( 00000006 *Var[1] )
  5E0:  							Case  ==  00000003 
  5EC:  								Call     GetBattleVar 	( 00000007 *Var[1] )
  600:  						EndSwitch
  608:  						If  *Var[1]  >=  00000002 
  618:  							Call     RandInt     	( 000003E8 *Var[0] )
  62C:  							If  *Var[0]  <  0000012C 
  63C:  								Call     SetBattleVar 	( 00000001 00000002 )
  650:  								ExecWait $Script_SuperShellToss_GK 
  65C:  							Else
  664:  								Call     SetBattleVar 	( 00000001 00000001 )
  678:  								ExecWait $Script_ShellToss_GK 
  684:  							EndIf
  68C:  							Return
  694:  						EndIf
  69C:  					EndCaseGroup
  6A4:  					Case  ==  00000002 
  6B0:  						ExecWait $Script_ShellToss_GK 
  6BC:  						Return
  6C4:  				EndSwitch
  6E8:  				ExecWait $Script_ShellToss_GK 
  6F4:  				Return
						/%
						Call	 GetActorHP (.Actor:Self *Var[C])
						If *Var[C] < 8`
							Call     RandInt     	( 000003E8 *Var[0] )
							If *Var[0] < 500`
								ExecWait $Script_SummonBackup_GK
								Return
							EndIf
						EndIf
						%/
  814:  			Case  ==  00000002 
  820:  				ExecWait $Script_SuperShellToss_GK 
  82C:  		EndSwitch
  834:  	Case  ==  00000001 
  840:  		Call     SetBattleVar 	( 00000001 00000001 )
  854:  		ExecWait $Script_ShellToss_GK 
  860:  	Case  ==  00000002 
  86C:  		ExecWait $Script_SuperShellToss_GK 
  878:  EndSwitch
  880:  Return
  888:  End
}
