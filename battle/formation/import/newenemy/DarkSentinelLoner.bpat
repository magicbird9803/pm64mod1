%Dark sentinel
%I took those enemies from tubba's castle, gave them a palette swap, and now we have a new enemy

%This version cannot summon other enemies.

% Define your graphics here
#define .AnimStop		00380900
#define .AnimIdle		00380901
#define .AnimPoison		00380901
#define .AnimPain		00380906
#define .AnimDizzy		0038090A
#define .AnimDead		00380906
#define .AnimRun		00380901
#define .AnimGrab		00380908
#define .AnimRelease	00380909
#define .AnimSad		00380906
%#define .AnimSleep  	00380901
%#define .AnimBurn   	00380906
%#define .AnimBurn2  	00380906

#new:Actor $DarkSentinel
{
% stats
[Index]         FEb % last in the enemy table
[Level]        33`b 
[MaxHP]        12`b %pretty low, but they have weird armor
[Coins]         1`b 
[Flags]       00000200 
[StatusTable] $StatusTable_DarkSentinel 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_DarkSentinel 
[Script]      $Script_Init_DarkSentinel 
% move effectiveness
[Escape]       10`b 
[Item]         10`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]    95`b %higher 
[PowerBounce] 100`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         50`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -18`b  30`b % dx dy
[StatusIcon]   18`b  30`b % dx dy
}

#new:DefenseTable $DefenseTable_DarkSentinel
{
.Element:Normal 00000000
.Element:Throw FFFFFFFF 
.Element:Fire	00000063 %I'm too lazy to set up a fire palette so here you go
.Element:Blast	00000063 %
.Element:Cosmic FFFFFFFD
.Element:End
}

#new:StatusTable $StatusTable_DarkSentinel %50% -1 to a lot of statuses
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear       50`
.Status:Static     50`
.Status:Paralyze   50`
.Status:Shrink     20`
.Status:Stop       50`
.Status:DefaultTurnMod   -1`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod    -1`
.Status:FrozenTurnMod    -1`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod      -1`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}

#new:PartsTable $PartsTable_DarkSentinel		%Add sprite event flag 01000000
{
00800200 01000000 001400FF $IdleAnimations_DarkSentinel $DefenseTable_DarkSentinel 01000000 00000000 00F60000 00000000 
}

#new:IdleAnimations $IdleAnimations_DarkSentinel
{
.Status:Normal    .AnimIdle
.Status:Stone     .AnimStop
.Status:Sleep     .AnimStop
.Status:Poison    .AnimPoison
.Status:Stop      .AnimStop
.Status:Static    .AnimIdle
.Status:Paralyze  .AnimStop
.Status:Dizzy     .AnimDizzy
.Status:Fear      .AnimDizzy
.Status:End
}

#new:Script $Script_Init_DarkSentinel
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_DarkSentinel )
	Call     BindIdle    	( .Actor:Self $Script_Idle_DarkSentinel )
    Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_DarkSentinel )
	Call	 SetActorVar 	( .Actor:Self 00000000 00000000 ) %AI state
	Call	 SetActorVar 	( .Actor:Self 00000001 00000001 ) %Can I summon anything?
    Return
    End
}

#new:Script $Script_Idle_DarkSentinel
{
  Return
  End
}

#new:Script $Script_HandleEvent_DarkSentinel
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo
   70:  	CaseOR  ==  .Event:Hit
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  .AnimPain 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  .AnimPain
   DC:  		SetConst  *Var[2]  .AnimPain 
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  .AnimPain 
  124:  		SetConst  *Var[2]  .AnimPain
  134:  		ExecWait DoBurnHit 
  140:  		SetConst  *Var[0]  00000001 
  150:  		SetConst  *Var[1]  .AnimPain 
  160:  		ExecWait DoDeath 
  16C:  		Return
  174:  	Case  ==  .Event:SpinSmashHit
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  .AnimPain 
  1A0:  		ExecWait 8029B998 
  1AC:  	Case  ==  .Event:SpinSmashDeath
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  .AnimPain 
  1D8:  		ExecWait 8029B998 
  1E4:  		SetConst  *Var[0]  00000001 
  1F4:  		SetConst  *Var[1]  .AnimDead 
  204:  		ExecWait DoDeath 
  210:  		Return
  218:  	Case  ==  .Event:ShockHit
  224:  		SetConst  *Var[0]  00000001 
  234:  		SetConst  *Var[1]  .AnimPain 
  244:  		ExecWait DoShockHit 
  250:  		SetConst  *Var[0]  00000001 
  260:  		SetConst  *Var[1]  .AnimPain 
  270:  		ExecWait 8029BD70 
  27C:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  29C:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
				ExecWait $Script_GoHome
  308:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  320:  		Wait     00000005 
  32C:  		Call     SetAnimation 	( .Actor:Self 00000001 .AnimIdle )
  344:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  358:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  378:  	Case  ==  .Event:ShockDeath
  384:  		SetConst  *Var[0]  00000001 
  394:  		SetConst  *Var[1]  .AnimPain 
  3A4:  		ExecWait DoShockHit 
  3B0:  		SetConst  *Var[0]  00000001 
  3C0:  		SetConst  *Var[1]  .AnimDead 
  3D0:  		ExecWait DoDeath 
  3DC:  		Return
  3E4:  	Case  ==  .Event:StarBeam
  3F0:  	CaseOR  ==  00000017
  3FC:  	CaseOR  ==  .Event:Immune
  408:  	CaseOR  ==  .Event:AirLiftFailed
  414:  		SetConst  *Var[0]  00000001 
  424:  		SetConst  *Var[1]  .AnimIdle 
  434:  		ExecWait DoImmune 
  440:  	EndCaseGroup
  448:  	Case  ==  .Event:Death
  454:  		SetConst  *Var[0]  00000001 
  464:  		SetConst  *Var[1]  .AnimPain 
  474:  		ExecWait DoNormalHit 
  480:  		Wait     0000000A 
  48C:  		SetConst  *Var[0]  00000001 
  49C:  		SetConst  *Var[1]  .AnimDead 
  4AC:  		ExecWait DoDeath 
  4B8:  		Return
  4C0:  	Case  ==  .Event:EndFirstStrike
  4CC:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  4E4:  		Call     SetAnimation 	( .Actor:Self 00000001 .AnimRun )
				ExecWait $Script_GoHome
  538:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  550:  		Call     HPBarToHome 	( .Actor:Self )
  560:  	Case  ==  .Event:RecoverStatus
  56C:  		SetConst  *Var[0]  00000001 
  57C:  		SetConst  *Var[1]  .AnimIdle 
  58C:  		ExecWait DoRecover 
  598:  	Case  ==  .Event:ScareAway
  5A4:  		SetConst  *Var[0]  00000001 
  5B4:  		SetConst  *Var[1]  .AnimRun 
  5C4:  		SetConst  *Var[2]  .AnimPain 
  5D4:  		ExecWait DoScareAway 
  5E0:  		Return
  5E8:  	Case  ==  .Event:BeginAirLift
  5F4:  		SetConst  *Var[0]  00000001 
  604:  		SetConst  *Var[1]  .AnimRun 
  614:  		ExecWait DoAirLift 
  620:  	Case  ==  .Event:BlowAway
  62C:  		SetConst  *Var[0]  00000001 
  63C:  		SetConst  *Var[1]  .AnimPain 
  64C:  		ExecWait DoBlowAway 
  658:  		Return
  660:  	Default
  668:  EndSwitch
  670:  Call     SetAnimation 	( .Actor:Self 00000001 .AnimIdle )
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}
%Attacks:
%Grab for 8 damage
%Spin grab for 6 damage + 1 turn dizzy
%Stop grab for 5 damage + 2 turn stop	
%Summoning AI:
%	If hp < 15 (and there's open space, and hasn't summoned before)
%		Count other dark sentinels
%			If count == 1
%				summon something (dark goomba, dark bubble, or insanee dayzee)
%			If count => 2
%				summon something if it is time for stop grab

#new:Script $Script_TakeTurn_DarkSentinel % here's the hard part - the attack itself (or AI if you have more than one)
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
/%
	Call	 GetActorVar 	( .Actor:Self 00000001 *Var[0] )
	If *Var[0] == 00000001
		Call	GetActorHP ( .Actor:Self *Var[A] )
		If *Var[A] < 10`
			ExecWait $Script_GetFirstOpenColumn
			If *Var[A] == FFFFFFFF
				ExecWait $Script_StopGrab
				Return
			EndIf
			ExecWait $Script_CountActiveSummoners_DS
			Switch *Var[9]
				Case == 00000001
					ExecWait $Script_RandomSummon
					Return
				Case == 00000002
					Call	 SetActorVar 	( .Actor:Self 00000000 *Var[0] )
					If *Var[0] == 2
						ExecWait $Script_RandomSummon
						Return
					EndIf
			EndSwitch
		EndIf		
	EndIf
%/
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     SetAnimation 	( .Actor:Self 00000001 00380901 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddGoalPos 	( .Actor:Self 00000000 00000064 00000000 ) %above player
	Call     SetActorSpeed 	( .Actor:Self *Fixed[9.0] )
	Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:CosIn )
	Call	 GetActorVar 	( .Actor:Self 00000000 *Var[0] )
	Add *Var[0] 1
	Mod *Var[0] 3
	Call	 SetActorVar 	( .Actor:Self 00000000 *Var[0] )
	Switch *Var[0]
		Case == 00000000
			ExecWait	$Script_RegularGrab
		Case == 00000001
			ExecWait	$Script_SpinGrab
		Case == 00000002
			ExecWait	$Script_StopGrab
	EndSwitch
	ExecWait $Script_GoHome
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_RegularGrab
{
Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000001 00000010 )
Switch *Var[A]
	CaseOR == 00000005
	CaseOR == 00000006
		Wait 00000005
		Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Sub		 *Var[0] 8`
		Sub		 *Var[1] 10`
		Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
		Wait	 A
		If  *Var[A]  ==  00000005 
			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
		EndIf
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimSad )		
		Wait	 8
		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
		ExecWait $Script_GoHome
		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
		Return
	EndCaseGroup	
EndSwitch
Wait 	 00000005
Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
Call     SetGoalToTarget 	( .Actor:Self )
Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Sub		 *Var[0] 8`
Sub		 *Var[1] 10`
Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
Wait	 E
Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000008 00000020 )
Return
End
}

#new:Script $Script_SpinGrab
{
Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000001 00000010 )
Switch *Var[A]
	CaseOR == 00000005
	CaseOR == 00000006
		Wait 00000005
		Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Sub		 *Var[0] 8`
		Sub		 *Var[1] 10`
		Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Thread
			Set  *Var[F]  00000000 
 			Loop     24` %45 * 24 = 1080
  				Add  *Var[F]  45`
   				Call     SetActorYaw 	( .Actor:Self *Var[F] )
				Wait     00000001 
			EndLoop
			Call     SetActorYaw 	( .Actor:Self 00000000 )
		EndThread
		Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
		Wait	 A
		If  *Var[A]  ==  00000005 
			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
		EndIf
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimSad )		
		Wait	 8
		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
		ExecWait $Script_GoHome
		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
		Return
	EndCaseGroup	
EndSwitch
Wait 	 00000005
Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
Call     SetGoalToTarget 	( .Actor:Self )
Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Sub		 *Var[0] 8`
Sub		 *Var[1] 10`
Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Thread
	Set  *Var[F]  00000000 
 	Loop     24` %45 * 24 = 1080
  		Add  *Var[F]  45`
   		Call     SetActorYaw 	( .Actor:Self *Var[F] )
		Wait     00000001 
	EndLoop
	Call     SetActorYaw 	( .Actor:Self 00000000 )
EndThread
Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
Wait	 E
Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80040264 00000006 00000020 )
Return
End
}

#new:Script $Script_StopGrab
{
Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000001 00000010 )
Switch *Var[A]
	CaseOR == 00000005
	CaseOR == 00000006
		Wait 00000005
		Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Sub		 *Var[0] 8`
		Sub		 *Var[1] 10`
		Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		%Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
		Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
		Wait	 A
		If  *Var[A]  ==  00000005 
			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
		EndIf
		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
		Call     SetAnimation 	( .Actor:Self 00000001 .AnimSad )
		Wait	 8
		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
		ExecWait $Script_GoHome
		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
		Return
	EndCaseGroup	
EndSwitch
Wait 	 00000005
Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
Call     SetGoalToTarget 	( .Actor:Self )
Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Sub		 *Var[0] 8`
Sub		 *Var[1] 10`
Call	 SetGoalPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
%Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
Call     PlaySoundAtActor 	( .Actor:Self 00002003 ) %there's probably a better sound for this
Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
Call     SetAnimation 	( .Actor:Self 00000001 .AnimGrab )
Wait	 C
Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 8020023C 00000005 00000020 )
Return
End
}

#new:Script $Script_GoHome
{
   Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
   Call     SetActorYaw 	( .Actor:Self 000000B4 )
   Call     SetAnimation 	( .Actor:Self 00000001 .AnimRun )
   Call     SetGoalToHome 	( .Actor:Self )
   Call     FlyToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
   Call     SetAnimation 	( .Actor:Self 00000001 .AnimRun )
   Call     SetActorYaw 	( .Actor:Self 00000000 )
   Return
   End
}