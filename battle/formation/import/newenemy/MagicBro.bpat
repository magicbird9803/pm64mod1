% Automatically dumped from section 22

%it works :)

%50 hp, ? atk, 3 def
%Many different attacks that are hard to predict
%Some inflict shrink, some hit partner, some inflict stop

%	5 atk hammers
%	Partner hammer does 2
%	Slow hammer does 12

%the idea is that his hammer moves are really hard to predict with weird trajectories and stuff
%	They still inflict statuses :)
%AI:
%	# of hammers goes up as HP goes down
%	Various hammer moves avaliable for certain hammer amounts
%	Move selected is based on AI state

%moves:
%	"wrong way": hammers come from left side of screen (can hit partner)
%	"slow hammer" (only 1 hammer): hammer moves really slowly
%	"bouncy hammer": hammer bounces (can hit partner)
%	"stall hammer": hammers stall above you

#new:Actor $MagicBro
{
% stats
[Index]        F8b % index from ActorTable.xml
[Level]        51`b %pretty good SP gain
[MaxHP]        50`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_MagicBro
% ai
[PartsCount]   6`s 
[PartsTable] $PartsTable_MagicBro 
[Script]      $Script_Init_MagicBro 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         36`b  36`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:IdleAnimations $IdleAnimations_MagicBro
{
.Status:Normal    00F50002
.Status:Stone     00F50000
.Status:Sleep     00F50011
.Status:Poison    00F50002
.Status:Stop      00F50000
.Status:Static    00F50002
.Status:Paralyze  00F50000
.Status:Dizzy     00F50012
.Status:Fear      00F50012
.Status:End
}

#new:IdleAnimations $IdleAnimations_MagicBroHammer
{
.Status:Normal    00F5000D
.Status:End
}

#new:DefenseTable $DefenseTable_MagicBro
{
.Element:Normal 00000003
.Element:End
}

#new:StatusTable $StatusTable_MagicBro
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      40` %I made a sleep animation so I'm not letting it go to waste
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      30`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_MagicBro
{
00800000 01000000 FD2300FF $IdleAnimations_MagicBro $DefenseTable_MagicBro 00000000 00000000 FDF60000 00000000 
00120001 02000000 000000FF $IdleAnimations_MagicBroHammer $DefenseTable_MagicBro 00000000 00000000 00000000 00000000 
00120001 03000000 000000FF $IdleAnimations_MagicBroHammer $DefenseTable_MagicBro 00000000 00000000 00000000 00000000 
00120001 04000000 000000FF $IdleAnimations_MagicBroHammer $DefenseTable_MagicBro 00000000 00000000 00000000 00000000 
00120001 05000000 000000FF $IdleAnimations_MagicBroHammer $DefenseTable_MagicBro 00000000 00000000 00000000 00000000 
00120001 06000000 000000FF $IdleAnimations_MagicBroHammer $DefenseTable_MagicBro 00000000 00000000 00000000 00000000 
}

#new:Script $Script_Init_MagicBro
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_MagicBro )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_MagicBro )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_MagicBro )
   3C:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 ) %AI state
		Call     SetActorVar 	( .Actor:Self 00000002 00000001 ) %# of hammers
		Call     SetActorVar 	( .Actor:Self 00000003 00000002 ) %current hammer
   54:  Return
   5C:  End
}

#new:Script $Script_Idle_MagicBro
{
    0:  Label    00000000 
    C:  Call     GetStatusFlags ( .Actor:Self *Var0 )
   20:  Switch  *Var0 
   2C:  	Case  &  00001000 
   38:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 0000000F )
   54:  		Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
   70:  	Default
   78:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var0 )
   90:  		Switch  *Var0 
   9C:  			Case  ==  00000000 
   A8:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFD 00000023 )
   C4:  				Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFD FFFFFFF6 )
   E0:  			Case  ==  00000001 
   EC:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 0000000F )
  108:  				Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
  124:  		EndSwitch
  12C:  EndSwitch
  134:  Wait     00000001 
  140:  Goto     00000000 
  14C:  Return
  154:  End
}

#new:Script $Script_HandleEvent_MagicBro
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var0 )
   3C:  Switch  *Var0 
   48:  	CaseOR  ==  .Event:HitCombo
   54:  	CaseOR  ==  .Event:Hit
   60:  		SetConst  *Var0  00000001 
   70:  		SetConst  *Var[1]  00F5000E 
   80:  		ExecWait DoNormalHit 
   8C:  	EndCaseGroup
   94:  	Case  ==  .Event:BurnHit
   A0:  		SetConst  *Var0  00000001 
   B0:  		SetConst  *Var[1]  00F5000F 
   C0:  		SetConst  *Var[2]  00F50010 
   D0:  		ExecWait DoBurnHit 
   DC:  	Case  ==  .Event:BurnDeath
   E8:  		SetConst  *Var0  00000001 
   F8:  		SetConst  *Var[1]  00F5000F 
  108:  		SetConst  *Var[2]  00F50010 
  118:  		ExecWait DoBurnHit 
  124:  		SetConst  *Var0  00000001 
  134:  		SetConst  *Var[1]  00F50010 
  144:  		ExecWait DoDeath 
  150:  		Return
  158:  	Case  ==  .Event:SpinSmashHit
  164:  		SetConst  *Var0  00000001 
  174:  		SetConst  *Var[1]  00F5000E 
  184:  		ExecWait 8029B998 
  190:  	Case  ==  .Event:SpinSmashDeath
  19C:  		SetConst  *Var0  00000001 
  1AC:  		SetConst  *Var[1]  00F5000E 
  1BC:  		ExecWait 8029B998 
  1C8:  		SetConst  *Var0  00000001 
  1D8:  		SetConst  *Var[1]  00F5000E 
  1E8:  		ExecWait DoDeath 
  1F4:  		Return
  1FC:  	CaseOR  ==  00000017
  208:  	CaseOR  ==  .Event:Immune
  214:  		SetConst  *Var0  00000001 
  224:  		SetConst  *Var[1]  00F50015 
  234:  		ExecWait DoImmune 
  240:  		Call     GetStatusFlags ( .Actor:Self *Var0 )
  254:  		If  *Var0  !&  0035D000 
  264:  			Call     SetAnimation 	( .Actor:Self 00000001 00F50017 )
  27C:  			Wait     0000000A 
  288:  		EndIf
  290:  	EndCaseGroup
  298:  	Case  ==  .Event:Death
  2A4:  		SetConst  *Var0  00000001 
  2B4:  		SetConst  *Var[1]  00F5000E 
  2C4:  		ExecWait DoNormalHit 
  2D0:  		Wait     0000000A 
  2DC:  		SetConst  *Var0  00000001 
  2EC:  		SetConst  *Var[1]  00F5000E 
  2FC:  		ExecWait DoDeath 
  308:  		Return
  310:  	Case  ==  .Event:RecoverStatus
  31C:  		SetConst  *Var0  00000001 
  32C:  		SetConst  *Var[1]  00F50002 
  33C:  		ExecWait DoRecover 
  348:  	Case  ==  .Event:ScareAway
  354:  		SetConst  *Var0  00000001 
  364:  		SetConst  *Var[1]  00F50007 
  374:  		SetConst  *Var[2]  00F5000E 
  384:  		ExecWait DoScareAway 
  390:  		Return
  398:  	Case  ==  .Event:BeginAirLift
  3A4:  		SetConst  *Var0  00000001 
  3B4:  		SetConst  *Var[1]  00F50007 
  3C4:  		ExecWait DoAirLift 
  3D0:  	Case  ==  .Event:BlowAway
  3DC:  		Call     GetStatusFlags ( .Actor:Self *Var0 )
  3F0:  		If  *Var0  !&  0035D000 
  400:  			If  *Var0  &  00080000 
  410:  				Call     SetActorDispOffset ( FFFFFF81 FFFFFFFE 00000001 00000000 )
  42C:  			Else
  434:  				Call     SetActorDispOffset ( FFFFFF81 FFFFFFFB 00000003 00000000 )
  450:  			EndIf
  458:  		EndIf
  460:  		SetConst  *Var0  00000001 
  470:  		SetConst  *Var[1]  00F5000E 
  480:  		ExecWait DoBlowAway 
  48C:  		Return
  494:  	Case  ==  .Event:AirLiftFailed
  4A0:  		SetConst  *Var0  00000001 
  4B0:  		SetConst  *Var[1]  00F50002 
  4C0:  		ExecWait DoImmune 
  4CC:  	Default
  4D4:  EndSwitch
  4DC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  4F0:  Call     UseIdleAnimation 	( .Actor:Self .True )
  504:  Return
  50C:  End
}

#new:Script $Script_HammerMiss
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Set  *Var[2]  0000000A 
   E4:  Call     RandInt     	( 0000003C *Var[4] )
   F8:  Set  *Var[5]  0000001E 
  108:  Sub  *Var[5]  *Var[4] 
  118:  Add  *Var[1]  *Var[5] 
  128:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
  140:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  168:  Sub  *Var[1]  00000032 
  178:  Set  *Var[2]  0000000A 
  188:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  1B0:  Sub  *Var[1]  0000001E 
  1C0:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  1E8:  Sub  *Var[1]  00000014 
  1F8:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  220:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  23C:  Return
  244:  End
}

#new:Script $Script_HammerHit
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}

#new:Script $Script_HammerHitPartner
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
		Call	 SetTargetActor		( .Actor:Self .Actor:Partner )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )		
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}

#new:Script $Script_BouncyHammerMiss
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
		Add 	 *Var[1]  50`
		Call     RandInt     	( 20` *Var[6] )
		Add		 *Var[1] *Var[6]
		Set 	 *Var[2]  0`
		Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000010 .True )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Set  *Var[2]  0000000A 
   E4:  Call     RandInt     	( 0000003C *Var[4] )
   F8:  Set  *Var[5]  0000001E 
  108:  Sub  *Var[5]  *Var[4] 
  118:  Add  *Var[1]  *Var[5] 
  128:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
  140:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  168:  Sub  *Var[1]  00000032 
  178:  Set  *Var[2]  0000000A 
  188:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  1B0:  Sub  *Var[1]  0000001E 
  1C0:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  1E8:  Sub  *Var[1]  00000014 
  1F8:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  220:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  23C:  Return
  244:  End
}

#new:Script $Script_BouncyHammerHit
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
		Add 	 *Var[1]  50`
		Call     RandInt     	( 20` *Var[6] )
		Add		 *Var[1] *Var[6]
		Set 	 *Var[2]  0`
		Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000010 .True )
		Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}

#new:Script $Script_BouncyHammerHitPartner
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
		Call	 SetTargetActor		( .Actor:Self .Actor:Partner )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
		Add 	 *Var[1]  65`
		Call     RandInt     	( 20` *Var[6] )
		Add		 *Var[1] *Var[6]
		Set 	 *Var[2]  0`
		Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000010 .True )
		Call	 SetTargetActor		( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
		Call     SetGoalToTarget 	( .Actor:Self )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}

#new:Script $Script_StallHammerMiss
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Set  *Var[2]  0000000A 
   E4:  Call     RandInt     	( 0000003C *Var[4] )
   F8:  Set  *Var[5]  0000001E 
  108:  Sub  *Var[5]  *Var[4] 
  118:  Add  *Var[1]  *Var[5] 
  128:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Set	  *Var[2] 40` %
  140:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
		Wait	 10
		Set	  *Var[2] 10`
		Call     FlyPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000007 FFFFFFF6 .Easing:Linear )
  168:  Sub  *Var[1]  00000032 
  178:  Set  *Var[2]  0000000A 
  188:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  1B0:  Sub  *Var[1]  0000001E 
  1C0:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  1E8:  Sub  *Var[1]  00000014 
  1F8:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  220:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  23C:  Return
  244:  End
}

#new:Script $Script_StallHammerHit
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Add	  *Var[2] 30`
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
		Wait	 10
		Sub	  *Var[2] 30`
		Call     FlyPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 FFFFFFF6 .Easing:Linear )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}

#new:Script $Script_StallHammerHitPartner
{
		If *Var0 < 2`
			Return
		EndIf
    0:  Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
   30:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
   48:  Wait     00000004 
   54:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .False )
   70:  Call     8026FA00 ( FFFFFF81 *Var0 00000002 00000000 00000000 )
   90:  Call     PlaySoundAtPart 	( .Actor:Self *Var0 000002E9 )
		Call	 SetTargetActor		( .Actor:Self .Actor:Partner )
   A8:  Call     SetGoalToTarget 	( .Actor:Self )
		Call	 SetTargetActor		( .Actor:Self .Actor:Player )
   B8:  Call     GetGoalPos  	( .Actor:Self *Var[1] *Var[2] *Var[3] )
   D4:  Call     SetPartJumpGravity 	( .Actor:Self *Var0 *Fixed[1.3007812] )
		Add	  *Var[2] 30`
   EC:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000F .True )
		Wait	 10
		Sub	  *Var[2] 30`		
		Call     FlyPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 FFFFFFF6 .Easing:Linear )
  114:  Sub  *Var[1]  00000032 
  124:  Set  *Var[2]  0000000A 
  134:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000014 .True )
  15C:  Sub  *Var[1]  0000001E 
  16C:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 0000000A .True )
  194:  Sub  *Var[1]  00000014 
  1A4:  Call     JumpPartTo 	( .Actor:Self *Var0 *Var[1] *Var[2] *Var[3] 00000005 .True )
  1CC:  Call     SetPartFlagBits 	( .Actor:Self *Var0 00000001 .True )
  1E8:  Return
  1F0:  End
}
/%
#new:Script $Script_MultiHammer
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Thread
   44:  	Set  *Var0  00000000 
   54:  	Loop     00000064 
   60:  		Add  *Var0  00000014 
   70:  		Mod  *Var0  00000168 
   80:  		Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *Var0 )
   A0:  		Call     SetPartRotation 	( .Actor:Self 00000003 00000000 00000000 *Var0 )
   C0:  		Call     SetPartRotation 	( .Actor:Self 00000004 00000000 00000000 *Var0 )
   E0:  		Call     SetPartRotation 	( .Actor:Self 00000005 00000000 00000000 *Var0 )
  100:  		Call     SetPartRotation 	( .Actor:Self 00000006 00000000 00000000 *Var0 )
  120:  		Wait     00000001 
  12C:  	EndLoop
  134:  EndThread
  13C:  Call     GetActorPos 	( .Actor:Self *Var0 *Var[1] *Var[2] )
  158:  Sub  *Var0  00000017 
  168:  Add  *Var[1]  00000017 
  178:  Sub  *Var[2]  00000002 
  188:  Call     SetPartPos 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] )
  1A8:  Call     SetPartPos 	( .Actor:Self 00000003 *Var0 *Var[1] *Var[2] )
  1C8:  Call     SetPartPos 	( .Actor:Self 00000004 *Var0 *Var[1] *Var[2] )
  1E8:  Call     SetPartPos 	( .Actor:Self 00000005 *Var0 *Var[1] *Var[2] )
  208:  Call     SetPartPos 	( .Actor:Self 00000006 *Var0 *Var[1] *Var[2] )
  228:  Call     GetStatusFlags ( .Actor:Self *Var0 )
  23C:  If  *Var0  &  00080000 
  24C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2AC:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2CC:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2EC:  Else
  2F4:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  314:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  334:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  354:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  374:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  394:  EndIf
  39C:  Call     EnemyTestTarget ( .Actor:Self *Var0 00000000 00000000 00000001 00000010 )
  3C0:  Switch  *Var0 
  3CC:  	CaseOR  ==  00000006 
  3D8:  	CaseOR  ==  00000005 
  3E4:  		Set  *Var[A]  *Var0 
  3F4:  		Set  *Var0  00000002 
  404:  		Exec     $Script_HammerMiss 
  410:  		Wait     00000005 
  41C:  		Set  *Var0  00000003 
  42C:  		Exec     $Script_HammerMiss 
  438:  		Wait     00000005 
  444:  		Set  *Var0  00000004 
  454:  		Exec     $Script_HammerMiss 
  460:  		Wait     00000005 
  46C:  		Set  *Var0  00000005 
  47C:  		Exec     $Script_HammerMiss 
  488:  		Wait     00000005 
  494:  		Set  *Var0  00000006 
  4A4:  		Exec     $Script_HammerMiss 
  4B0:  		Wait     00000005 
  4BC:  		Wait     00000014 
  4C8:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  4E0:  		If  *Var[A]  ==  00000005 
  4F0:  			Call     EnemyTestTarget ( .Actor:Self *Var0 80000000 00000000 00000000 00000000 )
  514:  		EndIf
  51C:  		Wait     0000000F 
  528:  		Call     YieldTurn   	( )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		Wait     00000014 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Thread
  5BC:  	Set  *Var0  00000002 
  5CC:  	Exec     $Script_HammerHit 
  5D8:  	Wait     00000005 
  5E4:  	Set  *Var0  00000003 
  5F4:  	Exec     $Script_HammerHit 
  600:  	Wait     00000005 
  60C:  	Set  *Var0  00000004 
  61C:  	Exec     $Script_HammerHit 
  628:  	Wait     00000005 
  634:  	Set  *Var0  00000005 
  644:  	Exec     $Script_HammerHit 
  650:  	Wait     00000005 
  65C:  	Set  *Var0  00000006 
  66C:  	Exec     $Script_HammerHit 
  678:  EndThread
  680:  Wait     00000015 
  68C:  Wait     00000002 
  698:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 00000000 00000002 00000010 )
  6C0:  Wait     00000005 
  6CC:  Wait     00000002 
  6D8:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 00000000 00000002 00000040 )
  700:  Wait     00000005 
  70C:  Wait     00000002 
  718:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 00000000 00000002 00000040 )
  740:  Wait     00000005 
  74C:  Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  764:  Wait     00000002 
  770:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 00000000 00000002 00000040 )
  798:  Wait     00000005 
  7A4:  Wait     00000002 
  7B0:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 80080332 00000002 00000020 )
  7D8:  Switch  *Var0 
  7E4:  	CaseOR  ==  00000000 
  7F0:  	CaseOR  ==  00000002 
  7FC:  		Wait     00000014 
  808:  		Call     YieldTurn   	( )
  814:  	EndCaseGroup
  81C:  EndSwitch
  824:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  838:  Call     UseIdleAnimation 	( .Actor:Self .True )
  84C:  Return
  854:  End
%/

#new:Script $Script_WrongWay
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Thread
   44:  	Set  *VarD  00000000 
   54:  	Loop     00000064 
   60:  		Add  *VarD  00000014 
   70:  		Mod  *VarD  00000168 
   80:  		Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *VarD )
   A0:  		Call     SetPartRotation 	( .Actor:Self 00000003 00000000 00000000 *VarD )
   C0:  		Call     SetPartRotation 	( .Actor:Self 00000004 00000000 00000000 *VarD )
   E0:  		Call     SetPartRotation 	( .Actor:Self 00000005 00000000 00000000 *VarD )
  100:  		Call     SetPartRotation 	( .Actor:Self 00000006 00000000 00000000 *VarD )
  120:  		Wait     00000001 
  12C:  	EndLoop
  134:  EndThread
  13C:  Call     GetActorPos 	( .Actor:Self *VarD *Var[1] *Var[2] )
  %158:  Sub  *VarD  00000017 
		Set  *VarD  -250`
  168:  Add  *Var[1]  50` 
  178:  Sub  *Var[2]  00000002 
  188:  Call     SetPartPos 	( .Actor:Self 00000002 *VarD *Var[1] *Var[2] )
  1A8:  Call     SetPartPos 	( .Actor:Self 00000003 *VarD *Var[1] *Var[2] )
  1C8:  Call     SetPartPos 	( .Actor:Self 00000004 *VarD *Var[1] *Var[2] )
  1E8:  Call     SetPartPos 	( .Actor:Self 00000005 *VarD *Var[1] *Var[2] )
  208:  Call     SetPartPos 	( .Actor:Self 00000006 *VarD *Var[1] *Var[2] )
  228:  Call     GetStatusFlags ( .Actor:Self *VarD )
  23C:  If  *VarD  &  00080000 
  24C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2AC:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2CC:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2EC:  Else
  2F4:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  314:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  334:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  354:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  374:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  394:  EndIf
  39C:  Call     EnemyTestTarget ( .Actor:Self *VarE 00000000 00000000 00000001 00000010 )
  3C0:  Switch  *VarE 
  3CC:  	CaseOR  ==  00000006 
  3D8:  	CaseOR  ==  00000005 
				Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
				Set  *Var[A]  *VarE 
				Switch *Var[9]
					CaseOR == 5
						Set  *Var0  00000002 
						%Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerMiss 
						Wait     00000007
					CaseOR == 4
						Set  *Var0  00000003 
						%Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerMiss 
						Wait     00000007 
					CaseOR == 3				
						Set  *Var0  00000004 
						%Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerMiss 
						Wait     00000007 
					CaseOR == 2				
						Set  *Var0  00000005 
						%Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerMiss 
						Wait     00000007 
					CaseOR == 1
						Set  *Var0  00000006 
						%Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerMiss 
						Wait     00000007 
					EndCaseGroup
				EndSwitch
  4BC:  		Wait     00000014 
  4C8:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  4E0:  		If  *Var[A]  ==  00000005 
  4F0:  			Call     EnemyTestTarget ( .Actor:Self *VarE 80000000 00000000 00000000 00000000 )
  514:  		EndIf
  51C:  		Wait     0000000F 
  528:  		Call     YieldTurn   	( )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		Wait     00000014 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Thread
			Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
			Switch *Var[9]
				CaseOR == 5
					Set  *Var0  00000002 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_HammerHit 
					Wait     00000007
				CaseOR == 4
					Set  *Var0  00000003 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_HammerHit 
					Wait     00000007 
				CaseOR == 3
					Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
					If  *Var[B]  &  01000000 
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerHit
					Else
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_HammerHitPartner
					EndIf
					Wait     00000007 
				CaseOR == 2
					Set  *Var0  00000005 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_HammerHit 
					Wait     00000007 
				CaseOR == 1
					Set  *Var0  00000006 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_HammerHit 
				EndCaseGroup
			EndSwitch
  678:  EndThread
  680:  Wait     00000015 
  %68C:  Wait     00000002 
		Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
		Switch *Var[9]
			CaseOR == 5
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  698: 		 	Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000007 00000010 )
  6C0:  		Wait     00000007 
			CaseOR == 4
  6D8:  		Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000007 00000040 )
  700:  		Wait     00000007
			CaseOR == 3
				Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
				If  *Var[B]  &  01000000 
					Call	 SetTargetActor	( .Actor:Self .Actor:Player )
					Call	 SetGoalToTarget ( .Actor:Self )
					Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000007 00000040 )
				Else
					Call	 SetTargetActor	( .Actor:Self .Actor:Partner )
					Call	 SetGoalToTarget ( .Actor:Self )
  718:  			Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000002 00000020 )
				EndIf
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
  740:  		Wait     00000007
  74C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
			CaseOR == 2
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  770:  		Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000007 00000040 )
  798:  		Wait     00000007
			CaseOR == 1
  7B0: 			 Call     EnemyDamageTarget 	( .Actor:Self *VarF 10000000 00000000 80080264 00000007 00000020 )
			EndCaseGroup
		EndSwitch
  7D8:  Switch  *VarF 
  7E4:  	CaseOR  ==  00000000 
  7F0:  	CaseOR  ==  00000002 
  7FC:  		Wait     00000014 
  808:  		Call     YieldTurn   	( )
  814:  	EndCaseGroup
  81C:  EndSwitch
		Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
		Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .False )
  824:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  838:  Call     UseIdleAnimation 	( .Actor:Self .True )
  84C:  Return
  854:  End
}

#new:Script $Script_SlowHammer
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *VarD )
   4C:  If  *VarD  ==  .Phase:FirstStrike
   5C:  	Call     UseBattleCamPreset 	( 00000002 )
   6C:  	Call     MoveBattleCamOver 	( 00000001 )
   7C:  EndIf
   84:  Call     GetBattlePhase ( *VarD )
   94:  If  *VarD  ==  .Phase:FirstStrike
   A4:  	ChildThread
   AC:  		Set  *VarD  00000000 
   BC:  		Label    00000000 
   C8:  		Add  *VarD  00000014 
   D8:  		Mod  *VarD  00000168 
   E8:  		Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *VarD )
  108:  		Wait     00000001 
  114:  		Goto     00000000 
  120:  	EndChildThread
  128:  	Call     SetPartPos 	( .Actor:Self 00000002 00000000 00000032 00000000 )
  148:  	Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  164:  	Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
  17C:  	Goto     00000064 
  188:  EndIf
  190:  ChildThread
  198:  	Set  *VarD  00000000 
  1A8:  	Label    00000000 
  1B4:  	Add  *VarD  00000014 
  1C4:  	Mod  *VarD  00000168 
  1D4:  	Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *VarD )
  1F4:  	Wait     00000001 
  200:  	Goto     00000000 
  20C:  EndChildThread
  214:  Call     GetActorPos 	( .Actor:Self *VarD *Var[1] *Var[2] )
  230:  Sub  *VarD  00000017 
  240:  Add  *Var[1]  00000017 
  250:  Sub  *Var[2]  00000002 
  260:  Call     SetPartPos 	( .Actor:Self 00000002 *VarD *Var[1] *Var[2] )
  280:  Call     SetAnimation 	( .Actor:Self 00000001 00F5000C )
  298:  Wait     00000008 
  2A4:  Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  2C0:  Label    00000064 
  2CC:  Thread
  2D4:  	Wait     0000000F 
  2E0:  	Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  2F8:  EndThread
  300:  Call     GetStatusFlags ( .Actor:Self *VarD )
  314:  If  *VarD  &  00080000 
  324:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  344:  Else
  34C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  36C:  EndIf
  374:  Call     EnemyTestTarget ( .Actor:Self *VarD 00000000 00000000 00000001 00000010 )
  398:  Switch  *VarD 
  3A4:  	CaseOR  ==  00000006 
  3B0:  	CaseOR  ==  00000005 
  3BC:  		Set  *Var[A]  *VarD 
  3CC:  		Call     8026FA00 ( FFFFFF81 00000002 00000002 00000000 00000000 )
  3EC:  		Call     PlaySoundAtPart 	( .Actor:Self 00000002 000002E9 )
  404:  		Call     SetGoalToTarget 	( .Actor:Self )
  414:  		Call     GetGoalPos  	( .Actor:Self *Var0 *Var[1] *Var[2] )
  430:  		Sub  *Var0  00000014 
  440:  		Set  *Var[1]  0000000A 
  450:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.3] ) %1.3
  468:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 00000019 .True )		%F -> 19
  490:  		If  *Var[A]  ==  00000005 
  4A0:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  4C4:  		EndIf
  4CC:  		Sub  *Var0  00000028 
  4DC:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 0000000F .True )
  504:  		Sub  *Var0  0000001E 
  514:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 0000000A .True )
  53C:  		Sub  *Var0  00000014 
  54C:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 00000005 .True )
  574:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  590:  		Wait     0000000F 
  59C:  		Call     YieldTurn   	( )
  5A8:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  5C4:  		Wait     00000014 
  5D0:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  5E8:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5FC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  610:  		Return
  618:  	EndCaseGroup
  620:  EndSwitch
  628:  Call     8026FA00 ( FFFFFF81 00000002 00000002 00000000 00000000 )
  648:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 000002E9 )
  660:  Call     SetGoalToTarget 	( .Actor:Self )
  670:  Call     GetGoalPos  	( .Actor:Self *Var0 *Var[1] *Var[2] )
  68C:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.3] ) %1.3
  6A4:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 00000019 .True )		%F -> 19
  %6CC:  Wait     00000002 
  6D8:  Call     EnemyDamageTarget 	( .Actor:Self *Var0 10000000 00000000 80200264 0000000E 00000020 )
  700:  Switch  *Var0 
  70C:  	CaseOR  ==  00000000 
  718:  	CaseOR  ==  00000002 
  724:  		Call     GetPartOffset 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] )
  744:  		Sub  *Var0  00000032 
  754:  		Set  *Var[1]  0000000A 
  764:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 00000014 .True )
  78C:  		Sub  *Var0  0000001E 
  79C:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 0000000A .True )
  7C4:  		Sub  *Var0  00000014 
  7D4:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] 00000005 .True )
  7FC:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  818:  		Wait     00000014 
  824:  		Call     YieldTurn   	( )
  830:  	EndCaseGroup
  838:  EndSwitch
		Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
		Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .False )
  840:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  854:  Call     UseIdleAnimation 	( .Actor:Self .True )
  868:  Return
  870:  End
}

#new:Script $Script_BouncyHammer
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Thread
   44:  	Set  *Var0  00000000 
   54:  	Loop     00000064 
   60:  		Add  *Var0  00000014 
   70:  		Mod  *Var0  00000168 
   80:  		Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *Var0 )
   A0:  		Call     SetPartRotation 	( .Actor:Self 00000003 00000000 00000000 *Var0 )
   C0:  		Call     SetPartRotation 	( .Actor:Self 00000004 00000000 00000000 *Var0 )
   E0:  		Call     SetPartRotation 	( .Actor:Self 00000005 00000000 00000000 *Var0 )
  100:  		Call     SetPartRotation 	( .Actor:Self 00000006 00000000 00000000 *Var0 )
  120:  		Wait     00000001 
  12C:  	EndLoop
  134:  EndThread
  13C:  Call     GetActorPos 	( .Actor:Self *Var0 *Var[1] *Var[2] )
  158:  Sub  *Var0  00000017 
  168:  Add  *Var[1]  00000017 
  178:  Sub  *Var[2]  00000002 
  188:  Call     SetPartPos 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] )
  1A8:  Call     SetPartPos 	( .Actor:Self 00000003 *Var0 *Var[1] *Var[2] )
  1C8:  Call     SetPartPos 	( .Actor:Self 00000004 *Var0 *Var[1] *Var[2] )
  1E8:  Call     SetPartPos 	( .Actor:Self 00000005 *Var0 *Var[1] *Var[2] )
  208:  Call     SetPartPos 	( .Actor:Self 00000006 *Var0 *Var[1] *Var[2] )
  228:  Call     GetStatusFlags ( .Actor:Self *Var0 )
  23C:  If  *Var0  &  00080000 
  24C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2AC:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2CC:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2EC:  Else
  2F4:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  314:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  334:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  354:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  374:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  394:  EndIf
  39C:  Call     EnemyTestTarget ( .Actor:Self *VarE 00000000 00000000 00000001 00000010 )
  3C0:  Switch  *VarE 
  3CC:  	CaseOR  ==  00000006 
  3D8:  	CaseOR  ==  00000005 
				Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
				Set  *Var[A]  *VarE 
				Switch *Var[9]
					CaseOR == 5
						Set  *Var0  00000002 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerMiss 
						Wait     00000007 
					CaseOR == 4					
						Set  *Var0  00000003 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerMiss 
						Wait     00000007 
					CaseOR == 3					
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerMiss 
						Wait     00000007 
					CaseOR == 2					
						Set  *Var0  00000005 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerMiss 
						Wait     00000007 
					CaseOR == 1
						Set  *Var0  00000006 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerMiss 
						Wait     00000007 
					EndCaseGroup
				EndSwitch
  4BC:  		Wait     00000024 %+10
  4C8:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  4E0:  		If  *Var[A]  ==  00000005 
  4F0:  			Call     EnemyTestTarget ( .Actor:Self *VarE 80000000 00000000 00000000 00000000 )
  514:  		EndIf
  51C:  		Wait     0000000F 
  528:  		Call     YieldTurn   	( )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		Wait     00000014 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Thread
			Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
			Switch *Var[9]
				CaseOR == 5
					Set  *Var0  00000002 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_BouncyHammerHit 
					Wait     00000007
				CaseOR == 4
					Set  *Var0  00000003 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_BouncyHammerHit 
					Wait     00000007 
				CaseOR == 3
					Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
					If  *Var[B]  &  01000000 
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerHit
					Else
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_BouncyHammerHitPartner
					EndIf
					Wait     00000007 
				CaseOR == 2
					Set  *Var0  00000005 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_BouncyHammerHit 
					Wait     00000007 
				CaseOR == 1
					Set  *Var0  00000006 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_BouncyHammerHit 
				EndCaseGroup
			EndSwitch
  678:  EndThread
  680:  Wait     00000025 %+10?
  %68C:  Wait     00000002 
		Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
		Switch *Var[9]
			CaseOR == 5
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  698: 		 	Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000006 00000010 )
  6C0:  		Wait     00000007
			CaseOR == 4
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  6D8:  		Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000006 00000040 )
  700:  		Wait     00000007
			CaseOR == 3
				Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
				If  *Var[B]  &  01000000 
					Call     SetTargetActor ( .Actor:Self .Actor:Player )
					Call	 SetGoalToTarget ( .Actor:Self )
					Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000006 00000040 )
				Else
					Call	 SetTargetActor	( .Actor:Self .Actor:Partner )
					Call	 SetGoalToTarget ( .Actor:Self )
					Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000002 00000020 )
				EndIf
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
  740:  		Wait     00000007
  74C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
			CaseOR == 2
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  770:  		Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000006 00000040 )
  798:  		Wait     00000007 
			CaseOR == 1
  7B0: 			 Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80080264 00000006 00000020 )
			EndCaseGroup
		EndSwitch
  7D8:  Switch  *VarE 
  7E4:  	CaseOR  ==  00000000 
  7F0:  	CaseOR  ==  00000002 
  7FC:  		Wait     00000014 
  808:  		Call     YieldTurn   	( )
  814:  	EndCaseGroup
  81C:  EndSwitch
		Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
		Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .False )
  824:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  838:  Call     UseIdleAnimation 	( .Actor:Self .True )
  84C:  Return
  854:  End
}

#new:Script $Script_StallHammer
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Thread
   44:  	Set  *Var0  00000000 
   54:  	Loop     00000064 
   60:  		Add  *Var0  00000014 
   70:  		Mod  *Var0  00000168 
   80:  		Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *Var0 )
   A0:  		Call     SetPartRotation 	( .Actor:Self 00000003 00000000 00000000 *Var0 )
   C0:  		Call     SetPartRotation 	( .Actor:Self 00000004 00000000 00000000 *Var0 )
   E0:  		Call     SetPartRotation 	( .Actor:Self 00000005 00000000 00000000 *Var0 )
  100:  		Call     SetPartRotation 	( .Actor:Self 00000006 00000000 00000000 *Var0 )
  120:  		Wait     00000001 
  12C:  	EndLoop
  134:  EndThread
  13C:  Call     GetActorPos 	( .Actor:Self *Var0 *Var[1] *Var[2] )
  158:  Sub  *Var0  00000017 
  168:  Add  *Var[1]  00000017 
  178:  Sub  *Var[2]  00000002 
  188:  Call     SetPartPos 	( .Actor:Self 00000002 *Var0 *Var[1] *Var[2] )
  1A8:  Call     SetPartPos 	( .Actor:Self 00000003 *Var0 *Var[1] *Var[2] )
  1C8:  Call     SetPartPos 	( .Actor:Self 00000004 *Var0 *Var[1] *Var[2] )
  1E8:  Call     SetPartPos 	( .Actor:Self 00000005 *Var0 *Var[1] *Var[2] )
  208:  Call     SetPartPos 	( .Actor:Self 00000006 *Var0 *Var[1] *Var[2] )
  228:  Call     GetStatusFlags ( .Actor:Self *Var0 )
  23C:  If  *Var0  &  00080000 
  24C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2AC:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2CC:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  2EC:  Else
  2F4:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  314:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  334:  	Call     SetPartScale ( .Actor:Self 00000004 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  354:  	Call     SetPartScale ( .Actor:Self 00000005 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  374:  	Call     SetPartScale ( .Actor:Self 00000006 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  394:  EndIf
  39C:  Call     EnemyTestTarget ( .Actor:Self *VarE 00000000 00000000 00000001 00000010 )
  3C0:  Switch  *VarE 
  3CC:  	CaseOR  ==  00000006 
  3D8:  	CaseOR  ==  00000005 
				Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
				Set  *Var[A]  *VarE 
				Switch *Var[9]
					CaseOR == 5
						Set  *Var0  00000002 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerMiss 
						Wait     00000007
					CaseOR == 4					
						Set  *Var0  00000003 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerMiss 
						Wait     00000007 
					CaseOR == 3					
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerMiss 
						Wait     00000007 
					CaseOR == 2					
						Set  *Var0  00000005 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerMiss 
						Wait     00000007 
					CaseOR == 1
						Set  *Var0  00000006 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerMiss 
						Wait     00000007 
					EndCaseGroup
				EndSwitch
  4BC:  		Wait     00000029 %+15
  4C8:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
  4E0:  		If  *Var[A]  ==  00000005 
  4F0:  			Call     EnemyTestTarget ( .Actor:Self *VarE 80000000 00000000 00000000 00000000 )
  514:  		EndIf
  51C:  		Wait     0000000F 
  528:  		Call     YieldTurn   	( )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		Wait     00000014 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Thread
			Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
			Switch *Var[9]
				CaseOR == 5
					Set  *Var0  00000002 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_StallHammerHit 
					Wait     00000007
				CaseOR == 4
					Set  *Var0  00000003 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_StallHammerHit 
					Wait     00000007 
				CaseOR == 3
					Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
					If  *Var[B]  &  01000000 
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerHit
					Else
						Set  *Var0  00000004 
						Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
						Exec     $Script_StallHammerHitPartner
					EndIf
					Wait     00000007 
				CaseOR == 2
					Set  *Var0  00000005 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_StallHammerHit 
					Wait     00000007 
				CaseOR == 1
					Set  *Var0  00000006 
					Call     SetActorVar 	( .Actor:Self 00000003 *Var0 )
					Exec     $Script_StallHammerHit 
				EndCaseGroup
			EndSwitch
  678:  EndThread
  680:  Wait     0000002A %+15?
  %68C:  Wait     00000002 
		Call	 GetActorVar 	( .Actor:Self 00000002 *Var[9] )
		Switch *Var[9]
			CaseOR == 5
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  698: 		 	Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000005 00000010 )
  6C0:  		Wait     00000007
			CaseOR == 4
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  6D8:  		Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000005 00000040 )
  700:  		Wait     00000007
			CaseOR == 3
				Call	 GetStatusFlags ( .Actor:Partner *Var[B] )
				If  *Var[B]  &  01000000 
					Call	 SetTargetActor	( .Actor:Self .Actor:Player )
					Call	 SetGoalToTarget ( .Actor:Self )
					Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000005 00000040 )
				Else
					Call	 SetTargetActor	( .Actor:Self .Actor:Partner )
					Call	 SetGoalToTarget ( .Actor:Self )
					Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000002 00000020 )
				EndIf
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
  740:  		Wait     00000007
  74C:  		Call     SetAnimation 	( .Actor:Self 00000001 00F50002 )
			CaseOR == 2
				Call	 SetTargetActor	( .Actor:Self .Actor:Player )
				Call	 SetGoalToTarget ( .Actor:Self )
  770:  		Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000005 00000040 )
  798:  		Wait     00000007
			CaseOR == 1
  7B0: 			 Call     EnemyDamageTarget 	( .Actor:Self *VarE 10000000 00000000 80200164 00000005 00000020 )
			EndCaseGroup
		EndSwitch
  7D8:  Switch  *VarE 
  7E4:  	CaseOR  ==  00000000 
  7F0:  	CaseOR  ==  00000002 
  7FC:  		Wait     00000014 
  808:  		Call     YieldTurn   	( )
  814:  	EndCaseGroup
  81C:  EndSwitch
		Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
		Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .False )
  824:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  838:  Call     UseIdleAnimation 	( .Actor:Self .True )
  84C:  Return
  854:  End
}
%the idea is that his hammer moves are really hard to predict with weird trajectories and stuff
%	They still inflict statuses :)
%AI:
%	# of hammers goes up as HP goes down
%	Various hammer moves avaliable for certain hammer amounts
%	Move selected is based on AI state

%moves:
%	"wrong way": hammers come from left side of screen (can hit partner)
%	"slow hammer" (only 1 hammer): hammer moves really slowly
%	"bouncy hammer": hammer bounces (can hit partner)
%	"stall hammer": hammers stall above you

#new:Script $Script_TakeTurn_MagicBro
{
    0:  Call     GetActorHP  	( .Actor:Self *VarE )
   14:  Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
		Mul *VarE 5
		Div *VarE *Var[1]
		Switch *VarE
			CaseOR == 5 %rounding down means that value 5 only happens when his hp = max
			CaseOR == 4
				Call     SetActorVar 	( .Actor:Self 00000002 00000001 ) 
			EndCaseGroup
			Case == 3
				Call     SetActorVar 	( .Actor:Self 00000002 00000002 ) 
			Case == 2
				Call     SetActorVar 	( .Actor:Self 00000002 00000003 ) 
			Case == 1
				Call     SetActorVar 	( .Actor:Self 00000002 00000004 ) 
			Default
				Call     SetActorVar 	( .Actor:Self 00000002 00000005 ) 
		EndSwitch		
		Call	 GetActorVar 	( .Actor:Self 00000001 *VarE )
		Switch *VarE
			Case == 0
				ExecWait $Script_WrongWay
				Call	 GetActorVar 	( .Actor:Self 00000002 *Var[1] )
				If *Var[1] > 1
					Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
				Else
					Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
				EndIf
			Case == 1
				ExecWait $Script_SlowHammer
				Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
			Case == 2
				ExecWait $Script_BouncyHammer
				Call     SetActorVar 	( .Actor:Self 00000001 00000003 )
			Case == 3
				ExecWait $Script_StallHammer
				Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
		EndSwitch
		Return
		End
}
