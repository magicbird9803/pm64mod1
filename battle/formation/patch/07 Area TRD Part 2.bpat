%ok we need to make some space
%first, lets delete most of the "do nothing" scripts
/%
#delete $Script_Idle_80227DE0
#delete $Script_TakeTurn_802284D4
#delete $Script_NextTurn_802284E4
#delete $Script_Idle_8022AD80
#delete $Script_TakeTurn_8022B474
#delete $Script_NextTurn_8022B484
#delete $Script_Idle_8022DD20
#delete $Script_TakeTurn_8022E414
#delete $Script_NextTurn_8022E424
#delete $Script_Idle_80230CC0
#delete $Script_TakeTurn_802313B4
#delete $Script_NextTurn_802313C4
%/

#new:Function $Function_Electrify % ( duration )
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	SW		S1, 14 (SP)
	SW		S2, 18 (SP)
	%get turn count
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S1, A0, R0
	ANDI	V0, V0, 00FF
	%add electify status
	LW		A0, 148 (S1)
	JAL		~Func:get_actor
	DADDU	S2, V0, R0
	ORI		S2, S2, 0B00
	SH		S2, 212 (V0)
	%return
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	LW		S2, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU SP, SP, 20
}

#new:Script	$Script_Nothing
{
Return
End
}

% #new:Script $StackDamage
% Return
% End
	
#new:Script $StackDamage %i'm trying to save space, so i'm doing stuff like this to avoid having to rewrite scripts
{
Set		*Var[0] 0 %?
Set		*Var[1] 0 %?
Call     SetTargetActor ( .Actor:Self .Actor:Player )
Call     SetGoalToTarget 	( .Actor:Self )
Call	 GetActorPos (.Actor:Player *Var[0] *Var[1] *Var[2])
Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[1] )
Mul		 *Var[1]	2 %multiply damage by 2
Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 *Var[1] 00000020 )
Return
End
}

#new:Script $SpinEffectScript %idk, its just for making space in red's script
{
Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
Call     $Function_80218BF8 ( *Var[0] *Var[1] *Var[2] 0000001E )
Wait	 0000001E
Return
End
}
	
%% yay spaghetti code
%% all because i cant pack opcodes in some unrelated file
% #new:Function $TriggerStackDamage 
% LIO 	 A0, $StackDamage
% ADDIU    A1, R0, 000A
% DADDU    A2, R0, R0
% JAL 	802C33E0 %Start Script
% NOP
% JR	RA
% NOP

% #new:Function $TriggerSpinEffectScript
% LIO 	 A0, $SpinEffectScript
% ADDIU    A1, R0, 000A
% DADDU    A2, R0, R0
% JAL 	802C33E0 %Start Script
% NOP
% JR	RA
% NOP
	
% #new:Function $TriggerStackDamage
% JR RA
% NOP
	
/%
@ $Script_Init_80227CEC %theres a lot of nothing here
[0]  Call     BindTakeTurn 	( .Actor:Self $Script_Nothing )
[14]  Call     BindIdle    	( .Actor:Self $Script_Nothing )
[3C]  Call     BindNextTurn 	( .Actor:Self $Script_Nothing )

@ $Script_Init_8022AC8C
{
[0]  Call     BindTakeTurn 	( .Actor:Self $Script_Nothing )
[14]  Call     BindIdle    	( .Actor:Self $Script_Nothing )
[3C]  Call     BindNextTurn 	( .Actor:Self $Script_Nothing )
	
@ $Script_Init_8022DC2C
{
[0]  Call     BindTakeTurn 	( .Actor:Self $Script_Nothing )
[14]  Call     BindIdle    	( .Actor:Self $Script_Nothing )
[3C]  Call     BindNextTurn 	( .Actor:Self $Script_Nothing )
%/
@ $Script_Init_80230BCC
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_Nothing )
   14:  Call     BindIdle    	( .Actor:Self $Script_Nothing )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_80230D28 )
   3C:  Call     BindNextTurn 	( .Actor:Self $Script_Nothing )
   50:  Call     SetActorPos 	( .Actor:Self 00000000 FFFFFC18 00000000 )
   6C:  Call     ForceHomePos 	( .Actor:Self 00000000 FFFFFC18 00000000 )
   88:  Call     HPBarToHome 	( .Actor:Self )
   98:  Call     SetPartFlagBits 	( .Actor:Self 00000001 00020000 .True )
   B4:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   CC:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
		Call	$Function_Electrify ( 32 ) %50 turns, theres no way someone sees it run out unintentionally
   E4:  Return
   EC:  End
}

   
/%
@ $Script_Init_80230BCC %yellow
% [0]  Call     BindTakeTurn 	( .Actor:Self $Script_Nothing )
% [14]  Call     BindIdle    	( .Actor:Self $Script_Nothing )
% [3C]  Call     BindNextTurn 	( .Actor:Self $Script_Nothing )
[E4]	Call	$Function_Electrify ( 32 ) %50 turns, theres no way someone sees it run out unintentionally
[EC]	Return %append stuff to the end; so i have to move this
		End
%/

%Still out of space! lets give everyone the same status table
#delete $StatusTable_80225578
#delete $StatusTable_80228518
#delete $StatusTable_8022E458
	
%remove yellows defense table
%#delete $DefenseTable_8022E440
%#delete $DefenseTable_8022E44C
	
%Actual changes
	
%%don't need this anymore
%thought that the 8 damage shell stack was unavoidable
%it's not, you just have to kill fake bowser and then bomb the stack right after
	
% #new:Function $Function_HasGreedStone
% PUSH	RA
% LIO		V0, 8010F2A6 %this is where the flag is
% LBU		V0, 0 (V0)
% ADDI	A2, V0, 0
% LW		V0, C (A0)
% JAL		~Func:set_variable
% LW		A1, 0 (V0)
% POP		RA
% JR		RA
% ADDIU	V0, R0, 2

@ $FakeBowser
{
[MaxHP]        12`b %10 -> 12
[PowerBounce] 3`b 
}

@ $Script_TakeTurn_8021EC98 %damage: 1 -> 4
{
[2D0]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 0000FFFF 00000000 00000004 00000040 )
}

%Ninjakoopa buffs
%All: 8 hp, 2 atk. Special attack does 2 per bro
%Red: Can attack twice, Immunity to fire
%Green: 3 atk, flipping only works for one turn
%Yellow: Shell attack is faster, is electrified
%Black: +1 def, but only 5 hp

%So it looks like all the regular attacks are fired from a single script
%$Script_80223870

%mul: takes up 10 space

%get actor var takes up 18 space
%damage target call: 28 space
%total is 40 space

%28 space
%flat mario
%exec Wait
%Wait 1 frame

%flat mario function takes up 10
%Call     80269EAC ( 00000017 )

%execWait takes up C space
%Wait takes up C space


%It's way easier to change stack damage than to change the bro count number

@ $DefenseTable_80225560
{
.Element:Normal 00000001
.Element:Quake 00000063 %quake immunity, so no spamming pow blocks
.Element:End
}

@ $DefenseTable_8022556C
{
.Element:Normal 00000000
.Element:Quake 00000063 %quake immunity, so no spamming pow blocks
.Element:End
}

@ $GNinjakoopa %ninjakoopa hp isn't much higher than normal koopas
{
[MaxHP]			8`b
[PowerBounce] 3`b
[StatusTable] $StatusTable_8022B4B8
}

@ $Script_802257A8 %RIP spin attack, it couldn't be buffed even though its literally one line of code
{
[848]  				Call     SetActorVar 	( .Actor:Self 00000002 00000001 ) %2 -> 1
[C00]  				Call     SetActorVar 	( .Actor:Self 00000002 00000001 ) %2 -> 1				
%[1268]  					Mul *Var[1] 2   <---- all methods of adding it I tried failed: there isn't enough space to rewrite scripts, no way to replace stuff in a way that doesn't break
%[1280]				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 *Var[1] 00000020 )
%	don't listen to past shadeblade, i found a way
[1280]		 Call     80269EAC ( 00000017 )
			 ExecWait $StackDamage
			 Wait 	  00000001
[2114]		 Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000003 00000020 ) %1 atk -> 3
}

@ $Script_HandleEvent_80227E48
{
[220]  		Call     SetActorVar 	( .Actor:Self 00000002 00000001 ) %2 -> 1
} 

@ $BNinjakoopa
{
[MaxHP]			5`b
[PowerBounce] 3`b
}
% [StatusTable] $StatusTable_8022B4B8

%black gets a defense buff
@ $DefenseTable_8022B4A0
{
.Element:Normal 00000002
.Element:End
}

@ $DefenseTable_8022B4AC
{
.Element:Normal 00000001
.Element:End
}

@ $StatusTable_8022B4B8 %since all the tables are the same, we have to balance them accordingly
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      40` 
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      30` 
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   60` 
.Status:Shrink    100`
.Status:Stop       75`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -2` %-1 to -2
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}

@ $Script_8022B6E8
{
[1280]		 Call     80269EAC ( 00000017 )
			 ExecWait $StackDamage
			 Wait 	  00000001
[2114]		 		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %1 atk -> 2
}



@ $YNinjakoopa
{
[MaxHP]			8`b
[PowerBounce] 3`b
[StatusTable] $StatusTable_8022B4B8
}

@ $PartsTable_8022E504
{
00800000 01000000 FB2400FF $IdleAnimations_8022E550 $DefenseTable_8022E440 00001000 00000000 00000000 00000000 
%replace $DefenseTable_8022E440
}

%$DefenseTable_8022556C

%not true anymore -> %ran out of space, so no immunity :/
@ $DefenseTable_8022E440
{
.Element:Normal 00000001
.Element:Shock 00000063
.Element:End
}

@ $DefenseTable_8022E44C
{
.Element:Normal 00000000
.Element:Shock 00000063
.Element:End
}

%the later changes took up too much space :(, time to revert to old version
%yellow is electric now

%normally, it checks for status flags == 0
%but that makes electrified koopas immobile
%so i have to fix it

@ $Script_80222C44
{
[88]  	If  *Var[1]  !& 0035D000
[25C]  	If  *Var[1]  !& 0035D000 
}

@ $Script_802230E8
{
[88]  	If  *Var[1] !& 0035D000  
}

@ $Script_HandleEvent_80230D28
{
[4F8]  	If  *Var[0]  !& 0035D000   
}

@ $Script_8022E688
{
[24]				If  *Var[0]  &  0035D000  %only check for the stunning effects
[1280]		 Call     80269EAC ( 00000017 )
			 ExecWait $StackDamage
			 Wait 	  00000001
[2114]		 		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %1 atk -> 2
[2198]  			Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %16 -> 24
}

% @ $Script_HandleEvent_80230D28
% [4F8]				If  *Var[0]  &  FBFFDFFF

% @ $Script_8022E688
    % 0:  Call     SetOwnerID  	( .Actor:Enemy1 )
   % 10:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   % 24:  If  *Var[0]  !=  00000000 %what this does is check for any status effects and stops the script if there are any. This is why making him electric breaks everything (idk what the electric status flag is)
			% Return
   % 3C:  EndIf
   % 44:  Call     UseIdleAnimation 	( .Actor:Self .False )
   % 58:  Switch  *Var[A] 
   % 64:  	Case  ==  00000000 
   % 70:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   % 88:  		Switch  *Var[0] 
   % 94:  			Case  ==  00000003 
   % A0:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E550 )
   % B8:  				Call     SetAnimation 	( .Actor:Self 00000001 00660204 )
   % D0:  			CaseOR  ==  00000004 
   % DC:  			CaseOR  ==  00000005 
   % E8:  			CaseOR  ==  00000006 
   % F4:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E5A4 )
  % 10C:  				Call     SetAnimation 	( .Actor:Self 00000001 00660205 )
  % 124:  			EndCaseGroup
  % 12C:  		EndSwitch
  % 134:  	Case  ==  00000001 
  % 140:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 158:  		Switch  *Var[0] 
  % 164:  			CaseOR  ==  00000003 
  % 170:  			CaseOR  ==  00000004 
  % 17C:  			CaseOR  ==  00000005 
  % 188:  			CaseOR  ==  00000006 
  % 194:  				Wait     00000005 
  % 1A0:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E5E0 )
  % 1B8:  				Call     SetAnimation 	( .Actor:Self 00000001 0066020D )
  % 1D0:  			EndCaseGroup
  % 1D8:  		EndSwitch
  % 1E0:  	Case  ==  00000002 
  % 1EC:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 204:  		Switch  *Var[0] 
  % 210:  			CaseOR  ==  00000003 
  % 21C:  			CaseOR  ==  00000004 
  % 228:  			CaseOR  ==  00000005 
  % 234:  			CaseOR  ==  00000006 
  % 240:  				SetConst  *Var[0]  00000001 
  % 250:  				SetConst  *Var[1]  0066020B 
  % 260:  				ExecWait DoNormalHit 
  % 26C:  				Call     GetActorVar 	( .Actor:Enemy4 00000000 *Var[0] )
  % 284:  				ConstAND *Var[0] 000000C0 
  % 294:  				If  *Var[0]  !=  000000C0 
  % 2A4:  					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E5E0 )
  % 2BC:  					Call     SetAnimation 	( .Actor:Self 00000001 0066020D )
  % 2D4:  				Else
  % 2DC:  					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E670 )
  % 2F4:  					Call     SetAnimation 	( .Actor:Self 00000001 0066020A )
  % 30C:  				EndIf
  % 314:  			EndCaseGroup
  % 31C:  		EndSwitch
  % 324:  	Case  ==  00000003 
  % 330:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 348:  		Switch  *Var[0] 
  % 354:  			CaseOR  ==  00000003 
  % 360:  			CaseOR  ==  00000004 
  % 36C:  			CaseOR  ==  00000005 
  % 378:  			CaseOR  ==  00000006 
  % 384:  				Call     $Function_8021A288 ( 0000000E )
  % 394:  				SetConst  *Var[0]  00000001 
  % 3A4:  				SetConst  *Var[1]  0066020E 
  % 3B4:  				SetConst  *Var[2]  FFFFFFFF 
  % 3C4:  				ExecWait DoBurnHit 
  % 3D0:  				Call     GetActorVar 	( .Actor:Enemy4 00000000 *Var[0] )
  % 3E8:  				ConstAND *Var[0] 000000C0 
  % 3F8:  				If  *Var[0]  !=  000000C0 
  % 408:  					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E5E0 )
  % 420:  					Call     SetAnimation 	( .Actor:Self 00000001 0066020D )
  % 438:  				Else
  % 440:  					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E670 )
  % 458:  					Call     SetAnimation 	( .Actor:Self 00000001 0066020A )
  % 470:  				EndIf
  % 478:  			EndCaseGroup
  % 480:  		EndSwitch
  % 488:  	Case  ==  00000004 
  % 494:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 4AC:  		Switch  *Var[0] 
  % 4B8:  			Case  ==  00000003 
  % 4C4:  				SetConst  *Var[0]  00000001 
  % 4D4:  				SetConst  *Var[1]  00660208 
  % 4E4:  				ExecWait DoImmune 
  % 4F0:  				Call     SetAnimation 	( .Actor:Self 00000001 00660209 )
  % 508:  			CaseOR  ==  00000004 
  % 514:  			CaseOR  ==  00000005 
  % 520:  			CaseOR  ==  00000006 
  % 52C:  				SetConst  *Var[0]  00000001 
  % 53C:  				SetConst  *Var[1]  0066021F 
  % 54C:  				ExecWait DoImmune 
  % 558:  				Call     SetAnimation 	( .Actor:Self 00000001 00660220 )
  % 570:  			EndCaseGroup
  % 578:  		EndSwitch
  % 580:  		Wait     0000000F 
  % 58C:  	Case  ==  00000005 
  % 598:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 5B0:  		Switch  *Var[0] 
  % 5BC:  			CaseOR  ==  00000003 
  % 5C8:  			CaseOR  ==  00000004 
  % 5D4:  			CaseOR  ==  00000005 
  % 5E0:  			CaseOR  ==  00000006 
  % 5EC:  				Set  *Flag[00]  00000000 
  % 5FC:  				If  *Var[0]  ==  00000003 
  % 60C:  					Set  *Flag[00]  00000001 
  % 61C:  				EndIf
  % 624:  				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  % 638:  				Call     $Function_80219CF0 ( *Var[0] *Var[1] *Var[2] )
  % 650:  				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 66C:  				Call     SetAnimation 	( .Actor:Self 00000001 0066020A )
  % 684:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E670 )
  % 69C:  				Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  % 6BC:  				If  *Flag[00]  ==  00000001 
  % 6CC:  					Call     $Function_80219B20 ( 00000100 00000005 )
  % 6E0:  					Thread
  % 6E8:  						Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.80078125] )
  % 704:  					EndThread
  % 70C:  				EndIf
  % 714:  				Call     SetAnimation 	( .Actor:Self 00000001 0066020C )
  % 72C:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E67C )
  % 744:  				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  % 764:  				Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  % 784:  				Call     SetActorFlagBits 	( .Actor:Self 00040000 .False )
  % 79C:  				Call     SetPartFlagBits 	( .Actor:Self 00000001 00020000 .False )
  % 7B8:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 7D4:  				Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 7F0:  				Call     HPBarToHome 	( .Actor:Self )
  % 800:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E61C )
  % 818:  				Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8022556C )
  % 830:  				Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
  % 848:  				Call     SetActorVar 	( .Actor:Self 00000002 00000002 )
  % 860:  				Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000012 )
  % 87C:  			EndCaseGroup
  % 884:  		EndSwitch
  % 88C:  	Case  ==  00000006 
  % 898:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % 8B0:  		Switch  *Var[0] 
  % 8BC:  			CaseOR  ==  00000003 
  % 8C8:  			CaseOR  ==  00000004 
  % 8D4:  			CaseOR  ==  00000005 
  % 8E0:  			CaseOR  ==  00000006 
  % 8EC:  				Set  *Flag[00]  00000000 
  % 8FC:  				If  *Var[0]  ==  00000003 
  % 90C:  					Set  *Flag[00]  00000001 
  % 91C:  				EndIf
  % 924:  				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  % 938:  				Call     $Function_80219CF0 ( *Var[0] *Var[1] *Var[2] )
  % 950:  				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 96C:  				Call     SetAnimation 	( .Actor:Self 00000001 0066020E )
  % 984:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E670 )
  % 99C:  				Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  % 9BC:  				If  *Flag[00]  ==  00000001 
  % 9CC:  					Call     $Function_80219B20 ( 00000100 00000005 )
  % 9E0:  					Thread
  % 9E8:  						Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.80078125] )
  % A04:  					EndThread
  % A0C:  				EndIf
  % A14:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % A30:  				Call     8027D8E0 ( FFFFFF81 *Var[3] *Var[4] )
  % A48:  				DivF  *Var[3]  *Fixed[2.0] 
  % A58:  				AddF  *Var[1]  *Var[3] 
  % A68:  				AddF  *Var[2]  *Fixed[5.0] 
  % A78:  				DivF  *Var[3]  *Fixed[10.0] 
  % A88:  				Call     PlayEffect  	( {FX:SmokeBurst:Black} *Var[0] *Var[1] *Var[2] *Var[3] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  % ACC:  				Call     SetAnimation 	( .Actor:Self 00000001 0066020C )
  % AE4:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E67C )
  % AFC:  				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  % B1C:  				Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  % B3C:  				Call     SetActorFlagBits 	( .Actor:Self 00040000 .False )
  % B54:  				Call     SetPartFlagBits 	( .Actor:Self 00000001 00020000 .False )
  % B70:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % B8C:  				Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % BA8:  				Call     HPBarToHome 	( .Actor:Self )
  % BB8:  				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E61C )
  % BD0:  				Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8022556C )
  % BE8:  				Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
  % C00:  				Call     SetActorVar 	( .Actor:Self 00000002 00000002 )
  % C18:  				Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000012 )
  % C34:  			EndCaseGroup
  % C3C:  		EndSwitch
  % C44:  	Case  ==  00000009 
  % C50:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % C68:  		Switch  *Var[0] 
  % C74:  			Case  ==  00000001 
  % C80:  				Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  % C98:  				Sub  *Var[0]  00000001 
  % CA8:  				If  *Var[0]  >  00000000 
  % CB8:  					Call     SetActorVar 	( .Actor:Self 00000002 *Var[0] )
  % CD0:  					Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  % CEC:  					Wait     00000014 
  % CF8:  					Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  % D10:  				Else
  % D18:  					Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  % D34:  					Wait     0000000C 
  % D40:  					Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  % D58:  					Call     SetActorSounds ( FFFFFF81 00000002 00000000 00000000 )
  % D74:  					Call     PlaySoundAtActor 	( .Actor:Self .Sound:Jump )
  % D88:  					Thread
  % D90:  						Set  *Var[0]  00000000 
  % DA0:  						Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000012 00000000 )
  % DBC:  						Loop     00000004 
  % DC8:  							Add  *Var[0]  00000016 
  % DD8:  							Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  % DF4:  							Wait     00000001 
  % E00:  						EndLoop
  % E08:  					EndThread
  % E10:  					Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % E2C:  					Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  % E40:  					Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % E5C:  					Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  % E7C:  					Call     PlaySoundAtActor 	( .Actor:Self 000020BA )
  % E90:  					Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  % EAC:  					Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  % EC8:  					Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFB 00000024 )
  % EE4:  					Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
  % EFC:  					Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_80225560 )
  % F14:  					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022E550 )
  % F2C:  					Call     SetAnimation 	( .Actor:Self 00000001 00660204 )
  % F44:  					Call     8026F838 ( FFFFFF81 00000002 )
  % F58:  				EndIf
  % F60:  			Default
  % F68:  				Wait     00000014 
  % F74:  		EndSwitch
  % F7C:  	Case  ==  0000000A 
  % F88:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % FA0:  		Switch  *Var[0] 
  % FAC:  			Case  ==  00000002 
  % FB8:  				Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
  % FD0:  		EndSwitch
  % FD8:  	Case  ==  00000007 
  % FE4:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  % FFC:  		Switch  *Var[0] 
 % 1008:  			Case  ==  00000003 
 % 1014:  				Call     SetAnimation 	( .Actor:Self 00000001 00660208 )
 % 102C:  				Wait     0000000A 
 % 1038:  				Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[0] )
 % 1050:  				Switch  *Var[0] 
 % 105C:  					Case  ==  00000004 
 % 1068:  						Call     PlaySoundAtActor 	( .Actor:Self 00000356 )
 % 107C:  					Case  ==  00000003 
 % 1088:  						Call     PlaySoundAtActor 	( .Actor:Self 00000355 )
 % 109C:  					Case  ==  00000002 
 % 10A8:  						Call     PlaySoundAtActor 	( .Actor:Self 00000354 )
 % 10BC:  				EndSwitch
 % 10C4:  				Call     SetAnimation 	( .Actor:Self 00000001 00660207 )
 % 10DC:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 10F8:  				Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000003C )
 % 1114:  				Wait     0000003C 
 % 1120:  				Thread
 % 1128:  					Call     EnemyTestTarget ( .Actor:Self *Var[0] 08000000 00000000 00000000 00000010 )
 % 114C:  					Switch  *Var[0] 
 % 1158:  						Case  ==  00000005 
 % 1164:  							Wait     00000014 
 % 1170:  							Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
 % 1194:  							Return
 % 119C:  						Case  ==  00000006 
 % 11A8:  							Return
 % 11B0:  					EndSwitch
 % 11B8:  					Call     GetActorVar 	( .Actor:Enemy4 00000004 *Var[A] )
 % 11D0:  					Label    00000000 
 % 11DC:  					Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
 % 11F8:  					Call     GetActorPos 	( .Actor:Player *Var[3] *Var[4] *Var[5] )
 % 1214:  					If  *Var[0]  >  *Var[3] 
 % 1224:  						Wait     00000001 
 % 1230:  						Goto     00000000 
 % 123C:  					EndIf
 % 1244:  					Call     SetTargetActor ( .Actor:Self .Actor:Player )
 % 1258:  					Call     SetGoalToTarget 	( .Actor:Self )
 % 1268:  					Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[1] )										
							% Mul		 *Var[1]	2 %multiply damage by 2
							% Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 *Var[1] 00000020 )
 % 12A8:  				EndThread
 % 12B0:  				Call     UseBattleCamPreset 	( 00000002 )
 % 12C0:  				Call     PlaySoundAtActor 	( .Actor:Self 0000037C )
 % 12D4:  				Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
 % 12F0:  				Call     EnableActorBlur 	( .Actor:Self 00000001 )
 % 1304:  				Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[0] )
 % 131C:  				Switch  *Var[0] 
 % 1328:  					Case  ==  00000004 
 % 1334:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[13.0] )
 % 1348:  					Case  ==  00000003 
 % 1354:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] )
 % 1368:  					Case  ==  00000002 
 % 1374:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
 % 1388:  				EndSwitch
 % 1390:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 13AC:  				Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
 % 13C8:  				Call     RunToGoal   	( .Actor:Self 00000000 .False )
 % 13E0:  				Call     8026F838 ( FFFFFF81 00000000 )
 % 13F4:  				Call     EnableActorBlur 	( .Actor:Self 00000000 )
 % 1408:  				Thread
 % 1410:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 0000000F 00000000 )
 % 1430:  					Set  *Var[0]  00000000 
 % 1440:  					Loop     00000028 
 % 144C:  						Sub  *Var[0]  0000002D 
 % 145C:  						Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 *Var[0] )
 % 147C:  						Wait     00000001 
 % 1488:  					EndLoop
 % 1490:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 14B0:  					Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 14D0:  				EndThread
 % 14D8:  				Call     GetActorVar 	( .Actor:Enemy4 00000004 *Var[1] )
 % 14F0:  				Call     GetHomePos  	( *Var[1] *Var[2] *Var[3] *Var[4] )
 % 150C:  				Set  *Var[4]  0000000F 
 % 151C:  				Call     SetGoalPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
 % 1538:  				Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[B] )
 % 1550:  				Set  *Var[0]  *Var[B] 
 % 1560:  				Sub  *Var[0]  00000001 
 % 1570:  				Mul  *Var[0]  00000012 
 % 1580:  				Switch  *Var[B] 
 % 158C:  					Case  ==  00000004 
 % 1598:  						Call     AddGoalPos 	( .Actor:Self 00000000 *Var[0] FFFFFFF6 )
 % 15B4:  					Case  ==  00000003 
 % 15C0:  						Call     AddGoalPos 	( .Actor:Self 00000000 *Var[0] FFFFFFF9 )
 % 15DC:  					Case  ==  00000002 
 % 15E8:  						Call     AddGoalPos 	( .Actor:Self 00000000 *Var[0] FFFFFFFC )
 % 1604:  				EndSwitch
 % 160C:  				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
 % 1620:  				Call     JumpToGoal  	( .Actor:Self 00000028 00000000 00000001 00000000 )
 % 1640:  				Call     GetActorVar 	( .Actor:Enemy4 00000003 *Var[0] )
 % 1658:  				Switch  *Var[0] 
 % 1664:  					Case  ==  00000004 
 % 1670:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 168C:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000003C )
 % 16A8:  						Wait     0000003C 
 % 16B4:  					Case  ==  00000003 
 % 16C0:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 16DC:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 00000032 )
 % 16F8:  						Wait     00000032 
 % 1704:  					Case  ==  00000002 
 % 1710:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 172C:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 00000028 )
 % 1748:  						Wait     00000028 
 % 1754:  				EndSwitch
 % 175C:  				Call     SetAnimation 	( .Actor:Self 00000001 00660209 )
 % 1774:  				Wait     0000000A 
 % 1780:  				Call     PlaySoundAtActor 	( .Actor:Self 000020F3 )
 % 1794:  				Call     SetActorYaw 	( .Actor:Self 00000000 )
 % 17A8:  				Call     SetAnimation 	( .Actor:Self 00000001 0066021B )
 % 17C0:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 17DC:  				Sub  *Var[0]  00000016 
 % 17EC:  				Add  *Var[1]  00000013 
 % 17FC:  				Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
 % 1840:  				Wait     0000001E 
 % 184C:  				Call     SetAnimation 	( .Actor:Self 00000001 00660204 )
 % 1864:  				Wait     00000014 
 % 1870:  				Call     SetActorVar 	( .Actor:Enemy4 00000001 00000000 )
 % 1888:  			CaseOR  ==  00000004 
 % 1894:  			CaseOR  ==  00000005 
 % 18A0:  			CaseOR  ==  00000006 
 % 18AC:  				Call     SetAnimation 	( .Actor:Self 00000001 0066021F )
 % 18C4:  				Wait     0000000A 
 % 18D0:  				Call     SetAnimation 	( .Actor:Self 00000001 00660207 )
 % 18E8:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1904:  				Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000003C )
 % 1920:  				Wait     0000003C 
 % 192C:  				Call     EnableActorBlur 	( .Actor:Self 00000001 )
 % 1940:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
 % 1958:  				Switch  *Var[0] 
 % 1964:  					Case  ==  00000004 
 % 1970:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] )
 % 1984:  					Case  ==  00000005 
 % 1990:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
 % 19A4:  					Case  ==  00000006 
 % 19B0:  						Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
 % 19C4:  				EndSwitch
 % 19CC:  				Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
 % 19E8:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1A04:  				Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
 % 1A20:  				Call     RunToGoal   	( .Actor:Self 00000000 .False )
 % 1A38:  				Call     8026F838 ( FFFFFF81 00000000 )
 % 1A4C:  				Call     EnableActorBlur 	( .Actor:Self 00000000 )
 % 1A60:  				Thread
 % 1A68:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 0000000F 00000000 )
 % 1A88:  					Set  *Var[0]  00000000 
 % 1A98:  					Loop     00000028 
 % 1AA4:  						Sub  *Var[0]  0000002D 
 % 1AB4:  						Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 *Var[0] )
 % 1AD4:  						Wait     00000001 
 % 1AE0:  					EndLoop
 % 1AE8:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 1B08:  					Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 1B28:  				EndThread
 % 1B30:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
 % 1B48:  				Switch  *Var[0] 
 % 1B54:  					Case  ==  00000004 
 % 1B60:  						Call     GetActorVar 	( .Actor:Enemy4 00000004 *Var[1] )
 % 1B78:  						Call     GetHomePos  	( *Var[1] *Var[2] *Var[3] *Var[4] )
 % 1B94:  						Set  *Var[4]  0000000F 
 % 1BA4:  						Call     SetGoalPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
 % 1BC0:  						Call     AddGoalPos 	( .Actor:Self 00000000 00000024 FFFFFFF9 )
 % 1BDC:  					Case  ==  00000005 
 % 1BE8:  						Call     GetActorVar 	( .Actor:Enemy4 00000004 *Var[1] )
 % 1C00:  						Call     GetHomePos  	( *Var[1] *Var[2] *Var[3] *Var[4] )
 % 1C1C:  						Set  *Var[4]  0000000F 
 % 1C2C:  						Call     SetGoalPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
 % 1C48:  						Call     AddGoalPos 	( .Actor:Self 00000000 00000012 FFFFFFFC )
 % 1C64:  					Case  ==  00000006 
 % 1C70:  						Call     GetActorVar 	( .Actor:Enemy4 00000004 *Var[1] )
 % 1C88:  						Call     GetHomePos  	( *Var[1] *Var[2] *Var[3] *Var[4] )
 % 1CA4:  						Set  *Var[4]  0000000F 
 % 1CB4:  						Call     SetGoalPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
 % 1CD0:  						Call     AddGoalPos 	( .Actor:Self 00000000 00000000 00000000 )
 % 1CEC:  				EndSwitch
 % 1CF4:  				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
 % 1D08:  				Call     JumpToGoal  	( .Actor:Self 00000028 00000000 00000001 00000000 )
 % 1D28:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
 % 1D40:  				Switch  *Var[0] 
 % 1D4C:  					Case  ==  00000004 
 % 1D58:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1D74:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 00000032 )
 % 1D90:  						Wait     00000032 
 % 1D9C:  					Case  ==  00000005 
 % 1DA8:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1DC4:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 00000028 )
 % 1DE0:  						Wait     00000028 
 % 1DEC:  					Case  ==  00000006 
 % 1DF8:  						Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1E14:  						Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000001E )
 % 1E30:  						Wait     0000001E 
 % 1E3C:  				EndSwitch
 % 1E44:  				Call     SetAnimation 	( .Actor:Self 00000001 00660220 )
 % 1E5C:  				Wait     0000000A 
 % 1E68:  				Call     SetAnimation 	( .Actor:Self 00000001 00660205 )
 % 1E80:  				Wait     0000001E 
 % 1E8C:  			EndCaseGroup
 % 1E94:  		EndSwitch
 % 1E9C:  	Case  ==  00000008 
 % 1EA8:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
 % 1EC0:  		Switch  *Var[0] 
 % 1ECC:  			Case  ==  00000000  %its shell toss time
 % 1ED8:  				Call     GetHomePos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1EF4:  				Set  *Var[2]  0000000F 
 % 1F04:  				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1F20:  				Call     SetAnimation 	( .Actor:Self 00000001 00660203 )
 % 1F38:  				Call     RunToGoal   	( .Actor:Self 0000000A .False )
 % 1F50:  				Call     SetAnimation 	( .Actor:Self 00000001 0066021F )
 % 1F68:  				Wait     0000000A 
 % 1F74:  				Call     PlaySoundAtActor 	( .Actor:Self 00000353 )
 % 1F88:  				Call     SetAnimation 	( .Actor:Self 00000001 00660207 )
 % 1FA0:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 1FBC:  				Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000001E )
 % 1FD8:  				Wait     0000001E 
						% Set		*Var[A]	00000001 %This stores a temporary flag about whether to attack partner. Getting lucky stops the attack, evasion doesn't
 % 1FE4:  				Thread
 % 1FEC:  					Call     EnemyTestTarget ( .Actor:Self *Var[0] 08000000 00000000 00000000 00000010 )
 % 2010:  					Switch  *Var[0] 
 % 201C:  						Case  ==  00000005 
 % 2028:  							Wait     00000014 
 % 2034:  							Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
									% Set *Var[A] 00000000
 % 2058:  							Return
 % 2060:  						Case  ==  00000006 
									% Set *Var[A] 00000001
 % 206C:  							Return
 % 2074:  					EndSwitch
 % 207C:  					Label    00000000 
 % 2088:  					Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 20A4:  					Call     GetActorPos 	( .Actor:Player *Var[3] *Var[4] *Var[5] )
 % 20C0:  					If  *Var[0]  >  *Var[3] 
 % 20D0:  						Wait     00000001 
 % 20DC:  						Goto     00000000 
 % 20E8:  					EndIf
 % 20F0:  					Call     SetTargetActor ( .Actor:Self .Actor:Player )
 % 2104:  					Call     SetGoalToTarget 	( .Actor:Self )
							% Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %1 atk -> 2
							% Call     SetTargetActor ( .Actor:Self .Actor:Partner )
							% Call     EnemyTestTarget ( .Actor:Self *Var[0] 08000000 00000000 00000000 00000010 ) %now time to verify if partner can be hit
							% If (*Var[0] == 00000006)
								% Set *Var[A] 00000000
							% EndIf
							% If 	*Var[A] == 1							%if partner should be attacked
								% Label 00000001 %time to attack, start the loop from above
								% Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
								% Call     GetActorPos 	( .Actor:Partner *Var[3] *Var[4] *Var[5] )
								% If  *Var[0]  >  *Var[3] 
									% Wait     00000001 
									% Goto     00000001 
								% EndIf
								% Call     SetTargetActor ( .Actor:Self .Actor:Partner )
								% Call     SetGoalToTarget 	( .Actor:Self )
								% Wait	 00000003 %give you a small window for blocking
								% Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000001 00000020 ) %only 1 here
							% EndIf
 % 213C:  				EndThread
 % 2144:  				Call     UseBattleCamPreset 	( 00000002 )
 % 2154:  				Call     PlaySoundAtActor 	( .Actor:Self 0000037C )
 % 2168:  				Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
 % 2184:  				Call     EnableActorBlur 	( .Actor:Self 00000001 )
 % 2198:  				Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %16 -> 24
 % 21AC:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
						% Wait	 00000005 %delay this
 % 21C8:  				Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
 % 21E4:  				Call     RunToGoal   	( .Actor:Self 00000000 .False )
 % 21FC:  				Call     8026F838 ( FFFFFF81 00000000 )
 % 2210:  				Call     EnableActorBlur 	( .Actor:Self 00000000 )
 % 2224:  				Thread
 % 222C:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 0000000F 00000000 )
 % 224C:  					Set  *Var[0]  00000000 
 % 225C:  					Loop     00000028 
 % 2268:  						Sub  *Var[0]  0000002D 
 % 2278:  						Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 *Var[0] )
 % 2298:  						Wait     00000001 
 % 22A4:  					EndLoop
 % 22AC:  					Call     SetPartRotationOffset 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 22CC:  					Call     SetPartRotation 	( .Actor:Self 00000001 00000000 00000000 00000000 )
 % 22EC:  				EndThread
 % 22F4:  				Call     GetHomePos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 2310:  				Set  *Var[2]  0000000F 
 % 2320:  				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 233C:  				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
 % 2350:  				Call     JumpToGoal  	( .Actor:Self 00000028 00000000 00000001 00000000 )
 % 2370:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 238C:  				Call     $Function_80219B78 ( *Var[0] *Var[1] *Var[2] 0000001E )
 % 23A8:  				Wait     0000001E 
 % 23B4:  				Call     SetAnimation 	( .Actor:Self 00000001 00660209 )
 % 23CC:  				Wait     0000000A 
 % 23D8:  				Call     PlaySoundAtActor 	( .Actor:Self 000020F3 )
 % 23EC:  				Call     SetActorYaw 	( .Actor:Self 00000000 )
 % 2400:  				Call     SetAnimation 	( .Actor:Self 00000001 0066021B )
 % 2418:  				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 % 2434:  				Sub  *Var[0]  00000016 
 % 2444:  				Add  *Var[1]  00000013 
 % 2454:  				Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
 % 2498:  				Wait     0000001E 
 % 24A4:  				Call     SetAnimation 	( .Actor:Self 00000001 00660203 )
 % 24BC:  				Call     SetGoalToHome 	( .Actor:Self )
 % 24CC:  				Call     RunToGoal   	( .Actor:Self 0000000A .False )
 % 24E4:  				Call     GetActorVar 	( .Actor:Enemy4 00000000 *Var[0] )
 % 24FC:  				ConstAND *Var[0] FFFFFDFF 
 % 250C:  				Call     SetActorVar 	( .Actor:Enemy4 00000000 *Var[0] )
 % 2524:  		EndSwitch
 % 252C:  EndSwitch
 % 2534:  Return
 % 253C:  End


@ $RNinjakoopa
{
[MaxHP]			8`b
[PowerBounce]	3`b
[StatusTable] $StatusTable_8022B4B8
}

@ $DefenseTable_80228500
{
.Element:Normal 00000001
.Element:Fire	00000063
.Element:End
}

@ $DefenseTable_8022850C
{
.Element:Normal 00000000
.Element:Fire	00000063
.Element:End
}

@ $Script_80228748 %Red's attack script.
{
[1280]		 Call     80269EAC ( 00000017 )
			 ExecWait $StackDamage
			 Wait 	  00000001
%[1FA0]					Wait     00000000 %do nothing
%%[1FBC]  				ExecWait $SpinEffectScript 
%[1FD8]					Loop 2
[1FA0]				ExecWait $SpinEffectScript
					Wait 00000001
					Mul *Var[0] 1 %don't question it
					Mul *Var[0] 1 
					Loop 2
[2114]		 		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %1 atk -> 2
[2370]				EndLoop
					ExecWait $SpinEffectScript
					Wait 00000001 %we need these, just trust me
					Wait 00000001
					Wait 00000001
}
							
%loop takes up C space
%endloop takes up 8 space!

%execWait,Wait take up C

%38 space at the top
%-C for loop
%2C left (44 dec)
%execWait (C)
%Wait (C)
%mul (10)
%mul (10)

%38 at bottom
%-8 for endloop
%30 left (48 dec)
%execWait (C)
%Wait (C)
%Wait (C)
%Wait (C)

%flat mario function takes up 10
%Call     80269EAC ( 00000017 )

%execWait takes up C space
%Wait takes up C space
%mul takes up 10