@ $DarkKoopa
{
[MaxHP]         12`b %buff 8 -> 12
}

@ $Script_8021BB78
{
[66C]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 40000000 0000FFFF 00000000 00000004 00000020 ) %buff 3 -> 4
}

@ $Script_80220B78
{
[66C]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 40000000 0000FFFF 00000000 00000004 00000020 ) %buff 3 -> 4
}

@ $Script_8021CB70
{
[68]  Sub   *Var0  00000005
}

@ $Script_80221B70
{
[68]  Sub   *Var0  00000005
}

@ $DarkParatroopa
{
[MaxHP]         10`b %buff 8 -> 10
}

@ $DefenseTable_8021D220
{
.Element:Normal 00000002
.Element:Hammer 00000002
.Element:Jump   00000002
.Element:Water  00000002
.Element:Blast  00000002
.Element:Throw	00000000 %weak to throw
.Element:End
}

@ $DefenseTable_8021D24C
{
.Element:Normal 00000002
.Element:Throw	00000000 %weak to throw
.Element:End
}

@ $DefenseTable_8021D258
{
.Element:Normal 00000000
.Element:End
}

@ $Script_TakeTurn_8021E174
{
[86C]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 ) %buff 3 -> 5
}

@ $Gloomba
{
[MaxHP]			9`b %buff 7 -> 9
[Level]        13`b %buff 11 -> 13
}

@ $Script_TakeTurn_80222F10
{
[9AC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 ) %buff 2 -> 3
}

@ $SpikedGloomba
{
[MaxHP]			9`b %buff 7 -> 9
[Level]        14`b %buff 12 -> 14
}

@ $Script_TakeTurn_802249EC
{
[9AC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 ) %buff 3 -> 5
}

@ $Paragloomba
{
[MaxHP]			8`b %buff 7 -> 8
}

@ $DefenseTable_8022571C
{
.Element:Normal 00000000
.Element:Throw	FFFFFFFF
.Element:End
}

@ $Script_TakeTurn_8022635C
{
[6B4]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 ) %buff 2 -> 3
}

%Import buzzy beetle changes from ISK Part 1
@ $DefenseTable_802289B0
{
.Element:Normal 00000003 %+1 def for unflipped form
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

%cannot be flipped by non-damaging attacks
@ $Script_HandleEvent_80229718
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo
   54:  	CaseOR  ==  .Event:Hit
   60:  		SetConst  *Var[0]  00000001 
   70:  		SetConst  *Var[1]  00330007 
   80:  		SetConst  *Var[2]  00330019 
   90:  		ExecWait $Script_8022967C 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit
   BC:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   D4:  		If  *Var[0]  !=  00000002 
   E4:  			SetConst  *Var[0]  00000001 
   F4:  			SetConst  *Var[1]  0033000B 
  104:  			SetConst  *Var[2]  0033000B 
  114:  			ExecWait DoBurnHit 
  120:  		Else
  128:  			SetConst  *Var[0]  00000001 
  138:  			SetConst  *Var[1]  0033001D 
  148:  			SetConst  *Var[2]  0033001D 
  158:  			ExecWait DoBurnHit 
  164:  		EndIf
  16C:  	Case  ==  .Event:BurnDeath
  178:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  190:  		If  *Var[0]  !=  00000002 
  1A0:  			SetConst  *Var[0]  00000001 
  1B0:  			SetConst  *Var[1]  0033000B 
  1C0:  			SetConst  *Var[2]  0033000B 
  1D0:  			ExecWait DoBurnHit 
  1DC:  			SetConst  *Var[0]  00000001 
  1EC:  			SetConst  *Var[1]  0033000B 
  1FC:  			ExecWait DoDeath 
  208:  		Else
  210:  			SetConst  *Var[0]  00000001 
  220:  			SetConst  *Var[1]  0033001D 
  230:  			SetConst  *Var[2]  0033001D 
  240:  			ExecWait DoBurnHit 
  24C:  			SetConst  *Var[0]  00000001 
  25C:  			SetConst  *Var[1]  0033001D 
  26C:  			ExecWait DoDeath 
  278:  		EndIf
  280:  		Return
  288:  	Case  ==  .Event:SpinSmashHit
  294:  		SetConst  *Var[0]  00000001 
  2A4:  		SetConst  *Var[1]  00330007 
  2B4:  		SetConst  *Var[2]  00330019 
  2C4:  		ExecWait $Script_8022967C 
  2D0:  		ExecWait 8029B998 
  2DC:  	Case  ==  .Event:FlipTrigger
				%check if did damage
				Call	 GetLastDamage ( .Actor:Self *Var[0] )
				If ( *Var[0] <= 0 )
					Return
				EndIf
  2E8:  		Call     SetActorVar 	( .Actor:Self 00000008 00000002 )
  300:  		Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000010 )
  31C:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
  338:  		Call     SetActorVar 	( .Actor:Self 00000009 00000001 )
  350:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_802289CC )
  368:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_80228B68 )
  380:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .True )
  398:  		Call     SetAnimation 	( .Actor:Self 00000001 00330007 )
  3B0:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  3CC:  		Thread
  3D4:  			Wait     00000001 
  3E0:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  3FC:  			Wait     00000001 
  408:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFD3 )
  424:  			Wait     00000001 
  430:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFA6 )
  44C:  			Wait     00000001 
  458:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF79 )
  474:  			Wait     00000001 
  480:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF4C )
  49C:  			Wait     00000001 
  4A8:  		EndThread
  4B0:  		UseIntBuffer $IntTable_802296CC 
  4BC:  		Loop     00000013 
  4C8:  			Get1Int  *Var[0] 
  4D4:  			Call     SetActorDispOffset ( FFFFFF81 00000000 *Var[0] 00000000 )
  4F0:  			Wait     00000001 
  4FC:  		EndLoop
  504:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  520:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  53C:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  558:  		Call     SetAnimation 	( .Actor:Self 00000001 00330019 )
  570:  	Case  ==  .Event:ShockHit
  57C:  		SetConst  *Var[0]  00000001 
  58C:  		SetConst  *Var[1]  00330007 
  59C:  		ExecWait DoShockHit 
  5A8:  		SetConst  *Var[0]  00000001 
  5B8:  		SetConst  *Var[1]  00330007 
  5C8:  		ExecWait DoJumpBack 
  5D4:  		SetConst  *Var[0]  00000001 
  5E4:  		SetConst  *Var[1]  00330004 
  5F4:  		ExecWait DoReturnHome 
  600:  	Case  ==  .Event:ShockDeath
  60C:  		SetConst  *Var[0]  00000001 
  61C:  		SetConst  *Var[1]  00330007 
  62C:  		ExecWait DoShockHit 
  638:  		SetConst  *Var[0]  00000001 
  648:  		SetConst  *Var[1]  00330007 
  658:  		ExecWait DoDeath 
  664:  		Return
  66C:  	Case  ==  00000017
  678:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  690:  		If  *Var[0]  ==  00000001 
  6A0:  			SetConst  *Var[0]  00000001 
  6B0:  			SetConst  *Var[1]  0033000C 
  6C0:  			ExecWait DoImmune 
  6CC:  			Call     SetAnimation 	( .Actor:Self 00000001 00330017 )
  6E4:  			Wait     00000008 
  6F0:  		Else
  6F8:  			SetConst  *Var[0]  00000001 
  708:  			SetConst  *Var[1]  00330002 
  718:  			ExecWait DoImmune 
  724:  		EndIf
  72C:  	Case  ==  .Event:Immune
  738:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  750:  		If  *Var[0]  ==  00000001 
  760:  			SetConst  *Var[0]  00000001 
  770:  			SetConst  *Var[1]  0033000C 
  780:  			ExecWait DoImmune 
  78C:  			Call     SetAnimation 	( .Actor:Self 00000001 0033000D )
  7A4:  			Wait     00000008 
  7B0:  		Else
  7B8:  			SetConst  *Var[0]  00000001 
  7C8:  			SetConst  *Var[1]  00330002 
  7D8:  			ExecWait DoImmune 
  7E4:  		EndIf
  7EC:  	Case  ==  .Event:SpikeTaunt
  7F8:  		Wait     0000000A 
  804:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  820:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  834:  		If  *Var[3]  &  00080000 
  844:  			Add  *Var[1]  00000009 
  854:  		Else
  85C:  			Add  *Var[1]  00000018 
  86C:  		EndIf
  874:  		Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8B8:  		Wait     00000014 
  8C4:  	Case  ==  .Event:Death
  8D0:  		SetConst  *Var[0]  00000001 
  8E0:  		SetConst  *Var[1]  00330007 
  8F0:  		SetConst  *Var[2]  00330019 
  900:  		ExecWait $Script_8022967C 
  90C:  		ExecWait DoNormalHit 
  918:  		Wait     0000000A 
  924:  		SetConst  *Var[0]  00000001 
  934:  		SetConst  *Var[1]  00330007 
  944:  		SetConst  *Var[2]  00330019 
  954:  		ExecWait $Script_8022967C 
  960:  		ExecWait DoDeath 
  96C:  		Return
  974:  	Case  ==  .Event:SpinSmashDeath
  980:  		SetConst  *Var[0]  00000001 
  990:  		SetConst  *Var[1]  00330007 
  9A0:  		SetConst  *Var[2]  00330019 
  9B0:  		ExecWait $Script_8022967C 
  9BC:  		ExecWait 8029B998 
  9C8:  		SetConst  *Var[0]  00000001 
  9D8:  		SetConst  *Var[1]  00330007 
  9E8:  		SetConst  *Var[2]  00330019 
  9F8:  		ExecWait $Script_8022967C 
  A04:  		ExecWait DoDeath 
  A10:  		Return
  A18:  	Case  ==  .Event:RecoverStatus
  A24:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  A3C:  		If  *Var[0]  ==  00000001 
  A4C:  			SetConst  *Var[0]  00000001 
  A5C:  			SetConst  *Var[1]  00330001 
  A6C:  			ExecWait DoRecover 
  A78:  		EndIf
  A80:  	Case  ==  .Event:ScareAway
  A8C:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  AA4:  		If  *Var[0]  ==  00000001 
  AB4:  			SetConst  *Var[0]  00000001 
  AC4:  			SetConst  *Var[1]  00330004 
  AD4:  			SetConst  *Var[2]  00330007 
  AE4:  			ExecWait DoScareAway 
  AF0:  			Return
  AF8:  		Else
  B00:  			SetConst  *Var[0]  00000001 
  B10:  			SetConst  *Var[1]  00330002 
  B20:  			ExecWait DoImmune 
  B2C:  		EndIf
  B34:  	Case  ==  .Event:BeginAirLift
  B40:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  B58:  		If  *Var[0]  ==  00000001 
  B68:  			SetConst  *Var[0]  00000001 
  B78:  			SetConst  *Var[1]  00330004 
  B88:  		Else
  B90:  			SetConst  *Var[0]  00000001 
  BA0:  			SetConst  *Var[1]  00330002 
  BB0:  		EndIf
  BB8:  		ExecWait DoAirLift 
  BC4:  	Case  ==  .Event:BlowAway
  BD0:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  BE8:  		If  *Var[0]  ==  00000001 
  BF8:  			SetConst  *Var[0]  00000001 
  C08:  			SetConst  *Var[1]  00330007 
  C18:  		Else
  C20:  			SetConst  *Var[0]  00000001 
  C30:  			SetConst  *Var[1]  00330008 
  C40:  		EndIf
  C48:  		ExecWait DoBlowAway 
  C54:  		Return
  C5C:  	Case  ==  .Event:AirLiftFailed
  C68:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  C80:  		If  *Var[0]  ==  00000001 
  C90:  			SetConst  *Var[0]  00000001 
  CA0:  			SetConst  *Var[1]  0033000C 
  CB0:  			ExecWait DoImmune 
  CBC:  			Call     SetAnimation 	( .Actor:Self 00000001 0033000D )
  CD4:  			Wait     00000008 
  CE0:  		Else
  CE8:  			SetConst  *Var[0]  00000001 
  CF8:  			SetConst  *Var[1]  00330002 
  D08:  			ExecWait DoImmune 
  D14:  		EndIf
  D1C:  	Default
  D24:  EndSwitch
  D2C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D40:  Call     UseIdleAnimation 	( .Actor:Self .True )
  D54:  Return
  D5C:  End
}

@ $Script_TakeTurn_8022AF34
{
[7BC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %3 -> 4
}

%Spike Top

%fast, pretty high def and atk, but low health

@ $DefenseTable_8022B940 %4 -> 5 normal def
{
.Element:Normal 00000005
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

@ $DefenseTable_8022B95C %1 flip def
{
.Element:Normal 00000001
.Element:End
}

@ $SpikeTop
{
% stats
[MaxHP]         5`b %4 -> 5 
[Escape]       30`b %fast 
[AirLift]      70`b %but not heavy at all
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $StatusTable_8022B968 %nerf sleep and dizzy
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      40`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      20`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   75`
.Status:Shrink     75`
.Status:Stop       90`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}


@ $Script_HandleEvent_8022C6A8
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		SetConst  *Var[0]  00000001 
   70:  		SetConst  *Var[1]  004D0013 
   80:  		SetConst  *Var[2]  004D0015 
   90:  		ExecWait $Script_8022C60C 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   D4:  		If  *Var[0]  !=  00000002 
   E4:  			SetConst  *Var[0]  00000001 
   F4:  			SetConst  *Var[1]  004D0016 
  104:  			SetConst  *Var[2]  004D0017 
  114:  			ExecWait DoBurnHit 
  120:  		Else
  128:  			SetConst  *Var[0]  00000001 
  138:  			SetConst  *Var[1]  004D0018 
  148:  			SetConst  *Var[2]  004D0018 
  158:  			ExecWait DoBurnHit 
  164:  		EndIf
  16C:  	Case  ==  .Event:BurnDeath % 24
  178:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  190:  		If  *Var[0]  !=  00000002 
  1A0:  			SetConst  *Var[0]  00000001 
  1B0:  			SetConst  *Var[1]  004D0016 
  1C0:  			SetConst  *Var[2]  004D0017 
  1D0:  			ExecWait DoBurnHit 
  1DC:  			SetConst  *Var[0]  00000001 
  1EC:  			SetConst  *Var[1]  004D0017 
  1FC:  			ExecWait DoDeath 
  208:  		Else
  210:  			SetConst  *Var[0]  00000001 
  220:  			SetConst  *Var[1]  004D0018 
  230:  			SetConst  *Var[2]  004D0018 
  240:  			ExecWait DoBurnHit 
  24C:  			SetConst  *Var[0]  00000001 
  25C:  			SetConst  *Var[1]  004D0018 
  26C:  			ExecWait DoDeath 
  278:  		EndIf
  280:  		Return
  288:  	Case  ==  .Event:SpinSmashHit % B
  294:  		SetConst  *Var[0]  00000001 
  2A4:  		SetConst  *Var[1]  004D0013 
  2B4:  		SetConst  *Var[2]  004D0015 
  2C4:  		ExecWait $Script_8022C60C 
  2D0:  		ExecWait DoSpinSmashHit 
  2DC:  	Case  ==  .Event:FlipTrigger % D
 				%check if did damage
				Call	 GetLastDamage ( .Actor:Self *Var[0] )
				If ( *Var[0] <= 0 )
					Return
				EndIf
  2E8:  		Call     SetActorVar 	( .Actor:Self 00000008 00000002 )
  300:  		Call     SetTargetOffset 	( .Actor:Self 00000001 00000001 00000014 )
  31C:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFD FFFFFFF8 )
  338:  		Call     SetActorVar 	( .Actor:Self 00000009 00000001 )
  350:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8022B95C )
  368:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8022BAF8 )
  380:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00000010 .False )
  39C:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .True )
  3B4:  		Call     SetAnimation 	( .Actor:Self 00000001 004D0013 )
  3CC:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  3E8:  		Thread
  3F0:  			Wait     00000001 
  3FC:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  418:  			Wait     00000001 
  424:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFD3 )
  440:  			Wait     00000001 
  44C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFA6 )
  468:  			Wait     00000001 
  474:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF79 )
  490:  			Wait     00000001 
  49C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF4C )
  4B8:  			Wait     00000001 
  4C4:  		EndThread
  4CC:  		UseIntBuffer $IntTable_8022C65C 
  4D8:  		Loop     00000013 
  4E4:  			Get1Int  *Var[0] 
  4F0:  			Call     SetActorDispOffset ( FFFFFF81 00000000 *Var[0] 00000000 )
  50C:  			Wait     00000001 
  518:  		EndLoop
  520:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  53C:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  558:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  574:  		Call     SetAnimation 	( .Actor:Self 00000001 004D0015 )
  58C:  	Case  ==  .Event:ShockHit % 2F
  598:  		SetConst  *Var[0]  00000001 
  5A8:  		SetConst  *Var[1]  004D0013 
  5B8:  		ExecWait DoShockHit 
  5C4:  		SetConst  *Var[0]  00000001 
  5D4:  		SetConst  *Var[1]  004D0013 
  5E4:  		ExecWait DoJumpBack 
  5F0:  		SetConst  *Var[0]  00000001 
  600:  		SetConst  *Var[1]  004D0008 
  610:  		ExecWait DoReturnHome 
  61C:  	Case  ==  .Event:ShockDeath % 26
  628:  		SetConst  *Var[0]  00000001 
  638:  		SetConst  *Var[1]  004D0013 
  648:  		ExecWait DoShockHit 
  654:  		SetConst  *Var[0]  00000001 
  664:  		SetConst  *Var[1]  004D0013 
  674:  		ExecWait DoDeath 
  680:  		Return
  688:  	Case  ==  00000017 % 17
  694:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  6AC:  		If  *Var[0]  ==  00000001 
  6BC:  			SetConst  *Var[0]  00000001 
  6CC:  			SetConst  *Var[1]  004D000B 
  6DC:  			ExecWait DoImmune 
  6E8:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000E )
  700:  			Wait     00000008 
  70C:  		Else
  714:  			SetConst  *Var[0]  00000001 
  724:  			SetConst  *Var[1]  004D0005 
  734:  			ExecWait DoImmune 
  740:  		EndIf
  748:  	Case  ==  .Event:Immune % 19
  754:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  76C:  		If  *Var[0]  ==  00000001 
  77C:  			SetConst  *Var[0]  00000001 
  78C:  			SetConst  *Var[1]  004D000B 
  79C:  			ExecWait DoImmune 
  7A8:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000C )
  7C0:  			Wait     00000008 
  7CC:  		Else
  7D4:  			SetConst  *Var[0]  00000001 
  7E4:  			SetConst  *Var[1]  004D0005 
  7F4:  			ExecWait DoImmune 
  800:  		EndIf
  808:  	Case  ==  .Event:SpikeTaunt % 1B
  814:  		Wait     0000000A 
  820:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  83C:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  850:  		If  *Var[3]  &  00080000 
  860:  			Add  *Var[1]  00000009 
  870:  		Else
  878:  			Add  *Var[1]  00000018 
  888:  		EndIf
  890:  		Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8D4:  		Wait     00000014 
  8E0:  	Case  ==  .Event:Death % 20
  8EC:  		SetConst  *Var[0]  00000001 
  8FC:  		SetConst  *Var[1]  004D0013 
  90C:  		SetConst  *Var[2]  004D0015 
  91C:  		ExecWait $Script_8022C60C 
  928:  		ExecWait DoNormalHit 
  934:  		Wait     0000000A 
  940:  		SetConst  *Var[0]  00000001 
  950:  		SetConst  *Var[1]  004D0013 
  960:  		SetConst  *Var[2]  004D0015 
  970:  		ExecWait $Script_8022C60C 
  97C:  		ExecWait DoDeath 
  988:  		Return
  990:  	Case  ==  .Event:SpinSmashDeath % 21
  99C:  		SetConst  *Var[0]  00000001 
  9AC:  		SetConst  *Var[1]  004D0013 
  9BC:  		SetConst  *Var[2]  004D0015 
  9CC:  		ExecWait $Script_8022C60C 
  9D8:  		ExecWait DoSpinSmashHit 
  9E4:  		SetConst  *Var[0]  00000001 
  9F4:  		SetConst  *Var[1]  004D0013 
  A04:  		SetConst  *Var[2]  004D0015 
  A14:  		ExecWait $Script_8022C60C 
  A20:  		ExecWait DoDeath 
  A2C:  		Return
  A34:  	Case  ==  .Event:RecoverStatus % 31
  A40:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  A58:  		If  *Var[0]  ==  00000001 
  A68:  			SetConst  *Var[0]  00000001 
  A78:  			SetConst  *Var[1]  004D0003 
  A88:  			ExecWait DoRecover 
  A94:  		EndIf
  A9C:  	Case  ==  .Event:ScareAway % 39
  AA8:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  AC0:  		If  *Var[0]  ==  00000001 
  AD0:  			SetConst  *Var[0]  00000001 
  AE0:  			SetConst  *Var[1]  004D0008 
  AF0:  			SetConst  *Var[2]  004D0013 
  B00:  			ExecWait DoScareAway 
  B0C:  			Return
  B14:  		Else
  B1C:  			SetConst  *Var[0]  00000001 
  B2C:  			SetConst  *Var[1]  004D0005 
  B3C:  			ExecWait DoImmune 
  B48:  		EndIf
  B50:  	Case  ==  .Event:BeginAirLift % 3A
  B5C:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  B74:  		If  *Var[0]  ==  00000001 
  B84:  			SetConst  *Var[0]  00000001 
  B94:  			SetConst  *Var[1]  004D0008 
  BA4:  		Else
  BAC:  			SetConst  *Var[0]  00000001 
  BBC:  			SetConst  *Var[1]  004D0005 
  BCC:  		EndIf
  BD4:  		ExecWait DoAirLift 
  BE0:  	Case  ==  .Event:BlowAway % 16
  BEC:  		Call     SetActorDispOffset ( FFFFFF81 00000007 00000000 00000000 )
  C08:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  C20:  		If  *Var[0]  ==  00000001 
  C30:  			SetConst  *Var[0]  00000001 
  C40:  			SetConst  *Var[1]  004D0013 
  C50:  		Else
  C58:  			SetConst  *Var[0]  00000001 
  C68:  			SetConst  *Var[1]  004D0015 
  C78:  		EndIf
  C80:  		ExecWait DoBlowAway 
  C8C:  		Return
  C94:  	Case  ==  .Event:AirLiftFailed % 1F
  CA0:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  CB8:  		If  *Var[0]  ==  00000001 
  CC8:  			SetConst  *Var[0]  00000001 
  CD8:  			SetConst  *Var[1]  004D000B 
  CE8:  			ExecWait DoImmune 
  CF4:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000C )
  D0C:  			Wait     00000008 
  D18:  		Else
  D20:  			SetConst  *Var[0]  00000001 
  D30:  			SetConst  *Var[1]  004D0005 
  D40:  			ExecWait DoImmune 
  D4C:  		EndIf
  D54:  	Default
  D5C:  EndSwitch
  D64:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D78:  Call     UseIdleAnimation 	( .Actor:Self .True )
  D8C:  Return
  D94:  End
}  
  
@ $Script_TakeTurn_8022D444 %don't think ceiling spiketops are used, but I'm modifying it anyway
{
[8B4] Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000007 00000020 ) %4 -> 7
}

@ $Script_TakeTurn_8022DEFC
{
[7A0] Call     SetActorSpeed 	( .Actor:Self *Fixed[21.0] ) % from 14.0
[7D8] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 )
}


@ $DefenseTable_8022E9C4
{
.Element:Normal 00000006
.Element:End
}

@ $DefenseTable_8022E9D0
{
.Element:Normal 00000001
.Element:End
}

@ $Spiny %6 hp, 6 def, but they don't have the same property as buzzy beetles
{
[MaxHP]			6`b
}

@ $Script_TakeTurn_8022F810
{
[68]  	Sub   *Var0  00000005
[67C]  Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %16 -> 24
[764]  Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %16 -> 24
[7AC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000008 00000020 ) %4 -> 8
}

#import newenemy/PoisonFuzzy.bpat %Poison fuzzies belong here too

@ $FormationTable
{
$SJIS_802345E8 00000002 $Formation_00 $Stage_80230DC4 00000000 
$SJIS_802345D8 00000003 $Formation_01 $Stage_80230DC4 00000000 
$SJIS_802345C8 00000004 $Formation_02 $Stage_80230DC4 00000000 
$SJIS_802345A8 00000003 $Formation_03 $Stage_80230DC4 00000000 % unused
$SJIS_8023458C 00000003 $Formation_04 $Stage_80230DC4 00000000 
$SJIS_80234564 00000003 $Formation_05 $Stage_80230DC4 00000000 
$SJIS_80234548 00000003 $Formation_06 $Stage_80230DC4 00000000 
$SJIS_8023451C 00000004 $Formation_07 $Stage_80230DC4 00000000 
$SJIS_8023450C 00000002 $Formation_08 $Stage_80230DC4 00000000 % unused
$SJIS_802344FC 00000003 $Formation_09 $Stage_80230DC4 00000000 % unused
$SJIS_802344EC 00000002 $Formation_0A $Stage_80230DC4 00000000 
$SJIS_802344DC 00000004 $Formation_0B $Stage_80230DC4 00000000 % unused
$SJIS_802344CC 00000004 $Formation_0C $Stage_80230DC4 00000000 
$SJIS_802344B0 00000002 $Formation_0D $Stage_80230DC4 00000000 
$SJIS_802344A0 00000002 $Formation_0E $Stage_80230DC4 00000000 
$SJIS_80234480 00000003 $Formation_0F $Stage_80230DC4 00000000 
$SJIS_80234468 00000003 $Formation_10 $Stage_80230DC4 00000000 
$SJIS_80234440 00000004 $Formation_11 $Stage_80230DC4 00000000 % unused
$SJIS_80234418 00000004 $Formation_12 $Stage_80230DC4 00000000 
$SJIS_80234408 00000004 $Formation_13 $Stage_80230DC4 00000000 % unused
$SJIS_802343F8 00000002 $Formation_14 $Stage_80230DC4 00000000 % unused
$SJIS_802343DC 00000004 $Formation_15 $Stage_80230DC4 00000000 
$SJIS_802343D0 00000002 $Formation_16 $Stage_80230DC4 00000000 
$SJIS_802343C4 00000003 $Formation_17 $Stage_80230DC4 00000000 
$SJIS_802343B8 00000004 $Formation_18 $Stage_80230DC4 00000000 % unused
00000000 00000003 $Formation_19 $Stage_Pit1 00000000 %floor 41
00000000 00000004 $Formation_1A $Stage_Pit1 00000000 %floor 42
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:Formation $Formation_19
{
$DarkKoopa 00000001 0000000A 00000000 00000000 00000000 00000000 
$DarkKoopa 00000002 00000009 00000000 00000000 00000000 00000000 
$Gloomba 00000003 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_1A
{
$DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000 
$DarkParatroopa 00000005 00000009 00000000 00000000 00000000 00000000 
$DarkParatroopa 00000006 00000008 00000000 00000000 00000000 00000000 
$Paragloomba 00000007 00000007 00000000 00000000 00000000 00000000
}

@ $StageTable
{
$ASCII_80234618 $Stage_80230DC4 
$ASCII_80234610 $Stage_802319C4 
$ASCII_80234608 $Stage_802322D0 
$ASCII_80234600 $Stage_80233518 
$ASCII_802345F8 $Stage_80233858 
"pit_05" $Stage_Pit1
00000000 00000000 
}

#new:Stage $Stage_Pit1
{
"kpa_tex"
"pit_b01_shape"
"pit_b01_hit"
$Script_BeforeBattle_Pit
$Script_AfterBattle_Pit
00000000 
00000000 
00000000 
00000000 
00000000 
}

%to make things easier to add, I'm adding the pit scripts every time even when I don't need to
#new:Script $Script_BeforeBattle_Pit
{
	Return
	End
}

#new:Script $Script_AfterBattle_Pit
{
	Return
	End
}

@ $Formation_02 %4 dark koopas -> 2 dark koopas + 2 dark paratroopas
{
$DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikedGloomba 00000001 00000009 00000000 00000000 00000000 00000000 
$DarkParatroopa 00000006 00000008 00000000 00000000 00000000 00000000 
$DarkParatroopa 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0C %+1 poison fuzzy
{
$Paragloomba 00000004 0000000A 00000000 00000000 00000000 00000000 
$Paragloomba 00000005 00000009 00000000 00000000 00000000 00000000 
$Paragloomba 00000006 00000008 00000000 00000000 00000000 00000000
$PoisonFuzzy 00000003 00000007 00000000 00000000 00000000 00000000 %can't put enemies below a paragloomba or else things might break
}

@ $Formation_12 %the last two enemies became poison fuzzies
{
$SpikedGloomba 00000000 0000000A 00000000 00000000 00000000 00000000 
$BuzzyBeetle 00000001 00000009 00000000 00000000 00000000 00000000 
$PoisonFuzzy 00000002 00000008 00000000 00000000 00000000 00000000 
$PoisonFuzzy 00000003 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_15 %+ poison fuzzy
{
$BuzzyBeetle 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikedGloomba 00000001 00000009 00000000 00000000 00000000 00000000 
$BuzzyBeetle 00000002 00000008 00000000 00000000 00000000 00000000 
$PoisonFuzzy 00000003 00000007 00000000 00000000 00000000 00000000 %can't put enemies below a paragloomba or else things might break
}