@ $Cleft
{
[MaxHP]         3`b %buff 2 -> 3
}

@ $DefenseTable_80218710
{
.Element:Normal 00000002
.Element:Fire   00000063
.Element:End
}

@ $DefenseTable_8021872C
{
.Element:Normal 00000001 %buff 0 -> 1
.Element:Fire   00000063
.Element:End
}

@ $Script_80219BA0
{
[658]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 ) %buff 2 -> 4
}

@ $MontyMole
{
[MaxHP]         5`b %buff 3 -> 5
}

@ $DefenseTable_8021A450
{
.Element:Normal 00000000
.Element:Quake	FFFFFFFF
.Element:End
}

@ $Script_TakeTurn_8021AFAC %rock does 3 now, rock moves at 24 speed 80% of the time, 10 speed 20% of the time
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetBattlePhase ( *Var[0] )
   5C:  If  *Var[0]  ==  .Phase:FirstStrike
   6C:  	Call     UseBattleCamPreset 	( 00000002 )
   7C:  	Call     MoveBattleCamOver 	( 00000001 )
   8C:  EndIf
   94:  ChildThread
   9C:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleDig )
   B0:  	Wait     00000014 
   BC:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
   D0:  EndChildThread
   D8:  Call     SetAnimation 	( .Actor:Self 00000001 002F0004 )
   F0:  Wait     00000025 
   FC:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  118:  Add  *Var[1]  00000014 
  128:  Call     SetPartPos 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
  148:  Wait     00000001 
  154:  Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .False )
  170:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  184:  If  *Var[0]  &  00080000 
  194:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  1B4:  Else
  1BC:  	Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  1DC:  EndIf
  1E4:  Call     PlaySoundAtPart 	( .Actor:Self 00000003 .Sound:MoleThrow )
  1FC:  Call     8026FA00 ( FFFFFF81 00000003 00000001 00000000 00000000 )
  21C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 10000000 00000000 00000002 00000020 )
  240:  Switch  *Var[0] 
  24C:  	CaseOR  ==  00000006 
  258:  	CaseOR  ==  00000005 
  264:  		Set  *Var[A]  *Var[0] 
  274:  		Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  		Call     SetGoalToTarget 	( .Actor:Self )
  298:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2B4:  		Sub  *Var[0]  00000064 
  2C4:  		Set  *Var[1]  FFFFFFFB 
  2D4:			Call     8026B7EC	( FFFFFF81 00000003 *Fixed[24.000000] ) %just go regular speed, it doesn't really matter if it doesn't hit
  2EC:  		Call     SetPartJumpGravity 	( .Actor:Self 00000003 *Fixed[0.10058594] )
  304:  		Call     SetAnimation 	( .Actor:Self 00000003 002F000F )
  31C:  		Call     FlyPartTo 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] 00000000 0000001E .Easing:Linear )
  348:  		Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .True )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call     YieldTurn   	( )
  3AC:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3C0:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3D4:  		Return
  3DC:  	EndCaseGroup
  3E4:  EndSwitch
  3EC:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  400:  Call     SetGoalToTarget 	( .Actor:Self )
  410:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call	 RandInt (100` *Var[3])
		If (*Var[3] > 80)
			Call     SetPartMoveSpeed ( .Actor:Self 00000003 *Fixed[8.0] ) %slow 12 -> 8
		Else
			Call     SetPartMoveSpeed ( .Actor:Self 00000003 *Fixed[24.0] ) %fast 12 -> 24
		EndIf
  %42C:  Call     SetPartMoveSpeed ( .Actor:Self 00000003 *Fixed[12.0] )
  444:  Call     SetPartJumpGravity 	( .Actor:Self 00000003 *Fixed[0.10058594] )
  45C:  Call     SetAnimation 	( .Actor:Self 00000003 002F000F )
  474:  Call     FlyPartTo 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] 00000000 00000014 .Easing:Linear )
  4A0:  Wait     00000002 
  4AC:  Call EnemyDamageTarget ( .Actor:Self *Var[0] 10000000 00000000 00000000 00000003 00000020 ) %2 -> 3
  4D4:  Switch  *Var[0] 
  4E0:  	CaseOR  ==  00000000 
  4EC:  	CaseOR  ==  00000002 
  4F8:  		Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  514:  		Sub  *Var[0]  00000037 
  524:  		Set  *Var[1]  00000000 
  534:  		Call     SetPartMoveSpeed ( .Actor:Self 00000003 *Fixed[6.0] )
  54C:  		Call     SetPartJumpGravity 	( .Actor:Self 00000003 *Fixed[0.10058594] )
  564:  		Call     FlyPartTo 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] 00000000 00000019 .Easing:Linear )
  590:  		Call     SetPartMoveSpeed ( .Actor:Self 00000003 *Fixed[4.0] )
  5A8:  		Sub  *Var[0]  00000014 
  5B8:  		Call     FlyPartTo 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] 00000000 00000015 .Easing:Linear )
  5E4:  		Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .True )
  600:  	EndCaseGroup
  608:  EndSwitch
  610:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  624:  Call     UseIdleAnimation 	( .Actor:Self .True )
  638:  Return
  640:  End
% [2D4]	Call     8026B7EC	( FFFFFF81 00000003 *Fixed[24.000000] )
% [42C]	Call     8026B7EC	( FFFFFF81 00000003 *Fixed[24.000000] )
% [4AC] Call EnemyDamageTarget ( .Actor:Self *Var[0] 10000000 00000000 00000000 00000002 00000020 )
}

%buzzar AI
%100% deterministic

%do wind
%pick up mario
%talon attack
%pick up mario
%feather attack
%pick up mario, go back to beginning

@ $Buzzar
{
[Level]        50`b %more xp since you have to fight her at the first possible moment 
[MaxHP]        45`b 
[PowerBounce]	3`b
}

@ $DefenseTable_8021B650
{
.Element:Normal 00000000
.Element:Throw FFFFFFFF
.Element:End
}

%status chances are halved-ish
%60 -> 35
%70 -> 40
%75 -> 45
@ $StatusTable_8021B65C
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      35`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   40`
.Status:Shrink     45`
.Status:Stop       40`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1` 
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}

%@ $Script_8021CCE8
%{
%[B60]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80040264 00000003 00000020 ) %2 -> 2 + 1 turn dizzy (2 is 1)
%}

@ $Script_8021CCE8
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  SetGoalToTarget   ( .Actor:Self )
   4C:  Call  UseBattleCamPreset    ( 00000005 )
   5C:  Call  SetBattleCamZoom  ( 000000B4 )
   6C:  Call  SetBattleCamOffsetZ   ( 00000000 )
   7C:  Call  BattleCamTargetActor  ( .Actor:Self )
   8C:  Call  MoveBattleCamOver ( 00000028 )
   9C:  Call  SetActorSpeed     ( .Actor:Self *Fixed[4.0] )
   B0:  Call  SetGoalToTarget   ( .Actor:Self )
   C0:  Call  AddGoalPos        ( .Actor:Self 0000005A 00000023 00000000 )
   DC:  Call  GetAnimation      ( .Actor:Self 00000001 *Var0 )
   F4:  Switch  *Var0
  100:  	CaseOR  ==  00670001
  10C:  	CaseOR  ==  00670002
  118:  	CaseOR  ==  0067000D
  124:  	CaseOR  ==  00670016
  130:  	CaseOR  ==  00670017
  13C:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
  148:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
  160:  			If  *Var0  ==  00000001
  170:  				BreakLoop
  178:  			EndIf
  180:  			Wait  1`
  18C:  		EndLoop
  194:  	EndCaseGroup
  19C:  EndSwitch
  1A4:  Call  SetAnimation  ( .Actor:Self 00000001 00670002 )
  1BC:  Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFF1 .Easing:CosInOut )
  1D8:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  1F4:  Add   *Var0  FFFFFFE2
  204:  Add   *Var1  00000019
  214:  Call  SetPartPos    ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  234:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  250:  Add   *Var0  FFFFFFE2
  260:  Add   *Var1  00000023
  270:  Call  SetPartPos    ( .Actor:Self 00000004 *Var0 *Var1 *Var2 )
  290:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2AC:  Add   *Var0  FFFFFFEC
  2BC:  Add   *Var1  00000019
  2CC:  Call  SetPartPos    ( .Actor:Self 00000005 *Var0 *Var1 *Var2 )
  2EC:  Call  SetAnimation  ( .Actor:Self 00000001 0067000E )
  304:  Wait  15`
  310:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  32C:  Add   *Var0  00000018
  33C:  Add   *Var1  00000018
  34C:  Call  PlayEffect    ( ~FX:ShinyFlare *Var0 *Var1 *Var2 *Fixed[0.6] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  390:  Call  PlaySoundAtActor      ( .Actor:Self 000020F3 )
  3A4:  Wait  10`
  3B0:  Call  SetPartSounds ( .Actor:Self 00000003 .ActorSound:Fly 00000000 00000000 )
  3D0:  Call  SetPartSounds ( .Actor:Self 00000004 .ActorSound:Fly 00000000 00000000 )
  3F0:  Call  SetPartSounds ( .Actor:Self 00000005 .ActorSound:Fly 00000000 00000000 )
  410:  Call  UseBattleCamPreset    ( 00000002 )
  420:  Call  MoveBattleCamOver     ( 00000014 )
  430:  Thread
  438:  	Wait  20`
  444:  	Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  45C:  EndThread
  464:  Call  SetAnimation      ( .Actor:Self 00000001 00670010 )
  47C:  Call  SetPartRotation   ( .Actor:Self 00000003 00000000 00000000 FFFFFFD3 )
  49C:  Call  SetPartRotation   ( .Actor:Self 00000004 00000000 00000000 FFFFFFD3 )
  4BC:  Call  SetPartRotation   ( .Actor:Self 00000005 00000000 00000000 FFFFFFD3 )
  4DC:  Wait  10`
  4E8:  Call  SetAnimation      ( .Actor:Self 00000003 00670014 )
  500:  Call  SetAnimation      ( .Actor:Self 00000004 00670014 )
  518:  Call  SetAnimation      ( .Actor:Self 00000005 00670014 )
  530:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  54C:  Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .False )
  568:  Call  SetPartFlagBits   ( .Actor:Self 00000005 00000001 .False )
  584:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[6.0] )
  59C:  Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  5B4:  Call  SetPartMoveSpeed  ( .Actor:Self 00000004 *Fixed[6.0] )
  5CC:  Call  SetPartJumpGravity    ( .Actor:Self 00000004 *Fixed[0.1] )
  5E4:  Call  SetPartMoveSpeed  ( .Actor:Self 00000005 *Fixed[6.0] )
  5FC:  Call  SetPartJumpGravity    ( .Actor:Self 00000005 *Fixed[0.1] )
  614:  Call  PlaySoundAtActor  ( .Actor:Self 000020F4 )
  628:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000002 00000010 )
  64C:  Switch  *Var0
  658:  	CaseOR  ==  .HitResult:Miss % 6
  664:  	CaseOR  ==  .HitResult:Lucky % 5
  670:  		Set   *VarA  *Var0
  680:  		Call  SetGoalToTarget   ( .Actor:Self )
  690:  		Thread
  698:  			Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  6B4:  			Call  RandInt       ( 0000000A *Var3 )
  6C8:  			Sub   *Var3  0000001E
  6D8:  			Add   *Var0  *Var3
  6E8:  			Call  FlyPartTo     ( .Actor:Self 00000004 *Var0 00000005 *Var2 00000009 00000000 .Easing:Linear )
  714:  			Call  SetAnimation  ( .Actor:Self 00000004 00670015 )
  72C:  		EndThread
  734:  		Thread
  73C:  			Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  758:  			Call  RandInt       ( 0000000A *Var3 )
  76C:  			Sub   *Var3  00000028
  77C:  			Add   *Var0  *Var3
  78C:  			Call  FlyPartTo     ( .Actor:Self 00000005 *Var0 00000005 *Var2 00000009 00000000 .Easing:Linear )
  7B8:  			Call  SetAnimation  ( .Actor:Self 00000005 00670015 )
  7D0:  		EndThread
  7D8:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  7F4:  		Sub   *Var0  0000001E
  804:  		Call  FlyPartTo     ( .Actor:Self 00000003 *Var0 00000005 *Var2 00000009 00000000 .Easing:Linear )
  830:  		Call  SetAnimation  ( .Actor:Self 00000003 00670015 )
  848:  		Thread
  850:  			Wait  10`
  85C:  			Call  SetAnimation      ( .Actor:Self 00000003 00670014 )
  874:  			Call  SetAnimation      ( .Actor:Self 00000004 00670014 )
  88C:  			Call  SetAnimation      ( .Actor:Self 00000005 00670014 )
  8A4:  			Wait  20`
  8B0:  			Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  8CC:  			Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .True )
  8E8:  			Call  SetPartFlagBits   ( .Actor:Self 00000005 00000001 .True )
  904:  		EndThread
  90C:  		Wait  10`
  918:  		Call  8024ECF8  ( 00000000 00000001 00000000 )
  930:  		Wait  10`
  93C:  		If  *VarA  ==  .HitResult:Lucky % 5
  94C:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  970:  		EndIf
  978:  		ExecWait  $Script_8021F7EC
  984:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  998:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  9AC:  		Return
  9B4:  	EndCaseGroup
  9BC:  	Default
  9C4:  EndSwitch
  9CC:  Call  8024ECF8  ( 00000000 00000001 00000000 )
  9E4:  Call  SetGoalToTarget   ( .Actor:Self )
  9F4:  Thread
  9FC:  	Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  A18:  	Call  RandInt       ( 0000000A *Var3 )
  A2C:  	Sub   *Var3  0000000A
  A3C:  	Add   *Var1  *Var3
  A4C:  	Call  FlyPartTo     ( .Actor:Self 00000004 *Var0 *Var1 *Var2 00000006 00000000 .Easing:Linear )
  A78:  EndThread
  A80:  Thread
  A88:  	Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  AA4:  	Call  RandInt       ( 0000000A *Var3 )
  AB8:  	Add   *Var3  0000000A
  AC8:  	Add   *Var1  *Var3
  AD8:  	Call  FlyPartTo     ( .Actor:Self 00000005 *Var0 *Var1 *Var2 00000006 00000000 .Easing:Linear )
  B04:  EndThread
  B0C:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  B28:  Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 00000006 00000000 .Easing:Linear )
  B54:  Wait  2`
  B60:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80040264 00000003 00000020 ) %2 -> 2 + 1 turn dizzy (2 is 1)
  B88:  Set   *VarF  *Var0
  B98:  Switch  *VarF
  BA4:  	Default
  BAC:  		Thread
  BB4:  			Call  SetPartRotation   ( .Actor:Self 00000004 00000000 0000002D 0000005A )
  BD4:  			Call  GetPartOffset     ( .Actor:Self 00000004 *Var0 *Var1 *Var2 )
  BF4:  			Sub   *Var0  00000028
  C04:  			Set   *Var1  00000002
  C14:  			Call  SetPartJumpGravity    ( .Actor:Self 00000004 *Fixed[1.5] )
  C2C:  			Call  JumpPartTo        ( .Actor:Self 00000004 *Var0 *Var1 *Var2 0000000A .True )
  C54:  			Call  SetPartRotation   ( .Actor:Self 00000004 00000000 00000050 0000005A )
  C74:  			Wait  8`
  C80:  			Loop  0000000F
  C8C:  				Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .False )
  CA8:  				Wait  1`
  CB4:  				Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .True )
  CD0:  				Wait  1`
  CDC:  			EndLoop
  CE4:  		EndThread
  CEC:  		Thread
  CF4:  			Call  SetPartRotation   ( .Actor:Self 00000005 00000000 0000002D FFFFFFA6 )
  D14:  			Call  GetPartOffset     ( .Actor:Self 00000005 *Var0 *Var1 *Var2 )
  D34:  			Add   *Var0  00000014
  D44:  			Set   *Var1  00000004
  D54:  			Call  SetPartJumpGravity    ( .Actor:Self 00000005 *Fixed[1.5] )
  D6C:  			Call  JumpPartTo        ( .Actor:Self 00000005 *Var0 *Var1 *Var2 0000000A .True )
  D94:  			Call  SetPartRotation   ( .Actor:Self 00000005 00000000 0000005A FFFFFFA6 )
  DB4:  			Wait  8`
  DC0:  			Loop  0000000F
  DCC:  				Call  SetPartFlagBits   ( .Actor:Self 00000005 00000001 .False )
  DE8:  				Wait  1`
  DF4:  				Call  SetPartFlagBits   ( .Actor:Self 00000005 00000001 .True )
  E10:  				Wait  1`
  E1C:  			EndLoop
  E24:  		EndThread
  E2C:  		Thread
  E34:  			Call  SetPartRotation   ( .Actor:Self 00000003 00000000 0000002D FFFFFFA6 )
  E54:  			Call  GetPartOffset     ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  E74:  			Sub   *Var0  00000005
  E84:  			Set   *Var1  00000004
  E94:  			Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[1.5] )
  EAC:  			Call  JumpPartTo        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 0000000A .True )
  ED4:  			Call  SetPartRotation   ( .Actor:Self 00000003 00000000 0000005A FFFFFFA6 )
  EF4:  			Wait  8`
  F00:  			Loop  0000000F
  F0C:  				Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  F28:  				Wait  1`
  F34:  				Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  F50:  				Wait  1`
  F5C:  			EndLoop
  F64:  		EndThread
  F6C:  		Wait  30`
  F78:  		Call  YieldTurn ( )
  F84:  		ExecWait  $Script_8021F7EC
  F90:  EndSwitch
  F98:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  FAC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  FC0:  Return
  FC8:  End
}

%@ $Script_8021F030
%{
%[578]  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 ) %3 -> 4
%}

@ $Script_8021F030
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  SetGoalToTarget   ( .Actor:Self )
   4C:  Call  UseBattleCamPreset    ( 0000003F )
   5C:  Call  SetBattleCamZoom  ( 000000F0 )
   6C:  Call  BattleCamTargetActor  ( .Actor:Self )
   7C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   94:  Call  SetActorSpeed     ( .Actor:Self *Fixed[4.0] )
   A8:  Call  SetGoalToTarget   ( .Actor:Self )
   B8:  Call  AddGoalPos        ( .Actor:Self 0000003C 0000000F 00000000 )
   D4:  Call  GetAnimation      ( .Actor:Self 00000001 *Var0 )
   EC:  Switch  *Var0
   F8:  	CaseOR  ==  00670001
  104:  	CaseOR  ==  00670002
  110:  	CaseOR  ==  0067000D
  11C:  	CaseOR  ==  00670016
  128:  	CaseOR  ==  00670017
  134:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
  140:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
  158:  			If  *Var0  ==  00000001
  168:  				BreakLoop
  170:  			EndIf
  178:  			Wait  1`
  184:  		EndLoop
  18C:  	EndCaseGroup
  194:  EndSwitch
  19C:  Call  SetAnimation      ( .Actor:Self 00000001 00670002 )
  1B4:  Call  FlyToGoal ( .Actor:Self 00000000 FFFFFFF1 .Easing:CosInOut )
  1D0:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000003 00000010 )
  1F4:  Switch  *Var0
  200:  	CaseOR  ==  .HitResult:Miss % 6
  20C:  	CaseOR  ==  .HitResult:Lucky % 5
  218:  		Set   *VarA  *Var0
  228:  		Wait  10`
  234:  		Call  PlaySoundAtActor  ( .Actor:Self 000020F1 )
  248:  		Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  25C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  270:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  28C:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  2A8:  		Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  2C8:  		Call  PlaySoundAtActor  ( .Actor:Self 000020F2 )
  2DC:  		Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
  2F8:  		Call  SetGoalToTarget   ( .Actor:Self )
  308:  		Call  AddGoalPos    ( .Actor:Self FFFFFFD3 FFFFFFEC 00000000 )
  324:  		Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
  338:  		Call  SetAnimation  ( .Actor:Self 00000001 00670018 )
  350:  		Call  FlyToGoal     ( .Actor:Self 0000000C FFFFFFF4 .Easing:Linear )
  36C:  		Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  384:  		Wait  10`
  390:  		Call  UseBattleCamPreset    ( 00000002 )
  3A0:  		If  *VarA  ==  .HitResult:Lucky % 5
  3B0:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  3D4:  		EndIf
  3DC:  		ExecWait  $Script_8021F7EC
  3E8:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  3FC:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  410:  		Return
  418:  	EndCaseGroup
  420:  EndSwitch
  428:  Wait  10`
  434:  Call  PlaySoundAtActor  ( .Actor:Self 000020F1 )
  448:  Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  45C:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  470:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  48C:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  4A8:  Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  4C8:  Call  PlaySoundAtActor  ( .Actor:Self 000020F2 )
  4DC:  Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
  4F8:  Call  SetGoalToTarget   ( .Actor:Self )
  508:  Call  AddGoalPos    ( .Actor:Self FFFFFFFB FFFFFFF6 00000000 )
  524:  Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
  538:  Call  SetAnimation  ( .Actor:Self 00000001 00670018 )
  550:  Call  FlyToGoal     ( .Actor:Self 00000008 00000000 .Easing:Linear )
  56C:  Wait  2`
  578:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 ) %3 -> 4
  5A0:  Set   *VarF  *Var0
  5B0:  Switch  *VarF
  5BC:  	CaseOR  ==  .HitResult:Hit % 0
  5C8:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  5D4:  		Call  GetAnimation  ( .Actor:Self 00000001 *Var0 )
  5EC:  		Switch  *Var0
  5F8:  			CaseOR  ==  00670001
  604:  			CaseOR  ==  00670002
  610:  			CaseOR  ==  0067000D
  61C:  			CaseOR  ==  00670016
  628:  			CaseOR  ==  00670017
  634:  				Loop
							Switch *GB_FileCodeMode
								Case == 7`
									BreakLoop
								Case == 8`
									BreakLoop
								Case == 9`
									BreakLoop
							EndSwitch
  640:  					Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
  658:  					If  *Var0  ==  00000001
  668:  						BreakLoop
  670:  					EndIf
  678:  					Wait  1`
  684:  				EndLoop
  68C:  			EndCaseGroup
  694:  		EndSwitch
  69C:  		Call  ResetActorSounds  ( .Actor:Self .ActorSound:Fly )
  6B0:  		Call  SetActorSounds    ( .Actor:Self .ActorSound:FlyIncrement FFFFFFF2 00000000 )
  6CC:  		Call  SetGoalToTarget   ( .Actor:Self )
  6DC:  		Call  AddGoalPos        ( .Actor:Self 00000032 0000000A 00000000 )
  6F8:  		Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
  70C:  		Call  SetAnimation      ( .Actor:Self 00000001 00670002 )
  724:  		Call  FlyToGoal ( .Actor:Self 00000000 00000000 .Easing:Linear )
  740:  		Wait  10`
  74C:  		Call  UseBattleCamPreset    ( 00000002 )
  75C:  		Call  YieldTurn ( )
  768:  		ExecWait  $Script_8021F7EC
  774:  	EndCaseGroup
  77C:  EndSwitch
  784:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  798:  Call  UseIdleAnimation  ( .Actor:Self .True )
  7AC:  Return
  7B4:  End
}


%This wind thing is also present in the huff n puff fight, but with different values
%To do: figure out how it works
%Function 802A9000: sets up the invisible table with hardcoded values? (no arg = the run away prompt, 0 = huff n puff, 1 = buzzar)
%	this also changes the output
%	I did some investigating:
%	no arg is used in lakilester and sushie's bscr files
%	0 is also used for water block
%	1 is also used for turbo charge
%	2 is used for cloud 9
%Function 802691C8: Sets up the (visual?) meter. (args: length(1-5), endpoint 1, endpoint 2, endpoint 3, endpoint 4, endpoint 5)
%		specify a number of endpoints equal to the meter length
%Function 802A91E0: enables button mashing? (It is called when the mashing windows opens)
%	1st arg seems to be always 0, 2nd arg seems to be a time limit, 3rd arg is always 3 for some reason
%Function 802695A8: outputs the result (This number seems to be identical to the number displayed)

/%
@ $Script_8021BEBC %add another segment to the wind thing, making it do more damage
[494]  	Call     802A9000 ( )
[4A4]   Call     802691C8 ( 00000004 00000023 0000003C 00000055 00000064 00000000 ) %old: 3 segments / 40% / 70% / 100%, new: 4 segments / 35% / 60% / 85% / 100%
[8D4]  Call     802A9000 ( )
[8E4]   Call     802691C8 ( 00000004 00000023 0000003C 00000055 00000064 00000000 )
%/

/%
@ $Script_8021BEBC %make it shorter  58 (dec 88) -> 42 (dec 66)
{
[544]  	Call     802A91E0 ( 00000000 00000042 00000003 )
[5D0]  	Loop     00000014
[680]  	Call     ShakeCam    	( 00000001 00000000 00000044 *Fixed[0.5] ) 
[704]  	Loop     00000047 
[734]   Add  *Var[1]  00000002 
[77C]  	Wait     00000044
[984]   Call     802A91E0 ( 00000000 00000042 00000003 )
[A10]  	Loop     00000014
[AC0]  	Call     ShakeCam    	( 00000001 00000000 00000044 *Fixed[0.5] )
[B5C]  	Loop     00000044
[B8C]  	Add  *Var[1]  00000002 
[C34]  	Loop     00000047
[C64]  	Add  *Var[1]  00000002
[CBC]   Wait     00000044
}
%/

%fine I'll change the stupid wind attack
%but it gets bonus damage to compensate :)
@ $Script_8021BEBC
{
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  SetGoalToTarget   ( .Actor:Self )
   24:  Call  UseBattleCamPreset    ( 0000000D )
   34:  Call  SetBattleCamZoom  ( 000000B4 )
   44:  Call  BattleCamTargetActor  ( .Actor:Self )
   54:  Call  MoveBattleCamOver ( 00000078 )
   64:  Call  SetActorSpeed     ( .Actor:Self *Fixed[1.0] )
   78:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   94:  Call  SetGoalPos        ( .Actor:Self *Var0 00000046 *Var2 )
   B0:  Call  GetAnimation      ( .Actor:Self 00000001 *Var0 )
   C8:  Switch  *Var0
   D4:  	CaseOR  ==  00670001
   E0:  	CaseOR  ==  00670002
   EC:  	CaseOR  ==  0067000D
   F8:  	CaseOR  ==  00670016
  104:  	CaseOR  ==  00670017
  110:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
  11C:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )		%checks some animation thingy
  134:  			If  *Var0  ==  00000001
  144:  				BreakLoop
  14C:  			EndIf
  154:  			Wait  1`
  160:  		EndLoop
  168:  	EndCaseGroup
  170:  EndSwitch
  178:  Call  SetAnimation      ( .Actor:Self 00000001 00670002 )
  190:  Call  FlyToGoal ( .Actor:Self 00000000 FFFFFFF6 .Easing:CosInOut )
  1AC:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:NoContact 00000000 00000001 00000020 )
  1D0:  Switch  *VarA
			CaseOR  ==  .HitResult:Lucky % 6
  1DC:  	CaseOR  ==  .HitResult:Miss % 6
  1E8:  		Call  SetTargetActor    ( .Actor:Self .Actor:Partner )
  1FC:  		Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:NoContact 00000000 00000001 00000020 )
  220:  		Switch  *VarA
  22C:  			CaseOR  ==  .HitResult:Miss % 6
					CaseOR  ==  .HitResult:Lucky
  238:  				Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  24C:  				Wait  8`
  258:  				Call  SetAnimation      ( .Actor:Self 00000001 00670011 )
  270:  				Wait  15`
  27C:  				Call  SetAnimation      ( .Actor:Self 00000001 00670013 )
  294:  				Wait  6`
  2A0:  				Call  PlaySoundAtActor  ( .Actor:Self 000020F0 )
  2B4:  				Call  UseBattleCamPreset    ( 00000002 )
  2C4:  				Call  MoveBattleCamOver ( 00000032 )
  2D4:  				Thread
  2DC:  					Call  ShakeCam  ( .Cam:Battle 00000000 0000005A *Fixed[0.5] )
  2F8:  				EndThread
  300:  				Call  $Function_802180C0    ( 00000046 00000064 )
  314:  				Thread
  31C:  					Loop  00000014
  328:  						Call  SetGoalToTarget   ( .Actor:Self )
  338:  						Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  354:  						Add   *Var0  0000000A
  364:  						Call  PlayEffect        ( ~FX:DeadLeaves:Gust3 *Var0 0000000A *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  3A8:  						Wait  3`
  3B4:  					EndLoop
  3BC:  				EndThread
  3C4:  				Wait  60`
  3D0:  				Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  3E8:  				If  *VarA  ==  .HitResult:Lucky % 5
  3F8:  					Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  41C:  				EndIf
  424:  				Wait  25`
  430:  				ExecWait  $Script_8021F7EC
  43C:  				Return
					EndCaseGroup
  444:  			Default
  44C:  				Call  SetTargetActor    ( .Actor:Self .Actor:Partner )
  460:  				Call  ShowMessageBox    ( 00000041 0000005A )
  474:  				Call  802694A4  ( 00000001 )
  484:  				Call  LoadActionCommand ( .ActionCommand:Whirlwind )
  494:  				Call  802A9000  ( 00000001 )
  4A4:  				Call  SetupMashMeter    ( 00000003 00000028 00000046 00000064 00000000 00000000 )
  4C8:  				Wait  8`
  4D4:  				Call  SetAnimation      ( .Actor:Self 00000001 00670011 )
  4EC:  				Wait  15`
  4F8:  				Call  SetAnimation      ( .Actor:Self 00000001 00670013 )
  510:  				Wait  6`
  51C:  				Call  PlaySoundAtActor  ( .Actor:Self 000020F0 )
  530:  				Call  SetBattleFlagBits ( 00004000 .False )
  544:  				Call  802A91E0 ( 00000000 00000042 00000003 )
  55C:  				Call  UseBattleCamPreset    ( 00000013 )
  56C:  				Call  SetBattleCamTarget    ( FFFFFFE7 0000003C 00000000 )
  584:  				Call  SetBattleCamZoom  ( 000001CC )
  594:  				Call  SetBattleCamOffsetZ   ( 00000000 )
  5A4:  				Call  MoveBattleCamOver ( 00000032 )
  5B4:  				Call  $Function_802180C0    ( 00000046 00000082 )
  5C8:  				Thread
  5D0:  					Loop  00000014
  5DC:  						Call  SetGoalToTarget   ( .Actor:Self )
  5EC:  						Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  608:  						Add   *Var0  0000000A
  618:  						Call  PlayEffect        ( ~FX:DeadLeaves:Gust3 *Var0 0000000A *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  65C:  						Wait  3`
  668:  					EndLoop
  670:  				EndThread
  678:  				Thread
  680:  					Call     ShakeCam    	( 00000001 00000000 00000044 *Fixed[0.5] ) 
  69C:  				EndThread
  6A4:  				Call  ActorExists   ( .Actor:Partner *Var0 )
  6B8:  				If  *Var0  ==  .True
  6C8:  					Thread
  6D0:  						Call  UseIdleAnimation  ( .Actor:Partner .False )
  6E4:  						Set   *Var0  00000000
  6F4:  						Set   *Var1  00000003
  704:  						Loop     00000047 
  710:  							Call  SetActorYaw   ( .Actor:Partner *Var0 )
  724:  							Add   *Var0  *Var1
  734:  							Add  *Var[1]  00000002 
  744:  							Wait  1`
  750:  						EndLoop
  758:  						Call  SetActorYaw   ( .Actor:Partner 00000000 )
  76C:  					EndThread
  774:  				EndIf
  77C:  				Wait     00000044
  788:  				Call  GetActionResult   ( *Var1 )
  798:  				Call  ActorExists       ( .Actor:Partner *Var0 )
  7AC:  				If  *Var0  ==  .True
  7BC:  					Wait  3`
  7C8:  					Call  UseIdleAnimation  ( .Actor:Partner .True )
  7DC:  					Call  SetTargetActor    ( .Actor:Self .Actor:Partner )
  7F0:  					Call  SetGoalToTarget   ( .Actor:Self )
  800:  					Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:2000000 0000FFFF 00000000 *Var1 00000020 )
  828:  				EndIf
  830:  				Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  848:  				Wait  25`
  854:  				Call  UseBattleCamPreset    ( 00000002 )
  864:  				Call  MoveBattleCamOver     ( 00000014 )
  874:  				ExecWait  $Script_8021F7EC
  880:  				Return
  888:  		EndSwitch
			EndCaseGroup
  890:  	Default
  898:  EndSwitch
  8A0:  Call  ShowMessageBox    ( 00000041 0000005A )
  8B4:  Call  802694A4  ( 00000001 )
  8C4:  Call  LoadActionCommand ( .ActionCommand:Whirlwind )
  8D4:  Call  802A9000  ( 00000001 )
  8E4:  Call  SetupMashMeter    ( 00000003 00000028 00000046 00000064 00000000 00000000 )
  908:  Wait  8`
  914:  Call  SetAnimation      ( .Actor:Self 00000001 00670011 )
  92C:  Wait  15`
  938:  Call  SetAnimation      ( .Actor:Self 00000001 00670013 )
  950:  Wait  6`
  95C:  Call  PlaySoundAtActor  ( .Actor:Self 000020F0 )
  970:  Call  SetBattleFlagBits ( 00004000 .False )
  984:  Call     802A91E0 ( 00000000 00000042 00000003 )
  99C:  Call  UseBattleCamPreset    ( 00000013 )
  9AC:  Call  SetBattleCamTarget    ( FFFFFFE7 0000003C 00000000 )
  9C4:  Call  SetBattleCamZoom  ( 000001CC )
  9D4:  Call  SetBattleCamOffsetZ   ( 00000000 )
  9E4:  Call  MoveBattleCamOver ( 00000032 )
  9F4:  Call  $Function_802180C0    ( 00000046 00000082 )
  A08:  Thread
  A10:  	Loop     00000014
  A1C:  		Call  SetGoalToTarget   ( .Actor:Self )
  A2C:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  A48:  		Add   *Var0  0000000A
  A58:  		Call  PlayEffect        ( ~FX:DeadLeaves:Gust3 *Var0 0000000A *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  A9C:  		Wait  3`
  AA8:  	EndLoop
  AB0:  EndThread
  AB8:  Thread
  AC0:  	Call     ShakeCam    	( 00000001 00000000 00000044 *Fixed[0.5] )
  ADC:  EndThread
  AE4:  Call  GetStatusFlags    ( .Actor:Player *Var1 )
  AF8:  If  *Var1  !&  ~Flags:StatusFlags:Stone % 100000
  B08:  	Thread
  B10:  		Call  UseIdleAnimation  ( .Actor:Player .False )
  B24:  		Call  SetAnimation      ( .Actor:Player 00000000 0001002E )
  B3C:  		Set   *Var0  00000000
  B4C:  		Set   *Var1  00000003
  B5C:  		Loop     00000044
  B68:  			Call  SetActorYaw   ( .Actor:Player *Var0 )
  B7C:  			Add   *Var0  *Var1
  B8C:  			Add  *Var[1]  00000002 
  B9C:  			Wait  1`
  BA8:  		EndLoop
  BB0:  		Call  SetActorYaw   ( .Actor:Player 00000000 )
  BC4:  	EndThread
  BCC:  EndIf
  BD4:  Call  ActorExists   ( .Actor:Partner *Var0 )
  BE8:  If  *Var0  ==  .True
  BF8:  	Thread
  C00:  		Call  UseIdleAnimation  ( .Actor:Partner .False )
  C14:  		Set   *Var0  00000000
  C24:  		Set   *Var1  00000003
  C34:  		Loop     00000047
  C40:  			Call  SetActorYaw   ( .Actor:Partner *Var0 )
  C54:  			Add   *Var0  *Var1
  C64:  			Add  *Var[1]  00000002
  C74:  			Wait  1`
  C80:  		EndLoop
  C88:  		Call  SetActorYaw   ( .Actor:Partner 00000000 )
  C9C:  	EndThread
  CA4:  EndIf
  CAC:  Call  8026BF48  ( 00000001 )
  CBC:  Wait     00000044
  CC8:  Call  GetActionResult   ( *Var1 )
  CD8:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  CEC:  Call  SetGoalToTarget   ( .Actor:Self )
		Add   *Var1 1
  CFC:  Call  EnemyDamageTarget ( .Actor:Self *Var0 02000000 0000FFFF 00000000 *Var1 00000020 )
  D24:  Call  ActorExists       ( .Actor:Partner *Var0 )
  D38:  If  *Var0  ==  .True
  D48:  	Wait  3`
  D54:  	Call  UseIdleAnimation  ( .Actor:Partner .True )
  D68:  	Call  SetTargetActor    ( .Actor:Self .Actor:Partner )
  D7C:  	Call  SetGoalToTarget   ( .Actor:Self )
  D8C:  	Call  EnemyDamageTarget ( .Actor:Self *Var0 02000000 0000FFFF 00000000 *Var1 00000020 )
  DB4:  EndIf
  DBC:  Call  SetAnimation      ( .Actor:Self 00000001 00670001 )
  DD4:  Wait  25`
  DE0:  Call  UseBattleCamPreset    ( 00000002 )
  DF0:  Call  MoveBattleCamOver ( 00000014 )
  E00:  ExecWait  $Script_8021F7EC
  E0C:  Call  8026BF48  ( 00000000 )
  E1C:  Return
  E24:  End
}

@ $Script_8021DF2C %hopefully make attack harder to mash out of, make fall damage hit unblockable
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     UseBattleCamPreset 	( 0000003F )
   5C:  Call     SetBattleCamZoom  	( 000000F0 )
   6C:  Call     BattleCamTargetActor ( .Actor:Self )
   7C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
   90:  Call     SetGoalToTarget 	( .Actor:Self )
   A0:  Call     AddGoalPos 	( .Actor:Self 0000002D 00000037 00000000 )
   BC:  Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
   D4:  Switch  *Var[0] 
   E0:  	CaseOR  ==  00670001 
   EC:  	CaseOR  ==  00670002 
   F8:  	CaseOR  ==  0067000D 
  104:  	CaseOR  ==  00670016 
  110:  	CaseOR  ==  00670017 
  11C:  		Loop     
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
  128:  			Call     8026DF88 ( FFFFFF81 00000001 *Var[0] )
  140:  			If  *Var[0]  ==  00000001 
  150:  				BreakLoop
  158:  			EndIf
  160:  			Wait     00000001 
  16C:  		EndLoop
  174:  	EndCaseGroup
  17C:  EndSwitch
  184:  Call     SetAnimation 	( .Actor:Self 00000001 00670002 )
  19C:  Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:CosInOut )
  1B8:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000004 00000010 )
  1DC:  Switch  *Var[A] 
  1E8:  	CaseOR  ==  .HitResult:Miss % 6
  1F4:  	CaseOR  ==  .HitResult:Lucky % 5
  200:  		Wait     0000000A 
  20C:  		Call     UseBattleCamPreset 	( 00000042 )
  21C:  		Call     SetBattleCamZoom  	( 000000F0 )
  22C:  		Call     SetBattleCamOffsetZ 	( FFFFFFF6 )
  23C:  		Call     BattleCamTargetActor ( .Actor:Self )
  24C:  		Call     PlaySoundAtActor 	( .Actor:Self 000020F1 )
  260:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  274:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  288:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2A4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C0:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  2E0:  		Call     PlaySoundAtActor 	( .Actor:Self 000020F2 )
  2F4:  		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  310:  		Call     SetGoalToTarget 	( .Actor:Self )
  320:  		Call     AddGoalPos 	( .Actor:Self FFFFFFD3 FFFFFFEC 00000000 )
  33C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  350:  		Call     SetAnimation 	( .Actor:Self 00000001 00670018 )
  368:  		Call     FlyToGoal  	( .Actor:Self 0000000C FFFFFFF4 .Easing:Linear )
  384:  		Call     SetAnimation 	( .Actor:Self 00000001 00670001 )
  39C:  		Wait     0000000A 
  3A8:  		Call     UseBattleCamPreset 	( 00000002 )
  3B8:  		If  *Var[A]  ==  00000005 
  3C8:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  3EC:  		EndIf
  3F4:  		ExecWait $Script_8021F808 
  400:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  414:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  428:  		Return
  430:  	EndCaseGroup
  438:  	Case  ==  .HitResult:Immune % 8		%but where did you get that stone cap?
  444:  		Call     UseBattleCamPreset 	( 00000042 )
  454:  		Call     SetBattleCamZoom  	( 000000F0 )
  464:  		Call     SetBattleCamOffsetZ 	( FFFFFFF6 )
  474:  		Call     BattleCamTargetActor ( .Actor:Self )
  484:  		Call     PlaySoundAtActor 	( .Actor:Self 000020F1 )
  498:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  4AC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  4C0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4DC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4F8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  518:  		Call     PlaySoundAtActor 	( .Actor:Self 000020F2 )
  52C:  		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  548:  		Call     SetGoalToTarget 	( .Actor:Self )
  558:  		Call     AddGoalPos 	( .Actor:Self FFFFFFF1 FFFFFFF6 00000000 )
  574:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  588:  		Call     SetAnimation 	( .Actor:Self 00000001 00670018 )
  5A0:  		Call     FlyToGoal  	( .Actor:Self 00000008 FFFFFFFB .Easing:Linear )
  5BC:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 12000000 00000000 00000000 00000005 00000020 )
  5E4:  		Call     SetGoalToTarget 	( .Actor:Self )
  5F4:  		Call     AddGoalPos 	( .Actor:Self 00000028 0000000A 00000000 )
  610:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  624:  		Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
  63C:  		Switch  *Var[0] 
  648:  			CaseOR  ==  00670001 
  654:  			CaseOR  ==  00670002 
  660:  			CaseOR  ==  0067000D 
  66C:  			CaseOR  ==  00670016 
  678:  			CaseOR  ==  00670017 
  684:  				Loop     
							Switch *GB_FileCodeMode
								Case == 7`
									BreakLoop
								Case == 8`
									BreakLoop
								Case == 9`
									BreakLoop
							EndSwitch
  690:  					Call     8026DF88 ( FFFFFF81 00000001 *Var[0] )
  6A8:  					If  *Var[0]  ==  00000001 
  6B8:  						BreakLoop
  6C0:  					EndIf
  6C8:  					Wait     00000001 
  6D4:  				EndLoop
  6DC:  			EndCaseGroup
  6E4:  		EndSwitch
  6EC:  		Call     8026F838 ( FFFFFF81 00000001 )
  700:  		Call     SetActorSounds ( FFFFFF81 00000005 FFFFFFF2 00000000 )
  71C:  		Call     SetAnimation 	( .Actor:Self 00000001 00670002 )
  734:  		Call     FlyToGoal  	( .Actor:Self 00000000 00000000 .Easing:Linear )
  750:  		Wait     00000014 
  75C:  		Call     UseBattleCamPreset 	( 00000002 )
  76C:  		ExecWait $Script_8021F7EC 
  778:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  78C:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7A0:  		Return
  7A8:  	Default
  7B0:  EndSwitch
  7B8:  Wait     0000000A 
  7C4:  Call     8024E664 ( 00000013 )
  7D4:  Call     SetBattleCamZoom  	( 00000168 )
  7E4:  Call     MoveBattleCamOver 	( 0000001E )
  7F4:  Thread
  7FC:  	Wait     00000005 
  808:  	Call     UseBattleCamPreset 	( 00000013 )
  818:  	Call     SetBattleCamZoom  	( 00000168 )
  828:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  844:  	Set  *Var[1]  0000001B 
  854:  	Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
  86C:  	Call     MoveBattleCamOver 	( 00000014 )
  87C:  EndThread
  884:  Call     PlaySoundAtActor 	( .Actor:Self 000020F1 )
  898:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  8AC:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  8C0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8F8:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  918:  Call     PlaySoundAtActor 	( .Actor:Self 000020F2 )
  92C:  Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  948:  Call     SetGoalToTarget 	( .Actor:Self )
  958:  Call     AddGoalPos 	( .Actor:Self FFFFFFF1 FFFFFFF6 00000000 )
  974:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  988:  Call     SetAnimation 	( .Actor:Self 00000001 00670018 )
  9A0:  Call     FlyToGoal  	( .Actor:Self 00000008 FFFFFFFB .Easing:Linear )
  9BC:  If  *Var[A]  ==  00000007 
  9CC:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000020 ) %4 -> 6
  9F4:  EndIf
  9FC:  Call     PlaySoundAtActor 	( .Actor:Self 000020F5 )
  A10:  Call     SetAnimation 	( .Actor:Self 00000001 00670016 )
  A28:  Call     $Function_802180C0 ( 000000B4 00000014 )
  A3C:  Call     UseIdleAnimation 	( .Actor:Player .False )
  A50:  Call     SetAnimation 	( .Actor:Player 00000000 0001002B )
  A68:  Call     ShowMessageBox ( 00000040 0000005A )
  A7C:  Thread
  A84:  	Loop     0000005A 
  A90:  		Call     80251408 ( 00000063 )
  AA0:  		Wait     00000001 
  AAC:  	EndLoop
  AB4:  	Call     80251408 ( 00000000 )
  AC4:  EndThread
  ACC:  Wait     00000014 
  AD8:  Call     LoadActionCommand 	( 00000004 )
  AE8:  Call     802A9000 ( )
  AF4:  Call     802691C8 ( 00000001 00000023 00000000 00000000 00000000 00000000 ) %1E -> 23 (should make it around 16% harder)
  B18:  Wait     0000000A 
  B24:  Call     SetAnimation 	( .Actor:Self 00000001 00670017 )
  B3C:  Call     UseBattleCamPreset 	( 00000042 )
  B4C:  Call     SetBattleCamZoom  	( 000000F0 )
  B5C:  Call     SetBattleCamOffsetZ 	( FFFFFFF6 )
  B6C:  Call     BattleCamTargetActor ( .Actor:Self )
  B7C:  Call     MoveBattleCamOver 	( 0000003C )
  B8C:  Call     SetBattleFlagBits 	( 00004000 .False )
  BA0:  Call     802694A4 ( 00000001 )
  BB0:  Call     802A91B0 ( 00000000 0000003C 00000028 00000003 ) %1E -> 28 too?
  BCC:  Exec     $Script_8021DCB8 *Var[A] 
  BDC:  Wait     0000003E 
  BE8:  Call     802694F8 ( *Var[0] )
  BF8:  If  *Var[0]  >  00000000 
  C08:  	Call     SetAnimation 	( .Actor:Self 00000001 00670001 )
  C20:  	Wait     00000002 
  C2C:  	Kill     *Var[A] 
  C38:  	Call     SetJumpAnimations 	( .Actor:Player 00000000 00010007 00010007 00010009 )
  C58:  	Call     SetActorSpeed 	( .Actor:Player *Fixed[5.0] )
  C6C:  	Call     SetActorJumpGravity 	( .Actor:Player *Fixed[1.8007812] )
  C80:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  C9C:  	Set  *Var[1]  00000000 
  CAC:  	Call     SetGoalPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  CC8:  	Call     80273894 ( 0000000F )
  CD8:  	Wait     00000008 
  CE4:  	Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  CFC:  	Call     UseIdleAnimation 	( .Actor:Player .True )
  D10:  	Wait     00000008 
  D1C:  	Call     UseBattleCamPreset 	( 00000002 )
  D2C:  	ExecWait $Script_8021F808 
  D38:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D4C:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  D60:  	Return
  D68:  EndIf
  D70:  Call     UseBattleCamPreset 	( 00000013 )
  D80:  Call     SetBattleCamZoom  	( 00000168 )
  D90:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  DAC:  Set  *Var[1]  00000032 
  DBC:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
  DD4:  Call     MoveBattleCamOver 	( 000000C8 )
  DE4:  Wait     00000027 
  DF0:  Wait     0000000A 
  DFC:  Call     SetJumpAnimations 	( .Actor:Player 00000000 0001001B 0001001B 0001001B )
  E1C:  Call     SetActorSpeed 	( .Actor:Player *Fixed[5.0] )
  E30:  Call     SetActorJumpGravity 	( .Actor:Player *Fixed[1.2001953] )
  E44:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  E60:  Set  *Var[1]  00000000 
  E70:  Call     SetGoalPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  E8C:  Call     80273894 ( 00000018 )
  E9C:  Call     UseIdleAnimation 	( .Actor:Player .True )
  EB0:  Call     SetGoalToTarget 	( .Actor:Self )
  EC0:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 12000000 00000000 00000000 00000004 00000020 )
  EE8:  Set  *Var[F]  *Var[0] 
  EF8:  Switch  *Var[F] 
  F04:  	CaseOR  ==  00000000 
  F10:  	CaseOR  ==  00000002 
  F1C:  		Call     SetGoalToTarget 	( .Actor:Self )
  F2C:  		Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
  F48:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  F5C:  		Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
  F74:  		Switch  *Var[0] 
  F80:  			CaseOR  ==  00670001 
  F8C:  			CaseOR  ==  00670002 
  F98:  			CaseOR  ==  0067000D 
  FA4:  			CaseOR  ==  00670016 
  FB0:  			CaseOR  ==  00670017 
  FBC:  				Loop     
							Switch *GB_FileCodeMode
								Case == 7`
									BreakLoop
								Case == 8`
									BreakLoop
								Case == 9`
									BreakLoop
							EndSwitch
  FC8:  					Call     8026DF88 ( FFFFFF81 00000001 *Var[0] )
  FE0:  					If  *Var[0]  ==  00000001 
  FF0:  						BreakLoop
  FF8:  					EndIf
 1000:  					Wait     00000001 
 100C:  				EndLoop
 1014:  			EndCaseGroup
 101C:  		EndSwitch
 1024:  		Call     8026F838 ( FFFFFF81 00000001 )
 1038:  		Call     SetActorSounds ( FFFFFF81 00000005 FFFFFFF2 00000000 )
 1054:  		Call     SetAnimation 	( .Actor:Self 00000001 00670002 )
 106C:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
 1088:  		Wait     0000000A 
 1094:  		Call     UseBattleCamPreset 	( 00000002 )
 10A4:  		Call     YieldTurn   	( )
 10B0:  		ExecWait $Script_8021F7EC 
 10BC:  	EndCaseGroup
 10C4:  EndSwitch
 10CC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
 10E0:  Call     UseIdleAnimation 	( .Actor:Self .True )
 10F4:  Return
 10FC:  End
}

@ $Script_8021F824
{
    0:  Call  GetAnimation  ( .Actor:Self 00000001 *Var0 )
   18:  Switch  *Var0
   24:  	CaseOR  ==  00670001
   30:  	CaseOR  ==  00670002
   3C:  	CaseOR  ==  0067000D
   48:  	CaseOR  ==  00670016
   54:  	CaseOR  ==  00670017
   60:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
   6C:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
   84:  			If  *Var0  ==  00000001
   94:  				BreakLoop
   9C:  			EndIf
   A4:  			Wait  1`
   B0:  		EndLoop
   B8:  	EndCaseGroup
   C0:  EndSwitch
   C8:  Call  ResetActorSounds  ( .Actor:Self .ActorSound:Fly )
   DC:  Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
   F0:  Call  SetGoalToHome ( .Actor:Self )
  100:  Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  11C:  Set   *Var1  00000028
  12C:  Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  144:  Call  SetActorSounds    ( .Actor:Self .ActorSound:FlyIncrement FFFFFFEC 00000000 )
  160:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  17C:  Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  198:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  1B4:  Call  ForceHomePos  ( .Actor:Self *Var0 *Var1 *Var2 )
  1D0:  Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  1E8:  Call  HPBarToHome   ( .Actor:Self )
  1F8:  Return
  200:  End
}

@ $Script_8021FA2C
{
    0:  Call  GetAnimation  ( .Actor:Self 00000001 *Var0 )
   18:  Switch  *Var0
   24:  	CaseOR  ==  00670001
   30:  	CaseOR  ==  00670002
   3C:  	CaseOR  ==  0067000D
   48:  	CaseOR  ==  00670016
   54:  	CaseOR  ==  00670017
   60:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
   6C:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
   84:  			If  *Var0  ==  00000001
   94:  				BreakLoop
   9C:  			EndIf
   A4:  			Wait  1`
   B0:  		EndLoop
   B8:  	EndCaseGroup
   C0:  EndSwitch
   C8:  Call  ResetActorSounds  ( .Actor:Self .ActorSound:Fly )
   DC:  Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
   F0:  Call  SetGoalToHome ( .Actor:Self )
  100:  Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  11C:  Set   *Var1  00000028
  12C:  Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  144:  Call  SetActorSounds    ( .Actor:Self .ActorSound:FlyIncrement FFFFFFEC 00000000 )
  160:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  17C:  Call  FlyToGoal     ( .Actor:Self 00000000 0000002D .Easing:Linear )
  198:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  1B4:  Call  ForceHomePos  ( .Actor:Self *Var0 *Var1 *Var2 )
  1D0:  Call  SetAnimation  ( .Actor:Self 00000001 00670001 )
  1E8:  Call  HPBarToHome   ( .Actor:Self )
  1F8:  Return
  200:  End
}

@ $Script_8021DCB8
{
    0:  Call  GetAnimation  ( .Actor:Self 00000001 *Var0 )
   18:  Switch  *Var0
   24:  	CaseOR  ==  00670001
   30:  	CaseOR  ==  00670002
   3C:  	CaseOR  ==  0067000D
   48:  	CaseOR  ==  00670016
   54:  	CaseOR  ==  00670017
   60:  		Loop
					Switch *GB_FileCodeMode
						Case == 7`
							BreakLoop
						Case == 8`
							BreakLoop
						Case == 9`
							BreakLoop
					EndSwitch
   6C:  			Call  8026DF88  ( FFFFFF81 00000001 *Var0 )
   84:  			If  *Var0  ==  00000001
   94:  				BreakLoop
   9C:  			EndIf
   A4:  			Wait  1`
   B0:  		EndLoop
   B8:  	EndCaseGroup
   C0:  EndSwitch
   C8:  Call  ResetActorSounds  ( .Actor:Self .ActorSound:Fly )
   DC:  Call  SetActorSounds    ( .Actor:Self .ActorSound:FlyIncrement FFFFFFF8 00000000 )
   F8:  ChildThread
  100:  	Loop
  10C:  		Call  $Function_802180C0    ( 00000064 0000000A )
  120:  		Wait  10`
  12C:  	EndLoop
  134:  EndChildThread
  13C:  ChildThread
  144:  	Call  SetActorSpeed ( .Actor:Player *Fixed[5.0] )
  158:  	Call  SetActorJumpGravity   ( .Actor:Player *Fixed[0.1] )
  16C:  	Call  GetActorPos   ( .Actor:Player *Var0 *Var1 *Var2 )
  188:  	Add   *Var1  000000B4
  198:  	Call  SetGoalPos    ( .Actor:Player *Var0 *Var1 *Var2 )
  1B4:  	Call  FlyToGoal     ( .Actor:Player 00000063 00000000 .Easing:Linear )
  1D0:  EndChildThread
  1D8:  Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  1EC:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.1] )
  200:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  21C:  Add   *Var1  000000B4
  22C:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  248:  Call  FlyToGoal     ( .Actor:Self 00000063 00000000 .Easing:Linear )
  264:  Return
  26C:  End
}



%Red goombas
#import newenemy/RedGoomba.bpat
#import newenemy/RedParagoomba.bpat


%this area doesn't have enough clefts, so let's add more :)

@ $Formation_00
{
$Cleft 00000001 0000000A 00000000 00000000 00000000 00000000 
$Cleft 00000002 00000009 00000000 00000000 00000000 00000000 
}

@ $Formation_01
{
$Cleft 00000001 0000000A 00000000 00000000 00000000 00000000 
$Cleft 00000002 00000009 00000000 00000000 00000000 00000000 
$Cleft 00000003 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_02
{
$Cleft 00000000 0000000A 00000000 00000000 00000000 00000000 
$Cleft 00000001 00000009 00000000 00000000 00000000 00000000 
$Cleft 00000002 00000008 00000000 00000000 00000000 00000000 
$RedParagoomba 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_03
{
$Cleft 00000001 0000000A 00000000 00000000 00000000 00000000 
$MontyMole 00000002 00000009 00000000 00000000 00000000 00000000 
$Cleft 00000003 00000008 00000000 00000000 00000000 00000000 
}

/%
#new:Formation $Formation_04
{
	$Cleft 00000000 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000001 00000009 00000000 00000000 00000000 00000000
	$MontyMole 00000002 00000008 00000000 00000000 00000000 00000000
}
%/

%add 2 red goombas
@ $Formation_05
{
	$MontyMole 00000001 0000000A 00000000 00000000 00000000 00000000
	$RedGoomba 00000002 00000009 00000000 00000000 00000000 00000000
	$RedGoomba 00000003 00000008 00000000 00000000 00000000 00000000
}

/%
#new:Formation $Formation_06
{
	$MontyMole 00000001 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000002 00000009 00000000 00000000 00000000 00000000
}
%/

@ $Formation_07 %back mole -> red goomba
{
	$MontyMole 00000000 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000001 00000009 00000000 00000000 00000000 00000000
	$RedGoomba 00000002 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_08
{
	$RedParagoomba 00000004 0000000A 00000000 00000000 00000000 00000000
	$RedParagoomba 00000005 00000009 00000000 00000000 00000000 00000000
	$MontyMole 00000002 00000008 00000000 00000000 00000000 00000000
	$MontyMole 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_09 %+2 red goombas
{
	$MontyMole 00000000 0000000A 00000000 00000000 00000000 00000000
	$Cleft 00000001 00000009 00000000 00000000 00000000 00000000
	$RedGoomba 00000002 00000008 00000000 00000000 00000000 00000000
	$RedGoomba 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_0A %2nd mole -> red goomba
{
	$RedParagoomba 00000004 0000000A 00000000 00000000 00000000 00000000
	$RedGoomba 00000001 00000009 00000000 00000000 00000000 00000000
	$RedGoomba 00000002 00000008 00000000 00000000 00000000 00000000
	$Cleft 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_0B
{
	$RedParagoomba 00000005 0000000A 00000000 00000000 00000000 00000000
	$RedParagoomba 00000006 00000009 00000000 00000000 00000000 00000000
	$RedParagoomba 00000007 00000008 00000000 00000000 00000000 00000000
}

%whacka
%hp = 25 + 5*times fought
%burrow atk   = 2 ,4 ,4 ,6 ,6 ,8 ,8 ,8
%rock atk 	  = x ,4 ,4 ,6 ,6 ,8 ,8 ,12
%super burrow = x ,x ,x ,16,16,20,20,20
%partner rock = x ,x ,x ,x ,2 ,2 ,3 ,3
%def = 			0 ,0 ,1 ,1 ,2 ,2 ,4 ,6*

@ $Formation_0D
{
$WhackaA 00000002 0000000A 00000000 00000000 00000000 00000000 
$WhackaRocks 00000003 00000009 00000000 00000000 00000000 00000000 
}

%whacka's final form!
%the strongest boss in the game
%500 hp, 10 atk x 5, 6 def (3 to hammer/water/ice, infinite to fire)
%is he even possible to beat?

%this is probably impossible with super curse, without some insane cheese strats
%his HP is high enough that you may need to find some infinite refresh/smooch loop since items won't last enough time (maybe?)


#new:Formation $Formation_0E
{
$WhackaB 00000002 0000000A 00000000 00000000 00000000 00000000 
$WhackaRocks 00000003 00000009 00000000 00000000 00000000 00000000 
}

@ $FormationTable
{
$SJIS_80222330 00000002 $Formation_00 $Stage_802208B0 00000000 
$SJIS_80222320 00000003 $Formation_01 $Stage_802208B0 00000000 
$SJIS_80222310 00000004 $Formation_02 $Stage_802208B0 00000000 % unused
$SJIS_802222F8 00000003 $Formation_03 $Stage_802208B0 00000000 
$SJIS_802222DC 00000003 $Formation_04 $Stage_802208B0 00000000 
$SJIS_802222D0 00000003 $Formation_05 $Stage_802208B0 00000000 
$SJIS_802222C0 00000002 $Formation_06 $Stage_802208B0 00000000 
$SJIS_802222B0 00000003 $Formation_07 $Stage_802208B0 00000000 
$SJIS_802222A0 00000004 $Formation_08 $Stage_802208B0 00000000 % unused		Now red paragoomba encounter A
$SJIS_80222288 00000004 $Formation_09 $Stage_802208B0 00000000 
$SJIS_8022226C 00000003 $Formation_0A $Stage_802208B0 00000000 % unused		Now red paragoomba encounter B
$SJIS_80222248 00000003 $Formation_0B $Stage_802208B0 00000000 % unused		Now red paragoomba encounter C
$SJIS_8022223C 00000001 $Formation_0C $Stage_802215CC 00000000 
$SJIS_80222230 00000002 $Formation_0D $Stage_802215CC 00000000 
$SJIS_80222230 00000002 $Formation_0E $Stage_802215CC 00000000 
00000000 00000004 $Formation_0F $Stage_Pit1 00000000 %floor 11
00000000 00000003 $Formation_10 $Stage_Pit1 00000000 %floor 12
00000000 00000004 $Formation_11 $Stage_Pit1 00000000 %floor 13
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:Formation $Formation_0F
{
$RedGoomba 00000000 0000000A 00000000 00000000 00000000 00000000 
$RedGoomba 00000001 00000009 00000000 00000000 00000000 00000000 
$MontyMole 00000002 00000008 00000000 00000000 00000000 00000000 
$MontyMole 00000003 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_10
{
$RedGoomba 00000000 0000000A 00000000 00000000 00000000 00000000 
$MontyMole 00000001 00000009 00000000 00000000 00000000 00000000 
$RedParagoomba 00000006 00000008 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_11
{
$Cleft 00000000 0000000A 00000000 00000000 00000000 00000000 
$Cleft 00000001 00000009 00000000 00000000 00000000 00000000 
$Cleft 00000002 00000008 00000000 00000000 00000000 00000000 
$RedParagoomba 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $StageTable
{
$ASCII_8022234C $Stage_802208B0 
$ASCII_80222344 $Stage_80221560 
$ASCII_8022233C $Stage_802215CC 
"pit_02" $Stage_Pit1
00000000 00000000 
}

#new:Stage $Stage_Pit1
{
"kpa_tex"
"pit_b01_shape"
"pit_b01_hit"
$Script_BeforeBattle_Pit
$Script_AfterBattle_Pit
00000000 
00000000 
00000000 
00000000 
00000000 
}

%to make things easier to add, I'm adding the pit scripts every time even when I don't need to
#new:Script $Script_BeforeBattle_Pit
{
	Return
	End
}

#new:Script $Script_AfterBattle_Pit
{
	Return
	End
}

% ====================================================
% Whacka Miniboss
% ====================================================
 
@ $WhackaA
{
% stats
[Index]        D0b 
[Level]       15`b 
[MaxHP]       30`b
[Coins]       20`b 
[Flags]       00000004 
[StatusTable] $StatusTable_8021FCA8 %immune to everything, not ideal but eh who cares
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_8021FD54 
[Script]      $Script_Init_8021FDA0 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         47`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -20`b  40`b % dx dy
[StatusIcon]   10`b  30`b % dx dy
}

#new:PartsTable $PartsTable_WhackaB
{
00800000 01000000 001E00FF $IdleAnimations_8021FC50 $DefenseTable_8021FC9C 00000002 00000000 00FB0000 00000000 
}

@ $WhackaB
{
% stats
[Index]       ECb 
[Level]      227`b %at level 26 it gives you 100 sp  
[MaxHP]      231`b %not actual health
[Coins]       80`b %new global patch tech means this should not crash
[Flags]       00000004 
[StatusTable] $StatusTable_8021FCA8 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_WhackaB 
[Script]      $Script_Init_WhackaB %$Script_Init_8021FDA0 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         47`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -20`b  40`b % dx dy
[StatusIcon]   10`b  30`b % dx dy
}

#new:DefenseTable $DefenseTable_Whacka_1x
{
.Element:Normal 00000001
.Element:End
}

#new:DefenseTable $DefenseTable_Whacka_2x
{
.Element:Normal 00000002
.Element:End
}

#new:DefenseTable $DefenseTable_Whacka_4x
{
.Element:Normal 00000004
.Element:End
}

#new:DefenseTable $DefenseTable_Whacka_Final
{
.Element:Normal 00000004
.Element:Fire 00000063
.Element:Hammer 00000000		%Lol
.Element:Water 00000002
.Element:Ice 00000002
.Element:End
}
 
@ $Script_Init_8021FDA0
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80220634 )
	Call     BindIdle    	( .Actor:Self $Script_Idle_8021FE5C )
	Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021FE90 )
	Switch	*GB_IWA00_Whacka_HitCount
		Case    <   2
			Call	SetDefenseTable	( .Actor:Self 00000001 $DefenseTable_8021FC9C )
		Case    <   4
			Call	SetDefenseTable	( .Actor:Self 00000001 $DefenseTable_Whacka_1x )
		Case    <   6
			Call	SetDefenseTable	( .Actor:Self 00000001 $DefenseTable_Whacka_2x )
		Default
			Call	SetDefenseTable	( .Actor:Self 00000001 $DefenseTable_Whacka_4x )
			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:GoldenFlames )
			Wait     00000001 
			Call     ModifyActorDecoration 	( .Actor:Self 00000001 00000000 00000032 00000032 00000000 00000000 )
	EndSwitch
	Set		*Var[0]		5`
	Mul		*Var[0]		*GB_IWA00_Whacka_HitCount
	Add		*Var[0]		25`
	/%
	Call	$Function_SetEnemyMaxHP	( .Actor:Self *Var[0] )
	Call	SetEnemyHP ( .Actor:Self *Var[0] )
	%/
	Call	$Function_SetAllHealth_B ( *Var[0] )
	Call	SetActorVar ( .Actor:Self 00000000 00000000 ) %AI state
	Return
	End
}

#new:Script $Script_Init_WhackaB
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80220634 )
	Call     BindIdle    	( .Actor:Self $Script_Idle_8021FE5C )
	Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021FE90 )
	Call	SetDefenseTable	( .Actor:Self 00000001 $DefenseTable_Whacka_Final )
	Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:RedFlames )
	Wait     00000001 
	Call     ModifyActorDecoration 	( .Actor:Self 00000001 00000000 00000032 00000032 00000000 00000000 )
	Call	$Function_SetAllHealth_B	(  500`  ) %i programmed in hp larger than 255 so i'm gonna use it
	Call	$Function_SetEscape ( 00000001 ) %allow you to run
	Call	SetActorVar ( .Actor:Self 00000000 00000000 ) %AI state
	Return
	End
}

/%
#new:Function $Function_SetEnemyMaxHP
	ADDIU     SP, SP, FFE0
	SW        S2, 18 (SP)
	DADDU     S2, A0, R0
	SW        RA, 1C (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S1, C (S2)
	LW        A1, 0 (S1)
	JAL       ~Func:get_variable
	ADDIU     S1, S1, 4
	DADDU     S0, V0, R0
	ADDIU     V0, R0, FF81
	BNE       S0, V0, 8
	NOP
	LW        S0, 148 (S2)
	LW        A1, 0 (S1)
	JAL       ~Func:get_variable
	DADDU     A0, S2, R0
	DADDU     A0, S0, R0
	JAL       ~Func:get_actor
	DADDU     S0, V0, R0
	DADDU     A1, V0, R0
	SB        S0, 1B9 (A1)
	LBU       V0, 1B8 (A1)
	SLT       V0, S0, V0
	BNEL      V0, R0, 4
	SB        S0, 1B8 (A1)
	LBU       V0, 1B8 (A1)
	LBU       A0, 1B9 (A1)
	SLL       V1, V0, 1
	ADDU      V1, V1, V0
	SLL       V1, V1, 3
	ADDU      V1, V1, V0
	BNE       A0, R0, 8
	DIV       V1, A0
	BREAK     1C00
	ADDIU     AT, R0, FFFF
	BNE       A0, AT, 10
	LUI       AT, 8000
	BNE       V1, AT, 8
	NOP
	BREAK     1800
	MFLO      V1
	SB        V1, 1BC (A1)
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
%/

#new:Function $Function_SetAttackBoost % ( actorID, amount )
{
	ADDIU     SP, SP, FFE0
	SW        S2, 18 (SP)
	DADDU     S2, A0, R0
	SW        RA, 1C (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S1, C (S2)
	LW        A1, 0 (S1)
	JAL       ~Func:get_variable
	ADDIU     S1, S1, 4
	DADDU     S0, V0, R0
	ADDIU     V0, R0, FF81
	BNE       S0, V0, 8
	NOP
	LW        S0, 148 (S2)
	LW        A1, 0 (S1)
	JAL       ~Func:get_variable
	DADDU     A0, S2, R0
	DADDU     A0, S0, R0
	JAL       ~Func:get_actor
	DADDU     S0, V0, R0
	SB        S0, 221 (V0)
	% return
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}
	
%Old AI
%If hitcount > 4, and partner not stunned, 33% chance of partner rock
%If hitcount > 2, 50% chance to throw player rocks
%Otherwise, do burrow attack

%New AI
%State 0: Preform burrow attack. (If hitcount > 1, go to state 1)
%State 1: Throw rocks.			 (If hitcount > 3, go to state 2, otherwise go to state 0)
%State 2: Preform strong burrow (If hitcount > 4, go to state 3, otherwise go to state 0)
%State 3: Throw partner rock	(If partner is disabled, throw player rocks instead) (go to state 0)
	
@ $Script_TakeTurn_80220634
{
	Call	GetActorVar ( .Actor:Self 00000000 *Var[0] ) %AI state
	Switch *Var[0]
		Case == 00000000
			ExecWait	$Script_BurrowAttack
			If *GB_IWA00_Whacka_HitCount > 1
				Call	SetActorVar ( .Actor:Self 00000000 00000001 )
			EndIf
			Return
		Case == 00000001
			ExecWait	$Script_ThrowRocks
			If *GB_IWA00_Whacka_HitCount > 3
				Call	SetActorVar ( .Actor:Self 00000000 00000002 )
			Else
				Call	SetActorVar ( .Actor:Self 00000000 00000000 )
			EndIf
			Return
		Case == 00000002
			ExecWait	$Script_StrongBurrowAttack
			If *GB_IWA00_Whacka_HitCount > 4
				Call	SetActorVar ( .Actor:Self 00000000 00000003 )
			Else
				Call	SetActorVar ( .Actor:Self 00000000 00000000 )
			EndIf
			Return
		Case == 00000003
			Call     GetStatusFlags ( .Actor:Partner *Var[0] )
			If       *Var[0]  !&  01000000 
				ExecWait	$Script_ThrowPartnerRock
			Else
				ExecWait	$Script_ThrowRocks
			EndIf
			Call	SetActorVar ( .Actor:Self 00000000 00000000 )
			Return
	EndSwitch
	Return
	End
}


#new:Script $Script_ThrowRocks
{
	Call     UseIdleAnimation	( .Actor:Self .False )
	Call     EnableIdleScript	( .Actor:Self 00000000 )
	Call     SetTargetActor 	( .Actor:Self .Actor:Player )
	Call     PlaySoundAtActor	( .Actor:Self 00000322 )
	Call     SetAnimation		( .Actor:Self 00000001 00920003 ) % burrow
	Wait     14`
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.25] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.50] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.75] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[1.00] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.50] )
	Wait     10` 
	Call     PlaySoundAtActor 	( .Actor:Self 00000321 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920002 ) % surface
	Wait     00000008
	% damage based on hit counter
	Switch	*GB_IWA00_Whacka_HitCount
		Case   <   2
			Set   *Var[9] 2
		Case   <   4
			Set   *Var[9] 4
		Case   <   6
			Set   *Var[9] 6
		Case   <   8
			Set   *Var[9] 8
		Default
			Set   *Var[9] C
	EndSwitch
	% begin throw
	Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 *Var[9] 00000010 )
	Switch   *Var[0] 
		CaseOR   ==  00000006 
		CaseOR   ==  00000005 
			Set      *Var[8] 00000001
			Exec     $Script_ThrowRock_Miss 
			Wait     00000008
			Set      *Var[8] 00000002 
			Exec     $Script_ThrowRock_Miss 
			Wait     00000008 
			Set      *Var[8] 00000003 
			Exec     $Script_ThrowRock_Miss 
			Wait     0000000C 
			If       *Var[0] ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Call     8027D7F0 ( )
			Wait     00000014 
			Call     EnableIdleScript 	( .Actor:Self 00000001 )
			Call     UseIdleAnimation 	( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	Thread
		Set      *Var[8] 00000001
		Exec     $Script_ThrowRock_Hit
		Wait     00000008
		Set      *Var[8] 00000002
		Exec     $Script_ThrowRock_Hit
		Wait     00000008
		Set      *Var[8] 00000003
		Exec     $Script_ThrowRock_Hit
		Wait     0000000C
	EndThread
	Wait     0000000C
	Wait     00000002 
	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 *Var[9] 00000010 )
	Wait     00000008
	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 *Var[9] 00000040 )
	Wait     00000006
	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 *Var[9] 00000040 )
	Switch   *Var[0] 
		CaseOR   ==  00000000 
		CaseOR   ==  00000002 
			Wait     00000014 
			Call     8027D7F0 ( )
		EndCaseGroup
	EndSwitch
	Call	EnableIdleScript 	( .Actor:Self 00000001 )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_ThrowRock_Miss
{
	Call	GetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 00000014 
	Call	SetPartPos 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] )
	Call	SetPartFlagBits 	( .Actor:Enemy1 *Var[8] 00000001 .False )
	Call	PlaySoundAtPart 	( .Actor:Enemy1 *Var[8] 000003E8 )
	%
	Call	SetTargetActor 	( .Actor:Self .Actor:Player )
	Call	SetGoalToTarget 	( .Actor:Self )
	Call	GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub      *Var[0] 00000064 
	Set      *Var[1] FFFFFFFB 
	Call     SetPartMoveSpeed 	( .Actor:Enemy1 *Var[8] *Fixed[12.0] )
	Call     SetPartJumpGravity ( .Actor:Enemy1 *Var[8] *Fixed[0.1] )
	Call     FlyPartTo 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] 0000000C 00000024 00000000 )
	Call     SetPartFlagBits 	( .Actor:Enemy1 *Var[8] 00000001 .True )
	Return
	End
}
	
#new:Script $Script_ThrowRock_Hit
{
	Call	GetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 00000014 
	Call	SetPartPos 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] )
	Call	SetPartFlagBits 	( .Actor:Enemy1 *Var[8] 00000001 .False )
	Call	PlaySoundAtPart 	( .Actor:Enemy1 *Var[8] 000003E8 )
	%
	Call     SetTargetActor 	( .Actor:Self .Actor:Player )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetPartMoveSpeed 	( .Actor:Enemy1 *Var[8] *Fixed[12.0] )
	Call     SetPartJumpGravity ( .Actor:Enemy1 *Var[8] *Fixed[0.1] )
	Call     FlyPartTo 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] 0000000C 00000024 00000000 )
	Wait     00000002 
	%
	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
	Sub      *Var[0] 00000037 
	Set      *Var[1] 00000000 
	Call     SetPartMoveSpeed	 	( .Actor:Enemy1 *Var[8] *Fixed[6.0] )
	Call     SetPartJumpGravity ( .Actor:Enemy1 *Var[8] *Fixed[0.1] )
	Call     FlyPartTo 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] 00000000 00000019 00000000 )
	Call     SetPartMoveSpeed 	( .Actor:Enemy1 *Var[8] *Fixed[4.0] )
	Sub      *Var[0] 00000014 
	Call     FlyPartTo 		( .Actor:Enemy1 *Var[8] *Var[0] *Var[1] *Var[2] 00000000 00000015 00000000 )
	Call     SetPartFlagBits 	( .Actor:Enemy1 *Var[8] 00000001 .True )
	Return
	End
}
	
#new:Script $Script_ThrowPartnerRock
{
	Call     UseIdleAnimation	( .Actor:Self .False )
	Call     EnableIdleScript	( .Actor:Self 00000000 )
	Call     SetTargetActor 	( .Actor:Self .Actor:Partner )
	Call     PlaySoundAtActor	( .Actor:Self 00000322 )
	Call     SetAnimation		( .Actor:Self 00000001 00920003 ) % burrow
	Wait     14`
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.25] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.50] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.75] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[1.00] )
	Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.50] )
	Wait     10` 
	Call     PlaySoundAtActor 	( .Actor:Self 00000321 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920002 ) % surface
	Wait     00000008
	% damage based on hit counter
	Switch	*GB_IWA00_Whacka_HitCount
		Case   <   5
			Set   *Var[9] 1
		Case   <   7
			Set   *Var[9] 2
		Default
			Set   *Var[9] 3
	EndSwitch
	% begin throw
	Call	PlaySoundAtPart 	( .Actor:Enemy1 00000001 000003E8 )
	Wait	2
	Call	GetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 00000014 
	Call	SetPartPos 		( .Actor:Enemy1 00000001 *Var[0] *Var[1] *Var[2] )
	Call	SetPartFlagBits 	( .Actor:Enemy1 00000001 00000001 .False )
	%
	Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 *Var[9] 00000010 )
	Switch   *Var[0] 
		CaseOR   ==  00000006 
		CaseOR   ==  00000005 
			Set      *Var[A] *Var[0] 
			Call	SetGoalToTarget 	( .Actor:Self )
			Call	GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Sub      *Var[0] 00000064 
			Set      *Var[1] FFFFFFFB 
			Call     SetPartMoveSpeed 	( .Actor:Enemy1 00000001 *Fixed[12.0] )
			Call     SetPartJumpGravity ( .Actor:Enemy1 00000001 *Fixed[0.1] )
			Call     FlyPartTo 		( .Actor:Enemy1 00000001 *Var[0] *Var[1] *Var[2] 0000000A 00000024 00000000 )
			Call     SetPartFlagBits 	( .Actor:Enemy1 00000001 00000001 .True )
			If       *Var[A] ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Wait     00000014 
			Call     EnableIdleScript 	( .Actor:Self 00000001 )
			Call     UseIdleAnimation 	( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetPartMoveSpeed 	( .Actor:Enemy1 00000001 *Fixed[12.0] )
	Call     SetPartJumpGravity ( .Actor:Enemy1 00000001 *Fixed[0.1] )
	Call     FlyPartTo 		( .Actor:Enemy1 00000001 *Var[0] *Var[1] *Var[2] 0000000A 00000024 00000000 )
	Wait     00000002 
	Call     EnemyDamageTarget 		( .Actor:Self *Var[0] 10000000 00000000 00000000 *Var[9] 00000020 )
	Switch   *Var[0] 
		CaseOR   ==  00000000 
		CaseOR   ==  00000002 
			Call     GetActorPos 		( .Actor:Partner *Var[0] *Var[1] *Var[2] )
			Sub      *Var[0] 00000037 
			Set      *Var[1] 00000000 
			Call     SetPartMoveSpeed	 	( .Actor:Enemy1 00000001 *Fixed[6.0] )
			Call     SetPartJumpGravity ( .Actor:Enemy1 00000001 *Fixed[0.1] )
			Call     FlyPartTo 		( .Actor:Enemy1 00000001 *Var[0] *Var[1] *Var[2] 00000000 00000019 00000000 )
			Call     SetPartMoveSpeed 	( .Actor:Enemy1 00000001 *Fixed[4.0] )
			Sub      *Var[0] 00000014 
			Call     FlyPartTo 		( .Actor:Enemy1 00000001 *Var[0] *Var[1] *Var[2] 00000000 00000015 00000000 )
			Call     SetPartFlagBits 	( .Actor:Enemy1 00000001 00000001 .True )
		EndCaseGroup
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
  
#new:Script $Script_BurrowAttack
{
	Call     UseIdleAnimation	( .Actor:Self .False )
	Call     EnableIdleScript	( .Actor:Self 00000000 )
	Call     SetTargetActor 	( .Actor:Self .Actor:Player )
	Call     PlaySoundAtActor	( .Actor:Self 00000322 )
	Call     SetAnimation		( .Actor:Self 00000001 00920003 ) % burrow
	Wait     0000001C
	Call     UseBattleCamPreset 		( 00000013 )
	Call     SetGoalToTarget	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add      *Var[0] 00000014 
	Set      *Var[1] 00000000 
	Call     SetBattleCamTarget 		( *Var[0] *Var[1] *Var[2] )
	Call     SetBattleCamZoom  		( 0000015E )
	Call     SetBattleCamOffsetZ 		( 0000002D )
	Call     8024ECF8 			( FFFFFFFF 00000001 00000000 )
	Call     MoveBattleCamOver 		( 00000014 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[0] 00000010 
	Set		*Var[1] 00000000 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	% randomized delay
	Call	RandInt			( 00000030 *Var[0] )
	Add		*Var[0] 00000018
	Wait	*Var[0]
	% damage based on hit counter
	Switch	*GB_IWA00_Whacka_HitCount
		Case   <   2
			Set   *Var[9] 2
		Case   <   4
			Set   *Var[9] 4
		Case   <   6
			Set   *Var[9] 6
		Default
			Set   *Var[9] 8
	EndSwitch
	% attack x3
	Set		*Var[5]	0
	If *GB_IWA00_Whacka_HitCount == 00000008
		Set *Var[F] 5
	Else
		Set *Var[F] 3
	EndIf
	Set *Var[E] *Var[F]
	Add *Var[E] 1
	Loop	*Var[F]
		Call     PlaySoundAtActor	( .Actor:Self 00000321 )
		Call     SetAnimation 	( .Actor:Self 00000001 00920002 ) % surface
		Wait     10`
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 *Var[1] 00000010 )
		Switch   *Var[0] 
			CaseOR   ==  00000006 
			CaseOR   ==  00000005 
				If       *Var[0] ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Goto	10
			EndCaseGroup
		EndSwitch
		If *GB_IWA00_Whacka_HitCount > 5` %gains zaptap immunity
			Call     EnemyDamageTarget 	( .Actor:Self *Var[1] 10000000 00000000 00000000 *Var[9] 00000020 )
		Else
			Call     EnemyDamageTarget 	( .Actor:Self *Var[1] 00000000 00000000 00000000 *Var[9] 00000020 )
		EndIf
		% don't know what to do with return value...
		Switch   *Var[0] 
			CaseOR   ==  00000000 
			CaseOR   ==  00000002 
			EndCaseGroup
		EndSwitch
		Label	10
		If	*Var[5] < *Var[E]
			Add		*Var[5]	1
			Call	SetAnimation	( .Actor:Self 00000001 00920003 ) % hide
			Wait	12`
		EndIf
	EndLoop
	Call     UseBattleCamPreset 		( 00000002 )
	Call     MoveBattleCamOver 		( 00000014 )
	Call     PlaySoundAtActor 	( .Actor:Self 00000322 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920003 )
	Wait	 12`
	Call     SetActorPos 		( .Actor:Self 0` -500` 0` )
	Wait     18` 
	Call     SetGoalToHome 		( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     PlaySoundAtActor 	( .Actor:Self 00000321 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920002 )
	Wait     10` 
	Call     8027D7F0 			( )
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_StrongBurrowAttack
{
	Call     UseIdleAnimation	( .Actor:Self .False )
	Call     EnableIdleScript	( .Actor:Self 00000000 )
	Call     SetTargetActor 	( .Actor:Self .Actor:Player )
	Call     PlaySoundAtActor	( .Actor:Self 00000322 )
	Call     SetAnimation		( .Actor:Self 00000001 00920003 ) % burrow
	Wait     0000001C
	Call     UseBattleCamPreset 		( 00000013 )
	Call     SetGoalToTarget	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add      *Var[0] 00000014 
	Set      *Var[1] 00000000 
	Call     SetBattleCamTarget 		( *Var[0] *Var[1] *Var[2] )
	Call     SetBattleCamZoom  		( 0000015E )
	Call     SetBattleCamOffsetZ 		( 0000002D )
	Call     8024ECF8 			( FFFFFFFF 00000001 00000000 )
	Call     MoveBattleCamOver 		( 00000014 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[0] 00000010 
	Set		*Var[1] 00000000 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	% randomized delay
	Call	RandInt			( 00000030 *Var[0] )
	Add		*Var[0] 00000018
	Wait	*Var[0]
	% damage based on hit counter
	Switch	*GB_IWA00_Whacka_HitCount
		Case   <   2
			Set   *Var[9] 6`
		Case   <   4
			Set   *Var[9] 10`
		Case   <   6
			Set   *Var[9] 16`
		Default
			Set   *Var[9] 20`
	EndSwitch
	% attack x3
	Set		*Var[5]	0
	%Loop	3
		Call     PlaySoundAtActor	( .Actor:Self 00000321 )
		Call     SetAnimation 	( .Actor:Self 00000001 00920002 ) % surface
		Wait     10`
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 *Var[1] 00000010 )
		Switch   *Var[0] 
			CaseOR   ==  00000006 
			CaseOR   ==  00000005 
				If       *Var[0] ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Goto	10
			EndCaseGroup
		EndSwitch
		Call     EnemyDamageTarget 	( .Actor:Self *Var[1] 10000000 00000000 00000000 *Var[9] 00000020 )
		% don't know what to do with return value...
		Switch   *Var[0] 
			CaseOR   ==  00000000 
			CaseOR   ==  00000002 
			EndCaseGroup
		EndSwitch
		Call     EnablePlayerBlur 	( 00000001 )
    	Call     SetActorJumpGravity 	( .Actor:Player *Fixed[0.8] )
    	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
    	%Call     SetJumpAnimations 	( .Actor:Player 00000000 00010017 00010017 00010017 )
    	Call     SetGoalPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
		Call     SetJumpAnimations 	( .Actor:Player 00000000 0001001B 0001001B 0001001B) %this doesn't work?
		Call     SetAnimation 	( .Actor:Player 00000000 0001001B )
		Call     GetActorPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     PlayEffect  	( ~FX:ShockWave:LargeWhite *Var[0] 00000000 *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call     80273444 ( 00000030 00000000 00000000 ) %player jump? (used in 03 Area MAC, and most jump scripts)
		Call     EnablePlayerBlur 	( 00000000 )  
		Label	10
		If	*Var[5] < 3
			Add		*Var[5]	1
			Call	SetAnimation	( .Actor:Self 00000001 00920003 ) % hide
			Wait	12`
		EndIf
	%EndLoop
	Call     UseBattleCamPreset 		( 00000002 )
	Call     MoveBattleCamOver 		( 00000014 )
	Call     PlaySoundAtActor 	( .Actor:Self 00000322 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920003 )
	Wait	 12`
	Call     SetActorPos 		( .Actor:Self 0` -500` 0` )
	Wait     18` 
	Call     SetGoalToHome 		( .Actor:Self )
	Call     GetGoalPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     PlaySoundAtActor 	( .Actor:Self 00000321 )
	Call     SetAnimation 		( .Actor:Self 00000001 00920002 )
	Wait     10` 
	Call     8027D7F0 			( )
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#define .WhackaHitAnimation 00920005 % -> 6
#define .WhackaDeathAnimation 00920005

@ $Script_HandleEvent_8021FE90
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     GetLastEvent 	( .Actor:Self *Var[0] )
	Switch   *Var[0] 
		CaseOR   ==  .Event:HitCombo
		CaseOR   ==  .Event:Hit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation
			ExecWait DoNormalHit 
		EndCaseGroup
		Case     ==  .Event:BurnHit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			SetConst *Var[2] .WhackaHitAnimation 
			ExecWait DoNormalHit 
		Case     ==  .Event:BurnDeath
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			SetConst *Var[2] .WhackaHitAnimation 
			ExecWait DoNormalHit 
			Wait     0000000A
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaDeathAnimation 
			ExecWait DoDeath 
			Return
		Case     ==  0000000B
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			ExecWait 8029B998 
		Case     ==  00000021
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation
			ExecWait 8029B998 
			Wait     0000000A 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaDeathAnimation 
			ExecWait DoDeath 
			Return
		Case     ==  .Event:ShockHit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			ExecWait DoShockHit 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00920001 
			ExecWait 8029BD70 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00920001 
			ExecWait 8029BEB8 
		Case     ==  .Event:ShockDeath
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			ExecWait DoShockHit 
			Wait     0000000A 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaDeathAnimation 
			ExecWait DoDeath 
			Return
		CaseOR   ==  00000017
		CaseOR   ==  .Event:Immune
		CaseOR   ==  .Event:AirLiftFailed
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00920001 
			ExecWait DoImmune 
		EndCaseGroup
		Case     ==  .Event:Death
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaHitAnimation 
			ExecWait DoNormalHit 
			Wait     0000000A 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] .WhackaDeathAnimation 
			ExecWait DoDeath 
			Return
		Case     ==  .Event:RecoverStatus
			SetConst *Var[0] 00000001
			SetConst *Var[1] 00920001
			ExecWait DoRecover 
		Case     ==  .Event:ScareAway
			SetConst *Var[0] 00000001
			SetConst *Var[1] 00920005
			SetConst *Var[2] 00920005
			ExecWait DoScareAway 
			Return
		Case     ==  .Event:BeginAirLift
			SetConst *Var[0] 00000001
			SetConst *Var[1] 00920005
			ExecWait DoAirLift 
		Case     ==  .Event:BlowAway
			SetConst *Var[0] 00000001
			SetConst *Var[1] 00920005
			ExecWait DoBlowAway 
			Return
		Default
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:IdleAnimations $IdleAnimations_Large
{
.Status:Normal    00520010
.Status:End
}

#new:IdleAnimations $IdleAnimations_Small
{
.Status:Normal    00520012
.Status:End
}

#new:DefenseTable $DefenseTable_Rocks
{
.Element:Normal 00000063
.Element:End
}

#new:StatusTable $StatusTable_Rocks
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_Rocks
{
00120001 01000000 000E00FF $IdleAnimations_Small $DefenseTable_Rocks 00000000 00000000 00000000 00000000 
00120001 02000000 000E00FF $IdleAnimations_Small $DefenseTable_Rocks 00000000 00000000 00000000 00000000 
00120001 03000000 000E00FF $IdleAnimations_Small $DefenseTable_Rocks 00000000 00000000 00000000 00000000 
}

#new:Actor $WhackaRocks
{
% stats
[Index]        37b 
[Level]         0`b 
[MaxHP]         1`b 
[Coins]         0`b 
[Flags]       00244004 
[StatusTable] $StatusTable_Rocks 
% ai
[PartsCount]   3`s 
[PartsTable] $PartsTable_Rocks 
[Script]      $Script_Init_Rocks
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]     100`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]    95`b 
[PowerBounce] 100`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  18`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:Script $Script_Init_Rocks
{
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Rocks )
	Call     BindIdle    	( .Actor:Self $Script_Idle_Rocks )
	Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Rocks )
	Return
	End
}

#new:Script $Script_TakeTurn_Rocks
{
	Return
	End
}
	
#new:Script $Script_Idle_Rocks
{
	Call	RandInt	( 15` *Var[0] )
	Call	RandInt	( 15` *Var[1] )
	Call	RandInt	( 15` *Var[2] )
	Add		*Var[0]  20`
	Add		*Var[1]  20`
	Add		*Var[2]  20`
	Call	RandInt	( 360` *Var[3] )
	Call	RandInt	( 360` *Var[4] )
	Call	RandInt	( 360` *Var[5] )
	Call	SetPartRotationOffset	( .Actor:Self 00000001 00000000 00000008 00000000 )
	Call	SetPartRotationOffset	( .Actor:Self 00000002 00000000 00000008 00000000 )
	Call	SetPartRotationOffset	( .Actor:Self 00000003 00000000 00000008 00000000 )
	Loop
		Call	SetPartRotation	( .Actor:Self 00000001 0 0 *Var[3] )
		Call	SetPartRotation	( .Actor:Self 00000002 0 0 *Var[4] )
		Call	SetPartRotation	( .Actor:Self 00000003 0 0 *Var[5] )
		Add		*Var[3] *Var[0]
		Add		*Var[4] *Var[1]
		Add		*Var[5] *Var[2]
		Wait	1
	EndLoop
	Return
	End
}

#new:Script $Script_HandleEvent_Rocks
{
	Return
	End
}