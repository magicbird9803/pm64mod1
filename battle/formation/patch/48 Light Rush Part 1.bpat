%Enemies
/%
	Room 1
		4 light goombas (stronger than dark goombas)
			70 hp each
			double headbonk (8 each)
			charge 	(do attack if below 1/2 health)
			attack	(20 each)
			self buff +3 attack
			Basically red goomba from GK refight
			
	Room 2
		2 light chomps
			55 hp
			5 def piercable
			Counter attacks if you hit them
			10 damage
		2 light bones
			35 hp
			9 def unpiercable
			Each attack does unhealable damage
			However only 6 attack power (
%/


#new:Script $Script_80234100
{
		Call	EnableModel		( 00000007 .False )
		Call	EnableModel		( 00000008 .False )
		Call	EnableModel		( 00000009 .False )
		Call	EnableModel		( 0000000A .False )
		Call	EnableModel		( 0000000B .False )		
		Call	EnableModel		( 0000000C .False )		
		Switch *PitFloor
			Case == 1`
				Call	EnableModel		( 00000007 .True )		
			Case == 2`
				Call	EnableModel		( 00000008 .True )		
			Case == 3`
				Call	EnableModel		( 00000009 .True )		
			Case == 4`
				Call	EnableModel		( 0000000A .True )		
			Case == 5`
				Call	EnableModel		( 0000000B .True )		
			Case == 6`
				Call	EnableModel		( 0000000C .True )		
		EndSwitch		
    0:  Set   *VarA  *Var0
   10:  Call  SetTexPanner  ( *VarA 00000001 )
   24:  Set   *Var0  00000000
   34:  Set   *Var1  00000000
   44:  Loop
   50:  	Call  SetTexPanOffset   ( 00000001 00000000 *Var0 *Var1 )
			Mul   *Var1 -1`
			Call  SetTexPanOffset   ( 00000001 00000000 *Var0 *Var1 )
			Mul   *Var1 -1`
   6C:  	Add   *Var0  000000C0
   7C:  	Add   *Var1  000000C0
   8C:  	Wait  5`
   98:  EndLoop
   A0:  Return
   A8:  End
}

#new:Stage $Stage_LightRush
{
"hos_tex"
"hal_b01_shape"
"hal_b01_hit"
$Script_BeforeBattle_Hall
$Script_AfterBattle_Hall
00000000 
00000000 
00000000 
00000000 
00000000 
}

#new:Script $Script_BeforeBattle_Hall
{
	Thread
		Set   *Var0  00000005
		Exec  $Script_80234100
	EndThread
	%why write asm when you can do stuff like this
	Call $Function_GetPlayerDataByte ( *Var0 3` )
	Call $Function_SetArbitraryByte ( *Var0 $RandomBattleData )
	Return
	End
}

#new:Script $Script_AfterBattle_Hall
{
	Call $Function_GetArbitraryByte ( *Var0 $RandomBattleData )
	Call $Function_SetArbitraryByte ( *Var0 8010F293 )
	Return
	End
}

#new:StageTable $StageTable
{
"hal_01" $Stage_LightRush
00000000 00000000 
}

#new:FormationTable $FormationTable
{
00000000 00000004 $Formation_00 $Stage_LightRush 00000000
00000000 00000004 $Formation_01 $Stage_LightRush 00000000
00000000 00000000 00000000 00000000 00000000 % unused
}


#new:Formation $Formation_00
{
$LightGoomba 00000000 0000000A 00000000 00000000 00000000 00000000
$LightGoomba 00000001 00000009 00000000 00000000 00000000 00000000
$LightGoomba 00000002 00000008 00000000 00000000 00000000 00000000
$LightGoomba 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_01
{
$LightChomp 00000000 0000000A 00000000 00000000 00000000 00000000
$LightBones 00000001 00000009 00000000 00000000 00000000 00000000
$LightBones 00000002 00000008 00000000 00000000 00000000 00000000
$LightChomp 00000003 00000007 00000000 00000000 00000000 00000000
}


#new:Function $Function_80218000_LG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:Function $Function_80218500_01 {
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       ~Func:length2D
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  CLEAR     A0
   44:  LI        A2, 5A
   48:  COPY      A1, A0
   4C:  LA        A3, $FloatTable_LightGoomba
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  COPY      A2, V1
   90:  COPY      A0, V1
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_LightGoomba)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_LightGoomba)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  COPY      V1, A2
   F0:  COPY      V1, A0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  LI        V0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  LI        V0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_8021868C_LG {
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S4, 20 (SP)
    8:  COPY      S4, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  LW        S2, C (S4)
   24:  LW        A1, 0 (S2)
   28:  JAL       ~Func:get_variable
   2C:  ADDIU     S2, S2, 4
   30:  LW        A1, 0 (S2)
   34:  ADDIU     S2, S2, 4
   38:  COPY      A0, S4
   3C:  JAL       ~Func:get_variable
   40:  COPY      S0, V0
   44:  LW        A1, 0 (S2)
   48:  ADDIU     S2, S2, 4
   4C:  COPY      A0, S4
   50:  JAL       ~Func:get_variable
   54:  COPY      S1, V0
   58:  COPY      S3, V0
   5C:  LW        A1, 0 (S2)
   60:  ADDIU     S2, S2, 4
   64:  COPY      A0, S4
   68:  JAL       ~Func:get_variable
   6C:  SUBU      S3, S3, S0
   70:  COPY      S0, V0
   74:  COPY      A0, S4
   78:  LW        A1, 0 (S2)
   7C:  JAL       ~Func:get_variable
   80:  SUBU      S0, S0, S1
   84:  BNE       S3, R0, .oA0
   88:  NOP
   8C:  BNE       S0, R0, .oA0
   90:  COPY      A0, S4
   94:  LW        A1, 0 (S2)
   98:  BEQ       R0, R0, .oC8
   9C:  COPY      A2, V0
        .oA0
   A0:  MTC1      S3, F12
   A4:  NOP
   A8:  CVT.S.W   F12, F12
   AC:  MTC1      S0, F14
   B0:  NOP
   B4:  JAL       $Function_80218500_01
   B8:  CVT.S.W   F14, F14
   BC:  COPY      A0, S4
   C0:  LW        A1, 0 (S2)
   C4:  ADDIU     A2, V0, FFA6
        .oC8
   C8:  JAL       ~Func:set_variable
   CC:  NOP
   D0:  LI        V0, 2
   D4:  LW        RA, 24 (SP)
   D8:  LW        S4, 20 (SP)
   DC:  LW        S3, 1C (SP)
   E0:  LW        S2, 18 (SP)
   E4:  LW        S1, 14 (SP)
   E8:  LW        S0, 10 (SP)
   EC:  JR        RA
   F0:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218458_LG
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       8011D82C
    C:  ADDIU     A0, R0, 1
   10:  DADDU     A0, R0, R0
   14:  ADDIU     V0, R0, 1
   18:  DADDU     A1, A0, R0
   1C:  DADDU     A2, A0, R0
   20:  LAW       V1, 801512F0
   28:  DADDU     A3, A0, R0
   2C:  JAL       8011BE5C
   30:  SB        V0, 0 (V1)
   34:  LW        RA, 10 (SP)
   38:  ADDIU     V0, R0, 2
   3C:  JR        RA
   40:  ADDIU     SP, SP, 18
}

#new:Function $Function_8021849C_LG
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  LW        V0, C (A0)
    C:  JAL       ~Func:get_variable
   10:  LW        A1, 0 (V0)
   14:  DADDU     A0, R0, R0
   18:  DADDU     A1, A0, R0
   1C:  DADDU     A2, A0, R0
   20:  JAL       8011BE5C
   24:  ANDI      A3, V0, FF
   28:  LW        RA, 10 (SP)
   2C:  ADDIU     V0, R0, 2
   30:  JR        RA
   34:  ADDIU     SP, SP, 18
}

#new:Function $Function_802184D4_LG
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S0, V0, R0
   34:  DADDU     A0, S0, R0
   38:  JAL       80028F08
   3C:  DADDU     A1, V0, R0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  ADDIU     V0, R0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:DefenseTable $DefenseTable_LightGoomba
{
.Element:Normal 00000000
.Element:End
}

#new:StatusTable $StatusTable_LightGoomba %the only status with a reasonable chance of working is stop
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      20`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop       90`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_LightGoomba
{
00800000 01000000 001600FF $IdleAnimations_LightGoomba $DefenseTable_LightGoomba 00000000 00000000 00F60000 00000000 
}

#new:Actor $LightGoomba
{
% stats
[Index]        DCb 
[Level]        70`b %endgame enemy 
[MaxHP]        70`b  
[Coins]         1`b 
[Flags]       00000000 
[StatusTable] $StatusTable_LightGoomba
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_LightGoomba
[Script]      $Script_Init_LightGoomba
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     3`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:IdleAnimations $IdleAnimations_LightGoomba
{
.Status:Normal    00621702
.Status:Stone     00621700
.Status:Sleep     0062170D
.Status:Poison    00621702
.Status:Stop      00621700
.Status:Static    00621702
.Status:Paralyze  00621700
.Status:Dizzy     0062170C
.Status:Fear      0062170C
.Status:End
}

#new:IdleAnimations $IdleAnimations_LightGoomba_Moving
{
.Status:Normal    00621706
.Status:Stone     00621700
.Status:Sleep     0062170D
.Status:Poison    00621702
.Status:Stop      00621700
.Status:Static    00621706
.Status:Paralyze  00621700
.Status:Dizzy     0062170C
.Status:Fear      0062170C
.Status:End
}

#new:IdleAnimations $IdleAnimations_LightGoomba_Charged
{
.Status:Normal    0062170D
.Status:Stone     0062170D
.Status:Sleep     0062170D
.Status:Poison    0062170D
.Status:Stop      0062170D
.Status:Static    0062170D
.Status:Paralyze  0062170D
.Status:Dizzy     0062170C
.Status:Fear      0062170C
.Status:End
}

#new:Script $Script_Init_LightGoomba
{
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_LightGoomba )
   14:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_LightGoomba )
   28:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_LightGoomba )
   %3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_LightGoomba )
   50:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   68:  Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
		Call	$Function_SetName_C ( DC 002900EC )
		Call	$Function_SetTattle_C ( DC 001C0120 )	
   80:  Return
   88:  End
}

/%
#new:Script $Script_NextTurn_LightGoomba
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  Switch  *Var[0] 
   1C:  	Case  ==  .Phase:PlayerBegin
   28:  	Case  ==  .Phase:EnemyBegin
   34:  	Case  ==  .Phase:EnemyEnd
   40:  		Call     SetBattleVar 	( 00000001 00000000 )
   54:  		Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
   6C:  EndSwitch
   74:  Return
   7C:  End
}
%/

#new:Script $Script_Charge_LightGoomba %also does the charge attack
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   64:  If  *Var[0]  ==  00000000 
   74:  	Call     UseBattleCamPreset 	( 0000000E )
   84:  	Call     BattleCamTargetActor ( .Actor:Self )
   94:  	Call     MoveBattleCamOver 	( 00000014 )
   A4:  	Wait     00000014 
   B0:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:PowerUp )
   C4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   E0:  	Add  *Var[1]  0000000A 
   F0:  	Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000002D 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  134:  	Call     SetAnimation 	( .Actor:Self 00000001 00621706 )
  14C:  	Wait     0000001E 
  158:  	Call     UseBattleCamPreset 	( 00000002 )
  168:  	Call     MoveBattleCamOver 	( 00000014 )
  178:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  194:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  1A8:  	Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  1C4:  	Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  %1E4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp ) %Call     PlaySoundAtActor 	( .Actor:Self 000020DD )
  1F8:  	Call     $Function_80218000_LG ( 00000080 0000000A )
  20C:  	Thread
  214:  		Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.5] )
  230:  	EndThread
  238:  	Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
  250:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba_Charged )
  268:  	Call     SetAnimation 	( .Actor:Self 00000001 00621708 )
  280:  	Call     EnableActorGlow 	( .Actor:Self .True )
  294:  	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .True )
  2B0:  	Wait     00000002 
  2BC:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  2D0:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  2E4:  	Return
  2EC:  EndIf
		/%
		%nah
		%add the monstar attack ;)
		Call     UseBattleCamPreset 	( 00000013 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamOffsetZ 	( 00000010 )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 0000001E )
		Wait 0000001E 
		Thread
			Call     $Function_80218458_LG ( )
			Call     MakeLerp    	( 00000000 000000C8 0000003C 00000001 )
			Label    00000000 
			Call     UpdateLerp  	( )
			Call     $Function_8021849C_LG ( *Var[0] )
			Wait     00000001 
			If  *Var[1]  ==  00000001 
				Goto     00000000 
			EndIf
		EndThread
		Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp )
		Call     $Function_802184D4_LG ( 00000050 00000078 )
		Call     UseBattleCamPreset 	( 00000013 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
		Call     SetBattleCamZoom  	( 00000064 )
		Call     SetBattleCamOffsetZ 	( 00000020 )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 0000003C )
		Wait     0000003C 
		Call     PlaySoundAtActor 	( .Actor:Self 000002EA )
		Call     PlaySoundAtActor 	( .Actor:Self 0000036E )
		Thread
			Wait     0000000A 
			Loop     00000012 
				Call     RandInt     	( 00000096 *Var[0] )
				Add  *Var[0]  00000064 
				Call     $Function_802184D4_LG ( *Var[0] 00000014 )
				Wait     0000000A 
			EndLoop
		EndThread
		Thread
			Loop     0000003C 
				Call     RandInt     	( 00000001 *Var[0] )
				Add  *Var[0]  00000002 
				Call     RandInt     	( 00000190 *Var[1] )
				Sub  *Var[1]  00000064 
				Call     RandInt     	( 00000064 *Var[2] )
				Sub  *Var[2]  00000032 
				Set  *Var[3]  *Var[1] 
				Sub  *Var[3]  000000C8 
				Set  *Var[4]  *Var[2] 
				Call     RandInt     	( 0000000A *Var[5] )
				Add  *Var[5]  0000000A 
				Call     PlayEffect  	( 0000000F *Var[0] *Var[1] 000000F0 *Var[2] *Var[3] 00000000 *Var[4] *Var[5] 00000000 00000000 00000000 00000000 00000000 )
				Wait     00000003 
			EndLoop
		EndThread
		Wait     00000008 
		Call     UseBattleCamPreset 	( 00000002 )
		Call     MoveBattleCamOver 	( 0000000A )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Add  *Var[1]  00000019 
		Add  *Var[2]  00000005 
		Call     PlayEffect  	( ~FX:RadialFlowOut:BlueSpikes *Var[0] *Var[1] *Var[2] *Fixed[0.80078125] 000000A0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call     SetAnimation 	( .Actor:Self 00000001 0062050D )
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000000 00000010 )
		Switch  *Var[0] 
			CaseOR  ==  00000006 
			CaseOR  ==  00000005 
				Set  *Var[A]  *Var[0] 
				Wait     000000AA 
				Call     SetAnimation 	( .Actor:Self 00000001 0062050A )
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
				Call     MakeLerp    	( 000000C8 00000000 0000003C 00000000 )
				Label    00000001 
				Call     UpdateLerp  	( )
				Call     $Function_8021849C_LG ( *Var[0] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000001 
				EndIf
				If  *Var[A]  ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Wait     00000014 
				Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
				Call     EnableActorGlow 	( .Actor:Self .False )
				Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
				Call     UseIdleAnimation 	( .Actor:Self .True )
				Return
			EndCaseGroup
		EndSwitch
		Wait     000000AA 
		Wait     00000002 
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000100 00000000 00000000 000000018 00000020 )
		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
		Call     EnableActorGlow 	( .Actor:Self .False )
		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
		Switch  *Var[0] 
			CaseOR  ==  00000000 
			CaseOR  ==  00000002 
				Call     SetAnimation 	( .Actor:Self 00000001 00620502 )
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
				Call     MakeLerp    	( 000000C8 00000000 0000003C 00000000 )
				Label    00000002 
				Call     UpdateLerp  	( )
				Call     $Function_8021849C_LG ( *Var[0] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000002 
				EndIf
				Wait     00000014 
			EndCaseGroup
		EndSwitch
		%/
  2F4:  Call     UseBattleCamPreset 	( 0000003F )
  304:  Call     BattleCamTargetActor ( .Actor:Self )
  314:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  32C:  Loop     00000014 
  338:  	Call     SetActorDispOffset ( FFFFFF81 00000001 00000000 00000000 )
  354:  	Wait     00000001 
  360:  	Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF 00000000 00000000 )
  37C:  	Wait     00000001 
  388:  EndLoop
  390:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  3AC:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  3D0:  Switch  *Var[0] 
  3DC:  	CaseOR  ==  00000006 
  3E8:  	CaseOR  ==  00000005 
  3F4:  		Set  *Var[A]  *Var[0] 
  404:  		Thread
  40C:  			Loop     
  418:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  434:  				Add  *Var[0]  0000001E 
  444:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  460:  				If  *Var[0]  >  *Var[3] 
  470:  					BreakLoop
  478:  				EndIf
  480:  				Wait     00000001 
  48C:  			EndLoop
  494:  			Call     UseBattleCamPreset 	( 00000001 )
  4A4:  			If  *Var[A]  ==  00000005 
  4B4:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4D8:  			EndIf
  4E0:  			Wait     0000000F 
  4EC:  			Call     UseBattleCamPreset 	( 00000002 )
  4FC:  		EndThread
  504:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  520:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  53C:  		Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  558:  		Call     SetGoalToTarget 	( .Actor:Self )
  568:  		Call     AddGoalPos 	( .Actor:Self FFFFFF38 00000000 00000000 )
  584:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.03] ) %0.01 -> 0.03
  598:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  5AC:  		Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  5CC:  		Call     8026F6EC ( FFFFFF81 )
  5DC:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  5F8:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  614:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  630:  		Call     SetActorPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  64C:  		Wait     00000014 
  658:  		Call     EnableActorGlow 	( .Actor:Self .False )
  66C:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  688:  		Call     YieldTurn   	( )
  694:  		Call     SetActorPos 	( .Actor:Self 0000012C 00000000 00000000 )
  6B0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6CC:  		Call     SetAnimation 	( .Actor:Self 00000001 00621706 )
  6E4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6F8:  		Call     SetGoalToHome 	( .Actor:Self )
  708:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  720:  		Call     SetAnimation 	( .Actor:Self 00000001 00621702 )
  738:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  750:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  768:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
  780:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  794:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7A8:  		Return
  7B0:  	EndCaseGroup
  7B8:  EndSwitch
  7C0:  Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  7DC:  Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  7F8:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  814:  Call     SetGoalToTarget 	( .Actor:Self )
  824:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.03] ) %0.01 -> 0.03
  838:  Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  84C:  Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  86C:  Wait     00000002 
  878:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 8020023C 00000014 00000020 )
  8A0:  Switch  *Var[0] 
  8AC:  	CaseOR  ==  00000000 
  8B8:  	CaseOR  ==  00000002 
  8C4:  		Thread
  8CC:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  8E8:  			Set  *Var[0]  00000050 
  8F8:  			Loop     0000003C 
  904:  				Add  *Var[0]  00000012 
  914:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  930:  				Wait     00000001 
  93C:  			EndLoop
  944:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  960:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  97C:  		EndThread
  984:  		Call     UseBattleCamPreset 	( 00000002 )
  994:  		Call     8026F6EC ( FFFFFF81 )
  9A4:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.4] ) %0.8 -> 2.4
  9B8:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9D4:  		Set  *Var[1]  00000000 
  9E4:  		Sub  *Var[0]  00000032 
  9F4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A10:  		Call     JumpToGoal  	( .Actor:Self 0000001E 00000000 00000001 00000000 )
  A30:  		Sub  *Var[0]  00000028 
  A40:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A5C:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  A7C:  		Sub  *Var[0]  0000001E 
  A8C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AA8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  AC8:  		Wait     0000000A 
  AD4:  		Call     EnableActorGlow 	( .Actor:Self .False )
  AE8:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  B04:  		Call     YieldTurn   	( )
  B10:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  B24:  		Call     SetAnimation 	( .Actor:Self 00000001 00621706 )
  B3C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  B50:  		Call     SetGoalToHome 	( .Actor:Self )
  B60:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  B78:  		Call     SetAnimation 	( .Actor:Self 00000001 00621702 )
  B90:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  BA4:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  BBC:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
  BD4:  	EndCaseGroup
  BDC:  EndSwitch
	%
  BE4:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  BF8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  C0C:  Return
  C14:  End
}

%Charge on second turn (deterministic)
%Do not charge if others are charging
#new:Script $Script_TakeTurn_LightGoomba %$Script_TakeTurn_802195F0
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	Call     SetBattleVar 	( 00000001 00000001 )
   34:  	ExecWait $Script_Headbonk_LightGoomba 
   40:  	Return
   48:  EndIf
		Label 0
   50:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   68:  If  *Var[0]  ==  00000001 
   78:  	ExecWait $Script_Charge_LightGoomba %preform charge attack if charged
   84:  	Return
   8C:  EndIf
   C0:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
		Add		 *Var0 1
		If *Var0 > 2`
			Set *Var0 0
		EndIf
		Call     SetActorVar 	( .Actor:Self 00000001 *Var[0] )
		Switch *Var0 
			Case == 0`
				ExecWait $Script_Headbonk_LightGoomba 
			Case == 1`
				ExecWait $Script_Charge_LightGoomba 
				Call 	GetActorHP ( .Actor:Self *Var0 )
				Call	GetEnemyMaxHP ( .Actor:Self *Var1 )
				Div *Var1 2`
				If *Var0 < *Var1 
					Goto 0
				EndIf
			Case == 2`
				ExecWait $Script_Boost_LightGoomba
		EndSwitch
  218:  Return
  220:  End
}
% Origin: HEURISTIC
/%
#new:Script $Script_802198B0_LightGoomba
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_Headbonk_LightGoomba )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_LightGoomba2 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_LightGoomba2 )
   3C:  Return
   44:  End
%/
#new:Script $Script_Idle_LightGoomba %$Script_Idle_802198FC
{
    0:  Label    0000000A 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add  *Var[0]  00000050 
   30:  Loop     *Var[0] 
   3C:  	Label    00000000 
   48:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
   5C:  	If  *Var[1]  &  0035D000 
   6C:  		Wait     00000001 
   78:  		Goto     00000000 
   84:  	EndIf
   8C:  	Wait     00000001 
   98:  EndLoop
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Add  *Var[0]  00000005 
   CC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
   E0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba_Moving )
   F8:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  114:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000000 *Var[0] )
		If *Var[0] == 00000001
			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba_Charged )
		Else
  128:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
		EndIf
  140:  Loop     00000014 
  14C:  	Label    00000001 
  158:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:  	If  *Var[1]  &  0035D000 
  17C:  		Wait     00000001 
  188:  		Goto     00000001 
  194:  	EndIf
  19C:  	Wait     00000001 
  1A8:  EndLoop
  1B0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Sub  *Var[0]  00000005 
  1DC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
  1F0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba_Moving )
  208:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  224:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000000 *Var[0] )
		If *Var[0] == 00000001
			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba_Charged )
		Else
  238:  	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
		EndIf
  250:  Loop     00000050 
  25C:  	Label    00000002 
  268:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  27C:  	If  *Var[1]  &  0035D000 
  28C:  		Wait     00000001 
  298:  		Goto     00000002 
  2A4:  	EndIf
  2AC:  	Wait     00000001 
  2B8:  EndLoop
  2C0:  Goto     0000000A 
  2CC:  Return
  2D4:  End
}

#new:Script $Script_HandleEvent_LightGoomba %$Script_HandleEvent_80219BD8
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo
   70:  	CaseOR  ==  .Event:Hit
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  00621709 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  0062170E 
   DC:  		SetConst  *Var[2]  0062170F 
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  0062170E 
  124:  		SetConst  *Var[2]  0062170F 
  134:  		ExecWait DoBurnHit 
  140:  		SetConst  *Var[0]  00000001 
  150:  		SetConst  *Var[1]  0062170F 
  160:  		ExecWait DoDeath 
  16C:  		Return
  174:  	Case  ==  .Event:SpinSmashHit
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  00621709 
  1A0:  		ExecWait 8029B998 
  1AC:  	Case  ==  .Event:SpinSmashDeath
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  00621709 
  1D8:  		ExecWait 8029B998 
  1E4:  		SetConst  *Var[0]  00000001 
  1F4:  		SetConst  *Var[1]  00621709 
  204:  		ExecWait DoDeath 
  210:  		Return
  218:  	Case  ==  .Event:ShockHit
  224:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  240:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  25C:  		Call     EnableActorGlow 	( .Actor:Self .False )
  270:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  28C:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  2A4:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
  2BC:  		SetConst  *Var[0]  00000001 
  2CC:  		SetConst  *Var[1]  00621709 
  2DC:  		ExecWait DoShockHit 
  2E8:  		SetConst  *Var[0]  00000001 
  2F8:  		SetConst  *Var[1]  00621709 
  308:  		ExecWait DoJumpBack 
  314:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  334:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  34C:  		Call     SetAnimation 	( .Actor:Self 00000001 0062170C )
  364:  		Call     SetGoalToHome 	( .Actor:Self )
  374:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  388:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  3A0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  3B8:  		Wait     00000005 
  3C4:  		Call     SetAnimation 	( .Actor:Self 00000001 00621702 )
  3DC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  3F0:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  410:  	Case  ==  .Event:ShockDeath
  41C:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  438:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  454:  		Call     EnableActorGlow 	( .Actor:Self .False )
  468:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  484:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  49C:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
  4B4:  		SetConst  *Var[0]  00000001 
  4C4:  		SetConst  *Var[1]  00621709 
  4D4:  		ExecWait DoShockHit 
  4E0:  		SetConst  *Var[0]  00000001 
  4F0:  		SetConst  *Var[1]  00621709 
  500:  		ExecWait DoDeath 
  50C:  		Return
  514:  	Case  ==  .Event:StarBeam
  520:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  538:  		If  *Var[0]  ==  00000001 
  548:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  564:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  580:  			Call     EnableActorGlow 	( .Actor:Self .False )
  594:  			Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  5B0:  			Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  5C8:  			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightGoomba )
  5E0:  		EndIf
  5E8:  		SetConst  *Var[0]  00000001 
  5F8:  		SetConst  *Var[1]  00621709 
  608:  		ExecWait DoImmune 
  614:  	CaseOR  ==  00000017
  620:  	CaseOR  ==  .Event:Immune
  62C:  	CaseOR  ==  .Event:AirLiftFailed
  638:  		SetConst  *Var[0]  00000001 
  648:  		SetConst  *Var[1]  00621702 
  658:  		ExecWait DoImmune 
  664:  	EndCaseGroup
  66C:  	Case  ==  .Event:Death
  678:  		SetConst  *Var[0]  00000001 
  688:  		SetConst  *Var[1]  00621709 
  698:  		ExecWait DoNormalHit 
  6A4:  		Wait     0000000A 
  6B0:  		SetConst  *Var[0]  00000001 
  6C0:  		SetConst  *Var[1]  00621709
  6D0:  		ExecWait DoDeath 
  6DC:  		Return
  6E4:  	Case  ==  .Event:EndFirstStrike
  6F0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  708:  		Call     SetAnimation 	( .Actor:Self 00000001 00621706 )
  720:  		Call     SetGoalToHome 	( .Actor:Self )
  730:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  744:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  75C:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  774:  		Call     HPBarToHome 	( .Actor:Self )
  784:  	Case  ==  .Event:RecoverStatus
  790:  		SetConst  *Var[0]  00000001 
  7A0:  		SetConst  *Var[1]  00621702
  7B0:  		ExecWait DoRecover 
  7BC:  	Case  ==  .Event:ScareAway
  7C8:  		SetConst  *Var[0]  00000001 
  7D8:  		SetConst  *Var[1]  00621706 
  7E8:  		SetConst  *Var[2]  00621709 
  7F8:  		ExecWait DoScareAway 
  804:  		Return
  80C:  	Case  ==  .Event:BeginAirLift
  818:  		SetConst  *Var[0]  00000001 
  828:  		SetConst  *Var[1]  00621706 
  838:  		ExecWait DoAirLift 
  844:  	Case  ==  .Event:BlowAway
  850:  		SetConst  *Var[0]  00000001 
  860:  		SetConst  *Var[1]  00621709 
  870:  		ExecWait DoBlowAway 
  87C:  		Return
  884:  	Default
  88C:  EndSwitch
  894:  Call     SetAnimation 	( .Actor:Self 00000001 00621702 )
  8AC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8C0:  Call     UseIdleAnimation 	( .Actor:Self .True )
  8D4:  Return
  8DC:  End
}

#new:FloatTable $FloatTable_LightGoomba %$FloatTable_8021A4BC
{
0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
0.999391 0.999848 1.0
}

#new:Script $Script_Headbonk_LightGoomba %$Script_TakeTurn_8021A628
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  SetAnimation      ( .Actor:Self 00000001 00621706 )
   8C:  Call  SetGoalToTarget   ( .Actor:Self )
   9C:  Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
   CC:  Call  RunToGoal ( .Actor:Self 00000000 .False )
   E4:  Call  SetAnimation      ( .Actor:Self 00000001 00621702 )
   FC:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
  118:  Wait  1`
  124:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
  140:  Wait  5`
  14C:  Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  168:  Call  SetAnimation      ( .Actor:Self 00000001 00621708 )
  180:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  1A4:  Switch  *Var0 
  1B0:  	CaseOR  ==  .HitResult:Miss % 6
  1BC:  	CaseOR  ==  .HitResult:Lucky % 5
  1C8:  		Set   *VarA  *Var0 
  1D8:  		Call  SetGoalToTarget   ( .Actor:Self )
  1E8:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  204:  		Sub   *Var0  0000000A 
  214:  		Set   *Var1  0000000A 
  224:  		Add   *Var2  00000003 
  234:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  250:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
  264:  		Thread
  26C:  			Call  GetActorPos   ( .Actor:Self *Var1 *Var2 *Var0 )
  288:  			Set   *Var0  00000000 
  298:  			Loop  00000010 
  2A4:  				Call  GetActorPos   ( .Actor:Self *Var4 *Var5 *Var6 )
  2C0:  				Call  $Function_8021868C_LG ( *Var1 *Var2 *Var4 *Var5 *Var0 )
  2E0:  				Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var0 )
  2FC:  				Set   *Var1  *Var4 
  30C:  				Set   *Var2  *Var5 
  31C:  				Set   *Var3  *Var6 
  32C:  				Wait  1`
  338:  			EndLoop
  340:  		EndThread
  348:  		Thread
  350:  			Wait  6`
  35C:  			Call  SetAnimation  ( .Actor:Self 00000001 00621708 )
  374:  		EndThread
  37C:  		Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
  39C:  		Call  SetAnimation  ( .Actor:Self 00000001 0062170D )
  3B4:  		Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  3D0:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
  3EC:  		Wait  1`
  3F8:  		Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
  414:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
  430:  		Wait  1`
  43C:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  458:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
  474:  		Call  SetAnimation  ( .Actor:Self 00000001 00621709 )
  48C:  		Wait  5`
  498:  		If  *VarA  ==  .HitResult:Lucky % 5
  4A8:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  4CC:  		EndIf
  4D4:  		Wait  5`
  4E0:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  4FC:  		Call  SetAnimation      ( .Actor:Self 00000001 00621708 )
  514:  		Call  SetGoalToTarget   ( .Actor:Self )
  524:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  540:  		Add   *Var0  00000014 
  550:  		Set   *Var1  00000000 
  560:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  57C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
  590:  		Thread
  598:  			Wait  4`
  5A4:  			Set   *Var0  000000B4 
  5B4:  			Loop  00000004 
  5C0:  				Sub   *Var0  0000002D 
  5D0:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  5EC:  				Wait  1`
  5F8:  			EndLoop
  600:  			Call  SetAnimation  ( .Actor:Self 00000001 00621708 )
  618:  		EndThread
  620:  		Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
  640:  		Call  SetAnimation      ( .Actor:Self 00000001 0062170C )
  658:  		Wait  5`
  664:  		Call  UseBattleCamPreset    ( 00000002 )
  674:  		Call  YieldTurn ( )
  680:  		Call  SetActorYaw       ( .Actor:Self 000000B4 )
  694:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6B0:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
  6C8:  		Call  SetGoalToHome     ( .Actor:Self )
  6D8:  		Call  SetActorSpeed     ( .Actor:Self *Fixed[8.0] )
  6EC:  		Call  RunToGoal ( .Actor:Self 00000000 .False )
  704:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
  71C:  		Call  SetActorYaw       ( .Actor:Self 00000000 )
  730:  		Wait  5`
  73C:  		Call  SetAnimation      ( .Actor:Self 00000001 00621702 )
  754:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
  768:  		Call  JumpToGoal        ( .Actor:Self 00000005 .False .True .False )
  788:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  7A0:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  7B4:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  7C8:  		Return
  7D0:  	EndCaseGroup
  7D8:  	Default
				Loop 2
  7E0:  			Call  SetGoalToTarget       ( .Actor:Self )
  7F0:  			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
  804:  			Thread
  80C:  				Call  GetActorPos   ( .Actor:Self *Var1 *Var2 *Var0 )
  828:  				Set   *Var0  00000000 
  838:  				Loop  00000010 
  844:  					Call  GetActorPos   ( .Actor:Self *Var4 *Var5 *Var6 )
  860:  					Call  $Function_8021868C_LG ( *Var1 *Var2 *Var4 *Var5 *Var0 )
  880:  					Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var0 )
  89C:  					Set   *Var1  *Var4 
  8AC:  					Set   *Var2  *Var5 
  8BC:  					Set   *Var3  *Var6 
  8CC:  					Wait  1`
  8D8:  				EndLoop
  8E0:  			EndThread
  8E8:  			Thread
  8F0:  				Wait  6`
  8FC:  				Call  SetAnimation  ( .Actor:Self 00000001 00621708 )
  914:  			EndThread
  91C:  			Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
  93C:  			Call  SetAnimation  ( .Actor:Self 00000001 00621708 )
  954:  			Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  970:  			Wait  1`
  97C:  			Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
  998:  			Wait  1`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000008 00000020 )
				EndLoop
  9A4:  EndSwitch
  9D4:  Switch  *Var0 
  9E0:  	CaseOR  ==  .HitResult:Hit % 0
  9EC:  	CaseOR  ==  00000002 % 2
  9F8:  		Call  UseBattleCamPreset    ( 00000002 )
  A08:  		Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  A24:  		Wait  1`
  A30:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A4C:  		Wait  1`
  A58:  		Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
  A74:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  A90:  		Call  SetAnimation  ( .Actor:Self 00000001 00621702 )
  AA8:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  AC4:  		Add   *Var0  00000028 
  AD4:  		Set   *Var1  00000000 
  AE4:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  AF8:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  B14:  		Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  B34:  		Add   *Var0  0000001E 
  B44:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  B60:  		Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
  B80:  		Add   *Var0  00000014 
  B90:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  BAC:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  BCC:  		Call  SetAnimation  ( .Actor:Self 00000001 00621702 )
  BE4:  		Wait  3`
  BF0:  		Call  YieldTurn ( )
  BFC:  		Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
  C14:  		Call  SetAnimation  ( .Actor:Self 00000001 00621706 )
  C2C:  		Call  SetGoalToHome ( .Actor:Self )
  C3C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  C50:  		Call  RunToGoal     ( .Actor:Self 00000000 .False )
  C68:  		Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
  C80:  	EndCaseGroup
  C88:  EndSwitch
  C90:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  CA4:  Call  UseIdleAnimation  ( .Actor:Self .True )
  CB8:  Return
  CC0:  End
}

#new:Script $Script_Boost_LightGoomba
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self 00000000 )
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	0000000F 
	Call	SetAnimation	( .Actor:Self 00000001 0062170A )
	Wait	00000005 
	Call	PlaySoundAtActor	( .Actor:Self 000020D4 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	0000001E 
	Call	SetAnimation	( .Actor:Self 00000001 00621702 )
	Wait	00000005 
	Thread
		Wait	0000000A 
		Call	PlaySoundAtActor 	( *Var[8] 000002DD )
	EndThread
	Thread
		Call	8026BF48	( 00000001 )
		Call	BoostAttack 	( .Actor:Self 00000003 )
		Call	8026BF48	( 00000000 )
	EndThread
	Call	8027114C ( )
	Call	UseBattleCamPreset 	( 00000002 )
	Wait	0000000A 
	Call	8027D7F0 ( )
	Call	EnableIdleScript 	( .Actor:Self 00000001 )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}



% Automatically dumped from section 0B

#new:Actor $LightChomp {
% stats
[Index]        18b 
[Level]        70`b 
[MaxHP]        55`b 
[Coins]         5`b 
[Flags]       00000000 
[StatusTable] $StatusTable_80221558_LightChomp 
% ai
[PartsCount]   10`s 
[PartsTable]  $PartsTable_80221604_LightChomp 
[Script]      $Script_Init_LightChomp 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     3`b % weight (0-4)
% ui positions
[Size]         56`b  40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:Function $Function_80218270_LightChomp {
    0:  ADDIU     SP, SP, FFA8
    4:  SW        S4, 20 (SP)
    8:  LI        S4, 3
    C:  SW        S2, 18 (SP)
   10:  SW        RA, 24 (SP)
   14:  SW        S3, 1C (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  SDC1      F30, 50 (SP)
   24:  SDC1      F28, 48 (SP)
   28:  SDC1      F26, 40 (SP)
   2C:  SDC1      F24, 38 (SP)
   30:  SDC1      F22, 30 (SP)
   34:  SDC1      F20, 28 (SP)
   38:  LW        A0, 148 (A0)
   3C:  LIF       F20, 7.0
   44:  LIF       F30, 0.5960938
   50:  LIF       F28, 3.0
   58:  JAL       ~Func:get_actor
   5C:  CLEAR     S2
   60:  LI        A0, 180
   64:  JAL       ~Func:heap_malloc
   68:  COPY      S3, V0
   6C:  COPY      S1, V0
   70:  ADDIU     S0, S1, 8
   74:  LWC1      F26, 14C (S3)
   78:  LWC1      F2, 144 (S3)
   7C:  LIF       F1, 2.625
   84:  MTC1      R0, F0
   88:  CVT.D.S   F2, F2
   8C:  ADD.D     F2, F2, F0
   90:  LWC1      F0, 148 (S3)
   94:  LIF       F5, 2.3125
   9C:  MTC1      R0, F4
   A0:  CVT.D.S   F0, F0
   A4:  ADD.D     F0, F0, F4
   A8:  SW        S1, 78 (S3)
   AC:  CVT.S.D   F24, F2
   B0:  CVT.S.D   F22, F0
        .oB4
   B4:  COPY      A0, S3
   B8:  ADDU      A1, S4, S2
   BC:  SWC1      F20, 1C (S0)
   C0:  SWC1      F20, 24 (S0)
   C4:  SWC1      F20, 20 (S0)
   C8:  SWC1      F24, 0 (S1)
   CC:  SWC1      F22, FFFC (S0)
   D0:  SWC1      F26, 0 (S0)
   D4:  SW        R0, 14 (S0)
   D8:  SWC1      F30, 18 (S0)
   DC:  SWC1      F28, C (S0)
   E0:  JAL       ~Func:get_actor_part
   E4:  SW        R0, 10 (S0)
   E8:  LWC1      F0, 0 (S1)
   EC:  ADDIU     S2, S2, 1
   F0:  SWC1      F0, 2C (V0)
   F4:  LWC1      F0, FFFC (S0)
   F8:  ADDIU     S1, S1, 30
   FC:  SWC1      F0, 30 (V0)
  100:  LWC1      F0, 0 (S0)
  104:  SWC1      F0, 34 (V0)
  108:  SLTI      V0, S2, 8
  10C:  BNE       V0, R0, .oB4
  110:  ADDIU     S0, S0, 30
  114:  LW        RA, 24 (SP)
  118:  LW        S4, 20 (SP)
  11C:  LW        S3, 1C (SP)
  120:  LW        S2, 18 (SP)
  124:  LW        S1, 14 (SP)
  128:  LW        S0, 10 (SP)
  12C:  LDC1      F30, 50 (SP)
  130:  LDC1      F28, 48 (SP)
  134:  LDC1      F26, 40 (SP)
  138:  LDC1      F24, 38 (SP)
  13C:  LDC1      F22, 30 (SP)
  140:  LDC1      F20, 28 (SP)
  144:  LI        V0, 2
  148:  JR        RA
  14C:  ADDIU     SP, SP, 58
}

#new:Function $Function_802183C0_LightChomp {
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MTC1      A1, F22
    C:  LIF       F0, 6.28318
   18:  MTC1      A2, F6
   1C:  SDC1      F20, 18 (SP)
   20:  MUL.S     F20, F6, F0
   24:  NOP
   28:  SW        S0, 10 (SP)
   2C:  LIF       F0, 360.0
   34:  COPY      S0, A0
   38:  SW        RA, 14 (SP)
   3C:  DIV.S     F20, F20, F0
   40:  JAL       ~Func:sin_rad
   44:  MOV.S     F12, F20
   48:  MOV.S     F12, F20
   4C:  JAL       ~Func:cos_rad
   50:  MOV.S     F20, F0
   54:  NEG.S     F2, F22
   58:  MUL.S     F2, F2, F20
   5C:  NOP
   60:  MUL.S     F22, F22, F0
   64:  NOP
   68:  LWC1      F4, 0 (S0)
   6C:  ADD.S     F4, F4, F2
   70:  LWC1      F0, 4 (S0)
   74:  ADD.S     F0, F0, F22
   78:  SWC1      F4, 0 (S0)
   7C:  SWC1      F0, 4 (S0)
   80:  LW        RA, 14 (SP)
   84:  LW        S0, 10 (SP)
   88:  LDC1      F22, 20 (SP)
   8C:  LDC1      F20, 18 (SP)
   90:  JR        RA
   94:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218458_LightChomp {
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MTC1      A1, F22
    C:  LIF       F0, 6.28318
   18:  MTC1      A2, F2
   1C:  SDC1      F20, 18 (SP)
   20:  MUL.S     F20, F2, F0
   24:  NOP
   28:  SW        S0, 10 (SP)
   2C:  LIF       F0, 360.0
   34:  COPY      S0, A0
   38:  SW        RA, 14 (SP)
   3C:  DIV.S     F20, F20, F0
   40:  JAL       ~Func:sin_rad
   44:  MOV.S     F12, F20
   48:  JAL       ~Func:cos_rad
   4C:  MOV.S     F12, F20
   50:  MUL.S     F22, F22, F0
   54:  NOP
   58:  SWC1      F22, 0 (S0)
   5C:  LW        RA, 14 (SP)
   60:  LW        S0, 10 (SP)
   64:  LDC1      F22, 20 (SP)
   68:  LDC1      F20, 18 (SP)
   6C:  JR        RA
   70:  ADDIU     SP, SP, 28
}

#new:Function $Function_802184CC_LightChomp {
    0:  ADDIU     SP, SP, FF98
    4:  SW        RA, 38 (SP)
    8:  SW        S5, 34 (SP)
    C:  SW        S4, 30 (SP)
   10:  SW        S3, 2C (SP)
   14:  SW        S2, 28 (SP)
   18:  SW        S1, 24 (SP)
   1C:  SW        S0, 20 (SP)
   20:  SDC1      F28, 60 (SP)
   24:  SDC1      F26, 58 (SP)
   28:  SDC1      F24, 50 (SP)
   2C:  SDC1      F22, 48 (SP)
   30:  SDC1      F20, 40 (SP)
   34:  JAL       ~Func:get_actor
   38:  LW        A0, 148 (A0)
   3C:  COPY      S1, V0
   40:  BNE       S1, R0, .o50
   44:  LI        V0, A
   48:  BEQ       R0, R0, .o3AC
   4C:  CLEAR     V0
        .o50
   50:  LB        V1, 210 (S1)
   54:  LW        S2, 78 (S1)
   58:  BNE       V1, V0, .o90
   5C:  LI        S5, 3
   60:  LWC1      F2, 144 (S1)
   64:  LIF       F1, 2.375
   6C:  MTC1      R0, F0
   70:  CVT.D.S   F2, F2
   74:  ADD.D     F2, F2, F0
   78:  LWC1      F0, 148 (S1)
   7C:  LIF       F5, 2.0625
   84:  MTC1      R0, F4
   88:  BEQ       R0, R0, .oBC
   8C:  CVT.D.S   F0, F0
        .o90
   90:  LWC1      F2, 144 (S1)
   94:  LIF       F1, 2.625
   9C:  MTC1      R0, F0
   A0:  CVT.D.S   F2, F2
   A4:  ADD.D     F2, F2, F0
   A8:  LWC1      F0, 148 (S1)
   AC:  LIF       F5, 2.3125
   B4:  MTC1      R0, F4
   B8:  CVT.D.S   F0, F0
        .oBC
   BC:  ADD.D     F0, F0, F4
   C0:  CVT.S.D   F20, F2
   C4:  CVT.S.D   F22, F0
   C8:  CLEAR     S3
   CC:  LI        S4, A
   D0:  ADDIU     S0, S2, 4
   D4:  LIF       F28, 3.5
   DC:  LIF       F26, 7.0
   E4:  LIF       F24, 1.0
        .oEC
   EC:  LB        V0, 210 (S1)
   F0:  BNEL      V0, S4, .o108
   F4:  SWC1      F26, 20 (S0)
   F8:  SWC1      F28, 20 (S0)
   FC:  SWC1      F28, 28 (S0)
  100:  BEQ       R0, R0, .o110
  104:  SWC1      F28, 24 (S0)
        .o108
  108:  SWC1      F26, 28 (S0)
  10C:  SWC1      F26, 24 (S0)
        .o110
  110:  LWC1      F2, 14 (S0)
  114:  LWC1      F0, 10 (S0)
  118:  SUB.S     F2, F2, F0
  11C:  NEG.S     F0, F0
  120:  ADD.S     F0, F0, F0
  124:  C.LT.S    F2, F0
  128:  NOP
  12C:  BC1F      .o164
  130:  SWC1      F2, 14 (S0)
  134:  SWC1      F0, 14 (S0)
  138:  LW        V0, A8 (S1)
  13C:  BEQ       V0, R0, .o164
  140:  NOP
  144:  BNE       S3, R0, .o164
  148:  LI        A0, 2063
  14C:  LWC1      F0, 14C (S1)
  150:  SWC1      F0, 10 (SP)
  154:  LW        A2, 144 (S1)
  158:  LW        A3, 148 (S1)
  15C:  JAL       ~Func:sfx_play_sound_at_position
  160:  CLEAR     A1
        .o164
  164:  LWC1      F0, 0 (S0)
  168:  LWC1      F2, 14 (S0)
  16C:  ADD.S     F0, F0, F2
  170:  SWC1      F0, 0 (S0)
  174:  LB        V0, 210 (S1)
  178:  BNE       V0, S4, .o1B0
  17C:  CVT.D.S   F0, F0
  180:  LIF       F3, 2.0625
  188:  MTC1      R0, F2
  18C:  NOP
  190:  C.LT.D    F0, F2
  194:  NOP
  198:  BC1F      .o1E4
  19C:  MOV.S     F12, F20
  1A0:  LIF       F0, 2.5
  1A8:  BEQ       R0, R0, .o1DC
  1AC:  SW        R0, 14 (S0)
        .o1B0
  1B0:  LIF       F3, 2.3125
  1B8:  MTC1      R0, F2
  1BC:  NOP
  1C0:  C.LT.D    F0, F2
  1C4:  NOP
  1C8:  BC1F      .o1E4
  1CC:  MOV.S     F12, F20
  1D0:  LIF       F0, 5.0
  1D8:  SW        R0, 14 (S0)
        .o1DC
  1DC:  SWC1      F0, 0 (S0)
  1E0:  MOV.S     F12, F20
        .o1E4
  1E4:  LW        A2, 0 (S2)
  1E8:  LW        A3, 0 (S0)
  1EC:  JAL       ~Func:dist2D
  1F0:  MOV.S     F14, F22
  1F4:  MOV.S     F12, F20
  1F8:  MOV.S     F14, F22
  1FC:  LW        A2, 0 (S2)
  200:  LW        A3, 0 (S0)
  204:  JAL       ~Func:atan2
  208:  MOV.S     F20, F0
  20C:  LWC1      F2, 28 (S0)
  210:  C.LE.S    F2, F20
  214:  NOP
  218:  BC1F      .o264
  21C:  MOV.S     F22, F0
  220:  SUB.S     F2, F20, F2
  224:  MFC1      A2, F22
  228:  MFC1      A1, F2
  22C:  JAL       $Function_80218458_LightChomp
  230:  ADDIU     A0, SP, 18
  234:  LWC1      F0, 18 (SP)
  238:  LIF       F3, 1.75
  240:  MTC1      R0, F2
  244:  CVT.D.S   F0, F0
  248:  MUL.D     F0, F0, F2
  24C:  NOP
  250:  LWC1      F2, 14 (S0)
  254:  CVT.D.S   F2, F2
  258:  ADD.D     F2, F2, F0
  25C:  CVT.S.D   F2, F2
  260:  SWC1      F2, 14 (S0)
        .o264
  264:  LWC1      F0, 24 (S0)
  268:  C.LE.S    F0, F20
  26C:  NOP
  270:  BC1F      .o2B0
  274:  NOP
  278:  LWC1      F0, 20 (S0)
  27C:  C.LE.S    F0, F20
  280:  NOP
  284:  BC1F      .o294
  288:  NOP
  28C:  BEQ       R0, R0, .o2A4
  290:  SUB.S     F0, F20, F0
        .o294
  294:  LWC1      F0, 18 (S0)
  298:  LWC1      F2, 1C (S0)
  29C:  ADD.S     F0, F0, F2
  2A0:  SWC1      F0, 18 (S0)
        .o2A4
  2A4:  MFC1      A1, F0
  2A8:  BEQ       R0, R0, .o2FC
  2AC:  NOP
        .o2B0
  2B0:  LWC1      F2, 1C (S0)
  2B4:  LAD       F0, $ConstDouble_80224920_LightChomp
  2BC:  CVT.D.S   F2, F2
  2C0:  MUL.D     F2, F2, F0
  2C4:  NOP
  2C8:  LWC1      F0, 18 (S0)
  2CC:  CVT.D.S   F0, F0
  2D0:  SUB.D     F0, F0, F2
  2D4:  MTC1      R0, F4
  2D8:  MTC1      R0, F5
  2DC:  CVT.S.D   F0, F0
  2E0:  CVT.D.S   F2, F0
  2E4:  C.LT.D    F2, F4
  2E8:  NOP
  2EC:  BC1F      .o2F8
  2F0:  SWC1      F0, 18 (S0)
  2F4:  SW        R0, 18 (S0)
        .o2F8
  2F8:  LW        A1, 18 (S0)
        .o2FC
  2FC:  MFC1      A2, F22
  300:  JAL       $Function_802183C0_LightChomp
  304:  COPY      A0, S2
  308:  LWC1      F0, 18 (S0)
  30C:  LIF       F3, 2.25
  314:  MTC1      R0, F2
  318:  CVT.D.S   F0, F0
  31C:  C.LT.D    F2, F0
  320:  NOP
  324:  BC1F      .o33C
  328:  COPY      A0, S1
  32C:  LIF       F0, 4.0
  334:  NOP
  338:  SWC1      F0, 18 (S0)
        .o33C
  33C:  JAL       ~Func:get_actor_part
  340:  ADDU      A1, S5, S3
  344:  LWC1      F0, 0 (S2)
  348:  COPY      V1, V0
  34C:  SWC1      F0, 2C (V1)
  350:  LWC1      F0, 0 (S0)
  354:  SWC1      F0, 30 (V1)
  358:  LWC1      F0, 4 (S0)
  35C:  SWC1      F0, 34 (V1)
  360:  LB        V0, 210 (S1)
  364:  BNEL      V0, S4, .o384
  368:  SWC1      F24, 4C (V1)
  36C:  LIF       F0, 0.5
  374:  SWC1      F24, 54 (V1)
  378:  SWC1      F0, 4C (V1)
  37C:  BEQ       R0, R0, .o38C
  380:  SWC1      F0, 50 (V1)
        .o384
  384:  SWC1      F24, 50 (V1)
  388:  SWC1      F24, 54 (V1)
        .o38C
  38C:  ADDIU     S3, S3, 1
  390:  LWC1      F22, 0 (S0)
  394:  ADDIU     S0, S0, 30
  398:  LWC1      F20, 0 (S2)
  39C:  SLTI      V0, S3, 8
  3A0:  BNE       V0, R0, .oEC
  3A4:  ADDIU     S2, S2, 30
  3A8:  LI        V0, 2
        .o3AC
  3AC:  LW        RA, 38 (SP)
  3B0:  LW        S5, 34 (SP)
  3B4:  LW        S4, 30 (SP)
  3B8:  LW        S3, 2C (SP)
  3BC:  LW        S2, 28 (SP)
  3C0:  LW        S1, 24 (SP)
  3C4:  LW        S0, 20 (SP)
  3C8:  LDC1      F28, 60 (SP)
  3CC:  LDC1      F26, 58 (SP)
  3D0:  LDC1      F24, 50 (SP)
  3D4:  LDC1      F22, 48 (SP)
  3D8:  LDC1      F20, 40 (SP)
  3DC:  JR        RA
  3E0:  ADDIU     SP, SP, 68
}

#new:IdleAnimations $IdleAnimations_80221450_LightChomp {
.Status:Normal    00350D01
.Status:Stone     00350D00
.Status:Sleep     00350D0A
.Status:Poison    00350D01
.Status:Stop      00350D00
.Status:Static    00350D01
.Status:Dizzy     00350D0B
.Status:End
}

#new:IdleAnimations $IdleAnimations_8022148C_LightChomp {
.Status:Normal    00350D03
.Status:Poison    00350D03
.Status:Stop      00350D00
.Status:Stone     00350D00
.Status:Sleep     00350D0A
.Status:Static    00350D03
.Status:Dizzy     00350D0B
.Status:End
}

#new:IdleAnimations $IdleAnimations_802214C8_LightChomp {
.Status:Normal    00350D04
.Status:Poison    00350D04
.Status:Stop      00350D00
.Status:Stone     00350D00
.Status:Sleep     00350D0A
.Status:Static    00350D04
.Status:Dizzy     00350D0B
.Status:End
}

#new:IdleAnimations $IdleAnimations_80221504_LightChomp {
.Status:Normal    00350D05
.Status:Poison    00350D05
.Status:Stop      00350D00
.Status:Stone     00350D00
.Status:Sleep     00350D0A
.Status:Static    00350D05
.Status:Dizzy     00350D0B
.Status:End
}

#new:IdleAnimations $IdleAnimations_80221540_LightChomp {
.Status:Normal    00350D02
.Status:End
}

#new:DefenseTable $DefenseTable_8022154C_LightChomp {
.Element:Normal 00000005
.Element:End
}

#new:StatusTable $StatusTable_80221558_LightChomp {
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   50`
.Status:Shrink     50`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_80221604_LightChomp {
00020000 01000000 001800FF $IdleAnimations_80221450_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00900001 02000000 F32800FF $IdleAnimations_80221450_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00F20000 00000000 
00124002 03000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 04000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 05000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 06000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 07000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 08000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 09000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
00124002 0A000000 000C00FF $IdleAnimations_80221540_LightChomp $DefenseTable_8022154C_LightChomp 00000000 00000000 00000000 00000000 
}

#new:Script $Script_80221794_LightChomp {
    0:  Call  SetAnimation  ( .Actor:Self *Var0 *Var1 )
   18:  Call  SetGoalToHome ( .Actor:Self )
   28:  Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
   44:  Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
   58:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
   6C:  ExecWait  $Script_8022181C_LightChomp 
   78:  Return
   80:  End
}

#new:Script $Script_8022181C_LightChomp {
    0:  Call  GetActorPos   ( .Actor:Self *Var3 *Var4 *Var5 )
   1C:  Label  0
   28:  Call  GetActorPos   ( .Actor:Self *Var3 *Var4 *Var5 )
   44:  If  *Var3  ==  *Var0 
   54:  	Goto  A
   60:  EndIf
   68:  If  *Var3  <  *Var0 
   78:  	Set   *Var4  *Var0 
   88:  	Sub   *Var4  *Var3 
   98:  	If  *Var4  <  0000001E 
   A8:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   C4:  		Call  JumpToGoal        ( .Actor:Self 00000005 .False .True .False )
   E4:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
   F8:  	Else
  100:  		Set   *Var4  *Var3 
  110:  		Add   *Var3  0000001E 
  120:  		Call  SetGoalPos        ( .Actor:Self *Var3 *Var1 *Var2 )
  13C:  		Call  JumpToGoal        ( .Actor:Self 00000000 .False .True .False )
  15C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  170:  	EndIf
  178:  Else
  180:  	Set   *Var4  *Var3 
  190:  	Sub   *Var4  *Var0 
  1A0:  	If  *Var4  <  0000001E 
  1B0:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  1CC:  		Call  JumpToGoal        ( .Actor:Self 00000005 .False .True .False )
  1EC:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  200:  	Else
  208:  		Sub   *Var3  0000001E 
  218:  		Call  SetGoalPos        ( .Actor:Self *Var3 *Var1 *Var2 )
  234:  		Call  JumpToGoal        ( .Actor:Self 00000000 .False .True .False )
  254:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  268:  	EndIf
  270:  EndIf
  278:  Goto  0
  284:  Label  A
  290:  Return
  298:  End
}

#new:Script $Script_Init_LightChomp {
    0:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
   18:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_LightChomp )
   2C:  Call  BindIdle      ( .Actor:Self $Script_Idle_80221D00_LightChomp )
   40:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80222364_LightChomp )
   54:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
   70:  Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
   90:  Set   *Var0  00000003 
   A0:  Loop  00000008 
   AC:  	Call  SetPartSize   ( .Actor:Self *Var0 00000010 00000010 )
   C8:  	Add   *Var0  00000001 
   D8:  EndLoop
   E0:  Call  $Function_80218270_LightChomp ( )
   EC:  Exec  $Script_80222324_LightChomp 
		Call	$Function_SetName_C ( 18 002900ED )
		Call	$Function_SetTattle_C ( 18 001C0121 )	
   F8:  Return
  100:  End
}

#new:Script $Script_80221BC4_LightChomp {
    0:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
   14:  If  *Var0  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
   24:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
   40:  	Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
   60:  	Call  SetTargetOffset   ( .Actor:Self 00000002 00000000 00000018 )
   7C:  	Call  8027D4C8      ( FFFFFF81 00000002 00000000 00000000 )
   98:  Else
   A0:  	Call  SetIdleGoalToHome ( .Actor:Self )
   B0:  	Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
   CC:  	Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
   EC:  	Call  SetTargetOffset   ( .Actor:Self 00000002 FFFFFFF3 00000028 )
  108:  	Call  8027D4C8  ( FFFFFF81 00000002 00000000 FFFFFFF2 )
  124:  EndIf
  12C:  Return
  134:  End
}

#new:Script $Script_Idle_80221D00_LightChomp {
    0:  Label  0
    C:  Loop
   18:  	ExecWait  $Script_80221BC4_LightChomp 
   24:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
   38:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
   48:  		BreakLoop
   50:  	EndIf
   58:  	Wait  1`
   64:  EndLoop
   6C:  Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80221504_LightChomp )
   84:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
   98:  Call  SetIdleGoalToHome ( .Actor:Self )
   A8:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
   C4:  Add   *Var0  0000000A 
   D4:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
   E8:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  104:  Call  IdleJumpToGoal    ( .Actor:Self 0000000B 00000001 )
  11C:  Loop
  128:  	ExecWait  $Script_80221BC4_LightChomp 
  134:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  148:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  158:  		BreakLoop
  160:  	EndIf
  168:  	Wait  1`
  174:  EndLoop
  17C:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
  190:  Call  SetIdleGoalToHome ( .Actor:Self )
  1A0:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  1BC:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  1D8:  Call  IdleJumpToGoal    ( .Actor:Self 00000006 00000001 )
  1F0:  Call  RandInt   ( 0000000A *Var0 )
  204:  Add   *Var0  00000001 
  214:  Wait  *Var0 
  220:  Loop
  22C:  	ExecWait  $Script_80221BC4_LightChomp 
  238:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  24C:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  25C:  		BreakLoop
  264:  	EndIf
  26C:  	Wait  1`
  278:  EndLoop
  280:  Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802214C8_LightChomp )
  298:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
  2AC:  Call  SetIdleGoalToHome ( .Actor:Self )
  2BC:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  2D8:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  2F4:  Call  IdleJumpToGoal    ( .Actor:Self 0000000F 00000001 )
  30C:  Loop
  318:  	ExecWait  $Script_80221BC4_LightChomp 
  324:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  338:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  348:  		BreakLoop
  350:  	EndIf
  358:  	Wait  1`
  364:  EndLoop
  36C:  Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80221504_LightChomp )
  384:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
  398:  Call  SetIdleGoalToHome ( .Actor:Self )
  3A8:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  3C4:  Sub   *Var0  00000014 
  3D4:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  3F0:  Call  IdleJumpToGoal    ( .Actor:Self 0000000C 00000001 )
  408:  Loop
  414:  	ExecWait  $Script_80221BC4_LightChomp 
  420:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  434:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  444:  		BreakLoop
  44C:  	EndIf
  454:  	Wait  1`
  460:  EndLoop
  468:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
  47C:  Call  SetIdleGoalToHome ( .Actor:Self )
  48C:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  4A8:  Sub   *Var0  0000000A 
  4B8:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  4D4:  Call  IdleJumpToGoal    ( .Actor:Self 00000009 00000001 )
  4EC:  Loop
  4F8:  	ExecWait  $Script_80221BC4_LightChomp 
  504:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  518:  	If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  528:  		BreakLoop
  530:  	EndIf
  538:  	Wait  1`
  544:  EndLoop
  54C:  Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022148C_LightChomp )
  564:  Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
  578:  Call  SetIdleGoalToHome ( .Actor:Self )
  588:  Call  GetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  5A4:  Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
  5C0:  Call  IdleJumpToGoal    ( .Actor:Self 00000006 00000001 )
  5D8:  Call  RandInt   ( 0000000A *Var0 )
  5EC:  Add   *Var0  0000000A 
  5FC:  Wait  *Var0 
  608:  Goto  0
  614:  Return
  61C:  End
}

#new:Script $Script_80222324_LightChomp {
    0:  Label  0
    C:  Wait  1`
   18:  Call  $Function_802184CC_LightChomp ( )
   24:  Goto  0
   30:  Return
   38:  End
}

#new:Script $Script_SwitchColor_Chomp
{
   38:  Call     GetLastDamage 	( .Actor:Self *Var[0] )
   4C:  If  *Var[0]  ==  00000000 
   74:  	Return
   7C:  EndIf
   84:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   98:  If  *Var[0]  &  0035D000 
   C0:  	Return
   C8:  EndIf
  144:  Label    00000000 
  150:  Call     GetBattleFlags ( *Var[0] )
  160:  If  *Var[0]  &  00000100 
  170:  	Wait     00000001 
  17C:  	Goto     00000000 
  188:  EndIf
  3B4:  Wait     15`  
		Call	SetActorFlagBits ( .Actor:Self 00040000 .True )
		Call	GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
		If *Var0 > 80`
			Wait 8`
		EndIf
		ExecWait $Script_Counter_LightChomp		
		Call	SetActorFlagBits ( .Actor:Self 00040000 .False )
  3D8:  Return
  3E0:  End
}

#new:Script $Script_HandleEvent_80222364_LightChomp {
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   58:  Switch  *Var0 
   64:  	CaseOR  ==  .Event:HitCombo % 9
   70:  	CaseOR  ==  .Event:Hit % A
   7C:  		SetConst  *Var0  00000001 
   8C:  		SetConst  *Var1  00350D06 
   9C:  		ExecWait  DoNormalHit 
				ExecWait $Script_SwitchColor_Chomp
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		Call  SetAnimation  ( .Actor:Self 00000003 00350D09 )
   D4:  		Call  SetAnimation  ( .Actor:Self 00000004 00350D09 )
   EC:  		Call  SetAnimation  ( .Actor:Self 00000005 00350D09 )
  104:  		Call  SetAnimation  ( .Actor:Self 00000006 00350D09 )
  11C:  		Call  SetAnimation  ( .Actor:Self 00000007 00350D09 )
  134:  		Call  SetAnimation  ( .Actor:Self 00000008 00350D09 )
  14C:  		Call  SetAnimation  ( .Actor:Self 00000009 00350D09 )
  164:  		Call  SetAnimation  ( .Actor:Self 0000000A 00350D09 )
  17C:  		SetConst  *Var0  00000001 
  18C:  		SetConst  *Var1  00350D07 
  19C:  		SetConst  *Var2  00350D08 
  1AC:  		ExecWait  DoBurnHit 
				ExecWait $Script_SwitchColor_Chomp
  1B8:  	Case  ==  .Event:BurnDeath % 24
  1C4:  		Call  SetAnimation  ( .Actor:Self 00000003 00350D09 )
  1DC:  		Call  SetAnimation  ( .Actor:Self 00000004 00350D09 )
  1F4:  		Call  SetAnimation  ( .Actor:Self 00000005 00350D09 )
  20C:  		Call  SetAnimation  ( .Actor:Self 00000006 00350D09 )
  224:  		Call  SetAnimation  ( .Actor:Self 00000007 00350D09 )
  23C:  		Call  SetAnimation  ( .Actor:Self 00000008 00350D09 )
  254:  		Call  SetAnimation  ( .Actor:Self 00000009 00350D09 )
  26C:  		Call  SetAnimation  ( .Actor:Self 0000000A 00350D09 )
  284:  		SetConst  *Var0  00000001 
  294:  		SetConst  *Var1  00350D07 
  2A4:  		SetConst  *Var2  00350D08 
  2B4:  		ExecWait  DoBurnHit 
  2C0:  		SetConst  *Var0  00000001 
  2D0:  		SetConst  *Var1  00350D08 
  2E0:  		ExecWait  DoDeath 
  2EC:  		Return
  2F4:  	Case  ==  .Event:SpinSmashHit % B
  300:  		SetConst  *Var0  00000001 
  310:  		SetConst  *Var1  00350D06 
  320:  		ExecWait  DoSpinSmashHit 
  32C:  		Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  340:  		Call  UseIdleAnimation  ( .Actor:Self .True )
				ExecWait $Script_SwitchColor_Chomp
  354:  		Return
  35C:  	Case  ==  .Event:ShockHit % 2F
  368:  		SetConst  *Var0  00000001 
  378:  		SetConst  *Var1  00350D06 
  388:  		ExecWait  DoShockHit 
  394:  		SetConst  *Var0  00000001 
  3A4:  		SetConst  *Var1  00350D06 
  3B4:  		Call  UseBattleCamPreset    ( 00000002 )
  3C4:  		Call  SetAnimation  ( .Actor:Self *Var0 *Var1 )
  3DC:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  3F8:  		Set   *Var1  00000000 
  408:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  424:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.4] )
  438:  		Call  AddGoalPos    ( .Actor:Self 0000001E 00000000 00000000 )
  454:  		Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
  474:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  488:  		Call  AddGoalPos    ( .Actor:Self 0000000F 00000000 00000000 )
  4A4:  		Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
  4C4:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  4D8:  		Call  AddGoalPos    ( .Actor:Self 00000005 00000000 00000000 )
  4F4:  		Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
  514:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  528:  		Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
  548:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  55C:  		SetConst  *Var0  00000001 
  56C:  		SetConst  *Var1  00350D05 
  57C:  		ExecWait  $Script_80221794_LightChomp 
  588:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
  59C:  		Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
  5BC:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  5D0:  		Thread
  5D8:  			Call  ShakeCam  ( .Cam:Battle 00000000 00000001 *Fixed[0.5] )
  5F4:  		EndThread
  5FC:  		Call  SetGoalToHome ( .Actor:Self )
  60C:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  628:  		Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  648:  		Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  660:  	CaseOR  ==  00000017 % 17
  66C:  	CaseOR  ==  .Event:Immune % 19
  678:  		SetConst  *Var0  00000001 
  688:  		SetConst  *Var1  00350D01 
  698:  		ExecWait  DoImmune 
  6A4:  	EndCaseGroup
  6AC:  	Case  ==  .Event:ShockDeath % 26
  6B8:  		SetConst  *Var0  00000001 
  6C8:  		SetConst  *Var1  00350D06 
  6D8:  		ExecWait  DoShockHit 
  6E4:  		Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  6FC:  		SetConst  *Var0  00000001 
  70C:  		SetConst  *Var1  00350D06 
  71C:  		ExecWait  DoDeath 
  728:  		Return
  730:  	Case  ==  .Event:Death % 20
  73C:  		SetConst  *Var0  00000001 
  74C:  		SetConst  *Var1  00350D06 
  75C:  		ExecWait  DoNormalHit 
  768:  		Wait  10`
  774:  		SetConst  *Var0  00000001 
  784:  		SetConst  *Var1  00350D06 
  794:  		ExecWait  DoDeath 
  7A0:  		Return
  7A8:  	Case  ==  .Event:SpinSmashDeath % 21
  7B4:  		SetConst  *Var0  00000001 
  7C4:  		SetConst  *Var1  00350D06 
  7D4:  		ExecWait  DoSpinSmashHit 
  7E0:  		SetConst  *Var0  00000001 
  7F0:  		SetConst  *Var1  00350D06 
  800:  		ExecWait  DoDeath 
  80C:  		Return
  814:  	Case  ==  .Event:RecoverStatus % 31
  820:  		SetConst  *Var0  00000001 
  830:  		SetConst  *Var1  00350D01 
  840:  		ExecWait  DoRecover 
  84C:  	Case  ==  .Event:ScareAway % 39
  858:  		SetConst  *Var0  00000001 
  868:  		SetConst  *Var1  00350D01 
  878:  		SetConst  *Var2  00350D06 
  888:  		ExecWait  DoScareAway 
  894:  		Return
  89C:  	Case  ==  .Event:BeginAirLift % 3A
  8A8:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  8BC:  		If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  8CC:  			Call  SetGoalToHome ( .Actor:Self )
  8DC:  			Call  GetGoalPos    ( .Actor:Self *Var1 *Var2 *Var3 )
  8F8:  			If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  908:  				Sub   *Var1  0000000A 
  918:  				Add   *Var2  00000004 
  928:  			Else
  930:  				Sub   *Var1  00000005 
  940:  				Add   *Var2  0000000B 
  950:  			EndIf
  958:  			Call  SetActorPos   ( .Actor:Self *Var1 *Var2 *Var3 )
  974:  		EndIf
  97C:  		SetConst  *Var0  00000001 
  98C:  		SetConst  *Var1  00350D06 
  99C:  		ExecWait  DoAirLift 
  9A8:  		Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  9BC:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  9D0:  		Return
  9D8:  	Case  ==  .Event:BlowAway % 16
  9E4:  		SetConst  *Var0  00000001 
  9F4:  		SetConst  *Var1  00350D06 
  A04:  		ExecWait  DoBlowAway 
  A10:  		Return
  A18:  	Case  ==  .Event:AirLiftFailed % 1F
  A24:  		SetConst  *Var0  00000001 
  A34:  		SetConst  *Var1  00350D01 
  A44:  		ExecWait  DoImmune 
  A50:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
  A68:  	Case  ==  .Event:UpAndAway % 3D
  A74:  		Wait  1000`
  A80:  	Default
  A88:  EndSwitch
  A90:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  AA4:  If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Dizzy|Stone % 151000
  AB4:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  AD0:  	If  *Var1  !=  00000000 
  AE0:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
  AF4:  		Call  SetGoalPos    ( .Actor:Self *Var0 00000000 *Var2 )
  B10:  		Call  FallToGoal    ( .Actor:Self 0000000B )
  B24:  	EndIf
  B2C:  EndIf
  B34:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  B48:  Call  UseIdleAnimation  ( .Actor:Self .True )
  B5C:  Return
  B64:  End
}

#new:Script $Script_Counter_LightChomp {
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
   2C:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   40:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   54:  Call  UseBattleCamPreset    ( 0000003F )
   64:  Call  BattleCamTargetActor  ( .Actor:Self )
   74:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   8C:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.5] )
   A0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   BC:  Set   *Var1  00000000 
   CC:  Add   *Var0  0000002D 
   DC:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   F8:  Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
  118:  Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  12C:  Call  SetAnimation      ( .Actor:Self 00000001 00350D05 )
  144:  Wait  15`
  150:  Call  PlaySoundAtActor  ( .Actor:Self 0000010F )
  164:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  188:  Switch  *Var0 
  194:  	CaseOR  ==  .HitResult:Miss % 6
  1A0:  	CaseOR  ==  .HitResult:Lucky % 5
  1AC:  		Set   *VarA  *Var0 
  1BC:  		Call  SetAnimation      ( .Actor:Self 00000001 00350D01 )
  1D4:  		Call  SetGoalToTarget   ( .Actor:Self )
  1E4:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  200:  		Sub   *Var0  00000014 
  210:  		Set   *Var1  00000000 
  220:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  234:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  250:  		Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
  270:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  284:  		If  *VarA  ==  .HitResult:Lucky % 5
  294:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2B8:  		EndIf
  2C0:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  2D4:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2F0:  		Sub   *Var0  00000019 
  300:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  31C:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  33C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003F9 )
  350:  		Sub   *Var0  0000000F 
  360:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  37C:  		Call  JumpToGoal    ( .Actor:Self 00000004 .False .True .False )
  39C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003F9 )
  3B0:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  3C8:  		Wait  20`
  3D4:  		Call  UseBattleCamPreset    ( 00000002 )
  3E4:  		Call  YieldTurn ( )
  3F0:  		Call  SetActorYaw   ( .Actor:Self 000000B4 )
  404:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  420:  		Call  SetGoalToHome ( .Actor:Self )
  430:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  44C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  460:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  478:  		ExecWait  $Script_8022181C_LightChomp 
  484:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  49C:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  4B0:  		Call  HPBarToHome   ( .Actor:Self )
  4C0:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  4D8:  		Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  4F0:  		Call  EnableIdleScript      ( .Actor:Self FFFFFFFF )
  504:  		Return
  50C:  	EndCaseGroup
  514:  EndSwitch
  51C:  Call  SetAnimation      ( .Actor:Self 00000001 00350D01 )
  534:  Call  SetGoalToTarget   ( .Actor:Self )
  544:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  560:  Call  GetStatusFlags    ( .Actor:Self *VarA )
  574:  If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  584:  	Add   *Var0  00000004 
  594:  Else
  59C:  	Add   *Var0  0000000A 
  5AC:  EndIf
  5B4:  Set   *Var1  0000001B 
  5C4:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
  5D8:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  5F4:  Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
  614:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  630:  Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  650:  Wait  2`
  65C:  Call  EnemyDamageTarget     ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000008 00000020 )
  684:  Switch  *Var0 
  690:  	CaseOR  ==  .HitResult:Hit % 0
  69C:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  6A8:  		Call  UseBattleCamPreset    ( 00000002 )
  6B8:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  6D0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  6EC:  		Add   *Var0  00000028 
  6FC:  		Set   *Var1  00000000 
  70C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  720:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  73C:  		Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  75C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  770:  		Add   *Var0  0000001E 
  780:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  79C:  		Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
  7BC:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  7D0:  		Add   *Var0  00000014 
  7E0:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  7FC:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  81C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  830:  		Sub   *Var0  0000000A 
  840:  		Call  JumpToGoal    ( .Actor:Self 00000004 .False .True .False )
  860:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  874:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  88C:  		Wait  8`
  898:  		Call  YieldTurn ( )
  8A4:  		Call  SetGoalToHome ( .Actor:Self )
  8B4:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  8D0:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  8E4:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  8FC:  		ExecWait  $Script_8022181C_LightChomp 
  908:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  920:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  93C:  		Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  95C:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  970:  	EndCaseGroup
  978:  EndSwitch
  980:  Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
  998:  Call  HPBarToHome       ( .Actor:Self )
  9A8:  Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  9BC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  9D0:  Return
  9D8:  End
}


#new:Script $Script_TakeTurn_LightChomp {
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
   2C:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   40:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   54:  Call  UseBattleCamPreset    ( 0000003F )
   64:  Call  BattleCamTargetActor  ( .Actor:Self )
   74:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   8C:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.5] )
   A0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   BC:  Set   *Var1  00000000 
   CC:  Add   *Var0  0000002D 
   DC:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   F8:  Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
  118:  Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  12C:  Call  SetAnimation      ( .Actor:Self 00000001 00350D05 )
  144:  Wait  15`
  150:  Call  PlaySoundAtActor  ( .Actor:Self 0000010F )
  164:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  188:  Switch  *Var0 
  194:  	CaseOR  ==  .HitResult:Miss % 6
  1A0:  	CaseOR  ==  .HitResult:Lucky % 5
  1AC:  		Set   *VarA  *Var0 
  1BC:  		Call  SetAnimation      ( .Actor:Self 00000001 00350D01 )
  1D4:  		Call  SetGoalToTarget   ( .Actor:Self )
  1E4:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  200:  		Sub   *Var0  00000014 
  210:  		Set   *Var1  00000000 
  220:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  234:  		Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  250:  		Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
  270:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  284:  		If  *VarA  ==  .HitResult:Lucky % 5
  294:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2B8:  		EndIf
  2C0:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  2D4:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2F0:  		Sub   *Var0  00000019 
  300:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  31C:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  33C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003F9 )
  350:  		Sub   *Var0  0000000F 
  360:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  37C:  		Call  JumpToGoal    ( .Actor:Self 00000004 .False .True .False )
  39C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003F9 )
  3B0:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  3C8:  		Wait  20`
  3D4:  		Call  UseBattleCamPreset    ( 00000002 )
  3E4:  		Call  YieldTurn ( )
  3F0:  		Call  SetActorYaw   ( .Actor:Self 000000B4 )
  404:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  420:  		Call  SetGoalToHome ( .Actor:Self )
  430:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  44C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  460:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  478:  		ExecWait  $Script_8022181C_LightChomp 
  484:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  49C:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  4B0:  		Call  HPBarToHome   ( .Actor:Self )
  4C0:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  4D8:  		Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  4F0:  		Call  EnableIdleScript      ( .Actor:Self FFFFFFFF )
  504:  		Return
  50C:  	EndCaseGroup
  514:  EndSwitch
  51C:  Call  SetAnimation      ( .Actor:Self 00000001 00350D01 )
  534:  Call  SetGoalToTarget   ( .Actor:Self )
  544:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  560:  Call  GetStatusFlags    ( .Actor:Self *VarA )
  574:  If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  584:  	Add   *Var0  00000004 
  594:  Else
  59C:  	Add   *Var0  0000000A 
  5AC:  EndIf
  5B4:  Set   *Var1  0000001B 
  5C4:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.0] )	%0.2 -> 1
  5D8:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  5F4:  Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
		Label 00000000
		Call	 RandInt ( 100` *Var[B] ) %fakeout attack: 75% chance
		If (*Var[B] < 75`)
			Call     SetAnimation 	( .Actor:Self 00000001 00350D04 )
			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add  *Var[0]  00000028 
			Set  *Var[1]  00000000 
			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
			Call     PlaySoundAtActor 	( .Actor:Self 000003F9 )
			Wait	 3`
			Sub	 *Var[0]  00000028 %reset the values back to normal
			Set  *Var[1]  0000001B		
			Call	 RandInt ( 100` *Var[C] ) %fakeout again: 60% chance
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 ) %jump back
			If (*Var[C] < 60`)
				Goto 00000000
			EndIf
		EndIf  
  614:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  630:  Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  650:  Wait  2`
  65C:  Call  EnemyDamageTarget     ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000008 00000020 )
  684:  Switch  *Var0 
  690:  	CaseOR  ==  .HitResult:Hit % 0
  69C:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  6A8:  		Call  UseBattleCamPreset    ( 00000002 )
  6B8:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  6D0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  6EC:  		Add   *Var0  00000028 
  6FC:  		Set   *Var1  00000000 
  70C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  720:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  73C:  		Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
  75C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  770:  		Add   *Var0  0000001E 
  780:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  79C:  		Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
  7BC:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  7D0:  		Add   *Var0  00000014 
  7E0:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  7FC:  		Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
  81C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  830:  		Sub   *Var0  0000000A 
  840:  		Call  JumpToGoal    ( .Actor:Self 00000004 .False .True .False )
  860:  		Call  PlaySoundAtActor  ( .Actor:Self 000003F9 )
  874:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  88C:  		Wait  8`
  898:  		Call  YieldTurn ( )
  8A4:  		Call  SetGoalToHome ( .Actor:Self )
  8B4:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  8D0:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  8E4:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D04 )
  8FC:  		ExecWait  $Script_8022181C_LightChomp 
  908:  		Call  SetAnimation  ( .Actor:Self 00000001 00350D01 )
  920:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  93C:  		Call  SetPartPos    ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  95C:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  970:  	EndCaseGroup
  978:  EndSwitch
  980:  Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
  998:  Call  HPBarToHome       ( .Actor:Self )
  9A8:  Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  9BC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  9D0:  Return
  9D8:  End
}

#new:ConstDouble $ConstDouble_80224920_LightChomp {
0.200000d
}



#new:IdleAnimations $IdleAnimations_LightBones %$IdleAnimations_8021CA20
{
.Status:Normal    00531202
.Status:Stone     00531200
.Status:Sleep     0053120E
.Status:Poison    00531202
.Status:Stop      00531200
.Status:Static    00531202
.Status:Paralyze  00531200
.Status:Dizzy     0053120D
.Status:Fear      0053120D
.Status:End
}

#new:IdleAnimations $IdleAnimations_LightBonesDown %$IdleAnimations_8021CA6C
{
.Status:Normal    00531201
.Status:End
}

#new:IdleAnimations $IdleAnimations_DarkBone %$IdleAnimations_8021CA78 
{
.Status:Normal    0053120F %according to the spritesheet, sprite 54 is a bone, but apparently it's not used? (not found anywhere in dry bone code)
.Status:End
}

#new:DefenseTable $DefenseTable_LightBones %$DefenseTable_8021CA84
{
.Element:Normal 00000008
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

#new:DefenseTable $DefenseTable_LightBonesDown %$DefenseTable_8021CAA0
{
.Element:Normal 00000063 %invulnerable
.Element:End
}
%Only stop works
#new:StatusTable $StatusTable_LightBones %$StatusTable_8021CABC
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -3`
.Status:End
}

#new:StatusTable $StatusTable_LightBonesDown %$StatusTable_8021CB68
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_LightBones %$PartsTable_8021CC14
{
00800000 01000000 F81E00FF $IdleAnimations_LightBones $DefenseTable_LightBones 00040000 00000000 FFF60000 00000000 
00120001 02000000 000000FF $IdleAnimations_DarkBone $DefenseTable_LightBones 00040000 00000000 00000000 00000000 
}

#new:Actor $LightBones
{
% stats
[Index]        F2b 
[Level]        70`b 
[MaxHP]        35`b %not a lot, but watch that defense 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_LightBones 
% ai
[PartsCount]   2`s 
[PartsTable] $PartsTable_LightBones 
[Script]      $Script_Init_LightBones 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     3`b % weight (0-4)
% ui positions
[Size]         28`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -15`b  15`b % dx dy
[StatusIcon]    3`b  27`b % dx dy
}

#new:Script $Script_Init_LightBones %$Script_Init_8021CC84
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_LightBones )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_LightBones )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_LightBones )
   3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_LightBones )
   50:  Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
		Call	$Function_SetName_C ( F2 002900EE )
		Call	$Function_SetTattle_C ( F2 001C0122 )	   
   68:  Return
   70:  End
}

#new:Script $Script_NextTurn_LightBones %$Script_NextTurn_8021CCFC
{
    0:  Call     GetOriginalActorType 	( .Actor:Self *Var[A] )
   14:  Call     EnemyCreateTargetList 	( 00008002 )
   24:  Call     InitTargetIterator 	( )
   30:  Label    00000000 
   3C:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
   50:  Call     GetOriginalActorType 	( *Var[0] *Var[2] )
   64:  If  *Var[2]  !=  *Var[A] 
   74:  	Call     GetActorHP  	( *Var[0] *Var[3] )
   88:  	If  *Var[3]  !=  00000000 
   98:  		Return
   A0:  	EndIf
   A8:  EndIf
   B0:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
   C4:  If  *Var[0]  !=  FFFFFFFF 
   D4:  	Goto     00000000 
   E0:  EndIf
   E8:  Call     EnemyCreateTargetList 	( 00008002 )
   F8:  Call     InitTargetIterator 	( )
  104:  Label    00000001 
  110:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  124:  Call     GetActorVar 	( *Var[0] 00000008 *Var[3] )
  13C:  If  *Var[3]  !=  00000001 
  14C:  	Return
  154:  EndIf
  15C:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  170:  If  *Var[0]  !=  FFFFFFFF 
  180:  	Goto     00000001 
  18C:  EndIf
  194:  Call     EnemyCreateTargetList 	( 00008002 )
  1A4:  Call     InitTargetIterator 	( )
  1B0:  Label    00000002 
  1BC:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  1D0:  Call     SetActorFlagBits 	( *Var[0] 00600000 .True )
  1E8:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  1FC:  If  *Var[0]  !=  FFFFFFFF 
  20C:  	Goto     00000002 
  218:  EndIf
  220:  Return
  228:  End
}

#new:Script $Script_Idle_LightBones %$Script_Idle_8021CF2C
{
    0:  Label    00000000 
    C:  Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   24:  Call     GetStatusFlags ( .Actor:Self *Var[1] )
   38:  Switch  *Var[0] 
   44:  	Case  ==  00000000 
   50:  		Switch  *Var[1] 
   5C:  			Case  &  00001000 
   68:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFA 00000018 )
   84:  				Call     8027D4C8 ( FFFFFF81 00000001 00000001 FFFFFFFB )
   A0:  			Default
   A8:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFF8 0000001E )
   C4:  				Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFF6 )
   E0:  		EndSwitch
   E8:  	Case  ==  00000001 
   F4:  		Switch  *Var[1] 
  100:  			Case  &  00001000 
  10C:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFF 0000000A )
  128:  				Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
  144:  			Default
  14C:  				Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFF 0000000A )
  168:  				Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
  184:  		EndSwitch
  18C:  EndSwitch
  194:  Wait     00000001 
  1A0:  Goto     00000000 
  1AC:  Return
  1B4:  End
}

#new:Script $Script_LightBonesFall %$Script_8021D0E8
{
    0:  Call     PlaySoundAtActor 	( .Actor:Self 000002D2 )
   14:  Call     SetAnimation 	( .Actor:Self 00000001 00531208 )
   2C:  Wait     00000014 
   38:  Call     SetActorVar 	( .Actor:Self 00000008 00000001 )
   50:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightBonesDown )
   68:  Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_LightBonesDown )
   80:  Call     SetStatusTable ( .Actor:Self $StatusTable_LightBonesDown )
   94:  Call     8027DDA0 ( FFFFFF81 )
   A4:  Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFF 0000000A )
   C0:  Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
   %DC:  Call     RandInt     	( 00000000 *Var[0] )		this is literally useless
   F0:  Set  *Var[0]  00000002 
  100:  Call     SetActorVar 	( .Actor:Self 00000000 *Var[0] )
  118:  Call     GetOriginalActorType 	( .Actor:Self *Var[A] )
  12C:  Call     EnemyCreateTargetList 	( 00008002 )
  13C:  Call     InitTargetIterator 	( )
  148:  Label    00000000 
  154:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  168:  Call     GetOriginalActorType 	( *Var[0] *Var[2] )
  17C:  If  *Var[2]  !=  *Var[A] 
  18C:  	Return
  194:  EndIf
  19C:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  1B0:  If  *Var[0]  !=  FFFFFFFF 
  1C0:  	Goto     00000000 
  1CC:  EndIf
  1D4:  Call     EnemyCreateTargetList 	( 00008002 )
  1E4:  Call     InitTargetIterator 	( )
  1F0:  Label    00000001 
  1FC:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  210:  Call     GetActorVar 	( *Var[0] 00000008 *Var[3] )
  228:  If  *Var[3]  !=  00000001 
  238:  	Return
  240:  EndIf
  248:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  25C:  If  *Var[0]  !=  FFFFFFFF 
  26C:  	Goto     00000001 
  278:  EndIf
  280:  Call     EnemyCreateTargetList 	( 00008002 )
  290:  Call     InitTargetIterator 	( )
  29C:  Label    00000002 
  2A8:  Call     GetOwnerTarget ( *Var[0] *Var[1] )
  2BC:  Call     SetActorFlagBits 	( *Var[0] 00600000 .True )
  2D4:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  2E8:  If  *Var[0]  !=  FFFFFFFF 
  2F8:  	Goto     00000002 
  304:  EndIf
  30C:  Return
  314:  End
}

#new:Script $Script_HandleEvent_LightBones %$Script_HandleEvent_8021D404
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	Case  ==  .Event:HitCombo
   54:  		SetConst  *Var[0]  00000001 
   64:  		SetConst  *Var[1]  00531207 
   74:  		ExecWait DoNormalHit 
   80:  	Case  ==  .Event:Hit
   8C:  		SetConst  *Var[0]  00000001 
   9C:  		SetConst  *Var[1]  00531207 
   AC:  		ExecWait DoNormalHit 
   B8:  	Case  ==  .Event:BurnHit
   C4:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00000200 .True )
   E0:  		SetConst  *Var[0]  00000001 
   F0:  		SetConst  *Var[1]  0053120B 
  100:  		SetConst  *Var[2]  0053120C 
  110:  		ExecWait DoBurnHit 
  11C:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00000200 .False )
  138:  	Case  ==  .Event:BurnDeath
  144:  		SetConst  *Var[0]  00000001 
  154:  		SetConst  *Var[1]  0053120B 
  164:  		SetConst  *Var[2]  0053120C 
  174:  		ExecWait DoBurnHit 
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  0053120C 
  1A0:  		ExecWait DoDeath 
  1AC:  		Return
  1B4:  	Case  ==  .Event:SpinSmashHit
  1C0:  		SetConst  *Var[0]  00000001 
  1D0:  		SetConst  *Var[1]  00531207 
  1E0:  		ExecWait 8029B998 
  1EC:  	Case  ==  .Event:SpinSmashDeath
  1F8:  		SetConst  *Var[0]  00000001 
  208:  		SetConst  *Var[1]  00531207 
  218:  		ExecWait 8029B998   
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  0053120C 
				ExecWait DoDeath 
  %224:  		ExecWait $Script_LightBonesFall 
  230:  	CaseOR  ==  00000017
  23C:  	CaseOR  ==  .Event:Immune
  248:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  260:  		If  *Var[0]  ==  00000000 
  270:  			SetConst  *Var[0]  00000001 
  280:  			SetConst  *Var[1]  00531202 
  290:  			ExecWait DoImmune 
  29C:  		Else
  2A4:  			SetConst  *Var[0]  00000001 
  2B4:  			SetConst  *Var[1]  00531201 
  2C4:  			ExecWait DoImmune 
					Call     GetActorVar 	( .Actor:Self 00000000 *Var[C] )
					Add *Var[C] 1
					Call	 SetActorVar 	( .Actor:Self 00000000 *Var[C] )
  2D0:  		EndIf
  2D8:  	EndCaseGroup
  2E0:  	Case  ==  .Event:Death
  2EC:  		SetConst  *Var[0]  00000001 
  2FC:  		SetConst  *Var[1]  00531207 
  30C:  		ExecWait DoNormalHit 
  318:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  330:  		If  *Var[0]  ==  00000000 
  340:  			Wait     0000000A 
  180:  			SetConst  *Var[0]  00000001 
  190:  			SetConst  *Var[1]  0053120C 
					ExecWait DoDeath 
  %34C:  			ExecWait $Script_LightBonesFall 
  358:  		EndIf
  360:  	Case  ==  .Event:RecoverStatus
  36C:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  384:  		If  *Var[0]  ==  00000000 
  394:  			SetConst  *Var[0]  00000001 
  3A4:  			SetConst  *Var[1]  00531202 
  3B4:  			ExecWait DoRecover 
  3C0:  		EndIf
  3C8:  	Case  ==  .Event:ScareAway
  3D4:  		SetConst  *Var[0]  00000001 
  3E4:  		SetConst  *Var[1]  00531204 
  3F4:  		SetConst  *Var[2]  00531207 
  404:  		ExecWait DoScareAway 
  410:  		Return
  418:  	Case  ==  .Event:BeginAirLift
  424:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  43C:  		If  *Var[0]  ==  00000000 
  44C:  			SetConst  *Var[0]  00000001 
  45C:  			SetConst  *Var[1]  00531204 
  46C:  			ExecWait DoAirLift 
  478:  		Else
  480:  			SetConst  *Var[0]  00000001 
  490:  			SetConst  *Var[1]  00531209 
  4A0:  			ExecWait DoAirLift 
  4AC:  		EndIf
  4B4:  	Case  ==  .Event:BlowAway
  4C0:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  4D8:  		If  *Var[0]  ==  00000000 
  4E8:  			Call     GetStatusFlags ( .Actor:Self *Var[0] )
  4FC:  			If  *Var[0]  !&  0035D000 
  50C:  				If  *Var[0]  &  00080000 
  51C:  					Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF FFFFFFFE 00000000 )
  538:  				Else
  540:  					Call     SetActorDispOffset ( FFFFFF81 FFFFFFFD FFFFFFFB 00000000 )
  55C:  				EndIf
  564:  			EndIf
  56C:  			SetConst  *Var[0]  00000001 
  57C:  			SetConst  *Var[1]  00531207 
  58C:  			ExecWait DoBlowAway 
  598:  		Else
  5A0:  			SetConst  *Var[0]  00000001 
  5B0:  			SetConst  *Var[1]  00531209 
  5C0:  			ExecWait DoBlowAway 
  5CC:  		EndIf
  5D4:  		Return
  5DC:  	Case  ==  .Event:AirLiftFailed
  5E8:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  600:  		If  *Var[0]  ==  00000000 
  610:  			SetConst  *Var[0]  00000001 
  620:  			SetConst  *Var[1]  00531202 
  630:  			ExecWait DoImmune 
  63C:  		Else
  644:  			SetConst  *Var[0]  00000001 
  654:  			SetConst  *Var[1]  00531201 
  664:  			ExecWait DoImmune 
  670:  		EndIf
  678:  	Default
  680:  EndSwitch
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}

#new:Script $Script_DarkBone %$Script_8021DAC4
{
    0:  Set  *Var[0]  00000000 
   10:  Label    00000000 
   1C:  Call     SetPartRotation 	( .Actor:Self 00000002 00000000 00000000 *Var[0] )
   3C:  Add  *Var[0]  0000003C 
   4C:  Mod  *Var[0]  00000168 
   5C:  Wait     00000001 
   68:  Goto     00000000 
   74:  Return
   7C:  End
}

#new:Script $Script_TakeTurn_LightBones %$Script_TakeTurn_8021DB48
		% ExecWait $EnviroScript
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *Var[0] )
   4C:  If  *Var[0]  ==  .Phase:FirstStrike
   5C:  	Call     UseBattleCamPreset 	( 00000002 )
   6C:  	Call     MoveBattleCamOver 	( 00000001 )
   7C:  EndIf
   84:  Call     GetBattlePhase ( *Var[0] )
   94:  If  *Var[0]  ==  .Phase:FirstStrike
   A4:  	Call     SetAnimation 	( .Actor:Self 00000001 00531206 )
   BC:  	Goto     00000064 
   C8:  EndIf
   D0:  Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   E8:  If  *Var[0]  ==  00000001 
   F8:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  110:  	Sub  *Var[0]  00000001 
  120:  	If  *Var[0]  ==  00000000 
  130:  		Call     PlaySoundAtActor 	( .Actor:Self 000002D4 )
  144:  		Call     SetAnimation 	( .Actor:Self 00000001 00531209 )
  15C:  		Wait     0000000A 
  168:  		Call     PlaySoundAtActor 	( .Actor:Self 000002D3 )
  17C:  		Call     SetAnimation 	( .Actor:Self 00000001 0053120A )
  194:  		Wait     00000014 
  1A0:  		Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
  1B8:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  1D0:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_LightBones )
  1E8:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_LightBones )
  200:  		Call     SetStatusTable ( .Actor:Self $StatusTable_LightBones )
  214:  		Call     SetPartFlagBits 	( .Actor:Self 00000001 00002000 .False )
  230:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFF8 0000001E )
  24C:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFF6 )
  268:  		Call     GetEnemyMaxHP 	( .Actor:Self *Var[0] )
  27C:  		Call     SetEnemyHP  	( .Actor:Self *Var[0] )
  290:  	Else
  298:  		Call     PlaySoundAtActor 	( .Actor:Self 000002D4 )
  2AC:  		Call     SetAnimation 	( .Actor:Self 00000001 00531209 )
  2C4:  		Wait     0000000A 
  2D0:  		Call     SetActorVar 	( .Actor:Self 00000000 *Var[0] )
  2E8:  	EndIf
  2F0:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  304:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  318:  	Return
  320:  EndIf
  %328:  Call     SetAnimation 	( .Actor:Self 00000001 00531205 )
  %340:  Wait     0000000F 
  %34C:  Call     SetAnimation 	( .Actor:Self 00000001 00531206 )
  %364:  Thread
  %36C:  	Wait     00000008 
  %378:  	Call     SetAnimation 	( .Actor:Self 00000001 00531202 )
  %390:  EndThread
  398:  Label    00000064 
  3A4:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  3B8:  If  *Var[0]  &  00080000 
  3C8:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  3E8:  Else
  3F0:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  410:  EndIf
  418:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  43C:  Switch  *Var[0] 
  448:  	CaseOR  ==  00000006 
  454:  	CaseOR  ==  00000005 
				Call     SetAnimation 	( .Actor:Self 00000001 00531205 )
				Wait     0000000F 
				Call     SetAnimation 	( .Actor:Self 00000001 00531206 )
				Thread
					Wait     00000008 
					Call     SetAnimation 	( .Actor:Self 00000001 00531202 )
				EndThread
  460:  		Set  *Var[F]  *Var[0] 
  470:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  48C:  		Add  *Var[1]  00000014 
  49C:  		Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  4BC:  		Wait     00000001 
  4C8:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  4E4:  		Call     PlaySoundAtPart 	( .Actor:Self 00000002 000002D1 )
  4FC:  		Call     8026FA00 ( FFFFFF81 00000002 00000000 00000000 00000000 )
  51C:  		Call     8026FA00 ( FFFFFF81 00000002 00000002 00000000 00000000 )
  53C:  		Exec     $Script_DarkBone *Var[A] 
  54C:  		Call     SetGoalToTarget 	( .Actor:Self )
  55C:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  578:  		Sub  *Var[0]  00000064 
  588:  		Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[12.0] )
  5A0:  		Call     RunPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000000 )
  5C4:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  5E0:  		Kill     *Var[A] 
  5EC:  		If  *Var[F]  ==  00000005 
  5FC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  620:  		EndIf
  628:  		Wait     0000000F 
  634:  		Call     YieldTurn   	( )
  640:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  65C:  		Wait     00000014 
  668:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  680:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  694:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  6A8:  		Return
  6B0:  	EndCaseGroup
  6B8:  EndSwitch
		Call     SetAnimation 	( .Actor:Self 00000001 00531205 )
		Wait     0000000F 
		Call     SetAnimation 	( .Actor:Self 00000001 00531206 )
  6C0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6DC:  Add  *Var[1]  00000014 
  6EC:  Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  70C: 	Wait     00000001 
  718: 	Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  734: 	Call     PlaySoundAtPart 	( .Actor:Self 00000002 000002D1 )
  74C: 	Call     8026FA00 ( FFFFFF81 00000002 00000000 00000000 00000000 )
  76C: 	Call     8026FA00 ( FFFFFF81 00000002 00000002 00000000 00000000 )
  78C: 	Exec     $Script_DarkBone *Var[A] 
  79C: 	Call     SetGoalToTarget 	( .Actor:Self )
  7AC: 	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  7C8: 	Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[12.0] )
  7E0: 	Call     RunPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000000 )
  804: 	Wait     00000002 		
		Call 	 $Function_GetPlayerDataByte ( *VarF 2` )
  810:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000006 00000020 ) 
		Call 	 $Function_GetPlayerDataByte ( *VarE 2` )
		Sub *VarF *VarE	%= HP differential
		Call 	 $Function_GetPlayerDataByte ( *VarD 3` )
		Sub *VarD *VarF
		Call 	 $Function_SetArbitraryByte ( *VarD 8010F293 )		
  %838:  Switch  *Var[0] 
  %844:  	CaseOR  ==  00000000 
  %850:  	CaseOR  ==  00000002 
  85C:  		Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  87C:  		Sub  *Var[0]  00000064 
  88C:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  8A4:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 0000001E .True )
  8CC:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  8E8:  		Kill     *Var[A] 
  8F4:  		Call     YieldTurn   	( )
  %900:  	EndCaseGroup
  %908:  EndSwitch
  910:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  924:  Call     UseIdleAnimation 	( .Actor:Self .True )
  938:  Return
  940:  End
}
