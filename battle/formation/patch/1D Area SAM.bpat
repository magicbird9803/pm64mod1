%duplighost
%lunge does -1 atk and -1 def
%can copy level 1 partner abilities
%dupli-bow doesn't get outta sight because that would just become annoying

@ $StatusTable_8021AF00 %status nerfs (sleep 60 -> 35, others 75 -> 50)
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      35`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   50`
.Status:Shrink     50`
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -1`
.Status:End
}

@ $Duplighost
{
[MaxHP]        20`b %hp buff
[Escape]       40`b 
[Item]         50`b 
[AirLift]      75`b %a sheet isn't that heavy 
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $Function_GetPartner %get a random avaliable partner instead of just copying current one
{
	ADDIU	SP, SP, FFE0
	SW		S2, 18 (SP)
	DADDU	S2, A0, R0
	SW		S1, 14 (SP)
	SW		RA, 1C (SP)
	SW		S0, 10 (SP)
	LW		S0, C (S2)
	.TryRandom % Range [0-9]
   	JAL		800299FC
	ORI		A0, R0, 9
	% Get 8010F2AC + 4*i
	LIA		S1, 8010F2A4
	SLL		A0, V0, 3
	DADDU	S1, S1, A0
	LB		A2, 0 (S1)
	BEQ		A2, R0, .TryRandom
	NOP
	DADDU	A2, V0, R0
	LW		A1, 0 (S0)
	JAL		~Func:set_variable
	DADDU	A0, S2, R0
	ADDIU	S0, S0, 4
	LB		A2, 1 (S1)
	LW		A1, 0 (S0)
	JAL		~Func:set_variable
	DADDU	A0, S2, R0
	LW		RA, 1C (SP)
	LW		S2, 18 (SP)
	LW		S1, 14 (SP)
	LW		S0, 10 (SP)
	ADDIU	V0, R0, 2
	JR		RA
ADDIU SP, SP, 20
}

@ $Script_Init_8021AFF8
{
    0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80227C40 )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021B110 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021B15C )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8021B070 )
   50:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
		Call  SetActorVar   ( .Actor:Self 00000009 00000004 )	%attack power
   68:  Return
   70:  End
}

@ $Script_HandleEvent_8021B15C
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   3C:  Switch  *Var0
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		SetConst  *Var0  00000001
   70:  		SetConst  *Var1  004E000A
   80:  		ExecWait  DoNormalHit
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  SetActorVar   ( .Actor:Self 00000009 *Var2 )	%attack power
   8C:  	EndCaseGroup
   94:  	Case  ==  .Event:BurnHit % E
   A0:  		SetConst  *Var0  00000001
   B0:  		SetConst  *Var1  004E000C
   C0:  		SetConst  *Var2  FFFFFFFF
   D0:  		ExecWait  DoBurnHit
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  SetActorVar   ( .Actor:Self 00000009 *Var2 )	%attack power
   DC:  	Case  ==  .Event:BurnDeath % 24
   E8:  		SetConst  *Var0  00000001
   F8:  		SetConst  *Var1  004E000C
  108:  		SetConst  *Var2  FFFFFFFF
  118:  		ExecWait  DoBurnHit
  124:  		SetConst  *Var0  00000001
  134:  		SetConst  *Var1  004E000C
  144:  		ExecWait  DoDeath
  150:  		Return
  158:  	Case  ==  .Event:SpinSmashHit % B
  164:  		SetConst  *Var0  00000001
  174:  		SetConst  *Var1  004E000A
  184:  		ExecWait  DoSpinSmashHit
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  SetActorVar   ( .Actor:Self 00000009 *Var2 )	%attack power
  190:  	Case  ==  .Event:SpinSmashDeath % 21
  19C:  		SetConst  *Var0  00000001
  1AC:  		SetConst  *Var1  004E000A
  1BC:  		ExecWait  DoSpinSmashHit
  1C8:  		SetConst  *Var0  00000001
  1D8:  		SetConst  *Var1  004E000A
  1E8:  		ExecWait  DoDeath
  1F4:  		Return
  1FC:  	Case  ==  .Event:ShockHit % 2F
  208:  		Call  ResetAllActorSounds   ( .Actor:Self )
  218:  		SetConst  *Var0  00000001
  228:  		SetConst  *Var1  004E000A
  238:  		ExecWait  DoShockHit
  244:  		SetConst  *Var0  00000001
  254:  		SetConst  *Var1  004E000A
  264:  		ExecWait  DoJumpBack
  270:  		ExecWait  $Script_8021B120
  27C:  	Case  ==  .Event:ShockDeath % 26
  288:  		SetConst  *Var0  00000001
  298:  		SetConst  *Var1  004E000A
  2A8:  		ExecWait  DoShockHit
  2B4:  		SetConst  *Var0  00000001
  2C4:  		SetConst  *Var1  004E000A
  2D4:  		ExecWait  DoDeath
  2E0:  		Return
  2E8:  	CaseOR  ==  00000017 % 17
  2F4:  	CaseOR  ==  .Event:Immune % 19
  300:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  30C:  		SetConst  *Var0  00000001
  31C:  		SetConst  *Var1  004E0002
  32C:  		ExecWait  DoImmune
  338:  	EndCaseGroup
  340:  	Case  ==  .Event:Death % 20
  34C:  		SetConst  *Var0  00000001
  35C:  		SetConst  *Var1  004E000A
  36C:  		ExecWait  DoNormalHit
  378:  		Wait  10`
  384:  		SetConst  *Var0  00000001
  394:  		SetConst  *Var1  004E000A
  3A4:  		ExecWait  DoDeath
  3B0:  		Return
  3B8:  	Case  ==  .Event:RecoverStatus % 31
  3C4:  		SetConst  *Var0  00000001
  3D4:  		SetConst  *Var1  004E0002
  3E4:  		ExecWait  DoRecover
  3F0:  	Case  ==  .Event:ScareAway % 39
  3FC:  		SetConst  *Var0  00000001
  40C:  		SetConst  *Var1  004E0004
  41C:  		SetConst  *Var2  004E000A
  42C:  		ExecWait  DoScareAway
  438:  		Return
  440:  	Case  ==  .Event:BeginAirLift % 3A
  44C:  		SetConst  *Var0  00000001
  45C:  		SetConst  *Var1  004E0004
  46C:  		ExecWait  DoAirLift
  478:  	Case  ==  .Event:BlowAway % 16
  484:  		SetConst  *Var0  00000001
  494:  		SetConst  *Var1  004E000A
  4A4:  		ExecWait  DoBlowAway
  4B0:  		Return
  4B8:  	Default
  4C0:  EndSwitch
  4C8:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  4DC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  4F0:  Return
  4F8:  End
}


@ $Script_LungeAttack
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 004E0007 )
   8C:  Wait     00000014 
   98:  Call     SetActorSounds ( FFFFFF81 00000002 000002CB 00000000 )
   B4:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
   D8:  Switch  *Var[0] 
   E4:  	CaseOR  ==  .HitResult:Miss % 6
   F0:  	CaseOR  ==  .HitResult:Lucky % 5
   FC:  		Set  *Var[A]  *Var[0] 
  10C:  		Call     UseBattleCamPreset 	( 00000002 )
  11C:  		Call     SetAnimation 	( .Actor:Self 00000001 004E0008 )
  134:  		Call     SetGoalToTarget 	( .Actor:Self )
  144:  		Call     AddGoalPos 	( .Actor:Self FFFFFF9C 00000000 00000000 )
  160:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  174:  		Call     JumpToGoal  	( .Actor:Self 00000011 00000000 00000001 00000000 )
  194:  		If  *Var[A]  ==  00000005 
  1A4:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  1C8:  		EndIf
  1D0:  		Wait     0000000A 
  1DC:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  		Call     SetActorPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  214:  		Call     SetAnimation 	( .Actor:Self 00000001 004E0002 )
  22C:  		Call     8026F838 ( FFFFFF81 00000002 )
  240:  		Wait     0000000F 
  24C:  		Call     YieldTurn   	( )
  258:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  26C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  288:  		ExecWait $Script_8021B120 
  294:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  2AC:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  2C0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  2D4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  2E8:  		Return
  2F0:  	EndCaseGroup
  2F8:  EndSwitch
  300:  Call     SetAnimation 	( .Actor:Self 00000001 004E0008 )
  318:  Call     SetGoalToTarget 	( .Actor:Self )
  328:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
  33C:  If  *Var[A]  &  00080000 
  34C:  	Call     AddGoalPos 	( .Actor:Self *Fixed[4.0] *Fixed[-6.0] 00000000 )
  368:  Else
  370:  	Call     AddGoalPos 	( .Actor:Self 0000000A FFFFFFF1 00000000 )
  38C:  EndIf
  394:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  3A8:  Call     JumpToGoal  	( .Actor:Self 0000000C 00000000 00000001 00000000 )
  3C8:  Wait     00000002 
  3D4:  Call     SetGoalToTarget 	( .Actor:Self )
		Call  	 GetActorVar   ( .Actor:Self 00000009 *Var2 )	%attack power
  3E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 *Var2 00000020 )
		/%
		Call	PlaySoundAtActor	( .Actor:Player 000002D8 )
		Thread % added
			Call	8026BF48	( 00000001 )
			Call	BoostDefense	( .Actor:Player FFFFFFFF )
			%Call	8026BF48	( 00000000 )
			%Call	8026BF48	( 00000001 )
			Call	BoostAttack	( .Actor:Player FFFFFFFF )
			Call	8026BF48	( 00000000 )
		EndThread % added
		%/
  40C:  Switch  *Var[0] 
  418:  	CaseOR  ==  00000000 
  424:  	CaseOR  ==  00000002 
  430:  		Call     UseBattleCamPreset 	( 00000002 )
  440:  		Call     8026F838 ( FFFFFF81 00000002 )
  454:  		Call     SetAnimation 	( .Actor:Self 00000001 004E0009 )
  46C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  488:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  49C:  		Add  *Var[0]  0000001E 
  4AC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  4C8:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  4E8:  		Add  *Var[0]  00000014 
  4F8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  514:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  534:  		Wait     0000000A 
  540:  		Call     YieldTurn   	( )
  54C:  		ExecWait $Script_8021B120 
  558:  	EndCaseGroup
  560:  EndSwitch
  568:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  57C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  590:  Return
  598:  End
}

%fix stats and unify status tables
@ $GhostGoombario
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners 
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $GhostKooper
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $GhostBombette
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $DefenseTable_802215DC
{
.Element:Normal 00000001
.Element:Throw 00000000
.Element:End
}

@ $GhostParakarry
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]       0`b % ironic, he can lift others from battle, but not himself
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $DefenseTable_80222568
{
.Element:Normal 00000000
.Element:Throw FFFFFFFF
.Element:End
}

@ $GhostBow
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      30`b % how do you even lift a ghost
[Hurricane]     0`b % Bow's "Spook" as well
}

@ $DefenseTable_80223938
{
.Element:Normal 00000000
.Element:Water FFFFFFFE
.Element:Shock  00000063
.Element:Throw FFFFFFFF
.Element:End
}

@ $GhostWatt
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $GhostSushie
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners
[Hurricane]    45`b % Bow's "Spook" as well
}

@ $DefenseTable_802261D8
{
.Element:Normal 00000000
.Element:Throw FFFFFFFF
.Element:End
}

@ $GhostLakilester
{
[MaxHP]        20`b 
[StatusTable] $StatusTable_8021AF00
[Escape]       40`b 
[Item]         50`b 
[AirLift]      50`b % standard for dupli-partners
[Hurricane]    45`b % Bow's "Spook" as well
}

%really hope copying lee scripts won't break everything

%power toss
@ $Script_TakeTurn_8021F374
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
   54:  If  *Var[0]  ==  00000001 
   64:  	Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
   7C:  	Sub  *Var[0]  00000001 
   8C:  	If  *Var[0]  >  00000000 
   9C:  		Call     SetActorVar 	( .Actor:Self 00000004 *Var[0] )
   B4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
   D0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[3.0] )
   E8:  		Wait     0000001E 
   F4:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  10C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  124:  	Else
  12C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  148:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[3.0] )
  160:  		Wait     00000014 
  16C:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  184:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  19C:  		Call     SetAnimation 	( .Actor:Self 00000001 000A0019 )
  1B4:  		Set  *Var[0]  00000000 
  1C4:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  1E0:  		Thread
  1E8:  			Loop     00000005 
  1F4:  				Add  *Var[0]  0000000F 
  204:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  220:  				Wait     00000001 
  22C:  			EndLoop
  234:  		EndThread
  23C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  258:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  274:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  288:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  2A8:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  2C4:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  2E0:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  2FC:  		Call     SetAnimation 	( .Actor:Self 00000001 000A0004 )
  314:  		Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
  32C:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8021E714 )
  344:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021E67C )
  35C:  		Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFE 00000026 )
  378:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFD FFFFFFF7 )
				Goto 1 %get up and attack on same turn
  394:  	EndIf
  39C:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3B0:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  3C4:  	Return
  3CC:  EndIf
		Label 1
  3D4:  Call     SetAnimation 	( .Actor:Self 00000001 000A000E )
  3EC:  Call     PlaySoundAtActor 	( .Actor:Self 00000000 )
  400:  Wait     0000000F 
  40C:  Call     SetAnimation 	( .Actor:Self 00000001 000A000A )
  424:  Call     PlaySoundAtActor 	( .Actor:Self 0000200C )
  438:  Call     UseBattleCamPreset 	( 0000000E )
  448:  Call     BattleCamTargetActor ( .Actor:Self )
  458:  Call     MoveBattleCamOver 	( 0000004B )
  468:  Call     8024ECF8 ( 00000001 00000001 00000001 )
  480:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  498:  Switch  *Var[0] 
  4A4:  	Case  ==  00000000 
  4B0:  		Set  *Var[0]  0000000A 
  4C0:  	Case  ==  00000001 
  4CC:  		Set  *Var[0]  00000014 
  4DC:  	Case  ==  00000002 
  4E8:  		Set  *Var[0]  0000001E 
  4F8:  EndSwitch
  500:  Set  *Var[9]  00000000 
  510:  Loop     *Var[0] 
  51C:  	Add  *Var[9]  00000001 
  52C:  	Switch  *Var[9] 
  538:  		Case  <  00000014 
  544:  			Call     SetAnimation 	( .Actor:Self 00000001 000A000A )
  55C:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[10.0] )
  570:  		Case  ==  00000014 
  57C:  			Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  598:  			Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[4] *Var[5] *Var[6] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  5DC:  		Case  <  00000028 
  5E8:  			Call     SetAnimation 	( .Actor:Self 00000001 000A000B )
  600:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
  614:  		Case  ==  00000028 
  620:  			Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  63C:  			Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[4] *Var[5] *Var[6] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  680:  		Case  <  00000032 
  68C:  			Call     SetAnimation 	( .Actor:Self 00000001 000A000C )
  6A4:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] )
  6B8:  		Case  ==  00000032 
  6C4:  			Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  6E0:  			Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[4] *Var[5] *Var[6] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  724:  		Case  <  0000003C 
  730:  			Call     SetAnimation 	( .Actor:Self 00000001 000A000D )
  748:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
  75C:  		Case  ==  0000003C 
  768:  			Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  784:  			Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[4] *Var[5] *Var[6] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  7C8:  	EndSwitch
  7D0:  	Wait     00000001 
  7DC:  EndLoop
  7E4:  Call     PlaySoundAtActor 	( .Actor:Self 0000200A )
  7F8:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  814:  Call     UseBattleCamPreset 	( 00000002 )
  824:  Call     MoveBattleCamOver 	( 0000000F )
  834:  Call     AddActorDecoration 	( .Actor:Self 00000000 00000000 .Decoration:GreySmokeTrail )
		Call 	 RandInt ( 100` *Var[0] )
		Switch (*Var[0])
			Case < 4B
				Set *Var[A] 0
			Default
				Set *Var[A] 1
		EndSwitch
  850:  Call     SetGoalToTarget 	( .Actor:Self )
  860:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  878:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  89C:  Switch  *Var[0] 
  8A8:  	CaseOR  ==  .HitResult:Miss % 6
  8B4:  	CaseOR  ==  .HitResult:Lucky % 5
  8C0:  		Set  *Var[A]  *Var[0] 
  8D0:  		Thread
  8D8:  			Call     $Function_80218C40 ( )
  8E4:  			Call     RemoveActorDecoration 	( .Actor:Self 00000000 00000000 )
  8FC:  		EndThread
  904:  		Wait     00000004 
  910:  		Call     SetAnimation 	( .Actor:Self 00000001 000A0009 )
  928:  		Call     SetActorRotationOffset 	( .Actor:Self FFFFFFF8 00000000 00000000 )
  944:  		Set  *Var[0]  00000000 
  954:  		Loop     00000002 
  960:  			Add  *Var[0]  0000001E 
  970:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  98C:  			Wait     00000001 
  998:  		EndLoop
  9A0:  		Wait     00000005 
  9AC:  		Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  9C8:  		Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[4] *Var[5] *Var[6] 00000010 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  A0C:  		Loop     00000005 
  A18:  			Add  *Var[0]  FFFFFFF4 
  A28:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  A44:  			Wait     00000001 
  A50:  		EndLoop
  A58:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  A74:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000002 )
  A90:  		Wait     00000002 
  A9C:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFFE )
  AB8:  		Wait     00000002 
  AC4:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  AE0:  		If  *Var[A]  ==  00000005 
  AF0:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  B14:  		EndIf
  B1C:  		Wait     0000000A 
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 000A000F )
  B40:  		Wait     0000000A 
  B4C:  		Call     UseBattleCamPreset 	( 00000002 )
  B5C:  		Call     YieldTurn   	( )
  B68:  		Call     8026F6EC ( FFFFFF81 )
  B78:  		Call     SetAnimation 	( .Actor:Self 00000001 000A0006 )
  B90:  		Call     SetGoalToHome 	( .Actor:Self )
  BA0:  		If *Var[A] == 0
					Call     SetActorSpeed 	( .Actor:Self *Fixed[4.5] )
				Else
					Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
				EndIf
  BB4:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  BCC:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  BE0:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  BF4:  		Return
  BFC:  	EndCaseGroup
  C04:  EndSwitch
  C0C:  Call     RemoveActorDecoration 	( .Actor:Self 00000000 00000000 )
  C24:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
  C3C:  Switch  *Var[9] 
  C48:  	Case  ==  00000000 
  %C54:  		Wait     00000002 
  C60:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 )
  C88:  	Case  ==  00000001 
  %C94:  		Wait     00000002 
  CA0:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000003 00000020 )
  CC8:  	Case  ==  00000002 
  %CD4:  		Wait     00000002 
  CE0:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 )
  D08:  EndSwitch
		If *Var[A] == 0 %shell toss, do normal stuff
			Call     RemoveActorDecoration 	( .Actor:Self 00000000 00000000 )
  D10:  	Switch  *Var[0] 
  D1C:  		CaseOR  ==  00000000 
  D28:  		CaseOR  ==  00000002 
  D34:  			Call     UseBattleCamPreset 	( 00000002 )
  D44:  			Call     MoveBattleCamOver 	( 00000008 )
  D54:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  D70:  			Add  *Var[0]  0000003C 
  D80:  			Set  *Var[1]  00000000 
  D90:  			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
  DA4:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  DC0:  			Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  DE0:  			Add  *Var[0]  0000001E 
  DF0:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  E0C:  			Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  E2C:  			Add  *Var[0]  00000014 
  E3C:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  E58:  			Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  E78:  			Add  *Var[0]  0000000A 
  E88:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  EA4:  			Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
  EC4:  			Call     SetAnimation 	( .Actor:Self 00000001 000A000F )
  EDC:  			Wait     0000000F 
  EE8:  			Call     YieldTurn   	( )
  EF4:  			Call     8026F6EC ( FFFFFF81 )
  F04:  			Call     SetAnimation 	( .Actor:Self 00000001 000A0006 )
  F1C:  			Call     SetGoalToHome 	( .Actor:Self )
  F2C:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.5] )
  F40:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  F58:  		EndCaseGroup
  F60:  	EndSwitch
		Else %power shell, keep going and hit partner
			Call     SetTargetActor ( .Actor:Self .Actor:Partner )
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] ) %faster
			Call     RunToGoal   	( .Actor:Self 00000000 .False )
			Switch  *Var[9] %the partner hit isn't as strong for fairness
				Case  ==  00000000 
					Wait     00000002 
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000001 00000020 )
				Case  ==  00000001 
					Wait     00000002 
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 )
				Case  ==  00000002 
					Wait     00000002 
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000003 00000020 )
			EndSwitch			
			Call	 AddGoalPos (.Actor:Self FFFFFF80 00000000 00000000 )
			Call     RunToGoal   	( .Actor:Self 00000000 .False )
			Call     RemoveActorDecoration 	( .Actor:Self 00000000 00000000 )
			Switch  *Var[0] 
				CaseOR  ==  00000000 
				CaseOR  ==  00000002 
					% Call     UseBattleCamPreset 	( 00000002 )
					% Call     MoveBattleCamOver 	( 00000008 )
					% Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					% Add  *Var[0]  0000003C 
					% Set  *Var[1]  00000000 
					% Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
					% Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					% Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
					% Add  *Var[0]  0000001E 
					% Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					% Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
					% Add  *Var[0]  00000014 
					% Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					% Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
					% Add  *Var[0]  0000000A 
					% Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					% Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
					% Call     SetAnimation 	( .Actor:Self 00000001 000A000F )
					Wait     0000000F 
					Call     YieldTurn   	( )
					Call     8026F6EC ( FFFFFF81 )
					Call     SetAnimation 	( .Actor:Self 00000001 000A0006 )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     SetActorSpeed 	( .Actor:Self *Fixed[4.5] )
					Call     RunToGoal   	( .Actor:Self 00000000 .False )
				EndCaseGroup
			EndSwitch
		EndIf
  F68:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  F7C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  F90:  Return
  F98:  End
}

@ $Script_HandleEvent_80220654 % Bombette no longer gets ohko'ed by explosions/fire
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	Case  ==  .Event:HitCombo
   54:  		SetConst  *Var[0]  00000001 
   64:  		SetConst  *Var[1]  000B0012 
   74:  		ExecWait DoNormalHit 
   80:  	Case  ==  .Event:Hit
   8C:  		SetConst  *Var[0]  00000001 
   9C:  		SetConst  *Var[1]  000B0012 
   AC:  		ExecWait DoNormalHit 
   B8:  		Call     GetLastElement ( *Var[1] )
   C8:  		If  *Var[1]  &  00000020 
   D8:  			Call     SetAnimation 	( .Actor:Self 00000001 000B0013 )
   F0:  			Wait     00000014 
   % FC:  			ExecWait $Script_802204DC_21 
  % 108:  			ExecWait $Script_8021BBFC_21 
  114:  			Call     UseBattleCamPreset 	( 00000002 )
  124:  			SetConst  *Var[0]  00000001 
  134:  			SetConst  *Var[1]  000B0014 
  144:  			Set  *Var[2]  FFFFCFC7 
 % 154:  			ExecWait DoDeath 
  160:  			Return
  168:  		EndIf
  170:  	Case  ==  .Event:BurnHit
  17C:  		SetConst  *Var[0]  00000001 
  18C:  		SetConst  *Var[1]  000B0013 
  19C:  		SetConst  *Var[2]  000B0014 
  1AC:  		ExecWait DoBurnHit 
  % 1B8:  		ExecWait $Script_802204DC_21 
  % 1C4:  		ExecWait $Script_8021BBFC_21 
  1D0:  		SetConst  *Var[0]  00000001 
  1E0:  		SetConst  *Var[1]  000B0014 
  1F0:  		Set  *Var[2]  FFFFCFC7 
  % 200:  		ExecWait DoDeath 
  20C:  		Return
  214:  	Case  ==  .Event:BurnDeath
  220:  		SetConst  *Var[0]  00000001 
  230:  		SetConst  *Var[1]  000B0013 
  240:  		SetConst  *Var[2]  000B0014 
  250:  		ExecWait DoBurnHit 
  25C:  		ExecWait $Script_802204DC
  268:  		ExecWait $Script_8021BBFC 
  274:  		SetConst  *Var[0]  00000001 
  284:  		SetConst  *Var[1]  000B0014 
  294:  		Set  *Var[2]  FFFFCFC7 
  2A4:  		ExecWait DoDeath 
  2B0:  		Return
  2B8:  	Case  ==  .Event:SpinSmashHit
  2C4:  		SetConst  *Var[0]  00000001 
  2D4:  		SetConst  *Var[1]  000B0012 
  2E4:  		ExecWait 8029B998 
  2F0:  	Case  ==  .Event:SpinSmashDeath
  2FC:  		ExecWait $Script_8021BBFC 
  308:  		SetConst  *Var[0]  00000001 
  318:  		SetConst  *Var[1]  000B0012 
  328:  		ExecWait 8029B998 
  334:  		SetConst  *Var[0]  00000001 
  344:  		SetConst  *Var[1]  000B0012 
  354:  		ExecWait DoDeath 
  360:  		Return
  368:  	CaseOR  ==  .Event:ShockHit
  374:  	CaseOR  ==  .Event:ShockDeath
  380:  		Call     HPBarToCurrent ( .Actor:Self )
  390:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0013 )
  3A8:  		Wait     00000014 
  3B4:  		ExecWait $Script_802204DC 
  3C0:  		ExecWait $Script_8021BBFC 
  3CC:  		Call     UseBattleCamPreset 	( 00000002 )
  3DC:  		SetConst  *Var[0]  00000001 
  3EC:  		SetConst  *Var[1]  000B0014 
  3FC:  		Set  *Var[2]  FFFFCFC7 
  40C:  		ExecWait DoDeath 
  418:  		Return
  420:  	EndCaseGroup
  428:  	CaseOR  ==  00000017
  434:  	CaseOR  ==  .Event:Immune
  440:  	CaseOR  ==  .Event:AirLiftFailed
  44C:  		SetConst  *Var[0]  00000001 
  45C:  		SetConst  *Var[1]  000B0004 
  46C:  		ExecWait DoImmune 
  478:  	EndCaseGroup
  480:  	Case  ==  .Event:Death
  48C:  		ExecWait $Script_8021BBFC 
  498:  		SetConst  *Var[0]  00000001 
  4A8:  		SetConst  *Var[1]  000B0012 
  4B8:  		ExecWait DoNormalHit 
  4C4:  		Wait     0000000A 
  4D0:  		SetConst  *Var[0]  00000001 
  4E0:  		SetConst  *Var[1]  000B0012 
  4F0:  		ExecWait DoDeath 
  4FC:  		Return
  504:  	Case  ==  .Event:RecoverStatus
  510:  		SetConst  *Var[0]  00000001 
  520:  		SetConst  *Var[1]  000B0004 
  530:  		ExecWait DoRecover 
  53C:  	Case  ==  .Event:ScareAway
  548:  		SetConst  *Var[0]  00000001 
  558:  		SetConst  *Var[1]  000B0008 
  568:  		SetConst  *Var[2]  000B0012 
  578:  		ExecWait DoScareAway 
  584:  		Return
  58C:  	Case  ==  .Event:BeginAirLift
  598:  		SetConst  *Var[0]  00000001 
  5A8:  		SetConst  *Var[1]  000B0008 
  5B8:  		ExecWait DoAirLift 
  5C4:  	Case  ==  .Event:BlowAway
  5D0:  		SetConst  *Var[0]  00000001 
  5E0:  		SetConst  *Var[1]  000B0012 
  5F0:  		ExecWait DoBlowAway 
  5FC:  		Return
  604:  	Default
  60C:  EndSwitch
  614:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  628:  Call     UseIdleAnimation 	( .Actor:Self .True )
  63C:  Return
644: End
}

%add bomb
@ $Script_TakeTurn_80220CA0
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Wait     0000000A 
   34:  Call     UseBattleCamPreset 	( 0000003F )
   44:  Call     BattleCamTargetActor ( .Actor:Self )
   54:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   68:  Call     SetGoalToTarget 	( .Actor:Self )
   78:  Call     AddGoalPos 	( .Actor:Self 00000028 00000000 00000000 )
   94:  Call     MoveBattleCamOver 	( 0000001E )
		Call 	 RandInt ( 100` *Var[0] )
		Switch (*Var[0]) %1 = bomb
			Case < 50`
				Set *Var[A] 0
			Default
				Set *Var[A] 1
		EndSwitch
		If (*Var[A] == 1) %this is spliced from bombette.bscr mostly
			Call	 SetTargetActor ( .Actor:Self .Actor:Player )
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     AddGoalPos 	( .Actor:Self 0000000C 00000000 00000000 )		
			Call     PlaySoundAtActor 	( .Actor:Self 00000287 ) %fuse
			Thread
				Call     SetAnimation 	( .Actor:Self FFFFFFFF 000B0009 )
				Call     RunToGoal   	( .Actor:Self 00000023 ) 
				Call     SetAnimation 	( .Actor:Self FFFFFFFF 000B001A )
			EndThread
			Call     EnemyTestTarget ( .Actor:Self *Var[C] 00000000 00000000 00000001 00000010 )
			If *Var[C] == 5 %lucky hit triggers a premature explosion
				Wait	1E
				Call     StopSound   	( 00000287 ) %no more fuse
				Call     80254218 ( 0000000B )
				Thread
					Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.75] )
					Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[3.0] )
					Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[4.5] )
					Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[3.0] )
				EndThread
				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[2]  00000002 
				Call     PlayEffect  	( ~FX:SmokeRing:Blast1 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
				Add  *Var[1]  00000014 
				Add  *Var[2]  00000002 
				Call     PlayEffect  	( ~FX:Explosion1 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
				Call     PlaySoundAtActor 	( .Actor:Self .Sound:BombBlast )
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				Goto 	0
			EndIf
			Wait     2D %the regular partner move has a consistent timing, no matter where the enemy is 
			Call     StopSound   	( 00000287 ) %no more fuse
			Call     80254218 ( 0000000B )
			Thread
				Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.75] )
				Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[3.0] )
				Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[4.5] )
				Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[3.0] )
			EndThread
			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add  *Var[2]  00000002 
			Call     PlayEffect  	( ~FX:SmokeRing:Blast1 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Add  *Var[1]  00000014 
			Add  *Var[2]  00000002 
			Call     PlayEffect  	( ~FX:Explosion1 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call     PlaySoundAtActor 	( .Actor:Self .Sound:BombBlast )
			If (*Var[C] == 6) %if mario is invisible, skip damage
				Goto 0
			Else
				Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
				Switch  *Var[9] %i think it's 5-6-7 but i need to confirm
					Case  ==  00000000  
						Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000200 00000000 00000000 00000005 00000020 )
					Case  ==  00000001  
						Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000200 00000000 00000000 00000006 00000020 )
					Case  ==  00000002  
						Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000200 00000000 00000000 00000007 00000020 )
				EndSwitch
			EndIf
			Label 0 %fly up
			Call     UseBattleCamPreset 	( 00000002 ) %stop camera following
			Thread
				Set  *Var[0]  00000000 
				Loop     00000050 
					Wait     00000001 
					Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
					Add  *Var[0]  00000021 
				EndLoop
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
			EndThread
			Call     SetAnimation 	( .Actor:Self FFFFFFFF 000B001B )
			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Sub  *Var[0]  00000032 
			Add  *Var[1]  000000C8 
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     FlyToGoal  	( .Actor:Self 0000000A 00000000 .Easing:Linear )
			Wait     00000032 
			Call     80280818 ( )
			Call     SetGoalToHome 	( .Actor:Self )
			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add  *Var[0]  00000019 
			Add  *Var[1]  000000C8 
			Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     SetGoalToHome 	( .Actor:Self )
			Call     YieldTurn   	( ) %allows next enemy's turn script to start
			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.60058594] )
			Call     SetAnimation 	( .Actor:Self FFFFFFFF 000B001B )
			Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
			Call     SetAnimation 	( .Actor:Self FFFFFFFF 000B0004 )
			Return
		EndIf
   A4:  Call     SetAnimation 	( .Actor:Self 00000001 000B0008 )
   BC:  Call     RunToGoal   	( .Actor:Self 0000001E .False )
   D4:  Call     SetAnimation 	( .Actor:Self 00000001 000B0004 )
   EC:  Call     SetAnimation 	( .Actor:Self 00000001 000B000F )
  104:  Wait     0000000F 
  110:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  12C:  Call     PlaySoundAtActor 	( .Actor:Self 00002020 )
  140:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  164:  Switch  *Var[0] 
  170:  	CaseOR  ==  00000006 
  17C:  	CaseOR  ==  00000005 
  188:  		Set  *Var[A]  *Var[0] 
  198:  		Call     SetGoalToTarget 	( .Actor:Self )
  1A8:  		Call     AddGoalPos 	( .Actor:Self FFFFFFF6 00000000 00000000 )
  1C4:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0010 )
  1DC:  		Call     RunToGoal   	( .Actor:Self 00000005 .False )
  1F4:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0004 )
  20C:  		Thread
  214:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000F 00000000 )
  230:  			Set  *Var[0]  00000000 
  240:  			Loop     0000000A 
  24C:  				Add  *Var[0]  00000048 
  25C:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  278:  				Wait     00000001 
  284:  			EndLoop
  28C:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  2A8:  		EndThread
  2B0:  		Call     AddGoalPos 	( .Actor:Self FFFFFFC4 00000000 00000000 )
  2CC:  		Call     RunToGoal   	( .Actor:Self 0000000A .False )
  2E4:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0004 )
  2FC:  		Thread
  304:  			Call     $Function_80218D64 ( )
  310:  		EndThread
  318:  		If  *Var[A]  ==  00000005 
  328:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  34C:  		EndIf
  354:  		Wait     00000014 
  360:  		Call     UseBattleCamPreset 	( 00000002 )
  370:  		Call     YieldTurn   	( )
  37C:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0008 )
  394:  		Call     SetGoalToHome 	( .Actor:Self )
  3A4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  3B8:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  3D0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3E4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3F8:  		Return
  400:  	EndCaseGroup
  408:  EndSwitch
  410:  Set  *Var[A]  *Var[0] 
  420:  Call     SetGoalToTarget 	( .Actor:Self )
  430:  Call     SetAnimation 	( .Actor:Self 00000001 000B0010 )
  448:  Call     RunToGoal   	( .Actor:Self 00000004 .False )
  460:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
  478:  Switch  *Var[9] 
  484:  	Case  ==  00000000 
  490:  		Wait     00000002 
  49C:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000002 00000020 )
  4C4:  	Case  ==  00000001 
  4D0:  		Wait     00000002 
  4DC:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
  504:  	Case  ==  00000002 
  510:  		Wait     00000002 
  51C:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  544:  EndSwitch
  54C:  Switch  *Var[0] 
  558:  	CaseOR  ==  00000000 
  564:  	CaseOR  ==  00000002 
  570:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0004 )
  588:  		Call     UseBattleCamPreset 	( 00000002 )
  598:  		Call     MoveBattleCamOver 	( 00000008 )
  5A8:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0011 )
  5C0:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5DC:  		Add  *Var[0]  00000028 
  5EC:  		Set  *Var[1]  00000000 
  5FC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
  610:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  62C:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  64C:  		Call     SetAnimation 	( .Actor:Self 00000001 000B000E )
  664:  		Wait     00000001 
  670:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0011 )
  688:  		Add  *Var[0]  00000028 
  698:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6B4:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  6D4:  		Call     SetAnimation 	( .Actor:Self 00000001 000B000E )
  6EC:  		Wait     00000001 
  6F8:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0011 )
  710:  		Add  *Var[0]  00000014 
  720:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  73C:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  75C:  		Call     SetAnimation 	( .Actor:Self 00000001 000B000E )
  774:  		Wait     00000001 
  780:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0011 )
  798:  		Add  *Var[0]  0000000A 
  7A8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  7C4:  		Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
  7E4:  		Call     SetAnimation 	( .Actor:Self 00000001 000B000E )
  7FC:  		Wait     00000001 
  808:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0004 )
  820:  		Wait     00000008 
  82C:  		Call     YieldTurn   	( )
  838:  		Call     SetAnimation 	( .Actor:Self 00000001 000B0008 )
  850:  		Call     SetGoalToHome 	( .Actor:Self )
  860:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  874:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  88C:  	EndCaseGroup
  894:  EndSwitch
  89C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8B0:  Call     UseIdleAnimation 	( .Actor:Self .True )
  8C4:  Return
  8CC:  End
}
  
%shell shot

%ok for some reason this is a script that calls another script in the base game
%that's inefficient, but it makes my job easier :)
@ $Script_TakeTurn_802224E4
{
		Call 	 RandInt ( 100` *Var[0] )
		Switch (*Var[0])
			Case < 50`
				Set *Var[A] 0
			Default
				Set *Var[A] 1
		EndSwitch
		If (*Var[A] == 0)
    0:  	ExecWait $Script_80221D54 
		Else
			ExecWait $Script_ShellShot
		EndIf
	C:  Return
   14:  End
}
   
#new:Script $Script_ShellShot
{
Call     UseIdleAnimation 	( .Actor:Self .False )
Call     EnableIdleScript 	( .Actor:Self 00000000 )
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0007 )
Call     SetTargetActor ( .Actor:Self .Actor:Player )
Call     UseBattleCamPreset 	( 0000003F )
Call     BattleCamTargetActor ( .Actor:Self )
Wait     0000000F
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0008 )
Wait	 00000020
Call     EnableActorBlur 	( .Actor:Self 00000001 )
Call     EnemyTestTarget ( .Actor:Self *Var[0] 10000000 00000000 00000001 00000010 )
Call     SetGoalToTarget 	( .Actor:Self )
Switch (*Var[0])
	Case == 00000005 %lucky: misses you
		Call     EnableActorBlur 	( .Actor:Self 00000001 )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self 00000032 FFFFFFCE 00000000 )
		Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C000A )
		Call     FlyToGoal  	( .Actor:Self 00000007 00000000 00000064 )
		Call     EnableActorBlur 	( .Actor:Self 00000000 )
		Wait 	 00000004
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
		Goto 0
	Case == 00000006 %invis: goes through you
		Call     EnableActorBlur 	( .Actor:Self 00000001 )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self FFFFFFCE FFFFFFCE 00000000 )
		Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C000A )
		Call     FlyToGoal  	( .Actor:Self 00000007 00000000 00000064 )
		Call     EnableActorBlur 	( .Actor:Self 00000000 )
		Wait 	 00000004
		Goto 0
	Default
EndSwitch
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C000A )
Call     FlyToGoal  	( .Actor:Self 00000007 00000000 .Easing:Linear )
Call     EnableActorBlur 	( .Actor:Self 00000000 )
Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
Switch  *Var[9]  %5-6-7
	Case  ==  00000000  
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000005 00000020 )
	Case  ==  00000001  
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000006 00000020 )
	Case  ==  00000002  
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000007 00000020 )
EndSwitch
Call     PlaySoundAtActor 	( .Actor:Self 00000110 ) %the regular sound
%go home
Label 0
Call     UseBattleCamPreset 	( 00000002 ) %stop camera following
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0017 )
Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
Call     AddGoalPos 	( .Actor:Self FFFFFFD8 00000000 00000000 )
Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000000 00000000 )
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0000 )
ChildThread
	Wait     00000004 
	Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0003 )
EndChildThread
Call     AddGoalPos 	( .Actor:Self FFFFFFE8 00000000 00000000 )
Call     80279728 ( .Actor:Self 00000005 *Fixed[4.0] ) %also found in the kick move
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0001 )
Wait     00000002 
Call     SetGoalToHome 	( .Actor:Self )
Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0003 )
Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFFB .Easing:Linear )
Call     SetAnimation 	( .Actor:Self FFFFFFFF 000C0002 )
Call     EnableIdleScript 	( .Actor:Self 00000001 )
Call     UseIdleAnimation 	( .Actor:Self .True )
Return
End
}

%power shock (3 turn paralyze)
@ $Script_TakeTurn_80223F50
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     UseBattleCamPreset 	( 00000013 )
   24:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
   40:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
   58:  Call     SetBattleCamZoom  	( 0000015E )
   68:  Call     SetBattleCamOffsetZ 	( 00000028 )
   78:  Call     MoveBattleCamOver 	( 00000050 )
   88:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   A0:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   B4:  Call     SetGoalToTarget 	( .Actor:Self )
   C4:  Call     SetAnimation 	( .Actor:Self 00000001 000E0003 )
   DC:  Call     $Function_802193F0 ( 00000001 )
   EC:  Call     AddGoalPos 	( .Actor:Self 0000000F FFFFFFF6 00000005 )
  108:  Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  124:  Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
  13C:  Call     $Function_802193F0 ( 00000000 )
  14C:  Wait     00000005 
  158:  Call     $Function_80219358 ( 00000000 )
  168:  Call     AddGoalPos 	( .Actor:Self 00000019 00000014 00000000 )
  184:  Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFEC .Easing:CosInOut )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 000E0005 )
  1B8:  Call     SetGoalToTarget 	( .Actor:Self )
  1C8:  Call     FlyToGoal  	( .Actor:Self 00000005 00000000 .Easing:CosInOut )
  1E4:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  208:  Switch  *Var[0] 
  214:  	CaseOR  ==  .HitResult:Miss % 6
  220:  	CaseOR  ==  .HitResult:Lucky % 5
  22C:  		Set  *Var[A]  *Var[0] 
  23C:  		Thread
  244:  			Wait     00000005 
  250:  			Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
  268:  		EndThread
  270:  		Call     SetGoalToTarget 	( .Actor:Self )
  280:  		Call     AddGoalPos 	( .Actor:Self FFFFFFD8 0000000A 00000000 )
  29C:  		Call     FlyToGoal  	( .Actor:Self 0000000A FFFFFFEC .Easing:QuadraticOut )
  2B8:  		If  *Var[A]  ==  00000005 
  2C8:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2EC:  		EndIf
  2F4:  		Call     $Function_802193A4 ( 00000001 )
  304:  		Call     $Function_80219358 ( 00000001 )
  314:  		Wait     00000014 
  320:  		Call     UseBattleCamPreset 	( 00000002 )
  330:  		Call     YieldTurn   	( )
  33C:  		Call     SetGoalToHome 	( .Actor:Self )
  34C:  		Call     SetAnimation 	( .Actor:Self 00000001 000E0003 )
  364:  		Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  380:  		Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
  398:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3AC:  		Return
  3B4:  	EndCaseGroup
  3BC:  EndSwitch
  3C4:  Call     $Function_802193A4 ( 00000000 )
		Call 	 RandInt ( 100` *Var[0] ) 
		Switch (*Var[0])
			Case < 75`
				Set *Var[B] 0
				Set  *Var[A]  00000028
			Default
				Set *Var[B] 1
				Set  *Var[A]  0000004B
		EndSwitch
  %3D4:  Set  *Var[A]  00000028 
  3E4:  Call     AddBattleCamZoom  	( FFFFFFB5 )
  3F4:  Call     MoveBattleCamOver 	( *Var[A] )
  404:  Call     8024ECF8 ( 00000000 00000000 00000001 )
  41C:  Call     PlaySoundAtActor 	( .Actor:Self 00000289 )
  430:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  444:  If  *Var[0]  &  00080000 
  454:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  470:  	Add  *Var[1]  00000004 
  480:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[0.5205078] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4C4:  Else
  4CC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4E8:  	Add  *Var[1]  0000000C 
  4F8:  	Call     PlayEffect  	( ~FX:RadialFlowIn:ElectricalWaves *Var[0] *Var[1] *Var[2] *Fixed[1.3007812] *Var[A] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  53C:  EndIf
  544:  Call     $Function_8021943C ( )
  550:  Set  *Var[9]  00000000 
		If (*Var[B] == 0) %normal attack
  560:  	Call     SetAnimation 	( .Actor:Self 00000001 000E0006 )
  578:  	Loop     *Var[A] 
  584:  		Add  *Var[9]  00000003 
  594:  		If  *Var[9]  >  000000C8 
  5A4:  			Set  *Var[9]  000000C8 
  5B4:  		EndIf
  5BC:  		Call     $Function_80219480 ( *Var[9] )
  5CC:  		Wait     00000001 
  5D8:  	EndLoop
  5E0:  	Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
  5F8:  	Call     8026EA7C ( FFFFFF81 00000001 00000009 )
  610:  	Call     AddBattleCamZoom  	( 0000004B )
  620:  	Call     MoveBattleCamOver 	( 00000005 )
  630: 		Thread
  638:  		Wait     00000002 
  644:  		Call     $Function_80219480 ( *Var[9] )
  654:  	EndThread
  65C:  	Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
  674:  	Switch  *Var[9] 
  680:  		Case  ==  00000000 
  68C:  			Wait     00000002 
  698: 		 		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000020 0000FFFF 00000000 00000002 00000020 )
  6C0:  		Case  ==  00000001 
  6CC:  			Wait     00000002 
  6D8:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000020 0000FFFF 00000000 00000003 00000020 )
  700:  		Case  ==  00000002 
  70C:  			Wait     00000002 
  718:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000020 0000FFFF 00000000 00000004 00000020 )
  740:  	EndSwitch
  748:  	Switch  *Var[0] 
  754:  		CaseOR  ==  00000000 
  760:  		CaseOR  ==  00000002 
  76C:  			Call     UseBattleCamPreset 	( 00000002 )
  77C:  			Call     $Function_802193A4 ( 00000001 )
  78C:  			Call     $Function_80219358 ( 00000001 )
  79C:  			Call     AddGoalPos 	( .Actor:Self 00000019 0000000A 00000000 )
  7B8:  			Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFF6 .Easing:CosInOut )
  7D4:  			Wait     0000000F 
  7E0:  			Call     YieldTurn   	( )
  7EC:  			Call     SetGoalToHome 	( .Actor:Self )
  7FC:  			Call     SetAnimation 	( .Actor:Self 00000001 000E0003 )
  814:  			Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  830:  			Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
  848:  		EndCaseGroup
  850:  	EndSwitch
		Else
			Call     SetAnimation 	( .Actor:Self 00000001 000E0006 )
			Loop     4B 
				Add  *Var[9]  00000003 
				If  *Var[9]  >  000000C8 
					Set  *Var[9]  000000C8 
				EndIf
				Call     $Function_80219480 ( *Var[9] )
				Wait     00000001 
			EndLoop
			Call     PlaySoundAtActor 	( .Actor:Self 0000028A )
			Thread %make watt bigger
				SetF  *Var[0]  *Fixed[1.0] 
				Loop     00000003 
					AddF  *Var[0]  *Fixed[0.40039062] 
					Call     SetActorScale 	( .Actor:Self *Var[0] *Var[0] *Var[0] )
					Wait     00000001 
				EndLoop
				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[1]  00000008 
				Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.8007812] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			EndThread
			Wait     0000000A %??
			Call     EnemyDamageTarget 	( .Actor:Self *Var[D] 08000020 0000FFFF 80010364 00000000 00000020 ) %3 turn paralyze :)
			Thread %shrink watt back to normal
				Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000014 00000000 )
				SetF  *Var[0]  *Fixed[2.2001953] 
				Loop     0000000C 
					SubF  *Var[0]  *Fixed[0.10058594] 
					Call     SetActorScale 	( .Actor:Self *Var[0] *Var[0] *Var[0] )
					Wait     00000001 
				EndLoop
				Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
				Call     SetAnimation 	( .Actor:Self FFFFFFFF 000E0001 )
			EndThread
			Switch  *Var[D] 
				CaseOR  ==  00000000 
				CaseOR  ==  00000002 
					Call     UseBattleCamPreset 	( 00000002 )
					Call     $Function_802193A4 ( 00000001 )
					Call     $Function_80219358 ( 00000001 )
					Call     AddGoalPos 	( .Actor:Self 00000019 0000000A 00000000 )
					Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFF6 .Easing:CosInOut )
					Wait     0000000F 
					Call     YieldTurn   	( )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     SetAnimation 	( .Actor:Self 00000001 000E0003 )
					Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
					Call     SetAnimation 	( .Actor:Self 00000001 000E0001 )
				EndCaseGroup
			EndSwitch
			Thread %fix lighting
				Call     MakeLerp    	( 000000C8 00000000 00000014 00000000 )
				Label    00000002
				Call     UpdateLerp  	( )
				Call     $Function_80219480 ( *Var[9] )
				Wait     00000001 
				If  *Var[1]  ==  00000001 
					Goto     00000002 
				EndIf
			EndThread
		EndIf
  858:  Call     UseIdleAnimation 	( .Actor:Self .True )
  86C:  Return
  874:  End
}
  
@ $Script_TakeTurn_80224F04
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     UseBattleCamPreset 	( 0000003F )
   38:  Call     BattleCamTargetActor ( .Actor:Self )
   48:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   60:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   74:  Call     SetGoalToTarget 	( .Actor:Self )
  		Call 	 RandInt ( 100` *Var[0] ) 
		Switch (*Var[0])
			Case < 50` 
				Set *Var[B] 0
			Default
				Set *Var[B] 1
		EndSwitch
		If (*Var[B] == 1)
			Call     SetAnimation 	( .Actor:Self FFFFFFFF 000F0009 )
			Call     AddBattleCamZoom  	( FFFFFFCE ) %zoom in
			Call     MoveBattleCamOver 	( 0000001E )
			Wait 	 5A
			Call     SetAnimation 	( .Actor:Self FFFFFFFF 000F000A ) %time to shoot water
			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add  *Var[0]  FFFFFFF6 %0000000A 
			Add  *Var[1]  FFFFFFF5 %0000000B
			Call     UseBattleCamPreset 	( 00000003 )
			Call     MoveBattleCamOver 	( 0000000A )
			Call     EnemyTestTarget ( .Actor:Self *Var[0] 10000004 00000000 00000001 00000010 )
			Switch (*Var[0])
				Case == 00000005 %lucky: water beam misses you
					Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     SetTargetActor ( .Actor:Self .Actor:Player )
					Call     SetGoalToTarget 	( .Actor:Self )
					Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
					%Call     $Function_802382A4 ( )
					Add	*Var[3] 15
					Call     PlaySoundAtActor 	( .Actor:Self 00000297 )
					Call     PlayEffect  	( ~FX:Squirt:Waterbeam *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] 00000001 0000000A 00000000 00000000 00000000 00000000 )
					Wait     00000014 
					Goto 3
				Case == 00000006 %invis: water beam goes past you
					Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     SetTargetActor ( .Actor:Self .Actor:Player )
					Call     SetGoalToTarget 	( .Actor:Self )
					Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
					%Call     $Function_802382A4 ( )
					Sub	*Var[3] 15
					Call     PlaySoundAtActor 	( .Actor:Self 00000297 )
					Call     PlayEffect  	( ~FX:Squirt:Waterbeam *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] 00000001 0000000A 00000000 00000000 00000000 00000000 )
					Wait     00000014
					Goto 3
			EndSwitch
			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     SetTargetActor ( .Actor:Self .Actor:Player )
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
			%Call     $Function_802382A4 ( )
			Call     PlaySoundAtActor 	( .Actor:Self 00000297 )
			Call     PlayEffect  	( ~FX:Squirt:Waterbeam *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] *Var[E] 00000001 0000000A 00000000 00000000 00000000 )
			Wait     0000000A
			Switch  *Var[9]  %5-6-7 i think
				Case  ==  00000000  
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000004 00000000 00000000 00000005 00000020 )
				Case  ==  00000001  
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000004 00000000 00000000 00000006 00000020 )
				Case  ==  00000002  
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000004 00000000 00000000 00000007 00000020 )
			EndSwitch
			Label	 3
			Call     UseBattleCamPreset 	( 00000002 ) %reset camera?
			Call     YieldTurn   	( )
		Else %wow belly flop is really complicated
   84:  	Call     AddGoalPos 	( .Actor:Self 00000046 00000000 00000000 )
   A0:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  	Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
   D8:  	Sub  *Var[3]  *Var[0] 
   E8:  	Div  *Var[3]  *Fixed[3.0] 
   F8:  	Set  *Var[A]  *Var[3] 
  108:  	If  *Var[A]  <  00000000 
  118:  		Mul  *Var[A]  FFFFFFFF 
  128:  	EndIf
  130:  	Call     MoveBattleCamOver 	( *Var[A] )
  140:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0003 )
  158:  	Call     RunToGoal   	( .Actor:Self *Var[A] .False )
  170:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0001 )
  188:  	Wait     0000000A 
  194:  	Call     UseBattleCamPreset 	( 00000008 )
  1A4:  	Call     BattleCamTargetActor ( .Actor:Self )
  1B4:  	Call     AddBattleCamZoom  	( FFFFFFCE )
  1C4:  	Call     MoveBattleCamOver 	( 0000001E )
  1D4:  	Call     8024ECF8 ( 00000001 00000001 00000001 )
  1EC:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0004 )
  204:  	Wait     0000000F 
  210:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0008 )
  228:  	Wait     0000000F 
  234:  	Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  258:  	Switch  *Var[0] 
  264:  		CaseOR  ==  00000006 
  270:  		CaseOR  ==  00000005 
  27C:  			Set  *Var[A]  *Var[0] 
  28C:  			Call     UseBattleCamPreset 	( 00000002 )
  29C:  			Call     MoveBattleCamOver 	( 00000014 )
  2AC:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0005 )
  2C4:  			Thread
  2CC:  				Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  2E8:  				Set  *Var[0]  00000000 
  2F8:  				Loop     0000000A 
  304:  					Add  *Var[0]  00000024 
  314:  					Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  330:  					Wait     00000001 
  33C:  				EndLoop
  344:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000014 )
  360:  			EndThread
  368:  			Thread
  370:  				Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  388:  				Switch  *Var[0] 
  394:  					Case  ==  00000000 
  3A0:  						Wait     0000000D 
  3AC:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3CC:  						Wait     00000001 
  3D8:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3F8:  						Wait     00000001 
  404:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  424:  						Wait     00000001 
  430:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  450:  						Wait     00000001 
  45C:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  47C:  					Case  ==  00000001 
  488:  						Wait     0000000D 
  494:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0507812] *Fixed[1.0507812] *Fixed[1.0507812] )
  4B4:  						Wait     00000001 
  4C0:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1005859] *Fixed[1.1005859] *Fixed[1.1005859] )
  4E0:  						Wait     00000001 
  4EC:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1503906] *Fixed[1.1503906] *Fixed[1.1503906] )
  50C:  						Wait     00000001 
  518:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  538:  						Wait     00000001 
  544:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.25] *Fixed[1.25] *Fixed[1.25] )
  564:  					Case  ==  00000002 
  570:  						Wait     0000000D 
  57C:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1005859] *Fixed[1.1005859] *Fixed[1.1005859] )
  59C:  						Wait     00000001 
  5A8:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  5C8:  						Wait     00000001 
  5D4:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.3007812] *Fixed[1.3007812] *Fixed[1.3007812] )
  5F4:  						Wait     00000001 
  600:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.4003906] *Fixed[1.4003906] *Fixed[1.4003906] )
  620:  						Wait     00000001 
  62C:  						Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
  64C:  				EndSwitch
  654:  			EndThread
  65C:  			Call     SetActorSounds ( FFFFFF81 00000002 00000000 00000000 )
  678:  			Call     PlaySoundAtActor 	( .Actor:Self 00002034 )
  68C:  			Call     SetGoalToTarget 	( .Actor:Self )
  69C:  			Thread
  6A4:  				Call     SetAnimation 	( .Actor:Self 00000001 000F0005 )
  6BC:  				Wait     0000000A 
  6C8:  				Call     SetAnimation 	( .Actor:Self 00000001 000F0006 )
  6E0:  			EndThread
  6E8:  			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  6FC:  			Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  71C:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0007 )
  734:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  750:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  76C:  			Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  78C:  			Call     LandJump ( FFFFFF81 )
  79C:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
  7B0:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  7CC:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  7E8:  			Call     AddGoalPos 	( .Actor:Self FFFFFFF1 00000000 00000000 )
  804:  			Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  824:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
  838:  			Call     AddGoalPos 	( .Actor:Self FFFFFFF6 00000000 00000000 )
  854:  			Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  874:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
  888:  			If  *Var[A]  ==  00000005 
  898:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  8BC:  			EndIf
  8C4:  			Wait     0000000A 
  8D0:  			Call     UseBattleCamPreset 	( 00000002 )
  8E0:  			Call     YieldTurn   	( )
  8EC:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0003 )
  904:  			Call     SetGoalToHome 	( .Actor:Self )
  914:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  928:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  940:  			Call     EnableIdleScript 	( .Actor:Self 00000001 )
  954:  			Call     UseIdleAnimation 	( .Actor:Self .True )
  968:  			Return
  970:  		EndCaseGroup
  978:  	EndSwitch
  980:  	Call     UseBattleCamPreset 	( 00000002 )
  990:  	Call     MoveBattleCamOver 	( 0000000A )
  9A0:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0005 )
  9B8:  	Thread
  9C0:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  9DC:  		Set  *Var[0]  00000000 
  9EC:  		Loop     0000000A 
  9F8:  			Add  *Var[0]  00000024 
  A08:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  A24:  			Wait     00000001 
  A30:  		EndLoop
  A38:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000014 )
  A54:  	EndThread
  A5C:  	Thread
  A64:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  A7C:  		Switch  *Var[0] 
  A88:  			Case  ==  00000000 
  A94:  				Wait     0000000D 
  AA0:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1005859] *Fixed[1.1005859] *Fixed[1.1005859] )
  AC0:  				Wait     00000001 
  ACC:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1005859] *Fixed[1.1005859] *Fixed[1.1005859] )
  AEC:  				Wait     00000001 
  AF8:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  B18:  				Wait     00000001 
  B24:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  B44:  				Wait     00000001 
  B50:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.3007812] *Fixed[1.3007812] *Fixed[1.3007812] )
  B70:  			Case  ==  00000001 
  B7C:  				Wait     0000000D 
  B88:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.1503906] *Fixed[1.1503906] *Fixed[1.1503906] )
  BA8:  				Wait     00000001 
  BB4:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  BD4:  				Wait     00000001 
  BE0:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.3505859] *Fixed[1.3505859] *Fixed[1.3505859] )
  C00:  				Wait     00000001 
  C0C:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.4003906] *Fixed[1.4003906] *Fixed[1.4003906] )
  C2C:  				Wait     00000001 
  C38:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.5507812] *Fixed[1.5507812] *Fixed[1.5507812] )
  C58:  			Case  ==  00000002 
  C64:  				Wait     0000000D 
  C70:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.2001953] *Fixed[1.2001953] *Fixed[1.2001953] )
  C90:  				Wait     00000001 
  C9C:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.3007812] *Fixed[1.3007812] *Fixed[1.3007812] )
  CBC:  				Wait     00000001 
  CC8:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
  CE8:  				Wait     00000001 
  CF4:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.6005859] *Fixed[1.6005859] *Fixed[1.6005859] )
  D14:  				Wait     00000001 
  D20:  				Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.8007812] *Fixed[1.8007812] *Fixed[1.8007812] )
  D40:  		EndSwitch
  D48:  	EndThread
  D50:  	Call     SetActorSounds ( FFFFFF81 00000002 00000000 00000000 )
  D6C:  	Call     PlaySoundAtActor 	( .Actor:Self 00002034 )
  D80:  	Call     SetGoalToTarget 	( .Actor:Self )
  D90:  	Thread
  D98:  		Call     SetAnimation 	( .Actor:Self 00000001 000F0005 )
  DB0:  		Wait     0000000A 
  DBC:  		Call     SetAnimation 	( .Actor:Self 00000001 000F0006 )
  DD4:  	EndThread
  DDC:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  DF0:  	Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  E10:  	Call     SetAnimation 	( .Actor:Self 00000001 000F0007 )
  E28:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  E44:  	Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  E60:  	Thread
  E68:  		Wait     00000003 
  E74:  		Call     SetPartScale ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  E94:  	EndThread
  E9C:  	Call     GetActorVar 	( .Actor:Self 00000001 *Var[A] )
  EB4:  	Switch  *Var[A] 
  EC0:  		Case  ==  00000000 
  ECC:  			Wait     00000002 
  ED8:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
  F00:  		Case  ==  00000001 
  F0C:  			Wait     00000002 
  F18:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 )
  F40:  		Case  ==  00000002 
  F4C:  			Wait     00000002 
  F58:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  F80:  	EndSwitch
  F88:  	Switch  *Var[0] 
  F94:  		CaseOR  ==  00000000 
  FA0:  		CaseOR  ==  00000002 
  FAC:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0006 )
  FC4:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  FE0:  			Add  *Var[0]  0000003C 
  FF0:  			Set  *Var[1]  00000000 
 1000:  			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
 1014:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1030:  			Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
 1050:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
 1064:  			Add  *Var[0]  0000001E 
 1074:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1090:  			Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
 10B0:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
 10C4:  			Add  *Var[0]  00000014 
 10D4:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 10F0:  			Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
 1110:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
 1124:  			Add  *Var[0]  0000000A 
 1134:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1150:  			Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
 1170:  			Call     PlaySoundAtActor 	( .Actor:Self 0000029A )
 1184:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0001 )
 119C:  			Wait     0000000F 
 11A8:  			Call     UseBattleCamPreset 	( 00000002 )
 11B8:  			Call     YieldTurn   	( )
 11C4:  			Call     SetAnimation 	( .Actor:Self 00000001 000F0003 )
 11DC:  			Call     SetGoalToHome 	( .Actor:Self )
 11EC:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
 1200:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
 1218:  		EndCaseGroup
 1220:  	EndSwitch
		EndIf
 1228:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
 123C:  Call     UseIdleAnimation 	( .Actor:Self .True )
 1250:  Return
 1258:  End
}
 
%spiny surge is pretty weird

%it's "working" for now

%modify the script to fix the x pos and spiny velocity
%velocity works "properly", but still need to fix x pos
#new:Function $Function_SpinySpawn %this looks like something that spawns the spinies
{
    0:  ADDIU     SP, SP, FFA8
    4:  LAW       V1, 800DC14C
    C:  LIF       F0, 120.0 %x pos?
   14:  ADDIU     A0, R0, 8C
   18:  SW        RA, 28 (SP)
   1C:  SDC1      F28, 50 (SP)
   20:  SDC1      F26, 48 (SP)
   24:  SDC1      F24, 40 (SP)
   28:  SDC1      F22, 38 (SP)
   2C:  SDC1      F20, 30 (SP)
   30:  LWC1      F24, 144 (V1)
   34:  LBU       V0, 191 (V1)
   38:  ADD.S     F24, F24, F0
   3C:  LWC1      F22, 148 (V1)
   40:  MTC1      V0, F0
   44:  NOP
   48:  CVT.S.W   F0, F0
   4C:  ADD.S     F22, F22, F0
   50:  LIF       F26, 20.0
   58:  LWC1      F28, 14C (V1)
   5C:  JAL       ~Func:rand_int %determining spiny x vel?
   60:  ADD.S     F22, F22, F26
   64:  ADDIU      V0, V0, A %+ 10
   68:  MTC1      V0, F20
   6C:  NOP
   70:  CVT.S.W   F20, F20
   74:  JAL       ~Func:rand_int %spiny y vel?
   78:  ADDIU     A0, R0, 50
   7C:  DADDU     A0, R0, R0
   80:  ADDIU     V0, V0, A % + 10
   84:  MTC1      V0, F0
   88:  NOP
   8C:  CVT.S.W   F0, F0
   90:  SWC1      F0, 14 (SP)
   94:  LIF       F0, 1.5
   9C:  MFC1      A1, F24
   A0:  MFC1      A3, F28
   A4:  MFC1      A2, F22
   A8:  ADDI      V0, R0, FFED	%(used to be 1E)  it does weird stuff to velocity (don't set it to 0) high absolute values result in it going more vertically, lower abso values result in more horizontally, but lower values increase speed?
   AC:  SWC1      F20, 10 (SP)
   B0:  SWC1      F26, 18 (SP)
   B4:  SW        V0, 20 (SP)
   B8:  JAL       80071E10		%called once per spiny (I bet this is the actual spiny spawning function)
   BC:  SWC1      F0, 1C (SP)
   C0:  LW        RA, 28 (SP)
   C4:  LDC1      F28, 50 (SP)
   C8:  LDC1      F26, 48 (SP)
   CC:  LDC1      F24, 40 (SP)
   D0:  LDC1      F22, 38 (SP)
   D4:  LDC1      F20, 30 (SP)
   D8:  ADDIU     V0, R0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 58
}

/%
	80071E10 is a weird function
	calls 8005A564 with increasing values of A0 (68 - 86)
	then calls a function from a pointer
%/
 
@ $Script_TakeTurn_80226924
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00100003 )
   8C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   A8:  Call     SetGoalPos 	( .Actor:Self 00000014 0000001E *Var[2] )
   C4:  Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
   E0:  Call     SetAnimation 	( .Actor:Self 00000001 00100001 )
       	Call 	 RandInt ( 100` *Var[D] ) 
		Switch (*Var[D])
			Case < 60` %spiny surge is not that strong of a move, so 40% chance
				Set *Var[B] 0
			Default
				Set *Var[B] 1
		EndSwitch
		If (*Var[B] == 1)
			%the action command time ~= 3C
			%60
			%(the time where the spinies are appearing)
			Loop F
				Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .False )
				Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[0]  00000003 
				Add  *Var[1]  00000022 
				Add  *Var[2]  00000005 
				Call     SetPartPos 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
				Call     SetAnimation 	( .Actor:Self 00000001 0010000F )
				Wait	 2
				Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .True )
				Call     SetAnimation 	( .Actor:Self 00000001 00100001 )
				Call     $Function_SpinySpawn ( )
				Wait     2
			EndLoop
			Call	 SetTargetActor ( .Actor:Self .Actor:Player )
			Call	 SetGoalToTarget ( .Actor:Self )
			Set *Var[0] 0
			Call     EnemyTestTarget ( .Actor:Self *Var[1] 00000000 00000000 00000001 00000010 )
			Switch *Var[1]
				CaseOR == 00000005
				CaseOR == 00000006
					Goto 1
				EndCaseGroup
			EndSwitch
			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10040000 00000000 00000000 00000004 00000020 ) %if this is the first attack you get hit by, it triggers a hp bug
			Label 1
			Wait	 10` %10 frames, why not
			Call	 SetTargetActor ( .Actor:Self .Actor:Partner )
			Call	 SetGoalToTarget ( .Actor:Self )
			Call     EnemyTestTarget ( .Actor:Self *Var[1] 00000000 00000000 00000001 00000010 )
			Switch *Var[1]
				CaseOR == 00000005
				CaseOR == 00000006
					Goto 2
				EndCaseGroup
			EndSwitch
			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10040000 00000000 00000000 00000002 00000020 )
			Label 2
			Switch  *Var[0] 
				CaseOR  ==  00000000 
				CaseOR  ==  00000002 
					Wait     0000000F 
					Call     YieldTurn   	( )
					Call     UseBattleCamPreset 	( 00000002 )
					Call     MoveBattleCamOver 	( 00000008 )
					Call     SetAnimation 	( .Actor:Self 00000001 00100003 )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
				EndCaseGroup
			EndSwitch		
		Else
   F8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  128:  	If  *Var[A]  &  00080000 
  138:  		Add  *Var[0]  FFFFFFFF 
  148:  		Add  *Var[1]  00000004 
  158:  		Add  *Var[2]  00000002 
  168:  		Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  188:  	Else
  190:  		Add  *Var[0]  FFFFFFFD 
  1A0:  		Add  *Var[1]  0000000A 
  1B0:  		Add  *Var[2]  00000005 
  1C0:  		Call     SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  1E0:  	EndIf
  1E8:  	Call     SetPartPos 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
  208:  	Wait     00000001 
  214:  	Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .False )
  230:  	Call     SetAnimation 	( .Actor:Self 00000003 00100014 )
  248:  	Call     SetAnimation 	( .Actor:Self 00000001 0010000F )
  260:  	Loop     00000004 
  26C:  		Call     GetStatusFlags ( .Actor:Self *Var[A] )
  280:  		If  *Var[A]  &  00080000 
  290:  			AddF  *Var[1]  *Fixed[2.4003906] 
  2A0:  		Else
  2A8:  			Add  *Var[1]  00000006 
  2B8:  		EndIf
  2C0:  		Call     SetPartPos 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
  2E0:  		Wait     00000001 
  2EC:  	EndLoop
  2F4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  310:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  324:  	If  *Var[A]  &  00080000 
  334:  		Add  *Var[0]  FFFFFFFD 
  344:  		Add  *Var[1]  00000010 
  354:  		Add  *Var[2]  00000002 
  364:  		SetF  *Var[3]  *Fixed[0.40039062] 
  374:  	Else
  37C:  		Add  *Var[0]  FFFFFFF8 
  38C:  		Add  *Var[1]  00000028 
  39C:  		Add  *Var[2]  00000005 
  3AC:  		SetF  *Var[3]  *Fixed[1.0] 
  3BC:  	EndIf
  3C4:  	Call     PlayEffect  	( ~FX:EnergyIn:ShortStreaks *Var[0] *Var[1] *Var[2] *Var[3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  408:  	Call     PlaySoundAtActor 	( .Actor:Self 000002C5 )
  41C:  	Thread
  424: 	 		Loop     0000000F 
  430: 	 			Call     SetActorDispOffset ( FFFFFF81 00000001 00000000 00000000 )
  44C: 	 			Call     SetPartDispOffset 	( .Actor:Self 00000003 00000001 00000000 00000000 )
  46C: 	 			Wait     00000001 
  478: 	 			Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF 00000000 00000000 )
  494:  			Call     SetPartDispOffset 	( .Actor:Self 00000003 FFFFFFFF 00000000 00000000 )
  4B4:  			Wait     00000001 
  4C0:  		EndLoop
  4C8:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  4E4:  		Call     SetPartDispOffset 	( .Actor:Self 00000003 00000000 00000000 00000000 )
  504:  	EndThread
  50C:  	Call     SetGoalToTarget 	( .Actor:Self )
  51C:  	Wait     0000000A 
  528:  	Call     SetAnimation 	( .Actor:Self 00000001 00100010 )
  540:  	Wait     0000000A 
  54C:  	Call     SetAnimation 	( .Actor:Self 00000001 00100011 )
  564:  	Wait     0000000A 
  570:  	Call     SetAnimation 	( .Actor:Self 00000001 00100012 )
  588:  	Wait     00000003 
  594:  	Call     8026FA00 ( FFFFFF81 00000003 00000002 00000000 00000000 )
  5B4:  	Call     PlaySoundAtActor 	( .Actor:Self 0000201B )
  5C8:  	Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  5EC:  	Switch  *Var[0] 
  5F8:  		CaseOR  ==  00000006 
  604:  		CaseOR  ==  00000005 
  610:  			Set  *Var[A]  *Var[0] 
  620:  			Call     SetAnimation 	( .Actor:Self 00000003 00100015 )
  638:  			Call     SetPartJumpGravity 	( .Actor:Self 00000003 *Fixed[1.5] )
  650:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  66C:  			Call     RandInt     	( 00000064 *Var[3] )
  680:  			Sub  *Var[3]  00000032 
  690:  			Add  *Var[0]  *Var[3] 
  6A0:  			Call     JumpPartTo 	( .Actor:Self 00000003 *Var[0] 00000000 *Var[2] 00000014 .True )
  6C8:  			Thread
  6D0:  				Add  *Var[0]  FFFFFFCE 
  6E0:  				Call     JumpPartTo 	( .Actor:Self 00000003 *Var[0] 00000000 *Var[2] 0000000F .True )
  708:  				Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .True )
  724:  			EndThread
  72C:  			If  *Var[A]  ==  00000005 
  73C:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  760:  			EndIf
  768:  			Wait     0000000F 
  774:  			Call     YieldTurn   	( )
  780:  			Call     UseBattleCamPreset 	( 00000002 )
  790:  			Call     MoveBattleCamOver 	( 0000003C )
  7A0:  			Call     SetAnimation 	( .Actor:Self 00000001 00100003 )
  7B8:  			Call     SetGoalToHome 	( .Actor:Self )
  7C8:  			Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  7E4:  			Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7F8:  			Call     UseIdleAnimation 	( .Actor:Self .True )
  80C:  			Return
  814:  		EndCaseGroup
  81C:  	EndSwitch
  824:  	Call     SetAnimation 	( .Actor:Self 00000003 00100015 )
  83C:  	Call     SetPartJumpGravity 	( .Actor:Self 00000003 *Fixed[1.5] )
  854:  	Call     SetGoalToTarget 	( .Actor:Self )
  864:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  880:  	Call     JumpPartTo 	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] 00000014 .True )
  8A8:  	Thread
  8B0:  		Add  *Var[0]  FFFFFFCE 
  8C0:  		Call     JumpPartTo 	( .Actor:Self 00000003 *Var[0] 00000000 *Var[2] 0000000F .True )
  8E8:  		Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .True )
  904:  	EndThread
  90C:  	Call     GetActorVar 	( .Actor:Self 00000001 *Var[9] )
  924:  	Switch  *Var[9] 
  930:  		Case  ==  00000000 
  93C:  			Wait     00000002 
  948:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10040000 00000000 00000000 00000003 00000020 )
  970:  		Case  ==  00000001 
  97C:  			Wait     00000002 
  988:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10040000 00000000 00000000 00000004 00000020 )
  9B0:  		Case  ==  00000002 
  9BC:  			Wait     00000002 
  9C8:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10040000 00000000 00000000 00000005 00000020 )
  9F0:  	EndSwitch
  9F8:  	Switch  *Var[0] 
  A04:  		CaseOR  ==  00000000 
  A10:  		CaseOR  ==  00000002 
  A1C:  			Wait     0000000F 
  A28:  			Call     YieldTurn   	( )
  A34:  			Call     UseBattleCamPreset 	( 00000002 )
  A44:  			Call     MoveBattleCamOver 	( 00000008 )
  A54:  			Call     SetAnimation 	( .Actor:Self 00000001 00100003 )
  A6C:  			Call     SetGoalToHome 	( .Actor:Self )
  A7C:  			Call     FlyToGoal  	( .Actor:Self 0000001E 00000000 .Easing:CosInOut )
  A98:  		EndCaseGroup
  AA0:  	EndSwitch
		EndIf
  AA8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  ABC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  AD0:  Return
  AD8:  End
}
  
@ $Gulpit
{
[MaxHP]        14`b %thicc bois
[AirLift]      30`b %too heavy to pick up
}

@ $StatusTable_80227E40
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      60`
.Status:Poison     80`
.Status:Frozen      0`
.Status:Dizzy      10` %no
.Status:Fear        0`
.Status:Static     10`
.Status:Paralyze   50` %80 -> 50
.Status:Shrink     75`
.Status:Stop       85`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End 
}

@ $Script_80228518 %lick
{
[3AC] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000000 00000000 80010164 00000004 00000020 ) %it has paralyze proc though
}

@ $Script_8022898C
{
[674]  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 0000000A 00000020 ) %big rock
[6B4] Call EnemyDamageTarget ( .Actor:Self *Var[0] 10000000 00000000 00000000 00000008 00000020 ) %small but not that small
}

@ $DefenseTable_80229B0C
{
.Element:Normal 00000002 %beefy
.Element:Fire   FFFFFFFF %fire is still effective though
.Element:Ice    00000063
.Element:End
}

@ $StatusTable_80229B28 %sleep doesn't work, other statuses are less effective
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear      100`
.Status:Static     30`
.Status:Paralyze   60`
.Status:Shrink     60`
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -1`
.Status:End
}

@ $PartsTable_80229BD4 %spiky :)
{
00800000 01000000 F42000FF $IdleAnimations_80229AC0 $DefenseTable_80229B0C 00000018 00000000 08FD0000 00000000 
}

@ $WhiteClubba
{
% stats
[MaxHP]        15`b %slightly less than red clubba, but they have more defense
[Escape]       40`b 
[Item]         0`b 
[AirLift]      0`b 
[Hurricane] 0`b % Bow's "Spook" as well
}

@ $Script_HandleEvent_80229C7C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		SetConst  *Var[0]  00000001 
   70:  		SetConst  *Var[1]  003A0104 
   80:  		ExecWait DoNormalHit 
   8C:  	EndCaseGroup
   94:  	Case  ==  .Event:BurnHit % E
   A0:  		SetConst  *Var[0]  00000001 
   B0:  		SetConst  *Var[1]  003A0106 
   C0:  		SetConst  *Var[2]  003A0107 
   D0:  		ExecWait DoBurnHit 
   DC:  	Case  ==  .Event:BurnDeath % 24
   E8:  		SetConst  *Var[0]  00000001 
   F8:  		SetConst  *Var[1]  003A0106 
  108:  		SetConst  *Var[2]  003A0107 
  118:  		ExecWait DoBurnHit 
  124:  		SetConst  *Var[0]  00000001 
  134:  		SetConst  *Var[1]  003A0107 
  144:  		ExecWait DoDeath 
  150:  		Return
  158:  	Case  ==  .Event:SpinSmashHit % B
  164:  		SetConst  *Var[0]  00000001 
  174:  		SetConst  *Var[1]  003A0104 
  184:  		ExecWait DoSpinSmashHit 
  190:  	Case  ==  .Event:SpinSmashDeath % 21
  19C:  		SetConst  *Var[0]  00000001 
  1AC:  		SetConst  *Var[1]  003A0104 
  1BC:  		ExecWait DoSpinSmashHit 
  1C8:  		SetConst  *Var[0]  00000001 
  1D8:  		SetConst  *Var[1]  003A0104 
  1E8:  		ExecWait DoDeath 
  1F4:  		Return
  1FC:  	Case  ==  .Event:ShockHit % 2F
  208:  		SetConst  *Var[0]  00000001 
  218:  		SetConst  *Var[1]  003A0104 
  228:  		ExecWait DoShockHit 
  234:  		SetConst  *Var[0]  00000001 
  244:  		SetConst  *Var[1]  003A0104 
  254:  		ExecWait DoJumpBack 
  260:  		SetConst  *Var[0]  00000001 
  270:  		SetConst  *Var[1]  003A0102 
  280:  		ExecWait DoReturnHome 
  28C:  	Case  ==  .Event:ShockDeath % 26
  298:  		SetConst  *Var[0]  00000001 
  2A8:  		SetConst  *Var[1]  003A0104 
  2B8:  		ExecWait DoShockHit 
  2C4:  		SetConst  *Var[0]  00000001 
  2D4:  		SetConst  *Var[1]  003A0104 
  2E4:  		ExecWait DoDeath 
  2F0:  		Return
  2F8:  	CaseOR  ==  00000017 % 17
  304:  	CaseOR  ==  .Event:Immune % 19
  310:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  31C:  		SetConst  *Var[0]  00000001 
  32C:  		SetConst  *Var[1]  003A0101 
  33C:  		ExecWait DoImmune 
  348:  	EndCaseGroup
  350:  	Case  ==  .Event:Death % 20
  35C:  		SetConst  *Var[0]  00000001 
  36C:  		SetConst  *Var[1]  003A0104 
  37C:  		ExecWait DoNormalHit 
  388:  		Wait     0000000A 
  394:  		SetConst  *Var[0]  00000001 
  3A4:  		SetConst  *Var[1]  003A0104 
  3B4:  		ExecWait DoDeath 
  3C0:  		Return
  3C8:  	Case  ==  .Event:RecoverStatus % 31
  3D4:  		SetConst  *Var[0]  00000001 
  3E4:  		SetConst  *Var[1]  003A0101 
  3F4:  		ExecWait DoRecover 
  400:  	Case  ==  .Event:ScareAway % 39
  40C:  		SetConst  *Var[0]  00000001 
  41C:  		SetConst  *Var[1]  003A0102 
  42C:  		SetConst  *Var[2]  003A0104 
  43C:  		ExecWait DoScareAway 
  448:  		Return
  450:  	Case  ==  .Event:BeginAirLift % 3A
  45C:  		SetConst  *Var[0]  00000001 
  46C:  		SetConst  *Var[1]  003A0104 
  47C:  		ExecWait DoAirLift 
  488:  	Case  ==  .Event:BlowAway % 16
  494:  		SetConst  *Var[0]  00000001 
  4A4:  		SetConst  *Var[1]  003A0104 
  4B4:  		ExecWait DoBlowAway 
  4C0:  		Return
			Case  ==  .Event:SpikeTaunt
				Call     GetStatusFlags ( .Actor:Self *Var[0] )
				If  *Var[0]  !&  0035D000 
					Call     SetAnimation 	( .Actor:Self 00000001 003A0108 ) %swing once
				EndIf
				Wait     0000000A 
  4C8:  	Default
  4D0:  EndSwitch
  4D8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  4EC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  500:  Return
  508:  End
}
  
%they don't have the red clubba multihit but they're still powerful (5,6,7 hit + 2 turn shrink each)
@ $Script_TakeTurn_8022A18C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     GetBattlePhase ( *Var[0] )
   84:  If  *Var[0]  ==  .Phase:FirstStrike % 1
   94:  	Call     SetGoalToTarget 	( .Actor:Self )
   A4:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   C0:  	Add  *Var[0]  0000001B 
   D0:  	Set  *Var[1]  00000000 
   E0:  	Sub  *Var[2]  00000006 
   F0:  	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  10C:  	Wait     0000000F 
  118:  Else
  120:  	Call     SetAnimation 	( .Actor:Self 00000001 003A0102 )
  138:  	Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  14C:  	Call     SetGoalToTarget 	( .Actor:Self )
  15C:  	Call     GetStatusFlags ( .Actor:Self *Var[0] )
  170:  	If  *Var[0]  !&  00080000 
  180:  		Call     AddGoalPos 	( .Actor:Self 0000001B 00000000 FFFFFFFA )
  19C:  	Else
  1A4:  		Call     AddGoalPos 	( .Actor:Self 0000000A 00000000 FFFFFFFA )
  1C0:  	EndIf
  1C8:  	Call     RunToGoal   	( .Actor:Self 00000000 .False )
  1E0:  	Call     SetAnimation 	( .Actor:Self 00000001 003A0101 )
  1F8:  	Wait     0000000A 
  204:  EndIf
  20C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  230:  Switch  *Var[0] 
  23C:  	CaseOR  ==  .HitResult:Miss % 6
  248:  	CaseOR  ==  .HitResult:Lucky % 5
  254:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C5 )
  268:  		Call     SetAnimation 	( .Actor:Self 00000001 003A0108 )
  280:  		Wait     00000014 
  28C:  		If  *Var[0]  ==  00000005 
  29C:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  2C0:  			Wait     00000014 
  2CC:  		EndIf
  2D4:  		Call     UseBattleCamPreset 	( 00000002 )
  2E4:  		Call     YieldTurn   	( )
  2F0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  304:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  320:  		SetConst  *Var[0]  00000001 
  330:  		SetConst  *Var[1]  003A0102 
  340:  		ExecWait DoReturnHome 
  34C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  364:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  378:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  38C:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3A0:  		Return
  3A8:  	EndCaseGroup
  3B0:  EndSwitch
  3B8:  Call     GetBattlePhase ( *Var[0] )
  3C8:  If  *Var[0]  ==  .Phase:FirstStrike % 1
  3D8:  	Goto     00000032 %first strike is the multihit ;)
  3E4:  EndIf
  3EC:  Call     GetActorHP  	( .Actor:Self *Var[0] )
  400:  Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
  414:  MulF  *Var[0]  *Fixed[100.0] 
  424:  DivF  *Var[0]  *Var[1] 
  434:  If  *Var[0]  <  0000001E 
  444:  	Goto     00000032 
  450:  EndIf
  458:  Call     RandInt     	( 00000064 *Var[0] )
  46C:  If  *Var[0]  <  00000032 %more multihit
  47C:  	Goto     00000032 
  488:  EndIf
  490:  Label    00000028 
  49C:  Call     SetAnimation 	( .Actor:Self 00000001 003A0109 )
  4B4:  Wait     00000018 %slightly longer delay 15 -> 24
  4C0:  Call     PlaySoundAtActor 	( .Actor:Self 000020C5 )
  4D4:  Call     SetAnimation 	( .Actor:Self 00000001 003A010A )
  4EC:  Wait     00000002 
  4F8:  Wait     00000002 
  504:  Call     SetGoalToTarget 	( .Actor:Self )
  514:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080432 0000000A 00000020 )
  53C:  Thread
  544:  	Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[1.5] )
  560:  EndThread
  568:  Goto     00000064 
  574:  Label    00000032 
  580:  Call     SetAnimation 	( .Actor:Self 00000001 003A0109 )
  598:  Wait     0000000F 
  5A4:  Call     PlaySoundAtActor 	( .Actor:Self 000020C5 )
  5B8:  Call     SetAnimation 	( .Actor:Self 00000001 003A010A )
  5D0:  Wait     00000002 
  5DC:  Wait     00000002 
  5E8:  Call     SetGoalToTarget 	( .Actor:Self )
  5F8:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080232 00000004 00000010 )
  620:  Thread
  628:  	Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[1.5] )
  644:  EndThread
  64C:  Call     GetActorHP  	( .Actor:Player *Var[0] )
  660:  If  *Var[0]  ==  00000000 
  670:  	Goto     00000064 
  67C:  EndIf
  684:  Call     SetAnimation 	( .Actor:Self 00000001 003A0109 )
  69C:  Wait     0000000F 
  6A8:  Call     PlaySoundAtActor 	( .Actor:Self 000020C5 )
  6BC:  Call     SetAnimation 	( .Actor:Self 00000001 003A010A )
  6D4:  Wait     00000002 
  6E0:  Wait     00000002 
  6EC:  Call     SetGoalToTarget 	( .Actor:Self )
  6FC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080232 00000005 00000040 )
  724:  Thread
  72C:  	Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[1.5] )
  748:  EndThread
  750:  Call     GetActorHP  	( .Actor:Player *Var[0] )
  764:  If  *Var[0]  ==  00000000 
  774:  	Goto     00000064 
  780:  EndIf
  788:  Call     SetAnimation 	( .Actor:Self 00000001 003A0109 )
  7A0:  Wait     0000000F 
  7AC:  Call     PlaySoundAtActor 	( .Actor:Self 000020C5 )
  7C0:  Call     SetAnimation 	( .Actor:Self 00000001 003A010A )
  7D8:  Wait     00000002 
  7E4:  Wait     00000002 
  7F0:  Call     SetGoalToTarget 	( .Actor:Self )
  800:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080232 00000006 00000020 )
  828:  Thread
  830:  	Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[1.5] )
  84C:  EndThread
  854:  Label    00000064 
  860:  Switch  *Var[0] 
  86C:  	CaseOR  ==  00000000 
  878:  	CaseOR  ==  00000002 
  884:  		Call     UseBattleCamPreset 	( 00000002 )
  894:  		Wait     00000013 
  8A0:  		Call     YieldTurn   	( )
  8AC:  		SetConst  *Var[0]  00000001 
  8BC:  		SetConst  *Var[1]  003A0102 
  8CC:  		ExecWait DoReturnHome 
  8D8:  	EndCaseGroup
  8E0:  EndSwitch
  8E8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8FC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  910:  Return
  918:  End
}
  
%no more magikoopa variants

#delete $DefenseTable_8022C310
#delete $DefenseTable_8022C31C
#delete $StatusTable_8022C328
#delete $StatusTable_8022C3D4
#delete $PartsTable_8022C480
#delete $PartsTable_8022C4A4
#delete $GRYMagikoopa
#delete $FlyingGRYMagikoopa
#delete $IdleAnimations_8022C560
#delete $IdleAnimations_8022C5AC
#delete $IdleAnimations_8022C5F8
#delete $Script_Idle_8022C604
#delete $Script_HandleEvent_8022C614
#delete $Script_8022CB2C
#delete $Script_8022CC38
#delete $Script_HandleEvent_8022D234
#delete $Script_Init_8022E748
#delete $Script_Init_8022E7EC
#delete $Script_TakeTurn_8022E890
#delete $Script_GRYMagikoopa_ShapeSpell
#delete $Script_GRYMagikoopa_WandStrike

@ $FrostPiranha
{
% stats
[MaxHP]        12`b %minor hp boost 
[Escape] 	   40`b 
}

@ $DefenseTable_8022AAFC
{
.Element:Normal 00000001 %hard
.Element:Fire   FFFFFFFD %-3 def now though
.Element:Ice    00000063
.Element:End
}

@ $StatusTable_8022AB18
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      50` %na
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0` %ice is a bad conductor 
.Status:Shrink     60`
.Status:Stop       85`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_8022BD44
{
[4B0] Call EnemyDamageTarget ( .Actor:Self *Var[0] 40000008 0000FFFF 00004364 00000003 00000020 ) %freeze
}

@ $Script_8022B3AC %chomp for 4,5,6
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *Var[0] )
   4C:  If  *Var[0]  ==  .Phase:FirstStrike % 1
   5C:  	Call     SetAnimation 	( .Actor:Self 00000001 00360118 )
   74:  	Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
   8C:  	Wait     00000008 
   98:  	Call     SetGoalToTarget 	( .Actor:Self )
   A8:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   C4:  	Add  *Var[0]  0000001B 
   D4:  	Set  *Var[1]  00000000 
   E4:  	Set  *Var[3]  *Var[0] 
   F4:  	Set  *Var[4]  *Var[1] 
  104:  	Set  *Var[5]  *Var[2] 
  114:  	Call     GetActorPos 	( .Actor:Player *Var[6] *Var[7] *Var[8] )
  130:  	Add  *Var[3]  *Var[6] 
  140:  	Add  *Var[4]  *Var[7] 
  150:  	Add  *Var[5]  *Var[8] 
  160:  	Div  *Var[3]  00000002 
  170:  	Div  *Var[4]  00000002 
  180:  	Div  *Var[5]  00000002 
  190:  	Call     UseBattleCamPreset 	( 00000013 )
  1A0:  	Call     SetBattleCamTarget 	( *Var[3] *Var[4] *Var[5] )
  1B8:  	Call     SetBattleCamZoom  	( 0000012C )
  1C8:  	Call     SetBattleCamOffsetZ 	( 00000028 )
  1D8:  	Wait     00000014 
  1E4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  1F8:  	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  214:  	Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  22C:  	Call     SetAnimation 	( .Actor:Self 00000001 00360117 )
  244:  	Wait     00000008 
  250:  Else
  258:  	Call     UseBattleCamPreset 	( 0000003F )
  268:  	Call     BattleCamTargetActor ( .Actor:Self )
  278:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  290:  	Call     SetAnimation 	( .Actor:Self 00000001 00360103 )
  2A8:  	Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  2BC:  	Call     SetAnimation 	( .Actor:Self 00000001 00360103 )
  2D4:  	Call     SetGoalToTarget 	( .Actor:Self )
  2E4:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  300:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  314:  	If  *Var[A]  &  00080000 
  324:  		Add  *Var[0]  0000000A 
  334:  	Else
  33C:  		Add  *Var[0]  0000001B 
  34C:  	EndIf
  354:  	Set  *Var[1]  00000000 
  364:  	Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  380:  	Call     RunToGoal   	( .Actor:Self 00000000 .False )
  398:  	Call     SetAnimation 	( .Actor:Self 00000001 00360101 )
  3B0:  EndIf
		Set *Var[E] 4
		Loop 3 %chomp three times
  3B8:  Thread
  3C0:  	Wait     00000008 
  3CC:  	Call     PlaySoundAtActor 	( .Actor:Self 000020DE )
  3E0:  EndThread
  3E8:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000001 00000010 )
  40C:  Switch  *Var[A] 
  418:  	CaseOR  ==  .HitResult:Miss % 6
  424:  	CaseOR  ==  .HitResult:Lucky % 5
  430:  		Call     SetAnimation 	( .Actor:Self 00000001 00360105 )
  448:  		Wait     0000000A 
  454:  		Call     SetAnimation 	( .Actor:Self 00000001 00360106 )
  46C:  		Wait     00000006 
  478:  		Call     SetAnimation 	( .Actor:Self 00000001 00360107 )
  490:  		If  *Var[A]  ==  00000005 
  4A0:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4C4:  		EndIf
  4CC:  		Wait     0000000E 
  4D8:  		Call     UseBattleCamPreset 	( 00000002 )
  4E8:  		Call     YieldTurn   	( )
  4F4:  		Call     GetBattlePhase ( *Var[0] )
  504:  		If  *Var[0]  ==  .Phase:FirstStrike % 1
  514:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  528:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  540:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleDig )
  554:  			Call     SetAnimation 	( .Actor:Self 00000001 00360118 )
  56C:  			Wait     0000000A 
  578:  			Call     SetGoalToHome 	( .Actor:Self )
  588:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5A4:  			Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5C0:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  5D4:  			Call     SetAnimation 	( .Actor:Self 00000001 00360117 )
  5EC:  			Wait     0000000A 
  5F8:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  610:  		Else
  618:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  630:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  644:  			Call     SetActorYaw 	( .Actor:Self 000000B4 )
  658:  			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  674:  			ExecWait $Script_8022AD6C 
  680:  			Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  698:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  6B0:  		EndIf
  6B8:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  6CC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  6E0:  		Return
  6E8:  	EndCaseGroup
  6F0:  EndSwitch
  6F8:  Call     SetAnimation 	( .Actor:Self 00000001 00360105 )
  710:  Wait     00000007 %A -> 7
  71C:  Call     SetAnimation 	( .Actor:Self 00000001 00360106 )
  734:  Wait     00000001 
  740:  Wait     00000002 
  74C:  Call     SetGoalToTarget 	( .Actor:Self )
		Add *Var[E] 1
  75C:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 *Var[E] 00000020 )
		Wait 00000005 
		EndLoop
  784:  Set  *Var[F]  *Var[0] 
  794:  Switch  *Var[F] 
  7A0:  	CaseOR  ==  00000000 
  7AC:  	CaseOR  ==  00000002 
  7B8:  		Call     UseBattleCamPreset 	( 00000002 )
  7C8:  		Wait     0000000A 
  7D4:  		Call     SetAnimation 	( .Actor:Self 00000001 00360107 )
  7EC:  		Wait     00000014 
  7F8:  		Call     YieldTurn   	( )
  804:  		Call     GetBattlePhase ( *Var[0] )
  814:  		If  *Var[0]  ==  .Phase:FirstStrike % 1
  824:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  838:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  850:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleDig )
  864:  			Call     SetAnimation 	( .Actor:Self 00000001 00360118 )
  87C:  			Wait     0000000A 
  888:  			Call     SetGoalToHome 	( .Actor:Self )
  898:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8B4:  			Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8D0:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  8E4:  			Call     SetAnimation 	( .Actor:Self 00000001 00360117 )
  8FC:  			Wait     0000000A 
  908:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  920:  		Else
  928:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  93C:  			ExecWait $Script_8022AD6C 
  948:  		EndIf
  950:  	EndCaseGroup
  958:  EndSwitch
  960:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  974:  Call     UseIdleAnimation 	( .Actor:Self .True )
  988:  Return
  990:  End
}
  
%add too much new stuff
#import newenemy/FrostPokey.bpat
#import newenemy/FrostPuff.bpat
#import newenemy/BlueSpikeTop.bpat
%#import newenemy/CrystalChomp.bpat
#import newenemy/PermafrostGuy.bpat
%#import newenemy/CryoGuy.bpat

@ $FormationTable
{
$SJIS_80231600 00000002 $Formation_00 $Stage_8022F3B4 00000000 
$SJIS_802315F4 00000009 $Formation_01 $Stage_8022F3B4 00000000 
$SJIS_802315E8 00000009 $Formation_02 $Stage_8022F3B4 00000000 
$SJIS_802315CC 00000008 $Formation_03 $Stage_8022F3B4 00000000 
$SJIS_802315A8 00000008 $Formation_04 $Stage_8022F3B4 00000000 % unused
$SJIS_80231578 00000009 $Formation_05 $Stage_8022F3B4 00000000 % unused
$SJIS_80231564 00000006 $Formation_06 $Stage_8022F3B4 00000000 
$SJIS_80231550 00000004 $Formation_07 $Stage_8022F3B4 00000000 
$SJIS_80231534 00000003 $Formation_08 $Stage_8022F3B4 00000000 % unused
$SJIS_8023150C 00000008 $Formation_09 $Stage_8022F3B4 00000000 
$SJIS_802314DC 00000009 $Formation_0A $Stage_8022F3B4 00000000 
$SJIS_802314C8 00000004 $Formation_0B $Stage_8022F3B4 00000000 
$SJIS_802314A0 00000004 $Formation_0C $Stage_8022F3B4 00000000 
$SJIS_80231470 00000004 $Formation_0D $Stage_8022F3B4 00000000 % unused (now spike top formation)
00000000 00000001 $Formation_0E $Stage_8022F3B4 00000000	%permafrost guy
00000000 00000003 $Formation_0F $Stage_8022F3B4 00000000	%frost puffs
00000000 00000004 $Formation_10 $Stage_8022F3B4 00000000	%frost puffs also
00000000 00000008 $Formation_11 $Stage_Pit1 00000000	%floor 61
00000000 00000009 $Formation_12 $Stage_Pit1 00000000	%floor 62
00000000 00000003 $Formation_13 $Stage_Pit1 00000000	%floor 63
00000000 00000004 $Formation_14 $Stage_Pit1 00000000	%floor 64
00000000 00000004 $Formation_15 $Stage_Pit1 00000000	%floor 65
00000000 00000000 00000000 00000000 00000000 % unused
}

@ $StageTable
{
$ASCII_80231634 $Stage_8022F3B4 
$ASCII_8023162C $Stage_8022F7EC 
$ASCII_80231624 $Stage_8022FB48 
$ASCII_8023161C $Stage_8022FEAC 
$ASCII_80231614 $Stage_80230230 
$ASCII_8023160C $Stage_80230644 
"pit_07" $Stage_Pit1
00000000 00000000 
}

#new:Stage $Stage_Pit1
{
"kpa_tex"
"pit_b01_shape"
"pit_b01_hit"
$Script_BeforeBattle_Pit
$Script_AfterBattle_Pit
00000000 
00000000 
00000000 
00000000 
00000000 
}

%to make things easier to add, I'm adding the pit scripts every time even when I don't need to
#new:Script $Script_BeforeBattle_Pit
{
	Return
	End
}

#new:Script $Script_AfterBattle_Pit
{
	Return
	End
}
	
/%
#new:Formation $Formation_00
$Duplighost 00000001 0000000A 00000000 00000000 00000000 00000000 
$Duplighost 00000002 00000009 00000000 00000000 00000000 00000000 
%/

@ $Formation_01 %bonus frost pokeys
{
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000013 00000000 00000000 00000000 00000000 
$FrostPokey 00000002 00000012 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000011 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230670 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023067C 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230688 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230694 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306A0 00000005 00000001 00000000 00000000 00000000 
}

@ $Formation_02 %frost puff
{
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000013 00000000 00000000 00000000 00000000 
$Gulpit 00000002 00000012 00000000 00000000 00000000 00000000 
$FrostPuff 00000007 00000011 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306AC 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306B8 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306C4 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306D0 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306DC 00000005 00000001 00000000 00000000 00000000 
}

@ $Formation_03
{
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000013 00000000 00000000 00000000 00000000 
$FrostPiranha 00000002 00000012 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306E8 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306F4 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230700 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023070C 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230718 00000005 00000001 00000000 00000000 00000000 
}
/%
#new:Formation $Formation_04
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$FrostPiranha 00000001 00000013 00000000 00000000 00000000 00000000 
$Gulpit 00000002 00000012 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230724 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230730 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023073C 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230748 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230754 00000005 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_05
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$FrostPiranha 00000001 00000013 00000000 00000000 00000000 00000000 
$Gulpit 00000002 00000012 00000000 00000000 00000000 00000000 
$FrostPiranha 00000003 00000011 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230760 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023076C 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230778 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230784 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230790 00000005 00000001 00000000 00000000 00000000 
%/
@ $Formation_06 %lets make this way too frosty
{
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPokey 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000007 00000000 00000000 00000000 00000000 
$FrostPuff 00000009 00000006 00000000 00000000 00000000 00000000 
$FrostPuff 0000000B 00000005 00000000 00000000 00000000 00000000 
}

@ $Formation_07 %we need more enemy diversity, so throw in a frost pokey
{
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000007 00000000 00000000 00000000 00000000 
}

%Re use this for pokey formation
@ $Formation_08
{
$FrostPokey 00000001 0000000A 00000000 00000000 00000000 00000000 
$FrostPokey 00000002 00000009 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000008 00000000 00000000 00000000 00000000 
}

/%
#new:Formation $Formation_09
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802307D8 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802307E4 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802307F0 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802307FC 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230808 00000005 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_0A
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$Gulpit 00000003 00000007 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230814 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230820 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023082C 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230838 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230844 00000005 00000001 00000000 00000000 00000000 
%/
@  $Formation_0B %+frost piranha and blue spike top
{
$WhiteClubba 00000000 0000000A 00000000 00000000 00000000 00000000 
$WhiteClubba 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$BlueSpikeTop 00000003 00000007 00000000 00000000 00000000 00000000 
}


@ $Formation_0C %2 frost pokeys
{
$WhiteClubba 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPokey 00000001 00000009 00000000 00000000 00000000 00000000 
$WhiteClubba 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0D %now 3 blue spike tops and a frost puff
{
$BlueSpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000 
$BlueSpikeTop 00000002 00000009 00000000 00000000 00000000 00000000 
$BlueSpikeTop 00000003 00000008 00000000 00000000 00000000 00000000 
$FrostPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_0E
{
$PermafrostGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_0F
{
$FrostPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$FrostPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$FrostPuff 00000006 00000008 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_10
{
$FrostPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$BlueSpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$BlueSpikeTop 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_11
{
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000013 00000000 00000000 00000000 00000000 
$Gulpit 00000002 00000012 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230670 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023067C 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230688 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230694 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306A0 00000005 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_12
{
$Gulpit 00000000 00000014 00000000 00000000 00000000 00000000 
$Gulpit 00000001 00000013 00000000 00000000 00000000 00000000 
$FrostPuff 00000006 00000012 00000000 00000000 00000000 00000000 
$FrostPuff 00000007 00000011 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230670 00000009 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_8023067C 00000008 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230688 00000007 00000001 00000000 00000000 00000000 
$GulpitRocks $Vector3D_80230694 00000006 00000000 00000000 00000000 00000000 
$GulpitRocks $Vector3D_802306A0 00000005 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_13
{
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$FrostPuff 00000006 00000008 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_14
{
$FrostPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPokey 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_15
{
$BlueSpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$FrostPokey 00000001 00000009 00000000 00000000 00000000 00000000 
$FrostPokey 00000002 00000008 00000000 00000000 00000000 00000000 
$FrostPokey 00000003 00000007 00000000 00000000 00000000 00000000 
}

/%
#new:Vector3D $Vector3D_Top1
{
0` 133` -25`
}

#new:Vector3D $Vector3D_Top2
{
40` 133` -25`
}

#new:Vector3D $Vector3D_Top3
{
80` 133` -25`
}

#new:Vector3D $Vector3D_Top4
{
120` 133` -25`
}

#new:Formation $Formation_16
{
$WhiteClubba 00000000 0000000A 00000000 00000000 00000000 00000000 
$WhiteClubba 00000001 00000009 00000000 00000000 00000000 00000000 
$BlueSpikeTop $Vector3D_Top3 00000008 00000001 00000000 00000000 00000000 
$BlueSpikeTop $Vector3D_Top4 00000008 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_17
{
$Duplighost 00000000 0000000A 00000000 00000000 00000000 00000000 
$Duplighost 00000001 00000009 00000000 00000000 00000000 00000000 
$BlueSpikeTop $Vector3D_Top3 00000008 00000001 00000000 00000000 00000000 
$BlueSpikeTop $Vector3D_Top4 00000007 00000001 00000000 00000000 00000000 
}

#new:Formation $Formation_18
{
$Duplighost 00000000 0000000A 00000000 00000000 00000000 00000000 
$Duplighost 00000001 00000009 00000000 00000000 00000000 00000000 
$Duplighost 00000002 00000008 00000000 00000000 00000000 00000000 
}
%/