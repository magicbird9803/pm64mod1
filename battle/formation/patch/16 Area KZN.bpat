%Spike Top

%fast, pretty high def and atk, but low health


@ $DefenseTable_8021C8B0 %4 -> 5 normal def
{
.Element:Normal 00000005
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

@ $DefenseTable_8021C8CC %1 flip def
{
.Element:Normal 00000001
.Element:End
}

@ $SpikeTop
{
% stats
[MaxHP]         5`b %4 -> 5 
[Escape]       30`b %fast 
[AirLift]      70`b %but not heavy at all
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $StatusTable_8021C8D8 %nerf sleep and dizzy
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      40`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      20`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   75`
.Status:Shrink     75`
.Status:Stop       90`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_SpikeTop_HandleEvent_Floor
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		SetConst  *Var[0]  00000001 
   70:  		SetConst  *Var[1]  004D0013 
   80:  		SetConst  *Var[2]  004D0015 
   90:  		ExecWait $Script_8021D57C 
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   D4:  		If  *Var[0]  !=  00000002 
   E4:  			SetConst  *Var[0]  00000001 
   F4:  			SetConst  *Var[1]  004D0016 
  104:  			SetConst  *Var[2]  004D0017 
  114:  			ExecWait DoBurnHit 
  120:  		Else
  128:  			SetConst  *Var[0]  00000001 
  138:  			SetConst  *Var[1]  004D0018 
  148:  			SetConst  *Var[2]  004D0018 
  158:  			ExecWait DoBurnHit 
  164:  		EndIf
  16C:  	Case  ==  .Event:BurnDeath % 24
  178:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  190:  		If  *Var[0]  !=  00000002 
  1A0:  			SetConst  *Var[0]  00000001 
  1B0:  			SetConst  *Var[1]  004D0016 
  1C0:  			SetConst  *Var[2]  004D0017 
  1D0:  			ExecWait DoBurnHit 
  1DC:  			SetConst  *Var[0]  00000001 
  1EC:  			SetConst  *Var[1]  004D0017 
  1FC:  			ExecWait DoDeath 
  208:  		Else
  210:  			SetConst  *Var[0]  00000001 
  220:  			SetConst  *Var[1]  004D0018 
  230:  			SetConst  *Var[2]  004D0018 
  240:  			ExecWait DoBurnHit 
  24C:  			SetConst  *Var[0]  00000001 
  25C:  			SetConst  *Var[1]  004D0018 
  26C:  			ExecWait DoDeath 
  278:  		EndIf
  280:  		Return
  288:  	Case  ==  .Event:SpinSmashHit % B
  294:  		SetConst  *Var[0]  00000001 
  2A4:  		SetConst  *Var[1]  004D0013 
  2B4:  		SetConst  *Var[2]  004D0015 
  2C4:  		ExecWait $Script_8021D57C 
  2D0:  		ExecWait DoSpinSmashHit 
  2DC:  	Case  ==  .Event:FlipTrigger % D
  				%check if did damage
				Call	 GetLastDamage ( .Actor:Self *Var[0] )
				If ( *Var[0] <= 0 )
					Return
				EndIf
  2E8:  		Call     SetActorVar 	( .Actor:Self 00000008 00000002 )
  300:  		Call     SetTargetOffset 	( .Actor:Self 00000001 00000001 00000014 )
  31C:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFD FFFFFFF8 )
  338:  		Call     SetActorVar 	( .Actor:Self 00000009 00000001 )
  350:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8021C8CC )
  368:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021CA68 )
  380:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00000010 .False )
  39C:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .True )
  3B4:  		Call     SetAnimation 	( .Actor:Self 00000001 004D0013 )
  3CC:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  3E8:  		Thread
  3F0:  			Wait     00000001 
  3FC:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  418:  			Wait     00000001 
  424:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFD3 )
  440:  			Wait     00000001 
  44C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFA6 )
  468:  			Wait     00000001 
  474:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF79 )
  490:  			Wait     00000001 
  49C:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFF4C )
  4B8:  			Wait     00000001 
  4C4:  		EndThread
  4CC:  		UseIntBuffer $IntTable_8021D5CC 
  4D8:  		Loop     00000013 
  4E4:  			Get1Int  *Var[0] 
  4F0:  			Call     SetActorDispOffset ( FFFFFF81 00000000 *Var[0] 00000000 )
  50C:  			Wait     00000001 
  518:  		EndLoop
  520:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  53C:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  558:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  574:  		Call     SetAnimation 	( .Actor:Self 00000001 004D0015 )
  58C:  	Case  ==  .Event:ShockHit % 2F
  598:  		SetConst  *Var[0]  00000001 
  5A8:  		SetConst  *Var[1]  004D0013 
  5B8:  		ExecWait DoShockHit 
  5C4:  		SetConst  *Var[0]  00000001 
  5D4:  		SetConst  *Var[1]  004D0013 
  5E4:  		ExecWait DoJumpBack 
  5F0:  		SetConst  *Var[0]  00000001 
  600:  		SetConst  *Var[1]  004D0008 
  610:  		ExecWait DoReturnHome 
  61C:  	Case  ==  .Event:ShockDeath % 26
  628:  		SetConst  *Var[0]  00000001 
  638:  		SetConst  *Var[1]  004D0013 
  648:  		ExecWait DoShockHit 
  654:  		SetConst  *Var[0]  00000001 
  664:  		SetConst  *Var[1]  004D0013 
  674:  		ExecWait DoDeath 
  680:  		Return
  688:  	Case  ==  00000017 % 17
  694:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  6AC:  		If  *Var[0]  ==  00000001 
  6BC:  			SetConst  *Var[0]  00000001 
  6CC:  			SetConst  *Var[1]  004D000B 
  6DC:  			ExecWait DoImmune 
  6E8:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000E )
  700:  			Wait     00000008 
  70C:  		Else
  714:  			SetConst  *Var[0]  00000001 
  724:  			SetConst  *Var[1]  004D0005 
  734:  			ExecWait DoImmune 
  740:  		EndIf
  748:  	Case  ==  .Event:Immune % 19
  754:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  76C:  		If  *Var[0]  ==  00000001 
  77C:  			SetConst  *Var[0]  00000001 
  78C:  			SetConst  *Var[1]  004D000B 
  79C:  			ExecWait DoImmune 
  7A8:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000C )
  7C0:  			Wait     00000008 
  7CC:  		Else
  7D4:  			SetConst  *Var[0]  00000001 
  7E4:  			SetConst  *Var[1]  004D0005 
  7F4:  			ExecWait DoImmune 
  800:  		EndIf
  808:  	Case  ==  .Event:SpikeTaunt % 1B
  814:  		Wait     0000000A 
  820:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  83C:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  850:  		If  *Var[3]  &  00080000 
  860:  			Add  *Var[1]  00000009 
  870:  		Else
  878:  			Add  *Var[1]  00000018 
  888:  		EndIf
  890:  		Call     PlayEffect  	( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8D4:  		Wait     00000014 
  8E0:  	Case  ==  .Event:Death % 20
  8EC:  		SetConst  *Var[0]  00000001 
  8FC:  		SetConst  *Var[1]  004D0013 
  90C:  		SetConst  *Var[2]  004D0015 
  91C:  		ExecWait $Script_8021D57C 
  928:  		ExecWait DoNormalHit 
  934:  		Wait     0000000A 
  940:  		SetConst  *Var[0]  00000001 
  950:  		SetConst  *Var[1]  004D0013 
  960:  		SetConst  *Var[2]  004D0015 
  970:  		ExecWait $Script_8021D57C 
  97C:  		ExecWait DoDeath 
  988:  		Return
  990:  	Case  ==  .Event:SpinSmashDeath % 21
  99C:  		SetConst  *Var[0]  00000001 
  9AC:  		SetConst  *Var[1]  004D0013 
  9BC:  		SetConst  *Var[2]  004D0015 
  9CC:  		ExecWait $Script_8021D57C 
  9D8:  		ExecWait DoSpinSmashHit 
  9E4:  		SetConst  *Var[0]  00000001 
  9F4:  		SetConst  *Var[1]  004D0013 
  A04:  		SetConst  *Var[2]  004D0015 
  A14:  		ExecWait $Script_8021D57C 
  A20:  		ExecWait DoDeath 
  A2C:  		Return
  A34:  	Case  ==  .Event:RecoverStatus % 31
  A40:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  A58:  		If  *Var[0]  ==  00000001 
  A68:  			SetConst  *Var[0]  00000001 
  A78:  			SetConst  *Var[1]  004D0003 
  A88:  			ExecWait DoRecover 
  A94:  		EndIf
  A9C:  	Case  ==  .Event:ScareAway % 39
  AA8:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  AC0:  		If  *Var[0]  ==  00000001 
  AD0:  			SetConst  *Var[0]  00000001 
  AE0:  			SetConst  *Var[1]  004D0008 
  AF0:  			SetConst  *Var[2]  004D0013 
  B00:  			ExecWait DoScareAway 
  B0C:  			Return
  B14:  		Else
  B1C:  			SetConst  *Var[0]  00000001 
  B2C:  			SetConst  *Var[1]  004D0005 
  B3C:  			ExecWait DoImmune 
  B48:  		EndIf
  B50:  	Case  ==  .Event:BeginAirLift % 3A
  B5C:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  B74:  		If  *Var[0]  ==  00000001 
  B84:  			SetConst  *Var[0]  00000001 
  B94:  			SetConst  *Var[1]  004D0008 
  BA4:  		Else
  BAC:  			SetConst  *Var[0]  00000001 
  BBC:  			SetConst  *Var[1]  004D0005 
  BCC:  		EndIf
  BD4:  		ExecWait DoAirLift 
  BE0:  	Case  ==  .Event:BlowAway % 16
  BEC:  		Call     SetActorDispOffset ( FFFFFF81 00000007 00000000 00000000 )
  C08:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  C20:  		If  *Var[0]  ==  00000001 
  C30:  			SetConst  *Var[0]  00000001 
  C40:  			SetConst  *Var[1]  004D0013 
  C50:  		Else
  C58:  			SetConst  *Var[0]  00000001 
  C68:  			SetConst  *Var[1]  004D0015 
  C78:  		EndIf
  C80:  		ExecWait DoBlowAway 
  C8C:  		Return
  C94:  	Case  ==  .Event:AirLiftFailed % 1F
  CA0:  		Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
  CB8:  		If  *Var[0]  ==  00000001 
  CC8:  			SetConst  *Var[0]  00000001 
  CD8:  			SetConst  *Var[1]  004D000B 
  CE8:  			ExecWait DoImmune 
  CF4:  			Call     SetAnimation 	( .Actor:Self 00000001 004D000C )
  D0C:  			Wait     00000008 
  D18:  		Else
  D20:  			SetConst  *Var[0]  00000001 
  D30:  			SetConst  *Var[1]  004D0005 
  D40:  			ExecWait DoImmune 
  D4C:  		EndIf
  D54:  	Default
  D5C:  EndSwitch
  D64:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  D78:  Call     UseIdleAnimation 	( .Actor:Self .True )
  D8C:  Return
  D94:  End
}

@ $Script_SpikeTop_TakeTurn_Ceiling %don't think ceiling spiketops are used, but I'm modifying it anyway
{
[8B4] Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000007 00000020 ) %4 -> 7
}

@ $Script_SpikeTop_TakeTurn_Floor
{
[7A0] Call     SetActorSpeed 	( .Actor:Self *Fixed[21.0] ) % from 14.0
[7D8] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 )
}


@ $PutridPiranha
{
[MaxHP]        15`b %12 -> 15
}

@ $StatusTable_8021B100
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      10`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   30`
.Status:Shrink     70`
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1` %why would a plant be weak to sleep
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_Bite
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     GetBattlePhase ( *Var[0] )
   4C:  If  *Var[0]  ==  .Phase:FirstStrike % 1
   5C:  	Call     SetAnimation 	( .Actor:Self 00000001 00360018 )
   74:  	Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
   8C:  	Wait     00000008 
   98:  	Call     SetGoalToTarget 	( .Actor:Self )
   A8:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   C4:  	Add  *Var[0]  0000001B 
   D4:  	Set  *Var[1]  00000000 
   E4:  	Set  *Var[3]  *Var[0] 
   F4:  	Set  *Var[4]  *Var[1] 
  104:  	Set  *Var[5]  *Var[2] 
  114:  	Call     GetActorPos 	( .Actor:Player *Var[6] *Var[7] *Var[8] )
  130:  	Add  *Var[3]  *Var[6] 
  140:  	Add  *Var[4]  *Var[7] 
  150:  	Add  *Var[5]  *Var[8] 
  160:  	Div  *Var[3]  00000002 
  170:  	Div  *Var[4]  00000002 
  180:  	Div  *Var[5]  00000002 
  190:  	Call     UseBattleCamPreset 	( 00000013 )
  1A0:  	Call     SetBattleCamTarget 	( *Var[3] *Var[4] *Var[5] )
  1B8:  	Call     SetBattleCamZoom  	( 0000012C )
  1C8:  	Call     SetBattleCamOffsetZ 	( 00000028 )
  1D8:  	Wait     00000014 
  1E4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  1F8:  	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  214:  	Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  22C:  	Call     SetAnimation 	( .Actor:Self 00000001 00360017 )
  244:  	Wait     00000008 
  250:  Else
  258:  	Call     UseBattleCamPreset 	( 0000003F )
  268:  	Call     BattleCamTargetActor ( .Actor:Self )
  278:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  290:  	Call     SetAnimation 	( .Actor:Self 00000001 00360003 )
  2A8:  	Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  2BC:  	Call     SetAnimation 	( .Actor:Self 00000001 00360003 )
  2D4:  	Call     SetGoalToTarget 	( .Actor:Self )
  2E4:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  300:  	Call     GetStatusFlags ( .Actor:Self *Var[A] )
  314:  	If  *Var[A]  &  00080000 
  324:  		Add  *Var[0]  0000000A 
  334:  	Else
  33C:  		Add  *Var[0]  0000001B 
  34C:  	EndIf
  354:  	Set  *Var[1]  00000000 
  364:  	Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  380:  	Call     RunToGoal   	( .Actor:Self 00000000 .False )
  398:  	Call     SetAnimation 	( .Actor:Self 00000001 00360001 )
  3B0:  EndIf
  		Call	 RandInt ( 00000002 *Var[D] )
		Set *VarD 1
  3B8:  Thread
			Switch *Var[D]
				Case == 0`
					Wait 00000003
				Case == 1`
					Wait 00000012
				Default
					Wait 00000008
			EndSwitch
  3CC:  	Call     PlaySoundAtActor 	( .Actor:Self 000020DE )
  3E0:  EndThread
  3E8:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000001 00000010 )
  40C:  Switch  *Var[A] 
  418:  	CaseOR  ==  .HitResult:Miss % 6
  424:  	CaseOR  ==  .HitResult:Lucky % 5
  430:  		Call     SetAnimation 	( .Actor:Self 00000001 00360005 )
  448:  		Wait     0000000A 
  454:  		Call     SetAnimation 	( .Actor:Self 00000001 00360006 )
  46C:  		Wait     00000006 
  478:  		Call     SetAnimation 	( .Actor:Self 00000001 00360007 )
  490:  		If  *Var[A]  ==  00000005 
  4A0:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4C4:  		EndIf
  4CC:  		Wait     0000000E 
  4D8:  		Call     UseBattleCamPreset 	( 00000002 )
  4E8:  		Call     MoveBattleCamOver 	( 00000014 )
  4F8:  		Call     YieldTurn   	( )
  504:  		Call     GetBattlePhase ( *Var[0] )
  514:  		If  *Var[0]  ==  .Phase:FirstStrike % 1
  524:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  538:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  550:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleDig )
  564:  			Call     SetAnimation 	( .Actor:Self 00000001 00360018 )
  57C:  			Wait     0000000A 
  588:  			Call     SetGoalToHome 	( .Actor:Self )
  598:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5B4:  			Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5D0:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  5E4:  			Call     SetAnimation 	( .Actor:Self 00000001 00360017 )
  5FC:  			Wait     0000000A 
  608:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  620:  		Else
  628:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  640:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  654:  			Call     SetActorYaw 	( .Actor:Self 000000B4 )
  668:  			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  684:  			ExecWait $Script_8021B354 
  690:  			Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  6A8:  			Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  6C0:  		EndIf
  6C8:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  6DC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  6F0:  		Return
  6F8:  	EndCaseGroup
  700:  EndSwitch
  708:  Call     SetAnimation 	( .Actor:Self 00000001 00360005 )
		Switch *Var[D]
			Case == 0`
				Wait 00000005
			Case == 1`
				Wait 00000014
			Default
				Wait 0000000A
		EndSwitch
  %720:  Wait     0000000A 
  72C:  Call     SetAnimation 	( .Actor:Self 00000001 00360006 )
  744:  Wait     00000001 
  750:  Wait     00000002 
  75C:  Call     SetGoalToTarget 	( .Actor:Self )
  76C:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  794:  Set  *Var[F]  *Var[0] 
  7A4:  Switch  *Var[F] 
  7B0:  	CaseOR  ==  00000000 
  7BC:  	CaseOR  ==  00000002 
  7C8:  		Call     UseBattleCamPreset 	( 00000002 )
  7D8:  		Wait     0000000A 
  7E4:  		Call     SetAnimation 	( .Actor:Self 00000001 00360007 )
  7FC:  		Wait     00000014 
  808:  		Call     YieldTurn   	( )
  814:  		Call     GetBattlePhase ( *Var[0] )
  824:  		If  *Var[0]  ==  .Phase:FirstStrike % 1
  834:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[7.0] )
  848:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  860:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleDig )
  874:  			Call     SetAnimation 	( .Actor:Self 00000001 00360018 )
  88C:  			Wait     0000000A 
  898:  			Call     SetGoalToHome 	( .Actor:Self )
  8A8:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8C4:  			Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8E0:  			Call     PlaySoundAtActor 	( .Actor:Self .Sound:MoleSurface )
  8F4:  			Call     SetAnimation 	( .Actor:Self 00000001 00360017 )
  90C:  			Wait     0000000A 
  918:  			Call     SetActorFlagBits 	( .Actor:Self 00000004 .False )
  930:  		Else
  938:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  94C:  			ExecWait $Script_8021B354 
  958:  		EndIf
  960:  	EndCaseGroup
  968:  EndSwitch
  970:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  984:  Call     UseIdleAnimation 	( .Actor:Self .True )
  998:  Return
  9A0:  End
}

@ $Script_Breath
{
[4B0] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000000 0000FFFF 80020564 00000003 00000020 )
}

%lava bubbles
%still 9 hp
%weaker to stop

@ $StatusTable_80218E3C
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      30`
.Status:Poison     30`
.Status:Frozen      0`
.Status:Dizzy      90`
.Status:Fear      100`
.Status:Static     40`
.Status:Paralyze   40`
.Status:Shrink     60`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

%to do: fix this
@ $Script_Fireballs_Player
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
   90:  Call  GetActorVar       ( .Actor:Self 00000000 *VarA )
   A8:  If  *VarA  ==  00000001
   B8:  	Add   *Var0  00000064
   C8:  	Set   *Var1  00000005
   D8:  Else
   E0:  	Add   *Var0  0000001E
   F0:  	Set   *Var1  00000032
  100:  EndIf
  108:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  124:  Call  SetAnimation  ( .Actor:Self 00000001 00460003 )
  13C:  Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
  150:  Thread
  158:  	Call  $Function_80218000 ( )
  164:  EndThread
  16C:  Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFFC .Easing:SinOut )
  188:  Call  SetAnimation  ( .Actor:Self 00000001 00460001 )
  1A0:  Wait  10`
  1AC:  Call  SetAnimation  ( .Actor:Self 00000001 00460005 )
  1C4:  Wait  30`
  1D0:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  1F4:  Switch  *Var0
  200:  	CaseOR  ==  .HitResult:Miss % 6
  20C:  	CaseOR  ==  .HitResult:Lucky % 5
  218:  		Set   *VarA  *Var0
  228:  		Call  SetAnimation  ( .Actor:Self 00000001 00460006 )
  240:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  25C:  		Sub   *Var0  00000005
  26C:  		Add   *Var1  00000004
  27C:  		Add   *Var2  00000002
  28C:  		Call  SetGoalToTarget   ( .Actor:Self )
  29C:  		Call  GetGoalPos    ( .Actor:Self *Var3 *Var4 *Var5 )
  2B8:  		Sub   *Var3  00000064
  2C8:  		Add   *Var5  00000002
  2D8:  		ExecWait  $Script_8021A218
  2E4:  		If  *VarA  ==  00000005
  2F4:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  318:  		EndIf
  320:  		Wait  20`
  32C:  		Call  UseBattleCamPreset    ( 00000002 )
  33C:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  358:  		Call  SetActorYaw   ( .Actor:Self 000000B4 )
  36C:  		ExecWait  $Script_80219464
  378:  		Wait  20`
  384:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  398:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  3B0:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
  3C4:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  3D8:  		Return
  3E0:  	EndCaseGroup
  3E8:  EndSwitch
  3F0:  Call  SetAnimation      ( .Actor:Self 00000001 00460006 )
  408:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  424:  Sub   *Var0  00000005
  434:  Add   *Var1  00000004
  444:  Add   *Var2  00000002
  454:  Call  SetGoalToTarget   ( .Actor:Self )
  464:  Call  GetGoalPos        ( .Actor:Self *Var3 *Var4 *Var5 )
  480:  Sub   *Var4  00000006
  490:  Add   *Var5  00000002
  4A0:  ExecWait  $Script_8021A218
  4AC:  Wait  2`
  4B8:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Fire 00000000 00000000 00000004 00000020 )
		Wait  6
  4B8:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Fire 00000000 00000000 00000004 00000020 )
		Wait  6
  4B8:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Fire 00000000 00000000 00000004 00000020 )
  4E0:  Wait  20`
  4EC:  Switch  *Var0
  4F8:  	CaseOR  ==  .HitResult:Hit % 0
  504:  	CaseOR  ==  00000002 % 2
  510:  		Call  UseBattleCamPreset    ( 00000002 )
  520:  		ExecWait  $Script_80219464
  52C:  	EndCaseGroup
  534:  EndSwitch
  53C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  550:  Call  UseIdleAnimation  ( .Actor:Self .True )
  564:  Return
  56C:  End
}

@ $Script_TakeTurn_8021AEA4 %will use player fireballs more, but mostly alternates between tackle/player fireballs and partner fireballs
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike % 1
   20:  	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   38:  	Switch  *Var[0] 
   44:  		Case  ==  00000001 
   50:  			ExecWait $Script_FireTackle 
   5C:  		Case  ==  00000000 
   68:  			ExecWait $Script_Fireballs_Player 
   74:  	EndSwitch
   7C:  	Return
   84:  EndIf
   8C:  Call     GetActorVar 	( .Actor:Self 00000006 *Var[0] )
   A4:  Switch  *Var[0] 
   B0:  	Case  ==  00000001 
   BC:  		Call     GetStatusFlags ( .Actor:Partner *Var[0] )
   D0:  		If  *Var[0]  &  01000000 
					Call     RandInt     	( 000003E8 *Var[0] )
					If  *Var[0]  <=  00000200
						ExecWait $Script_Fireballs_Player 
					Else
   E0: 		 			ExecWait $Script_FireTackle 
					EndIf
   EC:  		Else
   F4:  			Call     RandInt     	( 000003E8 *Var[0] )
  108:  			If  *Var[0]  <=  0000012C 
						Call     RandInt     	( 000003E8 *Var[1] )
						If *Var[1] <= 0000002E0
  118:  					ExecWait $Script_Fireballs_Player 
						Else
							ExecWait $Script_Fireballs_Partner
						EndIf
  124:  			Else
  12C:  				ExecWait $Script_FireTackle 
  138:  			EndIf
  140:  		EndIf
				Call	SetActorVar ( .Actor:Self 00000006 00000000 )
  148:  	Case  ==  00000000 
  154:  		Call     GetStatusFlags ( .Actor:Partner *Var[0] )
  168:  		If  *Var[0]  &  01000000 
  178:  			ExecWait $Script_Fireballs_Player 
  184:  		Else
  18C:  			Call     RandInt     	( 000003E8 *Var[0] )
  1A0:  			If  *Var[0]  <=  000002E0
  1B0:  				ExecWait $Script_Fireballs_Partner 
  1BC:  			Else
  1C4:  				ExecWait $Script_Fireballs_Player 
  1D0:  			EndIf
  1D8:  		EndIf
				Call	SetActorVar ( .Actor:Self 00000006 00000001 )
			Default
				Call     GetStatusFlags ( .Actor:Partner *Var[0] )
				If  *Var[0]  &  01000000 
					ExecWait $Script_Fireballs_Player 
				Else
					Call     RandInt     	( 000003E8 *Var[0] )
					If  *Var[0]  <=  000001F4
						ExecWait $Script_Fireballs_Partner 
					Else
						ExecWait $Script_Fireballs_Player 
					EndIf
				EndIf
				Call	SetActorVar ( .Actor:Self 00000006 00000001 )
  1E0:  EndSwitch
  1E8:  Return
  1F0:  End
}



%formation changes
%RIP magikoopas
%but now we have fire pirahnas and remedy guys

#import newenemy/RemedyGuy.bpat
#import newenemy/FirePiranha.bpat
#import newenemy/RedFuzzy.bpat
#import newenemy/DarkBristle.bpat
#import newenemy/Swoopix.bpat

@ $Formation_00 %+ 1 lava bubble
{
$LavaBubble 00000001 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000009 00000000 00000000 00000000 00000000 
$LavaBubble 00000003 00000008 00000000 00000000 00000000 00000000 
}



@ $Formation_01
{
$Swoopix 00000004 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000001 00000009 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_02
{
$Swoopix 00000004 0000000A 00000000 00000000 00000000 00000000 
$Swoopix 00000005 00000009 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000008 00000000 00000000 00000000 00000000 
$LavaBubble 00000003 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_03
{
$RemedyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$RemedyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000 
$SpikeTop 00000003 00000007 00000000 00000000 00000000 00000000 
}


@ $Formation_04
{
$FirePiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$FirePiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$RemedyGuy 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_05 %flying r magikoopa -> red fuzzy ;) (Also +2 swoopixes)
{
$LavaBubble 00000000 0000000A 00000000 00000000 00000000 00000000 
$DarkBristle 00000001 00000009 00000000 00000000 00000000 00000000 
$RedFuzzy 00000002 00000008 00000000 00000000 00000000 00000000 
$Swoopix  00000006 00000007 00000000 00000000 00000000 00000000 
$Swoopix  00000007 00000006 00000000 00000000 00000000 00000000 
}

@ $Formation_06 %replace w magikoopas with remedy guys
{
$LavaBubble 00000000 0000000A 00000000 00000000 00000000 00000000 
$DarkBristle 00000001 00000009 00000000 00000000 00000000 00000000 
$DarkBristle 00000002 00000008 00000000 00000000 00000000 00000000 
$Swoopix  00000006 00000007 00000000 00000000 00000000 00000000 
$RemedyGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_07 %+remedy guy
{
$LavaBubble 00000000 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000001 00000009 00000000 00000000 00000000 00000000 
$SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000 
$RemedyGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_08
{
$SpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000002 00000009 00000000 00000000 00000000 00000000 
$Swoopix  00000007 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_09 %+ dark bristle
{
$SpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000009 00000000 00000000 00000000 00000000 
$DarkBristle 00000003 00000008 00000000 00000000 00000000 00000000 
$Swoopix  00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0A
{
$SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_0B %putrid pirahna -> fire
{
$SpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000 
$FirePiranha 00000002 00000009 00000000 00000000 00000000 00000000 
$Swoopix  00000006 00000008 00000000 00000000 00000000 00000000 
$Swoopix  00000007 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_0C %+ lava bubble
$SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$PutridPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$LavaBubble 00000005 00000007 00000000 00000000 00000000 00000000 
%/

@ $Formation_0D %one putrid -> fire
{
$SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$PutridPiranha 00000003 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_0E
$SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000001 00000009 00000000 00000000 00000000 00000000 
$LavaBubble 00000002 00000008 00000000 00000000 00000000 00000000 
$LavaBubble 00000003 00000007 00000000 00000000 00000000 00000000 
%/

@ $Formation_0F %+ fire pirahna
{
$PutridPiranha 00000001 0000000A 00000000 00000000 00000000 00000000 
$PutridPiranha 00000002 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000003 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_10
$PutridPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$PutridPiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$PutridPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_11 %back piranha => dark bristle
{
$PutridPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000001 00000009 00000000 00000000 00000000 00000000 
$DarkBristle 00000002 00000008 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_12
$PutridPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$PutridPiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_13 %putrid -> fire, + dark bristle
{
$PutridPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$DarkBristle 00000003 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_14 %putrid -> fire
{
$PutridPiranha 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$SpikeTop 00000003 00000007 00000000 00000000 00000000 00000000 
}

@ $FormationTable
{
$SJIS_8022A3AC 00000003 $Formation_00 $Stage_802277F8 00000000 
$SJIS_8022A3A0 00000003 $Formation_01 $Stage_802277F8 00000000 % unused		now swoopix formation 1
$SJIS_8022A394 00000004 $Formation_02 $Stage_802277F8 00000000 % unused		now swoopix formation 2
$SJIS_8022A37C 00000004 $Formation_03 $Stage_802277F8 00000000 % unused		now remedy guy formation
$SJIS_8022A360 00000003 $Formation_04 $Stage_802277F8 00000000 % unused		now fire piranha formation
$SJIS_8022A348 00000005 $Formation_05 $Stage_802277F8 00000000 
$SJIS_8022A32C 00000005 $Formation_06 $Stage_802277F8 00000000 
$SJIS_8022A318 00000004 $Formation_07 $Stage_802277F8 00000000 
$SJIS_8022A308 00000003 $Formation_08 $Stage_802277F8 00000000 
$SJIS_8022A2F4 00000004 $Formation_09 $Stage_802277F8 00000000 
$SJIS_8022A2DC 00000003 $Formation_0A $Stage_802277F8 00000000 
$SJIS_8022A2C0 00000004 $Formation_0B $Stage_802277F8 00000000 
$SJIS_8022A2A0 00000003 $Formation_0C $Stage_802277F8 00000000 % unused
$SJIS_8022A27C 00000004 $Formation_0D $Stage_802277F8 00000000 
$SJIS_8022A264 00000004 $Formation_0E $Stage_802277F8 00000000 % unused
$SJIS_8022A250 00000003 $Formation_0F $Stage_802277F8 00000000 
$SJIS_8022A23C 00000003 $Formation_10 $Stage_802277F8 00000000 % unused
$SJIS_8022A210 00000003 $Formation_11 $Stage_802277F8 00000000 
$SJIS_8022A1F0 00000003 $Formation_12 $Stage_802277F8 00000000 % unused
$SJIS_8022A1C0 00000004 $Formation_13 $Stage_802277F8 00000000 
$SJIS_8022A188 00000004 $Formation_14 $Stage_802277F8 00000000 
00000000 00000005 $Formation_15 $Stage_Pit1 00000000 %Floor 46
00000000 00000004 $Formation_16 $Stage_Pit1 00000000 %Floor 47
00000000 00000004 $Formation_17 $Stage_Pit1 00000000 %Floor 48
00000000 00000004 $Formation_18 $Stage_Pit1 00000000 %Floor 49
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:Formation $Formation_15 
{
$LavaBubble 00000000 0000000A 00000000 00000000 00000000 00000000 
$LavaBubble 00000001 00000009 00000000 00000000 00000000 00000000 
$DarkBristle 00000002 00000008 00000000 00000000 00000000 00000000 
$DarkBristle 00000003 00000007 00000000 00000000 00000000 00000000 
$Swoopix  00000007 00000006 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_16
{
$LavaBubble 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000 
$PutridPiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$DarkBristle 00000003 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_17
{
$SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000 
$FirePiranha 00000001 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000002 00000008 00000000 00000000 00000000 00000000 
$DarkBristle 00000003 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_18
{
$SpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000 
$PutridPiranha 00000002 00000009 00000000 00000000 00000000 00000000 
$FirePiranha 00000003 00000008 00000000 00000000 00000000 00000000 
$RemedyGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $StageTable
{
$ASCII_8022A3E8 $Stage_802277F8 
$ASCII_8022A3E0 $Stage_80227884 
$ASCII_8022A3D8 $Stage_80227DB8 
$ASCII_8022A3D0 $Stage_80228348 
$ASCII_8022A3C8 $Stage_802288D8 
$ASCII_8022A3C0 $Stage_80228E10 
$ASCII_8022A3B8 $Stage_8022975C 
"pit_05" $Stage_Pit1
00000000 00000000 
}

#new:Stage $Stage_Pit1
{
"kpa_tex"
"pit_b01_shape"
"pit_b01_hit"
$Script_BeforeBattle_Pit
$Script_AfterBattle_Pit
00000000 
00000000 
00000000 
00000000 
00000000 
}

%to make things easier to add, I'm adding the pit scripts every time even when I don't need to
#new:Script $Script_BeforeBattle_Pit
{
	Return
	End
}

#new:Script $Script_AfterBattle_Pit
{
	Return
	End
}