%Crystal King

%def 2 -> 4
%but increased fire weakness
%hp 70 -> 150
%heal amount 20 -> 40
%Can summon and shoot bits on the same turn when below 120 hp
%healing is now guaranteed below 25% health (37 hp?)
%	if he's below 50%, hasn't used any heal yet, and turncount is past turn 13, heal is also guaranteed
%21 turn time limit
%	so no stalling tactics for you!
%	not that you'd be using them
%Attack power increases as mario's health goes down (1.0x -> 2.0x ish)
%	multiplier = (100 - hp)/50 (though I made it so his attack power never goes below 1.0x)
%ice bolt now does damage with no proc, while frost breath does lower damage with high proc


@ $DefenseTable_80218A2C
{
.Element:Normal 00000004 % 2 -> 4
.Element:Fire   FFFFFFFE %-2 def
.Element:Water  00000063
.Element:Ice    00000063
.Element:End
}

@ $StatusTable_80218A48 %no statuses anymore
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}

@ $StatusTable_8021C6DC
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop       0`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -2`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}


@ $CrystalKing
{
% stats
[MaxHP]        150`b
[PowerBounce]  3`b 
}

@ $CrystalClone
{
% stats
[Index]        BEb 
[Level]         0`b 
[MaxHP]        150`b
}

@ $DefenseTable_802204A4 %bits now have 1 def, but fire flowers will absolutely destroy them
{
.Element:Normal 00000001
.Element:Fire   FFFFFFF0 %-15 def!
.Element:Throw	00000000
.Element:Ice    00000063
.Element:End
}

@ $CrystalBitA
{
[MaxHP]        4`b 
}

@ $CrystalBitB
{
[MaxHP]        4`b 
}

@ $CrystalBitC
{
[MaxHP] 	   4`b 
}

@ $Script_Init_80218B40
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_8021AEEC )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_80218C4C )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_80219F30 )
		Call     BindNextTurn 	( .Actor:Self $Script_TimeLimit )
   3C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   54:  Call     SetActorVar 	( .Actor:Self 00000007 00000000 )
   6C:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   84:  Call     SetActorVar 	( .Actor:Self 00000002 FFFFFFFF )
   9C:  Call     SetActorVar 	( .Actor:Self 00000003 FFFFFFFF )
   B4:  Call     SetActorVar 	( .Actor:Self 00000004 00000201 )
   CC:  Call     SetActorVar 	( .Actor:Self 00000005 00000202 )
   E4:  Call     SetActorVar 	( .Actor:Self 00000006 00000203 )
   FC:  Return
  104:  End
}

#new:Script $Script_TimeLimit
{
Call     GetBattlePhase ( *Var[0] )
Switch   *Var[0] 
	Case == .Phase:PlayerBegin
		Switch *GameByte[00B] %21 turns total
			Case == 00000000 %the starting point, but tell player what's going on
				Call     PlaySoundAtActor 	( .Actor:Self 0000035D )
				Wait     00000035 %hope this is the right timing
				Call     StopSound ( 0000035D )
				Call	$ShowCustomMessage	( 002F0031 90` ) %the "intense cold" start text
			Case == 00000008 %13 turns left (21 - 13 = 8)
				Call	$ShowCustomMessage	( 002F002C 90` ) 
			Case == 0000000D %8 turns left  (21 - 8 = 13)
				Call	$ShowCustomMessage	( 002F002D 90` ) 
			Case == 00000010 %5 turns left	(21 - 5 = 16)
				Call	$ShowCustomMessage	( 002F002E 90` ) 
			Case == 00000012 %3 turns left	(21 - 3 = 18)
				Call	$ShowCustomMessage	( 002F002F 90` ) 
			Case == 00000014 %1 turn left	(21 - 1 = 20)
				Call	$ShowCustomMessage	( 002F0030 90` ) 
			Case >= 00000015 %oof			
				Call	 SetTargetActor (.Actor:Self .Actor:Partner )
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000008 00000000 80004964 00000004 00000020 ) %9 turn freeze
				Wait	 2`
				Call	 SetTargetActor (.Actor:Self .Actor:Player )
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000008 00000000 80004964 00000004 00000020 ) %9 turn freeze
		EndSwitch
EndSwitch
Return
End
}

%make the time limit un-cheatable
%if you somehow survive and kill him, he just yeets you
@ $Script_HandleEvent_80219F30
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   40:  ConstOR  *Var[0] 00000040 
   50:  Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   68:  Call     SetPartAlpha ( .Actor:Self 00000001 000000FF )
   80:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   94:  Switch  *Var[0] 
   A0:  	Case  ==  .Event:HitCombo % 9
   AC:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   C4:  		ConstOR  *Var[0] 00000001 
   D4:  		Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   EC:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  104:  		Call     ActorExists 	( *Var[0] *Var[1] )
  118:  		If  *Var[1]  ==  00000001 
  128:  			Thread
  130:  				Call     SetOwnerID  	( *Var[0] )
  140:  				SetConst  *Var[0]  00000001 
  150:  				SetConst  *Var[1]  007F0019 
  160:  				ExecWait DoNormalHit 
  16C:  				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
  184:  			EndThread
  18C:  		EndIf
  194:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  1AC:  		Call     ActorExists 	( *Var[0] *Var[1] )
  1C0:  		If  *Var[1]  ==  00000001 
  1D0:  			Thread
  1D8:  				Call     SetOwnerID  	( *Var[0] )
  1E8:  				SetConst  *Var[0]  00000001 
  1F8:  				SetConst  *Var[1]  007F0019 
  208:  				ExecWait DoNormalHit 
  214:  				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
  22C:  			EndThread
  234:  		EndIf
  23C:  		SetConst  *Var[0]  00000001 
  24C:  		SetConst  *Var[1]  007F0019 
  25C:  		ExecWait DoNormalHit 
				If *GameByte[00B] > 21` %this is when the infinite freeze starts
					ExecWait $Script_AntiCheat
					Return
				EndIf
  268:  	Case  ==  .Event:Hit % A
  274:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  28C:  		Call     ActorExists 	( *Var[0] *Var[1] )
  2A0:  		If  *Var[1]  ==  00000001 
  2B0:  			Thread
  2B8:  				Call     SetOwnerID  	( *Var[0] )
  2C8:  				SetConst  *Var[0]  00000001 
  2D8:  				SetConst  *Var[1]  007F0019 
  2E8:  				ExecWait DoNormalHit 
  2F4:  				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
  30C:  			EndThread
  314:  		EndIf
  31C:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  334:  		Call     ActorExists 	( *Var[0] *Var[1] )
  348:  		If  *Var[1]  ==  00000001 
  358:  			Thread
  360:  				Call     SetOwnerID  	( *Var[0] )
  370:  				SetConst  *Var[0]  00000001 
  380:  				SetConst  *Var[1]  007F0019 
  390:  				ExecWait DoNormalHit 
  39C:  				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
  3B4:  			EndThread
  3BC:  		EndIf
  3C4:  		SetConst  *Var[0]  00000001 
  3D4:  		SetConst  *Var[1]  007F0019 
  3E4:  		ExecWait DoNormalHit 
  3F0:  		ExecWait $Script_8021952C 
				If *GameByte[00B] > 21` %this is when the infinite freeze starts
					ExecWait $Script_AntiCheat
					Return
				EndIf
  3FC:  	Case  ==  .Event:BurnHit % E
  408:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  420:  		Call     ActorExists 	( *Var[0] *Var[1] )
  434:  		If  *Var[1]  ==  00000001 
  444:  			Thread
  44C:  				Call     SetOwnerID  	( *Var[0] )
  45C:  				SetConst  *Var[0]  00000001 
  46C:  				SetConst  *Var[1]  007F0020 
  47C:  				SetConst  *Var[2]  007F0021 
  48C:  				ExecWait DoBurnHit 
  498:  			EndThread
  4A0:  		EndIf
  4A8:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  4C0:  		Call     ActorExists 	( *Var[0] *Var[1] )
  4D4:  		If  *Var[1]  ==  00000001 
  4E4:  			Thread
  4EC:  				Call     SetOwnerID  	( *Var[0] )
  4FC:  				SetConst  *Var[0]  00000001 
  50C:  				SetConst  *Var[1]  007F0020 
  51C:  				SetConst  *Var[2]  007F0021 
  52C:  				ExecWait DoBurnHit 
  538:  			EndThread
  540:  		EndIf
  548:  		SetConst  *Var[0]  00000001 
  558:  		SetConst  *Var[1]  007F0020 
  568:  		SetConst  *Var[2]  007F0021 
  578:  		ExecWait DoBurnHit 
  584:  		Call     SetAnimation 	( .Actor:Self 00000001 007F0019 )
  59C:  		ExecWait $Script_8021952C 
				If *GameByte[00B] > 21` %this is when the infinite freeze starts
					ExecWait $Script_AntiCheat
					Return
				EndIf
  5A8:  	Case  ==  00000017 % 17
  5B4:  	Case  ==  .Event:AirLiftFailed % 1F
  5C0:  		SetConst  *Var[0]  00000001 
  5D0:  		SetConst  *Var[1]  007F0009 
  5E0:  		ExecWait DoImmune 
  5EC:  	Case  ==  .Event:Immune % 19
  5F8:  		SetConst  *Var[0]  00000001 
  608:  		SetConst  *Var[1]  007F0009 
  618:  		ExecWait DoImmune 
  624:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  63C:  		If  *Var[0]  &  00000001 
  64C:  			ExecWait $Script_8021952C 
  658:  			Return
  660:  		EndIf
  668:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  67C:  		If  *Var[0]  &  0035D000 
  68C:  			ExecWait $Script_8021952C 
  698:  			Return
  6A0:  		EndIf
  6A8:  	Case  ==  .Event:Death % 20
  6B4:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  6CC:  		Call     ActorExists 	( *Var[0] *Var[1] )
  6E0:  		If  *Var[1]  ==  00000001 
  6F0:  			Thread
  6F8:  				Call     SetOwnerID  	( *Var[0] )
  708:  				SetConst  *Var[0]  00000001 
  718:  				SetConst  *Var[1]  007F0019 
  728:  				ExecWait DoNormalHit 
  734:  			EndThread
  73C:  		EndIf
  744:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  75C:  		Call     ActorExists 	( *Var[0] *Var[1] )
  770:  		If  *Var[1]  ==  00000001 
  780:  			Thread
  788:  				Call     SetOwnerID  	( *Var[0] )
  798:  				SetConst  *Var[0]  00000001 
  7A8:  				SetConst  *Var[1]  007F0019 
  7B8:  				ExecWait DoNormalHit 
  7C4:  			EndThread
  7CC:  		EndIf
  7D4:  		SetConst  *Var[0]  00000001 
  7E4:  		SetConst  *Var[1]  007F0019 
  7F4:  		ExecWait DoNormalHit 
  800:  		ExecWait $Script_80219B80 
  80C:  		SetConst  *Var[0]  00000001 
  81C:  		SetConst  *Var[1]  007F0019
				If *GameByte[00B] > 21` %this is when the infinite freeze starts
					ExecWait $Script_AntiCheat
					Return
				EndIf
  82C:  		ExecWait DoDeath 
  838:  		Return
  840:  	Case  ==  .Event:BurnDeath % 24
  84C:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  864:  		Call     ActorExists 	( *Var[0] *Var[1] )
  878:  		If  *Var[1]  ==  00000001 
  888:  			Thread
  890:  				Call     SetOwnerID  	( *Var[0] )
  8A0:  				SetConst  *Var[0]  00000001 
  8B0:  				SetConst  *Var[1]  007F0020 
  8C0:  				SetConst  *Var[2]  007F0021 
  8D0:  				ExecWait DoBurnHit 
  8DC:  			EndThread
  8E4:  		EndIf
  8EC:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  904:  		Call     ActorExists 	( *Var[0] *Var[1] )
  918:  		If  *Var[1]  ==  00000001 
  928:  			Thread
  930:  				Call     SetOwnerID  	( *Var[0] )
  940:  				SetConst  *Var[0]  00000001 
  950:  				SetConst  *Var[1]  007F0020 
  960:  				SetConst  *Var[2]  007F0021 
  970:  				ExecWait DoBurnHit 
  97C:  			EndThread
  984:  		EndIf
  98C:  		SetConst  *Var[0]  00000001 
  99C:  		SetConst  *Var[1]  007F0020 
  9AC:  		SetConst  *Var[2]  007F0021 
  9BC:  		ExecWait DoBurnHit 
  9C8:  		ExecWait $Script_80219B80 
				If *GameByte[00B] > 21` %this is when the infinite freeze starts
					ExecWait $Script_AntiCheat
					Return
				EndIf
  9D4:  		SetConst  *Var[0]  00000001 
  9E4:  		SetConst  *Var[1]  007F0021 
  9F4:  		ExecWait DoDeath 
  A00:  		Return
  A08:  	Case  ==  .Event:RecoverStatus % 31
  A14:  		Thread
  A1C:  			Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  A34:  			Switch  *Var[0] 
  A40:  				CaseOR  ==  00000004 
  A4C:  				CaseOR  ==  00000005 
  A58:  					SetF  *Var[0]  *Fixed[0.40039062] 
  A68:  					Loop     0000001E 
  A74:  						SetF  *Var[1]  *Fixed[1.0] 
  A84:  						SubF  *Var[1]  *Var[0] 
  A94:  						DivF  *Var[1]  *Fixed[6.0] 
  AA4:  						AddF  *Var[0]  *Var[1] 
  AB4:  						Call     GetActorVar 	( .Actor:Self 00000002 *Var[A] )
  ACC:  						Call     ActorExists 	( *Var[A] *Var[B] )
  AE0:  						If  *Var[B]  ==  00000001 
  AF0:  							Call     SetPartScale ( *Var[A] 00000001 *Var[0] *Var[0] *Var[0] )
  B10:  						EndIf
  B18:  						Call     GetActorVar 	( .Actor:Self 00000003 *Var[A] )
  B30:  						Call     ActorExists 	( *Var[A] *Var[B] )
  B44:  						If  *Var[B]  ==  00000001 
  B54:  							Call     SetPartScale ( *Var[A] 00000001 *Var[0] *Var[0] *Var[0] )
  B74:  						EndIf
  B7C:  						Wait     00000001 
  B88:  					EndLoop
  B90:  				EndCaseGroup
  B98:  				CaseOR  ==  00000000 
  BA4:  				CaseOR  ==  00000002 
  BB0:  					SetF  *Var[0]  *Fixed[0.40039062] 
  BC0:  					Loop     0000001E 
  BCC:  						SetF  *Var[1]  *Fixed[1.0] 
  BDC:  						SubF  *Var[1]  *Var[0] 
  BEC:  						DivF  *Var[1]  *Fixed[6.0] 
  BFC:  						AddF  *Var[0]  *Var[1] 
  C0C:  						Call     GetActorVar 	( .Actor:Self 00000004 *Var[A] )
  C24:  						Call     ActorExists 	( *Var[A] *Var[B] )
  C38:  						If  *Var[B]  ==  00000001 
  C48:  							Call     SetPartScale ( *Var[A] 00000001 *Var[0] *Var[0] *Var[0] )
  C68:  						EndIf
  C70:  						Call     GetActorVar 	( .Actor:Self 00000005 *Var[A] )
  C88:  						Call     ActorExists 	( *Var[A] *Var[B] )
  C9C:  						If  *Var[B]  ==  00000001 
  CAC:  							Call     SetPartScale ( *Var[A] 00000001 *Var[0] *Var[0] *Var[0] )
  CCC:  						EndIf
  CD4:  						Call     GetActorVar 	( .Actor:Self 00000006 *Var[A] )
  CEC:  						Call     ActorExists 	( *Var[A] *Var[B] )
  D00:  						If  *Var[B]  ==  00000001 
  D10:  							Call     SetPartScale ( *Var[A] 00000001 *Var[0] *Var[0] *Var[0] )
  D30:  						EndIf
  D38:  						Wait     00000001 
  D44:  					EndLoop
  D4C:  				EndCaseGroup
  D54:  			EndSwitch
  D5C:  		EndThread
  D64:  		SetConst  *Var[0]  00000001 
  D74:  		SetConst  *Var[1]  007F0009 
  D84:  		ExecWait DoRecover 
  D90:  		Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  DA8:  		If  *Var[0]  <=  00000001 
  DB8:  			Call     SetAnimation 	( .Actor:Self 00000001 007F000E )
  DD0:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  DE4:  			Call     SetGoalPos 	( .Actor:Self 00000046 00000000 00000005 )
  E00:  			Call     RunToGoal   	( .Actor:Self 00000000 .False )
  E18:  			Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
  E30:  		EndIf
  E38:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  E54:  		Call     ForceHomePos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  E70:  		Call     HPBarToHome 	( .Actor:Self )
  E80:  	Case  ==  .Event:BeginAirLift % 3A
  E8C:  		SetConst  *Var[0]  00000001 
  E9C:  		SetConst  *Var[1]  007F0019 
  EAC:  		ExecWait DoAirLift 
  EB8:  	Case  ==  .Event:SwapPartner % 3F
  EC4:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  EE0:  		Add  *Var[1]  00000014 
  EF0:  		Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  F34:  	Default
  F3C:  EndSwitch
  F44:  Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  F5C:  ConstAND *Var[0] FFFFFFBF 
  F6C:  Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  F84:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  F98:  Call     UseIdleAnimation 	( .Actor:Self .True )
  FAC:  Return
  FB4:  End
}

#string $WaitThatsIllegal
{
[STYLE:Right]
You seem to be struggling.[BR][PAUSE:0A]Just give in, it will be[BR]
all over soon![BR]
[Wait][END]
}

#string $WaitThatsIllegal2
{
[STYLE:Right]Refusing to submit?[PAUSE:0A][BR]
Then I shall show you the folly[BR]
of your ways.[BR]
[Wait][END]
}

#new:Script $Script_AntiCheat %insta death bolt if you somehow survive infinite freezing
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Call	ActorSpeak	( $WaitThatsIllegal .Actor:Enemy0 00000001 007F0009 007F001D ) % anti cheat text 1
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000000E )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     SetAnimation 	( .Actor:Self 00000001 007F0013 )
   74:  Wait     0000000A 
   80:  Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
   94:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   A8:  If  *Var[0]  !&  00080000 
   B8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   D4:  	Add  *Var[1]  00000014 
   E4:  	Add  *Var[2]  FFFFFFFB 
   F4:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  138:  Else
  140:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  15C:  	Add  *Var[1]  00000008 
  16C:  	Add  *Var[2]  FFFFFFFE 
  17C:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1C0:  EndIf
  1C8:  Wait     0000001E 
  1D4:  Call     UseBattleCamPreset 	( 00000002 )
  1E4:  Call     MoveBattleCamOver 	( 00000014 )
  1F4:  Call     SetAnimation 	( .Actor:Self 00000001 007F001C )
  20C:  Wait     00000003 
  218:  Call     PlaySoundAtActor 	( .Actor:Self 000002E0 )
  22C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  250:  Switch  *Var[0] 
  25C:  	CaseOR  ==  .HitResult:Miss % 6
  268:  	CaseOR  ==  .HitResult:Lucky % 5
  274:  		Set  *Var[A]  *Var[0] 
  284:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2A0:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  2B4:  		If  *Var[3]  !&  00080000 
  2C4:  			Add  *Var[0]  FFFFFFF1 
  2D4:  			Add  *Var[1]  00000014 
  2E4:  		Else
  2EC:  			Add  *Var[0]  FFFFFFFA 
  2FC:  			Add  *Var[1]  00000008 
  30C:  		EndIf
  314:  		Call     SetGoalToTarget 	( .Actor:Self )
  324:  		Call     AddGoalPos 	( .Actor:Self FFFFFFCE 00000014 00000000 )
  340:  		Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  35C:  		Thread
  364:  			Sub  *Var[3]  *Var[0] 
  374:  			Sub  *Var[4]  *Var[1] 
  384:  			Sub  *Var[5]  *Var[2] 
  394:  			Div  *Var[3]  0000000A 
  3A4:  			Div  *Var[4]  0000000A 
  3B4:  			Div  *Var[5]  0000000A 
  3C4:  			Loop     0000000A 
  3D0:  				Add  *Var[0]  *Var[3] 
  3E0:  				Add  *Var[1]  *Var[4] 
  3F0:  				Add  *Var[2]  *Var[5] 
  400:  				Call     PlayEffect  	( ~FX:EmitterVolume:Snowflakes *Var[0] *Var[1] *Var[2] 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
  444:  				Wait     00000001 
  450:  			EndLoop
  458:  		EndThread
  460:  		Wait     00000003 
  46C:  		Call     PlayEffect  	( ~FX:Lightning *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] *Fixed[1.0] 00000014 00000000 00000000 00000000 00000000 )
  4B0:  		Call     $Function_802182E4 ( *Var[F] )
  4C0:  		Wait     0000000A 
  4CC:  		Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  4E4:  		If  *Var[A]  ==  00000005 
  4F4:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  518:  		EndIf
  520:  		Wait     00000014 
  52C:  		Call     UseBattleCamPreset 	( 00000002 )
				Call	ActorSpeak	( $WaitThatsIllegal2 .Actor:Enemy0 00000001 007F0009 007F001D ) % anti cheat text 2
				Call     MoveBattleCamOver 	( 00000014 )
				Wait     00000014 
				Call     SetAnimation 	( .Actor:Self 00000001 007F001D )
				Thread
					Wait     00000005 
					Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
					Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
					Wait     0000001E 
					Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
				EndThread
				Thread
					Call     8026BF48 ( 00000001 )
					Call     HealActor   	( .Actor:Self 00000063 00000001 ) %99 hp heal
					Call     8026BF48 ( 00000000 )
				EndThread
				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
				Call     SetAnimation 	( .Actor:Self 00000001 007F0009 )
				Call     8027114C ( )
				Call     UseBattleCamPreset 	( 00000002 )
  53C:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  550:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  564:  		Return
  56C:  EndSwitch
  574:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  590:  Call     GetStatusFlags ( .Actor:Self *Var[3] )
  5A4:  If  *Var[3]  !&  00080000 
  5B4:  	Add  *Var[0]  FFFFFFF1 
  5C4:  	Add  *Var[1]  00000014 
  5D4:  Else
  5DC:  	Add  *Var[0]  FFFFFFFA 
  5EC:  	Add  *Var[1]  00000008 
  5FC:  EndIf
  604:  Call     SetGoalToTarget 	( .Actor:Self )
  614:  Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  630:  Thread
  638:  	Sub  *Var[3]  *Var[0] 
  648:  	Sub  *Var[4]  *Var[1] 
  658:  	Sub  *Var[5]  *Var[2] 
  668:  	Div  *Var[3]  0000000A 
  678:  	Div  *Var[4]  0000000A 
  688:  	Div  *Var[5]  0000000A 
  698:  	Loop     0000000A 
  6A4:  		Add  *Var[0]  *Var[3] 
  6B4:  		Add  *Var[1]  *Var[4] 
  6C4:  		Add  *Var[2]  *Var[5] 
  6D4:  		Call     PlayEffect  	( ~FX:EmitterVolume:Snowflakes *Var[0] *Var[1] *Var[2] 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
  718:  		Wait     00000001 
  724:  	EndLoop
  72C:  EndThread
  734:  Wait     00000003 
  740:  Call     PlayEffect  	( ~FX:Lightning *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] *Fixed[1.0] 00000014 00000000 00000000 00000000 00000000 )
        Call     PlayEffect  	( ~FX:ShockWave:LargeWhite *Var[0] 0` *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  784:  Call     $Function_802182E4 ( *Var[F] )
  794:  Wait     00000007 
  7A0:  Thread
  7A8:  	Wait     00000003 
  7B4:  	Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  7CC:  EndThread
  7D4:  Wait     00000002 
  7E0:  Call     SetGoalToTarget 	( .Actor:Self )
  7F0:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 000049FE 00000032 00000020 )
  818:  Switch  *Var[0] 
  824:  	CaseOR  ==  00000000 
  830:  	CaseOR  ==  00000002 
  83C:  		Call     SetGoalToTarget 	( .Actor:Self )
  84C:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  868:  		Call     PlayEffect  	( ~FX:ColdBreath:PuffUp *Var[0] *Var[1] *Var[2] *Fixed[2.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8AC:  		Call     $Function_80218344 ( *Var[F] )
  8BC:  		Wait     0000001E 
  8C8:  		Call     UseBattleCamPreset 	( 00000002 )
  8D8:  	EndCaseGroup
  8E0:  EndSwitch
  8E8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8FC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  910:  Return
  918:  End
}

%reduce the opacity of the clones a very tiny amount
%to make it possible to distinguish them if you have good eyes
@ $Script_Idle_80218C4C
{
		Set *Var[F] *GameByte[00B]
		Mul *Var[F] 4` 
		Call PlayEffect ( 00000045 00000000 *Var[F] ) %according to effects.txt, 100 is a lot
    0:  Set  *Var[F]  00000000 
   10:  Label    00000000 
   1C:  Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   34:  If  *Var[0]  &  00000020 
   44:  	Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
   5C:  	Call     GetActorVar 	( .Actor:Self 00000003 *Var[2] )
   74:  	Call     ActorExists 	( *Var[1] *Var[3] )
   88:  	If  *Var[3]  ==  00000001 
				%calculates alpha between 128 and 254?
   98:  		Call     $Function_80218058 ( *Var[F] *Var[4] *Fixed[128.0] *Fixed[254.0] 00000014 00000000 00000000 )
   C0:  		Set  *Var[4]  *Var[4] 
   D0:  		Call     SetPartAlpha ( .Actor:Self 00000001 *Var[4] )
				%Clone alpha is -12
				Call     $Function_80218058 ( *Var[F] *Var[4] *Fixed[116.0] *Fixed[242.0] 00000014 00000000 00000000 )
				Set  *Var[4]  *Var[4]
   E8:  		Call     SetPartAlpha ( *Var[1] 00000001 *Var[4] )
  100:  		Call     SetPartAlpha ( *Var[2] 00000001 *Var[4] )
  118:  		Add  *Var[F]  00000001 
  128:  		If  *Var[F]  >  00000028 
  138:  			Set  *Var[F]  00000000 
  148:  		EndIf
  150:  	Else
  158:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  170:  		ConstAND *Var[0] FFFFFFDF 
  180:  		Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  198:  	EndIf
  1A0:  Else
  1A8:  	Set  *Var[F]  00000000 
  1B8:  EndIf
  1C0:  Wait     00000001 
  1CC:  Goto     00000000 
  1D8:  Return
  1E0:  End
}

@ $Script_TakeTurn_8021AEEC
{
		%first, make sure player didn't cheat the infi-freeze
		If *GameByte[00B] > 00000015 %the freeze starts after crystal king's turn on turn 21, so mario won't actually be frozen when turncount equals 21
			Call     GetStatusFlags ( .Actor:Player *Var[0] )
			If  *Var[0]  !&  00004000 
				ExecWait $Script_AntiCheat
				Return
			EndIf
		EndIf
		%to make this faster, he kills you on turn 24 anyway
		If *GameByte[00B] >= 00000018
			ExecWait $Script_AntiCheat
			Return
		EndIf
		0:  Call     GetActorHP  	( .Actor:Self *Var[0] )
		Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
		Mul *Var[1] 50` %in case something increases max health ;)
		Div *Var[1] 150`
   14:  If  *Var[0]  <=  *Var[1] %0x14 (20) -> 0x32 (50)				%this determines if clones can fly
   24:  	Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   3C:  	ConstOR  *Var[0] 00000002 
   4C:  	Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   64:  EndIf
   6C:  Set  *Flag[00]  00000000 
   7C:  Call     GetActorHP  	( .Actor:Self *Var[0] )
   90:  Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
   A4:  Mul  *Var[0]  00000064 
   B4:  Div  *Var[0]  *Var[1] 
		%Change Healing AI
		%make it more predictable
		%guaranteed heal if below 25%
		%below 50%, heal if turncount > 16 and this isn't the last heal
   C4:  Switch  *Var[0] 
   D0:  	Case  <  00000019 %25
   %DC:  		Call     RandInt     	( 00000063 *Var[0] )
   %F0:  		Add  *Var[0]  00000001 
  %100:  		If  *Var[0]  <=  00000064 
  110:  			Call     GetActorVar 	( .Actor:Self 00000007 *Var[0] )
  128:  			If  *Var[0]  <  00000002 
  138:  				Set  *Flag[00]  00000001 
  148:  			EndIf
  %150:  		EndIf
  158:  	Case  <  00000032 %50
  188:  		If  *GameByte[00B] > 13`
  198:  			Call     GetActorVar 	( .Actor:Self 00000007 *Var[0] )
  1B0:  			If  *Var[0]  <  00000001
  1C0:  				Set  *Flag[00]  00000001 
  1D0:  			EndIf
  1D8:  		EndIf
  268:  EndSwitch
  270:  If  *Flag[00]  ==  00000001 
  280:  	Call     GetActorVar 	( .Actor:Self 00000007 *Var[0] )
  298:  	Add  *Var[0]  00000001 
  2A8:  	Call     SetActorVar 	( .Actor:Self 00000007 *Var[0] )
  2C0:  	ExecWait $Script_HealSelf 
  2CC:  	Return
  2D4:  EndIf
  2DC:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  2F4:  Switch  *Var[0] %which attack to do
  300:  	Case  ==  00000000 %summon bits (+ shoot too?)
  30C:  		Call     8026A14C ( FFFFFF81 00008002 *Var[0] ) %find rocks?
  324:  		If  *Var[0]  <=  00000001 
  334:  			ExecWait $Script_SummonRocks 
  340:  			Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
  					Call     GetActorHP  	( .Actor:Self *Var[0] )
					Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
					Mul *Var[1] 120` %in case something increases max health ;)
					Div *Var[1] 150`
					If *Var[0] <= *Var[1]
						ExecWait $Script_SpitAllRocks
					EndIf
  358:  		Else
  360:  			ExecWait $Script_SpitAllRocks 
  36C:  			Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
  					Call     GetActorHP  	( .Actor:Self *Var[0] )
					Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
					Mul *Var[1] 120` %in case something increases max health ;)
					Div *Var[1] 150`
					Set *Var[2] *Var[1]
					Div *Var[2] 3
					Mul *Var[2] 2	%2/3 * 120 = 80 hp
					Set *Var[3] *Var[1]
					Div *Var[3] 3 %1/3 * 120 = 40 hp
					If *Var[0] <= *Var[1]
						Switch *Var[0]
							Case > *Var[2]
								ExecWait $Script_SummonRocks
								Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
							Case > *Var[3]
								ExecWait $Script_SummonRocks
								Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
							Default
								%don't summon rocks since I don't think it's going to work
								Call     SetActorVar 	( .Actor:Self 00000001 00000005 )
						EndSwitch
					EndIf
  384:  		EndIf
  38C:  	Case  ==  00000001 %summon more bits
  398:  		ExecWait $Script_SummonRocks 
  3A4:  		Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
  				Call     GetActorHP  	( .Actor:Self *Var[0] )
				Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
				Mul *Var[1] 120` %in case something increases max health ;)
				Div *Var[1] 150`
				If *Var[0] <= *Var[1]
					ExecWait $Script_SpitAllRocks
				EndIf
  3BC:  	Case  ==  00000002 %bolt, breath, or spit rocks
  3C8:  		Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  3E0:  		If  *Var[0]  <=  00000001 
  3F0:  			Call     GetStatusFlags ( .Actor:Player *Var[0] )
  404:  			If  *Var[0]  &  00004000 
  414:  				ExecWait $Script_FrostBolt 
  420:  			Else
  428:  				ExecWait $Script_FrostBreath 
  434:  			EndIf
  43C:  		Else
  444:  			ExecWait $Script_SpitAllRocks 
  450:  		EndIf
  458:  		Call     SetActorVar 	( .Actor:Self 00000001 00000003 )
  470:  	Case  ==  00000003 %summon rocks, bolt, or clone
  47C:  		Call     GetActorHP  	( .Actor:Self *Var[0] )
  				Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
				Mul *Var[1] 75` %in case something increases max health ;)
				Div *Var[1] 150`
  490:  		If  *Var[0]  >  *Var[1] %35 -> 75
  4A0:  			Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  4B8:  			If  *Var[0]  !&  00000004 
  4C8:  				ExecWait $Script_SummonRocks 
  4D4:  				Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
						Call     GetActorHP  	( .Actor:Self *Var[0] )
						Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
						Mul *Var[1] 120` %in case something increases max health ;)
						Div *Var[1] 150`
						If *Var[0] <= *Var[1]
							ExecWait $Script_SpitAllRocks
						EndIf
  4EC:  				Return
  4F4:  			EndIf
  4FC:  		EndIf
  504:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  51C:  		If  *Var[0]  !&  00000010 
  52C:  			ExecWait $Script_FrostBolt 
  538:  			Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  550:  			ConstOR  *Var[0] 00000010 
  560:  			Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  578:  		Else
  580:  			ExecWait $Script_SummonClones 
  58C:  			Call     SetActorVar 	( .Actor:Self 00000001 00000004 )
  5A4:  			Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  5BC:  			ConstOR  *Var[0] 00000004 
  5CC:  			Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
					Call     GetActorHP  	( .Actor:Self *Var[0] )
					Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
					Mul *Var[1] 50` %in case something increases max health ;)
					Div *Var[1] 150`
					If *Var[0] <= *Var[1]
						ExecWait $Script_TripleFrostBreath 
					EndIf
  5E4:  		EndIf
  5EC:  	Case  ==  00000004 
  5F8:  		Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  610:  		If  *Var[0]  <=  00000001 
  620:  			Call     GetStatusFlags ( .Actor:Player *Var[0] )
  634:  			If  *Var[0]  &  00004000  
  644:  				ExecWait $Script_FrostBolt 
  650:  			Else
  658:  				ExecWait $Script_FrostBreath
  664:  			EndIf
  66C:  			Call     SetActorVar 	( .Actor:Self 00000001 00000003 )
  684:  		Else
  68C:  			ExecWait $Script_TripleFrostBreath 
  698:  			Call     SetActorVar 	( .Actor:Self 00000001 00000005 )
  6B0:  		EndIf
  6B8:  	Case  ==  00000005 
  6C4:  		Call     8026A14C ( FFFFFF81 00008002 *Var[0] )
  6DC:  		If  *Var[0]  >  00000001 
  6EC:  			ExecWait $Script_TripleFrostBreath 
  6F8:  			Return
  700:  		EndIf
  708:  		ExecWait $Script_SummonClones 
  714:  		Call     SetActorVar 	( .Actor:Self 00000001 00000004 )
  72C:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  744:  		ConstOR  *Var[0] 00000004 
  754:  		Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
				Call     GetActorHP  	( .Actor:Self *Var[0] )
				Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
				Mul *Var[1] 50` %in case something increases max health ;)
				Div *Var[1] 150`
				If *Var[0] <= *Var[1]
					ExecWait $Script_TripleFrostBreath 
				EndIf
  76C:  EndSwitch
  774:  Return
  77C:  End
}


%his actual moveset

%parenthesis indicate damage with highest multiplier (being at 0 hp would make it a 2x multiplier, but since you can't survive at 0 hp the real maximum is slightly lower)

%frost breath:	5 + 2 turn freeze (9 + 2 turn freeze)
%ice bolt:		8				  (15)
%triple breath:	7 + 2 turn freeze (13 + 2 turn freeze)
%					(has +-4 frame variance depending on which one the crystal king is)
%rocks:			5 x 3			  (9 x 3)

#new:Script $Script_DamageCalc
{
Call     GetActorHP  	( .Actor:Player *Var[0] ) %this works
If *Var[0] > 50`
	Set *Var[0] 50` %prevent you from reducing his attack power
EndIf
Set *Var[1] *Var[0]
Mul *Var[1] -1`
Add *Var[1] 100`
Mul *Var[F] *Var[1]
Div *Var[F] 50`
Return
End
}

@ $Script_HealSelf %heal amount 20 -> 40 :)
{
    0:  Set  *Flag[00]  00000000 
   10:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   28:  Switch  *Var[0] 
   34:  	CaseOR  ==  00000004 
   40:  	CaseOR  ==  00000005 
   4C:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[A] )
   64:  		Call     GetActorVar 	( .Actor:Self 00000003 *Var[B] )
   7C:  		Call     ActorExists 	( *Var[A] *Var[0] )
   90:  		If  *Var[0]  ==  00000001 
   A0:  			Set  *Flag[00]  00000001 
   B0:  		EndIf
   B8:  	EndCaseGroup
   C0:  EndSwitch
   C8:  Call     UseIdleAnimation 	( .Actor:Self .False )
   DC:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   F0:  If  *Flag[00]  ==  00000001 
  100:  	Call     UseIdleAnimation 	( *Var[A] .False )
  114:  	Call     EnableIdleScript 	( *Var[A] 00000000 )
  128:  	Call     UseIdleAnimation 	( *Var[B] .False )
  13C:  	Call     EnableIdleScript 	( *Var[B] 00000000 )
  150:  EndIf
  158:  Call     UseBattleCamPreset 	( 00000013 )
  168:  Call     SetBattleCamZoom  	( 0000015E )
  178:  Call     SetBattleCamOffsetZ 	( 00000032 )
  188:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  19C:  If  *Var[0]  &  00000200 
  1AC:  	Call     SetBattleCamTarget 	( 00000046 00000029 00000005 )
  1C4:  Else
  1CC:  	Call     SetBattleCamTarget 	( 00000046 00000000 00000005 )
  1E4:  EndIf
  1EC:  Call     MoveBattleCamOver 	( 00000014 )
  1FC:  Wait     00000014 
  208:  Call     SetAnimation 	( .Actor:Self 00000001 007F001D )
  220:  If  *Flag[00]  ==  00000001 
  230:  	Call     SetAnimation 	( *Var[A] 00000001 007F001D )
  248:  	Call     SetAnimation 	( *Var[B] 00000001 007F001D )
  260:  EndIf
  268:  Wait     00000014 
  274:  Thread
  27C:  	Wait     00000005 
  288:  	Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
  29C:  	Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
  2B0:  	Wait     0000001E 
  2BC:  	Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
  2D0:  EndThread
  2D8:  If  *Flag[00]  ==  00000001 
  2E8:  	Thread
  2F0:  		Wait     00000005 
  2FC:  		Call     PlaySoundAtActor 	( *Var[A] 0000206D )
  310:  		Call     PlaySoundAtActor 	( *Var[A] 00000214 )
  324:  		Wait     0000001E 
  330:  		Call     PlaySoundAtActor 	( *Var[A] 0000025C )
  344:  	EndThread
  34C:  	Thread
  354:  		Wait     00000005 
  360:  		Call     PlaySoundAtActor 	( *Var[B] 0000206D )
  374:  		Call     PlaySoundAtActor 	( *Var[B] 00000214 )
  388:  		Wait     0000001E 
  394:  		Call     PlaySoundAtActor 	( *Var[B] 0000025C )
  3A8:  	EndThread
  3B0:  EndIf
  3B8:  If  *Flag[00]  ==  00000000 
  3C8:  	Thread
  3D0:  		Call     8026BF48 ( 00000001 )
  3E0:  		Call     HealActor   	( .Actor:Self 00000028 00000000 )
  3F8:  		Call     8026BF48 ( 00000000 )
  408:  	EndThread
  410:  Else
  418:  	Thread
  420:  		Call     8026BF48 ( 00000001 )
  430:  		Call     HealActor   	( .Actor:Self 00000028 00000001 )
  448:  		Call     8026BF48 ( 00000000 )
  458:  	EndThread
  460:  	Thread
  468:  		Call     8026BF48 ( 00000001 )
  478:  		Call     HealActor   	( *Var[A] 00000028 00000001 )
  490:  		Call     8026BF48 ( 00000000 )
  4A0:  	EndThread
  4A8:  	Thread
  4B0:  		Call     8026BF48 ( 00000001 )
  4C0:  		Call     HealActor   	( *Var[B] 00000028 00000001 )
  4D8:  		Call     8026BF48 ( 00000000 )
  4E8:  	EndThread
  4F0:  	Call     SetAnimation 	( *Var[A] 00000001 007F0009 )
  508:  	Call     SetAnimation 	( *Var[B] 00000001 007F0009 )
  520:  EndIf
  528:  Call     8027114C ( )
  534:  Call     UseBattleCamPreset 	( 00000002 )
  544:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  558:  Call     UseIdleAnimation 	( .Actor:Self .True )
  56C:  If  *Flag[00]  ==  00000001 
  57C:  	Call     EnableIdleScript 	( *Var[A] 00000001 )
  590:  	Call     UseIdleAnimation 	( *Var[A] .True )
  5A4:  	Call     EnableIdleScript 	( *Var[A] 00000001 )
  5B8:  	Call     UseIdleAnimation 	( *Var[A] .True )
  5CC:  EndIf
  5D4:  Return
  5DC:  End
}

@ $Script_FrostBreath
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000000E )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     SetAnimation 	( .Actor:Self 00000001 007F0013 )
   74:  Wait     0000000A 
   80:  Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
   94:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   A8:  If  *Var[0]  !&  00080000 
   B8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   D4:  	Add  *Var[1]  00000014 
   E4:  	Add  *Var[2]  FFFFFFFB 
   F4:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  138:  Else
  140:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  15C:  	Add  *Var[1]  00000008 
  16C:  	Add  *Var[2]  FFFFFFFE 
  17C:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1C0:  EndIf
  1C8:  Wait     0000001E 
  1D4:  Call     UseBattleCamPreset 	( 00000002 )
  1E4:  Call     MoveBattleCamOver 	( 00000014 )
  1F4:  Call     SetAnimation 	( .Actor:Self 00000001 007F001C )
  20C:  Wait     00000003 
  218:  Call     PlaySoundAtActor 	( .Actor:Self 0000035D )
  22C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  250:  Switch  *Var[0] 
  25C:  	CaseOR  ==  .HitResult:Miss % 6
  268:  	CaseOR  ==  .HitResult:Lucky % 5
  274:  		Set  *Var[A]  *Var[0] 
  284:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  298:  		If  *Var[0]  !&  00080000 
  2A8:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C4:  			Add  *Var[0]  FFFFFFF1 
  2D4:  			Add  *Var[1]  00000014 
  2E4:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Fixed[180.0] *Fixed[2.0] *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  328:  			Call     $Function_80218280 ( *Var[F] )
  338:  		Else
  340:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  35C:  			Add  *Var[0]  FFFFFFFA 
  36C:  			Add  *Var[1]  00000008 
  37C:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Fixed[180.0] *Fixed[2.0] *Fixed[0.20019531] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  3C0:  			Call     $Function_80218280 ( *Var[F] )
  3D0:  		EndIf
  3D8:  		Call     $Function_80218000 ( 00000046 0000003C )
  3EC:  		Thread
  3F4:  			Call     ShakeCam    	( 00000001 00000000 0000001E *Fixed[0.30078125] )
  410:  		EndThread
  418:  		Wait     0000001E 
  424:  		Call     StopSound   	( 0000035D )
  434:  		If  *Var[A]  ==  00000005 
  444:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  468:  		EndIf
  470:  		Wait     00000014 
  47C:  		Call     UseBattleCamPreset 	( 00000002 )
  48C:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  4A0:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  4B4:  		Return
  4BC:  EndSwitch
  4C4:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  4D8:  If  *Var[0]  !&  00080000 
  4E8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  504:  	Add  *Var[0]  FFFFFFF1 
  514:  	Add  *Var[1]  00000014 
  524:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Fixed[180.0] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  568:  	Call     $Function_80218280 ( *Var[F] )
  578:  Else
  580:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  59C:  	Add  *Var[0]  FFFFFFFA 
  5AC:  	Add  *Var[1]  00000008 
  5BC:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Fixed[180.0] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  600:  	Call     $Function_80218280 ( *Var[F] )
  610:  EndIf
  618:  Call     $Function_80218000 ( 00000046 00000064 )
  62C:  Thread
  634:  	Call     ShakeCam    	( 00000001 00000000 00000032 *Fixed[0.30078125] )
  650:  EndThread
  658:  Wait     0000003C 
  664:  Call     StopSound   	( 0000035D )
  674:  Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  68C:  Wait     00000002 
  698:  Call     SetGoalToTarget 	( .Actor:Self )
		Set 	*Var[F] 6
		ExecWait $Script_DamageCalc
  6A8:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 80004264 *Var[F] 00000020 ) 
		Wait	 0000000B
		Call	 SetTargetActor 	( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )		
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 00000000 00000001 00000020 ) %flat 1 damage  
  6D0:  Switch  *Var[0] 
  6DC:  	CaseOR  ==  00000000 
  6E8:  	CaseOR  ==  00000002 
  6F4:  		Call     UseBattleCamPreset 	( 00000002 )
  704:  	EndCaseGroup
  70C:  EndSwitch
  714:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  728:  Call     UseIdleAnimation 	( .Actor:Self .True )
  73C:  Return
  744:  End
}

@ $Script_FrostBolt
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000000E )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     SetAnimation 	( .Actor:Self 00000001 007F0013 )
   74:  Wait     0000000A 
   80:  Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
   94:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   A8:  If  *Var[0]  !&  00080000 
   B8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   D4:  	Add  *Var[1]  00000014 
   E4:  	Add  *Var[2]  FFFFFFFB 
   F4:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  138:  Else
  140:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  15C:  	Add  *Var[1]  00000008 
  16C:  	Add  *Var[2]  FFFFFFFE 
  17C:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1C0:  EndIf
  1C8:  Wait     0000001E 
  1D4:  Call     UseBattleCamPreset 	( 00000002 )
  1E4:  Call     MoveBattleCamOver 	( 00000014 )
  1F4:  Call     SetAnimation 	( .Actor:Self 00000001 007F001C )
  20C:  Wait     00000003 
  218:  Call     PlaySoundAtActor 	( .Actor:Self 000002E0 )
  22C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  250:  Switch  *Var[0] 
  25C:  	CaseOR  ==  .HitResult:Miss % 6
  268:  	CaseOR  ==  .HitResult:Lucky % 5
  274:  		Set  *Var[A]  *Var[0] 
  284:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2A0:  		Call     GetStatusFlags ( .Actor:Self *Var[3] )
  2B4:  		If  *Var[3]  !&  00080000 
  2C4:  			Add  *Var[0]  FFFFFFF1 
  2D4:  			Add  *Var[1]  00000014 
  2E4:  		Else
  2EC:  			Add  *Var[0]  FFFFFFFA 
  2FC:  			Add  *Var[1]  00000008 
  30C:  		EndIf
  314:  		Call     SetGoalToTarget 	( .Actor:Self )
  324:  		Call     AddGoalPos 	( .Actor:Self FFFFFFCE 00000014 00000000 )
  340:  		Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  35C:  		Thread
  364:  			Sub  *Var[3]  *Var[0] 
  374:  			Sub  *Var[4]  *Var[1] 
  384:  			Sub  *Var[5]  *Var[2] 
  394:  			Div  *Var[3]  0000000A 
  3A4:  			Div  *Var[4]  0000000A 
  3B4:  			Div  *Var[5]  0000000A 
  3C4:  			Loop     0000000A 
  3D0:  				Add  *Var[0]  *Var[3] 
  3E0:  				Add  *Var[1]  *Var[4] 
  3F0:  				Add  *Var[2]  *Var[5] 
  400:  				Call     PlayEffect  	( ~FX:EmitterVolume:Snowflakes *Var[0] *Var[1] *Var[2] 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
  444:  				Wait     00000001 
  450:  			EndLoop
  458:  		EndThread
  460:  		Wait     00000003 
  46C:  		Call     PlayEffect  	( ~FX:Lightning *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] *Fixed[1.0] 00000014 00000000 00000000 00000000 00000000 )
  4B0:  		Call     $Function_802182E4 ( *Var[F] )
  4C0:  		Wait     0000000A 
  4CC:  		Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  4E4:  		If  *Var[A]  ==  00000005 
  4F4:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  518:  		EndIf
  520:  		Wait     00000014 
  52C:  		Call     UseBattleCamPreset 	( 00000002 )
  53C:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  550:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  564:  		Return
  56C:  EndSwitch
  574:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  590:  Call     GetStatusFlags ( .Actor:Self *Var[3] )
  5A4:  If  *Var[3]  !&  00080000 
  5B4:  	Add  *Var[0]  FFFFFFF1 
  5C4:  	Add  *Var[1]  00000014 
  5D4:  Else
  5DC:  	Add  *Var[0]  FFFFFFFA 
  5EC:  	Add  *Var[1]  00000008 
  5FC:  EndIf
  604:  Call     SetGoalToTarget 	( .Actor:Self )
  614:  Call     GetGoalPos  	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  630:  Thread
  638:  	Sub  *Var[3]  *Var[0] 
  648:  	Sub  *Var[4]  *Var[1] 
  658:  	Sub  *Var[5]  *Var[2] 
  668:  	Div  *Var[3]  0000000A 
  678:  	Div  *Var[4]  0000000A 
  688:  	Div  *Var[5]  0000000A 
  698:  	Loop     0000000A 
  6A4:  		Add  *Var[0]  *Var[3] 
  6B4:  		Add  *Var[1]  *Var[4] 
  6C4:  		Add  *Var[2]  *Var[5] 
  6D4:  		Call     PlayEffect  	( ~FX:EmitterVolume:Snowflakes *Var[0] *Var[1] *Var[2] 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
  718:  		Wait     00000001 
  724:  	EndLoop
  72C:  EndThread
  734:  Wait     00000003 
  740:  Call     PlayEffect  	( ~FX:Lightning *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] *Fixed[1.0] 00000014 00000000 00000000 00000000 00000000 )
  784:  Call     $Function_802182E4 ( *Var[F] )
  794:  Wait     00000007 
  7A0:  Thread
  7A8:  	Wait     00000003 
  7B4:  	Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  7CC:  EndThread
  7D4:  Wait     00000002 
  7E0:  Call     SetGoalToTarget 	( .Actor:Self )
		Set 	*Var[F] 9
		ExecWait $Script_DamageCalc
  7F0:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 00000000 *Var[F] 00000020 )
  818:  Switch  *Var[0] 
  824:  	CaseOR  ==  00000000 
  830:  	CaseOR  ==  00000002 
  83C:  		Call     SetGoalToTarget 	( .Actor:Self )
  84C:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  868:  		Call     PlayEffect  	( ~FX:ColdBreath:PuffUp *Var[0] *Var[1] *Var[2] *Fixed[2.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8AC:  		Call     $Function_80218344 ( *Var[F] )
  8BC:  		Wait     0000001E 
  8C8:  		Call     UseBattleCamPreset 	( 00000002 )
  8D8:  	EndCaseGroup
  8E0:  EndSwitch
  8E8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  8FC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  910:  Return
  918:  End
}

%add 4 frame variance depending on which one he is
@ $Script_TripleFrostBreath
{
    0:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[A] )
   18:  Call     GetActorVar 	( .Actor:Self 00000003 *Var[B] )
   30:  Call     UseIdleAnimation 	( .Actor:Self .False )
   44:  Call     UseIdleAnimation 	( *Var[A] .False )
   58:  Call     UseIdleAnimation 	( *Var[B] .False )
   6C:  Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   84:  ConstOR  *Var[0] 00000040 
   94:  Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
   AC:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   C0:  Call     UseBattleCamPreset 	( 00000013 )
   D0:  Call     SetBattleCamZoom  	( 0000015E )
   E0:  Call     SetBattleCamOffsetZ 	( 00000023 )
   F0:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  104:  If  *Var[0]  &  00000200 
  114:  	Call     SetBattleCamTarget 	( 00000046 00000029 00000005 )
  12C:  Else
  134:  	Call     SetBattleCamTarget 	( 00000046 00000000 00000005 )
  14C:  EndIf
  154:  Call     MoveBattleCamOver 	( 0000000F )
  164:  Call     SetAnimation 	( .Actor:Self 00000001 007F0013 )
  17C:  Call     SetAnimation 	( *Var[A] 00000001 007F0013 )
  194:  Call     SetAnimation 	( *Var[B] 00000001 007F0013 )
  1AC:  Wait     0000000A 
  1B8:  Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
  1CC:  Call     PlaySoundAtActor 	( *Var[A] 0000206D )
  1E0:  Call     PlaySoundAtActor 	( *Var[B] 0000206D )
  1F4:  Call     GetStatusFlags ( .Actor:Self *Var[9] )
  208:  If  *Var[9]  !&  00080000 
  218:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  234:  	Add  *Var[1]  00000014 
  244:  	Add  *Var[2]  FFFFFFFB 
  254:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  298:  	Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  2B4:  	Add  *Var[1]  00000014 
  2C4:  	Add  *Var[2]  FFFFFFFB 
  2D4:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  318:  	Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
  334:  	Add  *Var[1]  00000014 
  344:  	Add  *Var[2]  FFFFFFFB 
  354:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  398:  Else
  3A0:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3BC:  	Add  *Var[1]  00000008 
  3CC:  	Add  *Var[2]  FFFFFFFE 
  3DC:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  43C:  	Add  *Var[1]  00000008 
  44C:  	Add  *Var[2]  FFFFFFFE 
  45C:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4A0:  	Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
  4BC:  	Add  *Var[1]  00000008 
  4CC:  	Add  *Var[2]  FFFFFFFE 
  4DC:  	Call     PlayEffect  	( ~FX:Sparkles:Star *Var[0] *Var[1] *Var[2] 00000008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  520:  EndIf
  528:  Wait     0000001E 
  534:  Call     UseBattleCamPreset 	( 00000002 )
  544:  Call     MoveBattleCamOver 	( 00000014 )
  554:  Call     SetAnimation 	( .Actor:Self 00000001 007F001C )
  56C:  Call     SetAnimation 	( *Var[A] 00000001 007F001C )
  584:  Call     SetAnimation 	( *Var[B] 00000001 007F001C )
  59C:  Wait     00000003 
  5A8:  Call     PlaySoundAtActor 	( .Actor:Self 0000035D )
  5BC:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  5E0:  Switch  *Var[0] 
  5EC:  	CaseOR  ==  .HitResult:Miss % 6
  5F8:  	CaseOR  ==  .HitResult:Lucky % 5
  604:  		Set  *Var[5]  *Var[0] 
  614:  		Call     GetActorFlags 	( .Actor:Self *Var[0] )
  628:  		If  *Var[0]  &  00000200 
  638:  			SetF  *Var[3]  *Fixed[195.0] 
  648:  		Else
  650:  			SetF  *Var[3]  *Fixed[180.0] 
  660:  		EndIf
  668:  		Call     $Function_80218000 ( 00000064 0000003C )
  67C:  		Thread
  684:  			Call     ShakeCam    	( 00000001 00000000 0000001E *Fixed[0.30078125] )
  6A0:  		EndThread
  6A8:  		Call     GetStatusFlags ( .Actor:Self *Var[9] )
  6BC:  		If  *Var[9]  !&  00080000 
  6CC:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6E8:  			Add  *Var[0]  FFFFFFF1 
  6F8:  			Add  *Var[1]  00000014 
  708:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  74C:  			Call     $Function_80218280 ( *Var[F] )
  75C:  			Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  778:  			Add  *Var[0]  FFFFFFF1 
  788:  			Add  *Var[1]  00000014 
  798:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  7DC:  			Call     $Function_80218280 ( *Var[F] )
  7EC:  			Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
  808:  			Add  *Var[0]  FFFFFFF1 
  818:  			Add  *Var[1]  00000014 
  828:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  86C:  			Call     $Function_80218280 ( *Var[F] )
  87C:  		Else
  884:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8A0:  			Add  *Var[0]  FFFFFFFA 
  8B0:  			Add  *Var[1]  00000008 
  8C0:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[0.40039062] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  904:  			Call     $Function_80218280 ( *Var[F] )
  914:  			Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  930:  			Add  *Var[0]  FFFFFFFA 
  940:  			Add  *Var[1]  00000008 
  950:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[0.40039062] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  994:  			Call     $Function_80218280 ( *Var[F] )
  9A4:  			Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
  9C0:  			Add  *Var[0]  FFFFFFFA 
  9D0:  			Add  *Var[1]  00000008 
  9E0:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[0.40039062] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  A24:  			Call     $Function_80218280 ( *Var[F] )
  A34:  		EndIf
  A3C:  		Wait     0000001E 
  A48:  		Call     StopSound   	( 0000035D )
  A58:  		If  *Var[5]  ==  00000005 
  A68:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  A8C:  		EndIf
  A94:  		Wait     00000014 
  AA0:  		Call     UseBattleCamPreset 	( 00000002 )
  AB0:  		Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  AC8:  		ConstAND *Var[0] FFFFFFBF 
  AD8:  		Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
  AF0:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  B04:  		Call     UseIdleAnimation 	( *Var[A] .True )
  B18:  		Call     UseIdleAnimation 	( *Var[B] .True )
  B2C:  		Return
  B34:  EndSwitch
  B3C:  Call     GetActorFlags 	( .Actor:Self *Var[0] )
  B50:  If  *Var[0]  &  00000200 
  B60:  	SetF  *Var[3]  *Fixed[195.0] 
  B70:  Else
  B78:  	SetF  *Var[3]  *Fixed[180.0] 
  B88:  EndIf
  B90:  Call     $Function_80218000 ( 00000064 00000078 )
  BA4:  Thread
  BAC:  	Call     ShakeCam    	( 00000001 00000000 0000003C *Fixed[0.30078125] )
  BC8:  EndThread
  BD0:  Call     GetStatusFlags ( .Actor:Self *Var[9] )
		Set *Var[6] 0
  BE4:  If  *Var[9]  !&  00080000 
  BF4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Set *Var[E] *Var[0]
  C10:  	Add  *Var[0]  FFFFFFF1 
  C20:  	Add  *Var[1]  00000014 
  C30:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  C74:  	Call     $Function_80218280 ( *Var[F] )
  C84:  	Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
			Set *Var[D] *Var[0]
  CA0:  	Add  *Var[0]  FFFFFFF1 
  CB0:  	Add  *Var[1]  00000014 
  CC0:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  D04:  	Call     $Function_80218280 ( *Var[F] )
  D14:  	Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
			Set *Var[C] *Var[0]
  D30:  	Add  *Var[0]  FFFFFFF1 
  D40:  	Add  *Var[1]  00000014 
  D50:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  D94:  	Call     $Function_80218280 ( *Var[F] )
			If *Var[E] > *Var[D]
				Add *Var[6] 4
			EndIf
			If *Var[E] > *Var[C]
				Add *Var[6] 4
			EndIf
  DA4:  Else
  DAC:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Set *Var[E] *Var[0]
  DC8:  	Add  *Var[0]  FFFFFFFA 
  DD8:  	Add  *Var[1]  00000008 
  DE8:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  E2C:  	Call     $Function_80218280 ( *Var[F] )
  E3C:  	Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
			Set *Var[D] *Var[0]
  E58:  	Add  *Var[0]  FFFFFFFA 
  E68:  	Add  *Var[1]  00000008 
  E78:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  EBC:  	Call     $Function_80218280 ( *Var[F] )
  ECC:  	Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
			Set *Var[C] *Var[0]
  EE8:  	Add  *Var[0]  FFFFFFFA 
  EF8:  	Add  *Var[1]  00000008 
  F08:  	Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Var[3] *Fixed[2.0] *Fixed[1.0] 0000003C 00000000 00000000 00000000 00000000 00000000 )
  F4C:  	Call     $Function_80218280 ( *Var[F] )
			If *Var[E] > *Var[D]
				Add *Var[6] 4
			EndIf
			If *Var[E] > *Var[C]
				Add *Var[6] 4
			EndIf
  F5C:  EndIf
  %F64:  Wait     0000003C 
  F64:  Wait     00000038
		Wait 	 *Var[6]
  F70:  Call     StopSound   	( 0000035D )
  F80:  Call     SetAnimation 	( .Actor:Self 00000001 007F0015 )
  F98:  Call     SetAnimation 	( *Var[A] 00000001 007F0015 )
  FB0:  Call     SetAnimation 	( *Var[B] 00000001 007F0015 )
  FC8:  Wait     00000002 
  FD4:  Call     SetGoalToTarget 	( .Actor:Self )		
		Set 	*Var[F] 8
		ExecWait $Script_DamageCalc
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 80004264 *Var[F] 00000020 ) 
		Wait	 0000000B
		Call	 SetTargetActor 	( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )		
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 00000000 00000001 00000020 ) %flat 1 damage  
 100C:  Switch  *Var[0] 
 1018:  	CaseOR  ==  00000000 
 1024:  	CaseOR  ==  00000002 
 1030:  		Call     UseBattleCamPreset 	( 00000002 )
 1040:  		Wait     00000014 
 104C:  	EndCaseGroup
 1054:  EndSwitch
 105C:  Call     GetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
 1074:  ConstAND *Var[0] FFFFFFBF 
 1084:  Call     SetActorVar 	( .Actor:Enemy0 00000000 *Var[0] )
 109C:  Call     UseIdleAnimation 	( .Actor:Self .True )
 10B0:  Call     UseIdleAnimation 	( *Var[A] .True )
 10C4:  Call     UseIdleAnimation 	( *Var[B] .True )
 10D8:  Return
 10E0:  End
}

@ $Script_SpitRock
{
    0:  Call     PlaySoundAtActor 	( .Actor:Self 000003D9 )
   14:  Set  *Var[A]  *Var[0] 
   24:  Call     SetPartFlagBits 	( *Var[A] 00000001 00000001 .False )
   40:  Call     SetActorFlagBits 	( *Var[A] 00000004 .False )
   58:  Call     SetGoalToTarget 	( .Actor:Self )
   68:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   84:  Call     GetActorPos 	( *Var[A] *Var[3] *Var[4] *Var[5] )
   A0:  Thread
   A8:  	Sub  *Var[0]  *Var[3] 
   B8:  	Sub  *Var[1]  *Var[4] 
   C8:  	Sub  *Var[2]  *Var[5] 
   D8:  	Div  *Var[0]  0000000A 
   E8:  	Div  *Var[1]  0000000A 
   F8:  	Div  *Var[2]  0000000A 
  108:  	Loop     0000000A 
  114:  		Add  *Var[3]  *Var[0] 
  124:  		Add  *Var[4]  *Var[1] 
  134:  		Add  *Var[5]  *Var[2] 
  144:  		Call     PlayEffect  	( ~FX:EmitterVolume:Snowflakes *Var[3] *Var[4] *Var[5] 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
  188:  		Wait     00000001 
  194:  	EndLoop
  19C:  EndThread
  1A4:  Call     SetActorSpeed 	( *Var[A] *Fixed[16.0] )
  1B8:  Call     SetGoalPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  1D4:  Call     FlyToGoal  	( *Var[A] 00000000 00000000 .Easing:Linear )
  1F0:  Wait     00000002 
		Set 	*Var[F] 6
		ExecWait $Script_DamageCalc
  1FC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000008 00000000 00000000 *Var[F] 00000000 )
  224:  Call     SetActorJumpGravity 	( *Var[A] *Fixed[1.0] )
  238:  Call     GetActorPos 	( *Var[A] *Var[1] *Var[2] *Var[3] )
  254:  Sub  *Var[1]  00000064 
  264:  Call     RandInt     	( 00000032 *Var[4] )
  278:  Add  *Var[2]  *Var[4] 
  288:  Call     SetGoalPos 	( *Var[A] *Var[1] *Var[2] *Var[3] )
  2A4:  Call     JumpToGoal  	( *Var[A] 00000014 00000000 00000001 00000000 )
  2C4:  Call     GetActorVar 	( *Var[A] 00000000 *Var[F] )
  2DC:  Call     RemoveEffect 	( *Var[F] )
  2EC:  Call     RemoveActor 	( *Var[A] )
  2FC:  Return
  304:  End
}
