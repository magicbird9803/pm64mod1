/%
80231000 : 40 Tutankoopa Refight
80231000 : 41 General Guy Refight
80231000 : 42 Lava Piranha Refight
80231000 : 43 Huff N Puff Refight
80231000 : 44 Crystal King Refight
80231000 : 45 Bowser Refight
%/

/%
similar to master quest :P
Goomba king
	100 hp, 8 atk, 0 def
	triple kick does 8 each
	nut does 10 + 3 turn sleep
	
red goomba
	70 hp, 5 atk, 0 def
	can buff goomba king for +3 atk
	can do double attack
	can do charge attack for 12 damage
	below half health, can attack and buff on same turn
blue goomba
	60 hp, 5 atk, 0 def
	can buff goomba king for +3 def
	can do double attack
	can do charge attack for 12 damage	
	below half health, can attack and buff on same turn
%/


%this stupid float table is generating a bunch of nan errors
#new:FloatTable $FloatTable_Goomba
{
	0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
	0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
	0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
	0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
	0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
	0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
	0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
	0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
	0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
	0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
	0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
	0.999391 0.999848 1.0
}

#new:Function $Function_80218000
{
    0:  ADDIU		SP, SP, FFD8
    4:  SDC1		F22, 20 (SP)
    8:  MOV.S		F22, F12
    C:  SDC1		F20, 18 (SP)
   10:  SW			RA, 10 (SP)
   14:  JAL			~Func:sqrtf
   18:  MOV.S		F20, F14
   1C:  TRUNC.W.S	F6, F20
   20:  MFC1		V0, F6
   24:  NOP
   28:  BLTZL		V0, .o30
   2C:  SUBU		V0, R0, V0
        .o30
   30:  MTC1		V0, F2
   34:  NOP
   38:  CVT.S.W		F2, F2
   3C:  DIV.S		F4, F2, F0
   40:  CLEAR		A0
   44:  ADDIU		A2, R0, 5A
   48:  COPY		A1, A0
   4C:  LIA			A3, $FloatTable_Goomba
   54:  ANDI		V0, A2, FFFF
        .o58
   58:  ANDI		V1, A0, FFFF
   5C:  SUBU		V0, V0, V1
   60:  SRL			V1, V0, 1F
   64:  ADDU		V0, V0, V1
   68:  SRA			V0, V0, 1
   6C:  ADDU		V1, A0, V0
   70:  ANDI		V0, V1, FFFF
   74:  SLL			V0, V0, 2
   78:  ADDU		V0, V0, A3
   7C:  LWC1		F0, 0 (V0)
   80:  C.LT.S		F0, F4
   84:  NOP
   88:  BC1FL		.o94
   8C:  COPY		A2, V1
   90:  COPY		A0, V1
        .o94
   94:  ADDIU		A1, A1, 1
   98:  ANDI		V0, A1, FFFF
   9C:  SLTIU		V0, V0, 7
   A0:  BNE			V0, R0, .o58
   A4:  ANDI		V0, A2, FFFF
   A8:  ANDI		V0, A0, FFFF
   AC:  SLL			V0, V0, 2
   B0:  ANDI		V1, A2, FFFF
   B4:  LTF			F2, V0 ($FloatTable_Goomba)
   C0:  SLL			V1, V1, 2
   C4:  SUB.S		F2, F2, F4
   C8:  LTF			F0, V1 ($FloatTable_Goomba)
   D4:  SUB.S		F0, F0, F4
   D8:  ABS.S		F2, F2
   DC:  ABS.S		F0, F0
   E0:  C.LT.S		F2, F0
   E4:  NOP
   E8:  BC1F		.oF4
   EC:  COPY		V1, A2
   F0:  COPY		V1, A0
        .oF4
   F4:  MTC1		R0, F0
   F8:  NOP
   FC:  C.LT.S		F22, F0
  100:  NOP
  104:  BC1F		.o130
  108:  NOP
  10C:  C.LE.S		F0, F20
  110:  NOP
  114:  BC1F		.o128
  118:  ADDIU		V0, R0, B4
  11C:  SUBU		V1, V0, V1
  120:  MTC1		R0, F0
  124:  NOP
        .o128
  128:  C.LT.S		F22, F0
  12C:  NOP
        .o130
  130:  BC1F		.o148
  134:  NOP
  138:  C.LT.S		F20, F0
  13C:  NOP
  140:  BC1TL		.o148
  144:  ADDIU		V1, V1, B4
        .o148
  148:  MTC1		R0, F0
  14C:  NOP
  150:  C.LE.S		F0, F22
  154:  NOP
  158:  BC1F		.o174
  15C:  NOP
  160:  C.LT.S		F20, F0
  164:  NOP
  168:  BC1F		.o174
  16C:  ADDIU		V0, R0, 168
  170:  SUBU		V1, V0, V1
        .o174
  174:  LW			RA, 10 (SP)
  178:  LDC1		F22, 20 (SP)
  17C:  LDC1		F20, 18 (SP)
  180:  ANDI		V0, V1, FFFF
  184:  JR			RA
  188:  ADDIU		SP, SP, 28
}

#new:Function $Function_80218500
{
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       ~Func:length2D
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  CLEAR     A0
   44:  LI        A2, 5A
   48:  COPY      A1, A0
   4C:  LA        A3, $FloatTable_Goomba
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  COPY      A2, V1
   90:  COPY      A0, V1
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_Goomba)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_Goomba)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  COPY      V1, A2
   F0:  COPY      V1, A0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  LI        V0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  LI        V0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_8021868C
{
    0:  ADDIU		SP, SP, FFD8
    4:  SW			S4, 20 (SP)
    8:  COPY		S4, A0
    C:  SW			RA, 24 (SP)
   10:  SW			S3, 1C (SP)
   14:  SW			S2, 18 (SP)
   18:  SW			S1, 14 (SP)
   1C:  SW			S0, 10 (SP)
   20:  LW			S2, C (S4)
   24:  LW			A1, 0 (S2)
   28:  JAL			~Func:get_variable
   2C:  ADDIU		S2, S2, 4
   30:  LW			A1, 0 (S2)
   34:  ADDIU		S2, S2, 4
   38:  COPY		A0, S4
   3C:  JAL			~Func:get_variable
   40:  COPY		S0, V0
   44:  LW			A1, 0 (S2)
   48:  ADDIU		S2, S2, 4
   4C:  COPY		A0, S4
   50:  JAL			~Func:get_variable
   54:  COPY		S1, V0
   58:  COPY		S3, V0
   5C:  LW			A1, 0 (S2)
   60:  ADDIU		S2, S2, 4
   64:  COPY		A0, S4
   68:  JAL			~Func:get_variable
   6C:  SUBU		S3, S3, S0
   70:  COPY		S0, V0
   74:  COPY		A0, S4
   78:  LW			A1, 0 (S2)
   7C:  JAL			~Func:get_variable
   80:  SUBU		S0, S0, S1
   84:  BNE			S3, R0, .oA0
   88:  NOP
   8C:  BNE			S0, R0, .oA0
   90:  COPY		A0, S4
   94:  LW			A1, 0 (S2)
   98:  BEQ			R0, R0, .oC8
   9C:  COPY		A2, V0
        .oA0
   A0:  MTC1		S3, F12
   A4:  NOP
   A8:  CVT.S.W		F12, F12
   AC:  MTC1		S0, F14
   B0:  NOP
   B4:  JAL			$Function_80218500
   B8:  CVT.S.W		F14, F14
   BC:  COPY		A0, S4
   C0:  LW			A1, 0 (S2)
   C4:  ADDIU		A2, V0, FFA6
        .oC8
   C8:  JAL			~Func:set_variable
   CC:  NOP
   D0:  ADDIU		V0, R0, 2
   D4:  LW			RA, 24 (SP)
   D8:  LW			S4, 20 (SP)
   DC:  LW			S3, 1C (SP)
   E0:  LW			S2, 18 (SP)
   E4:  LW			S1, 14 (SP)
   E8:  LW			S0, 10 (SP)
   EC:  JR			RA
   F0:  ADDIU		SP, SP, 28
}

#new:Function $Function_80218780
{
    0:  ADDIU		SP, SP, FFE8
    4:  SW			RA, 10 (SP)
    8:  JAL			~Func:get_actor
    C:  LW			A0, 148 (A0)
   10:  LW			A0, 8 (V0)
   14:  LBU			V1, 6 (A0)
   18:  ADDIU		V0, R0, 2
   1C:  SRLV		V1, V1, V0
   20:  SB			V1, 6 (A0)
   24:  LW			RA, 10 (SP)
   28:  JR			RA
   2C:  ADDIU		SP, SP, 18
}

#new:Function $Function_802187B0
{
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       ~Func:length2D
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  CLEAR     A0
   44:  LI        A2, 5A
   48:  COPY      A1, A0
   4C:  LA        A3, $FloatTable_Goomba
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  COPY      A2, V1
   90:  COPY      A0, V1
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_Goomba)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_Goomba)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  COPY      V1, A2
   F0:  COPY      V1, A0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  LI        V0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  LI        V0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_8021893C
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S4, 20 (SP)
    8:  COPY      S4, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  LW        S2, C (S4)
   24:  LW        A1, 0 (S2)
   28:  JAL       ~Func:get_variable
   2C:  ADDIU     S2, S2, 4
   30:  LW        A1, 0 (S2)
   34:  ADDIU     S2, S2, 4
   38:  COPY      A0, S4
   3C:  JAL       ~Func:get_variable
   40:  COPY      S0, V0
   44:  LW        A1, 0 (S2)
   48:  ADDIU     S2, S2, 4
   4C:  COPY      A0, S4
   50:  JAL       ~Func:get_variable
   54:  COPY      S1, V0
   58:  COPY      S3, V0
   5C:  LW        A1, 0 (S2)
   60:  ADDIU     S2, S2, 4
   64:  COPY      A0, S4
   68:  JAL       ~Func:get_variable
   6C:  SUBU      S3, S3, S0
   70:  COPY      S0, V0
   74:  COPY      A0, S4
   78:  LW        A1, 0 (S2)
   7C:  JAL       ~Func:get_variable
   80:  SUBU      S0, S0, S1
   84:  BNE       S3, R0, .oA0
   88:  NOP
   8C:  BNE       S0, R0, .oA0
   90:  COPY      A0, S4
   94:  LW        A1, 0 (S2)
   98:  BEQ       R0, R0, .oC8
   9C:  COPY      A2, V0
        .oA0
   A0:  MTC1      S3, F12
   A4:  NOP
   A8:  CVT.S.W   F12, F12
   AC:  MTC1      S0, F14
   B0:  NOP
   B4:  JAL       $Function_80218500
   B8:  CVT.S.W   F14, F14
   BC:  COPY      A0, S4
   C0:  LW        A1, 0 (S2)
   C4:  ADDIU     A2, V0, FFA6
        .oC8
   C8:  JAL       ~Func:set_variable
   CC:  NOP
   D0:  LI        V0, 2
   D4:  LW        RA, 24 (SP)
   D8:  LW        S4, 20 (SP)
   DC:  LW        S3, 1C (SP)
   E0:  LW        S2, 18 (SP)
   E4:  LW        S1, 14 (SP)
   E8:  LW        S0, 10 (SP)
   EC:  JR        RA
   F0:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218A30
{
    0:  ADDIU		SP, SP, FFE8
    4:  SW			RA, 10 (SP)
    8:  JAL			~Func:get_actor
    C:  LW			A0, 148 (A0)
   10:  LW			A0, 8 (V0)
   14:  LBU			V1, 6 (A0)
   18:  ADDIU		V0, R0, 2
   1C:  SRLV		V1, V1, V0
   20:  SB			V1, 6 (A0)
   24:  LW			RA, 10 (SP)
   28:  JR			RA
   2C:  ADDIU		SP, SP, 18
}

#new:Function $Function_80218B10
{
    0:  ADDIU		SP, SP, FFD0
    4:  SDC1		F20, 18 (SP)
    8:  MTC1		A1, F20
    C:  SDC1		F22, 20 (SP)
   10:  MTC1		A2, F22
   14:  SW			S0, 10 (SP)
   18:  SDC1		F24, 28 (SP)
   1C:  MTC1		A3, F24
   20:  SW			RA, 14 (SP)
   24:  JAL			~Func:guMtxIdentF
   28:  COPY		S0, A0
   2C:  MUL.S		F22, F20, F22
   30:  NOP
   34:  MUL.S		F20, F20, F24
   38:  NOP
   3C:  LIF			F0, 1.0
   44:  NOP
   48:  SWC1		F0, 14 (S0)
   4C:  SWC1		F22, 10 (S0)
   50:  SWC1		F20, 18 (S0)
   54:  LW			RA, 14 (SP)
   58:  LW			S0, 10 (SP)
   5C:  LDC1		F24, 28 (SP)
   60:  LDC1		F22, 20 (SP)
   64:  LDC1		F20, 18 (SP)
   68:  JR			RA
   6C:  ADDIU		SP, SP, 30
}

#new:Function $Function_80218B80
{
    0:  ADDIU		SP, SP, FF78
    4:  SW			S1, 54 (SP)
    8:  COPY		S1, A0
    C:  SW			RA, 5C (SP)
   10:  SW			S2, 58 (SP)
   14:  SW			S0, 50 (SP)
   18:  SDC1		F28, 80 (SP)
   1C:  SDC1		F26, 78 (SP)
   20:  SDC1		F24, 70 (SP)
   24:  SDC1		F22, 68 (SP)
   28:  SDC1		F20, 60 (SP)
   2C:  LW			S0, C (S1)
   30:  LW			A1, 0 (S0)
   34:  JAL			~Func:get_variable
   38:  ADDIU		S0, S0, 4
   3C:  JAL			~Func:get_model_list_index_from_tree_index
   40:  COPY		A0, V0
   44:  LW			A1, 0 (S0)
   48:  ADDIU		S0, S0, 4
   4C:  COPY		A0, S1
   50:  JAL			~Func:get_float_variable
   54:  COPY		S2, V0
   58:  LW			A1, 0 (S0)
   5C:  ADDIU		S0, S0, 4
   60:  COPY		A0, S1
   64:  JAL			~Func:get_float_variable
   68:  MOV.S		F28, F0
   6C:  LW			A1, 0 (S0)
   70:  ADDIU		S0, S0, 4
   74:  COPY		A0, S1
   78:  JAL			~Func:get_float_variable
   7C:  MOV.S		F26, F0
   80:  COPY		A0, S1
   84:  LW			A1, 0 (S0)
   88:  JAL			~Func:get_float_variable
   8C:  MOV.S		F22, F0
   90:  COPY		A0, S2
   94:  JAL			~Func:get_model_from_list_index
   98:  MOV.S		F24, F0
   9C:  COPY		S1, V0
   A0:  LHU			V0, 0 (S1)
   A4:  ANDI		V0, V0, 400
   A8:  BNE			V0, R0, .o124
   AC:  ADDIU		S0, S1, 58
   B0:  MTC1		R0, F20
   B4:  MFC1		A2, F22
   B8:  MFC1		A1, F20
   BC:  MFC1		A3, F20
   C0:  JAL			~Func:guTranslateF
   C4:  COPY		A0, S0
   C8:  MFC1		A1, F28
   CC:  MFC1		A2, F26
   D0:  MFC1		A3, F24
   D4:  JAL			$Function_80218B10
   D8:  ADDIU		A0, SP, 10
   DC:  ADDIU		A0, SP, 10
   E0:  COPY		A1, S0
   E4:  JAL			~Func:guMtxCatF
   E8:  COPY		A2, S0
   EC:  ADDIU		A0, SP, 10
   F0:  NEG.S		F22, F22
   F4:  MFC1		A1, F20
   F8:  MFC1		A2, F22
   FC:  JAL			~Func:guTranslateF
  100:  COPY		A3, A1
  104:  ADDIU		A0, SP, 10
  108:  COPY		A1, S0
  10C:  JAL			~Func:guMtxCatF
  110:  COPY		A2, A1
  114:  LHU			V0, 0 (S1)
  118:  ORI			V0, V0, 1400
  11C:  BEQ			R0, R0, .o19C
  120:  SH			V0, 0 (S1)
        .o124
  124:  MTC1		R0, F20
  128:  MFC1		A2, F22
  12C:  MFC1		A1, F20
  130:  MFC1		A3, F20
  134:  JAL			~Func:guTranslateF
  138:  ADDIU		A0, SP, 10
  13C:  ADDIU		A0, SP, 10
  140:  ADDIU		S0, S1, 58
  144:  COPY		A1, S0
  148:  JAL			~Func:guMtxCatF
  14C:  COPY		A2, S0
  150:  MFC1		A1, F28
  154:  MFC1		A2, F26
  158:  MFC1		A3, F24
  15C:  JAL			$Function_80218B10
  160:  ADDIU		A0, SP, 10
  164:  ADDIU		A0, SP, 10
  168:  COPY		A1, S0
  16C:  JAL			~Func:guMtxCatF
  170:  COPY		A2, S0
  174:  ADDIU		A0, SP, 10
  178:  NEG.S		F22, F22
  17C:  MFC1		A1, F20
  180:  MFC1		A2, F22
  184:  JAL			~Func:guTranslateF
  188:  COPY		A3, A1
  18C:  ADDIU		A0, SP, 10
  190:  COPY		A1, S0
  194:  JAL			~Func:guMtxCatF
  198:  COPY		A2, A1
        .o19C
  19C:  LW			RA, 5C (SP)
  1A0:  LW			S2, 58 (SP)
  1A4:  LW			S1, 54 (SP)
  1A8:  LW			S0, 50 (SP)
  1AC:  LDC1		F28, 80 (SP)
  1B0:  LDC1		F26, 78 (SP)
  1B4:  LDC1		F24, 70 (SP)
  1B8:  LDC1		F22, 68 (SP)
  1BC:  LDC1		F20, 60 (SP)
  1C0:  ADDIU		V0, R0, 2
  1C4:  JR			RA
  1C8:  ADDIU		SP, SP, 88
}

#new:Function $Function_80219708
{
    0:  ADDIU		SP, SP, FFE8
    4:  ADDIU		A0, R0, 3D4
    8:  SW			RA, 10 (SP)
    C:  JAL			8011BB74
   10:  ADDIU		A1, R0, 3E8
   14:  ADDIU		A0, R0, F
   18:  ADDIU		A1, R0, 5
   1C:  ADDIU		A2, R0, 37
   20:  JAL			~Func:set_world_fog_color
   24:  ADDIU		A3, R0, FF
   28:  JAL			8011BB50
   2C:  NOP
   30:  LW			RA, 10 (SP)
   34:  ADDIU		V0, R0, 2
   38:  JR			RA
   3C:  ADDIU		SP, SP, 18
}

#new:Vector3D $Vector3D_802197A0
{
10` 0` 10`
}

#new:Vector3D $Vector3D_802197AC
{
70` 0` 30`
}

#new:Vector3D $Vector3D_802197B8
{
125` 0` 20`
}

#new:Vector3D $Vector3D_802197C4
{
-40` 0` -45`
}

#new:Formation $Formation_01
{
$GoombaKing $Vector3D_802197A0 0000000A 00000000 00000000 00000000 00000000 
$RedGoomba2 $Vector3D_802197AC 0000000A 00000000 00000000 00000000 00000000 
$BlueGoomba2 $Vector3D_802197B8 0000000A 00000000 00000000 00000000 00000000 
$GoomnutTree $Vector3D_802197C4 0000000A 00000000 00000000 00000000 00000000 
}

#new:FormationTable $FormationTable
{
00000000 00000004 $Formation_01 $Stage_GoombaRoad 00000000 
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:StageTable $StageTable
{
"kmr_06" $Stage_GoombaRoad 
00000000 00000000 
}


#new:DefenseTable $DefenseTable_BlueGoomba
{
.Element:Normal 00000000
.Element:Water 00000063
.Element:Ice 00000063
.Element:End
}

#new:StatusTable $StatusTable_BlueGoomba %paralyze, shrink, stop
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze  100`
.Status:Shrink     50`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_BlueGoomba
{
00800000 01000000 001800FF $IdleAnimations_BlueGoomba $DefenseTable_BlueGoomba 00000000 00000000 00FD0000 00000000 
}

#new:Actor $BlueGoomba2
{
% stats
[Index]        90b 
[Level]        40`b 
[MaxHP]        60`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_BlueGoomba 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_BlueGoomba 
[Script]      $Script_Init_BlueGoomba 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:IdleAnimations $IdleAnimations_BlueGoomba
{
.Status:Normal    00620102
.Status:Stone     00620100
.Status:Sleep     0062010D
.Status:Poison    00620102
.Status:Stop      00620100
.Status:Static    00620102
.Status:Paralyze  00620100
.Status:Dizzy     0062010C
.Status:Fear      0062010C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoombaMoving
{
.Status:Normal    00620106
.Status:Stone     00620100
.Status:Sleep     0062010D
.Status:Poison    00620102
.Status:Stop      00620100
.Status:Static    00620106
.Status:Paralyze  00620100
.Status:Dizzy     0062010C
.Status:Fear      0062010C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoomba_Charged
{
.Status:Normal    0062010D
.Status:Stone     0062010D
.Status:Sleep     0062010D
.Status:Poison    0062010D
.Status:Stop      0062010D
.Status:Static    0062010D
.Status:Paralyze  0062010D
.Status:Dizzy     0062010C
.Status:Fear      0062010C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoomba_Dark
{
.Status:Normal    00621602
.Status:Stone     00621600
.Status:Sleep     0062160D
.Status:Poison    00621602
.Status:Stop      00621600
.Status:Static    00621602
.Status:Paralyze  00621600
.Status:Dizzy     0062160C
.Status:Fear      0062160C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoombaMoving_Dark
{
.Status:Normal    00621606
.Status:Stone     00621600
.Status:Sleep     0062160D
.Status:Poison    00621602
.Status:Stop      00621600
.Status:Static    00621606
.Status:Paralyze  00621600
.Status:Dizzy     0062160C
.Status:Fear      0062160C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoomba_Charged_Dark
{
.Status:Normal    0062160D
.Status:Stone     0062160D
.Status:Sleep     0062160D
.Status:Poison    0062160D
.Status:Stop      0062160D
.Status:Static    0062160D
.Status:Paralyze  0062160D
.Status:Dizzy     0062160C
.Status:Fear      0062160C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoomba_Golden
{
.Status:Normal    00620402
.Status:Stone     00620400
.Status:Sleep     0062040D
.Status:Poison    00620402
.Status:Stop      00620400
.Status:Static    00620402
.Status:Paralyze  00620400
.Status:Dizzy     0062040C
.Status:Fear      0062040C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoombaMoving_Golden
{
.Status:Normal    00620406
.Status:Stone     00620400
.Status:Sleep     0062040D
.Status:Poison    00620402
.Status:Stop      00620400
.Status:Static    00620406
.Status:Paralyze  00620400
.Status:Dizzy     0062040C
.Status:Fear      0062040C
.Status:End
}

#new:IdleAnimations $IdleAnimations_BlueGoomba_Charged_Golden
{
.Status:Normal    0062040D
.Status:Stone     0062040D
.Status:Sleep     0062040D
.Status:Poison    0062040D
.Status:Stop      0062040D
.Status:Static    0062040D
.Status:Paralyze  0062040D
.Status:Dizzy     0062040C
.Status:Fear      0062040C
.Status:End
}


#new:Script $Script_Init2_BlueGoomba
{
		Call	$Function_SetTattle_B ( 001C0101 )
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_BlueGoomba )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Goomba )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Goomba )
   3C:  Return
   44:  End
}


#new:Script $Script_Idle_Goomba 
{
    0:  Label    0000000A 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add  *Var[0]  00000050 
   30:  Loop     *Var[0] 
   3C:  	Label    00000000 
   48:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
   5C:  	If  *Var[1]  &  0035D000 
   6C:  		Wait     00000001 
   78:  		Goto     00000000 
   84:  	EndIf
   8C:  	Wait     00000001 
   98:  EndLoop
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Add  *Var[0]  00000005 
   CC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
		Switch *VarE
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving )
			Case == 3`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving_Golden )
			Case == 4`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving_Golden )
			Case == 21` %= 0x15
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving_Dark )
			Case == 22`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving_Dark )
		EndSwitch
   F8:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  114:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
		Switch *VarE
			Case == 0`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba )
				EndIf
			Case == 1`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba )
				EndIf
			Case == 3`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Golden )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Golden )
				EndIf
			Case == 4`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Golden )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Golden )
				EndIf
			Case == 21` %= 0x15
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Dark )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Dark )
				EndIf
			Case == 22`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Dark )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Dark )
				EndIf
		EndSwitch
  140:  Loop     00000014 
  14C:  	Label    00000001 
  158:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:  	If  *Var[1]  &  0035D000 
  17C:  		Wait     00000001 
  188:  		Goto     00000001 
  194:  	EndIf
  19C:  	Wait     00000001 
  1A8:  EndLoop
  1B0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Sub  *Var[0]  00000005 
  1DC:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
		Switch *VarE
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving )
			Case == 3`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving_Golden )
			Case == 4`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving_Golden )
			Case == 21` %= 0x15
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoombaMoving_Dark )
			Case == 22`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoombaMoving_Dark )
		EndSwitch
  208:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  224:  Call     8027A264 ( FFFFFF81 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
		Switch *VarE
			Case == 0`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba )
				EndIf
			Case == 1`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba )
				EndIf
			Case == 3`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Golden )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Golden )
				EndIf
			Case == 4`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Golden )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Golden )
				EndIf
			Case == 21` %= 0x15
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Dark )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Dark )
				EndIf
			Case == 22`
				Call	 GetActorVar ( .Actor:Self 00000000 *Var[F] )
				If *Var[F] != 0
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Dark )
				Else
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Dark )
				EndIf
		EndSwitch
  250:  Loop     00000050 
  25C:  	Label    00000002 
  268:  	Call     GetStatusFlags ( .Actor:Self *Var[1] )
  27C:  	If  *Var[1]  &  0035D000 
  28C:  		Wait     00000001 
  298:  		Goto     00000002 
  2A4:  	EndIf
  2AC:  	Wait     00000001 
  2B8:  EndLoop
  2C0:  Goto     0000000A 
  2CC:  Return
  2D4:  End
}

#new:Script $Script_HandleEvent_Goomba
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	CaseOR  ==  .Event:HitCombo % 9
   70:  	CaseOR  ==  .Event:Hit % A
   7C:  		SetConst  *Var[0]  00000001 
   8C:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var1 *VarF
   9C:  		ExecWait DoNormalHit 
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		SetConst  *Var[0]  00000001 
   CC:  		SetConst  *Var[1]  0062000E 
   DC:  		SetConst  *Var[2]  0062000F 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
				Add *Var[2] *VarF
   EC:  		ExecWait DoBurnHit 
   F8:  	Case  ==  .Event:BurnDeath % 24
  104:  		SetConst  *Var[0]  00000001 
  114:  		SetConst  *Var[1]  0062000E 
  124:  		SetConst  *Var[2]  0062000F 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
				Add *Var[2] *VarF
  134:  		ExecWait DoBurnHit 
  140:  		SetConst  *Var[0]  00000001 
  150:  		SetConst  *Var[1]  0062000F 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  160:  		ExecWait DoDeath 
  16C:  		Return
  174:  	Case  ==  .Event:SpinSmashHit % B
  180:  		SetConst  *Var[0]  00000001 
  190:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  1A0:  		ExecWait DoSpinSmashHit 
  1AC:  	Case  ==  .Event:SpinSmashDeath % 21
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  1D8:  		ExecWait DoSpinSmashHit 
  1E4:  		SetConst  *Var[0]  00000001 
  1F4:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  204:  		ExecWait DoDeath 
  210:  		Return
  218:  	Case  ==  .Event:ShockHit % 2F
				Call     GetActorVar 	( .Actor:Self 00000000 00000000 )
  224:  		SetConst  *Var[0]  00000001 
  234:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  244:  		ExecWait DoShockHit 
  250:  		SetConst  *Var[0]  00000001 
  260:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  270:  		ExecWait DoJumpBack 
  27C:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  29C:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 0062000C
				Add *Var[E] *Var[F]
  2B4:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  2CC:  		Call     SetGoalToHome 	( .Actor:Self )
  2DC:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2F0:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  308:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  320:  		Wait     00000005 
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  32C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  344:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  358:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  378:  	Case  ==  .Event:ShockDeath % 26
  384:  		SetConst  *Var[0]  00000001 
  394:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  3A4:  		ExecWait DoShockHit 
  3B0:  		SetConst  *Var[0]  00000001 
  3C0:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  3D0:  		ExecWait DoDeath 
  3DC:  		Return
  3E4:  	Case  ==  .Event:StarBeam % 13
  3F0:  	CaseOR  ==  00000017 % 17
  3FC:  	CaseOR  ==  .Event:Immune % 19
  408:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  414:  		SetConst  *Var[0]  00000001 
  424:  		SetConst  *Var[1]  00620002 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  434:  		ExecWait DoImmune 
  440:  	EndCaseGroup
  448:  	Case  ==  .Event:Death % 20
  454:  		SetConst  *Var[0]  00000001 
  464:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  474:  		ExecWait DoNormalHit 
  480:  		Wait     0000000A 
  48C:  		SetConst  *Var[0]  00000001 
  49C:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  4AC:  		ExecWait DoDeath 
  4B8:  		Return
  4C0:  	Case  ==  .Event:EndFirstStrike % 35
  4CC:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620006
				Add *Var[E] *Var[F]
  4E4:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  4FC:  		Call     SetGoalToHome 	( .Actor:Self )
  50C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  520:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  538:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  550:  		Call     HPBarToHome 	( .Actor:Self )
  560:  	Case  ==  .Event:RecoverStatus % 31
  56C:  		SetConst  *Var[0]  00000001 
  57C:  		SetConst  *Var[1]  00620002 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  58C:  		ExecWait DoRecover 
  598:  	Case  ==  .Event:ScareAway % 39
  5A4:  		SetConst  *Var[0]  00000001 
  5B4:  		SetConst  *Var[1]  00620006 
  5C4:  		SetConst  *Var[2]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
				Add *Var[2] *VarF
  5D4:  		ExecWait DoScareAway 
  5E0:  		Return
  5E8:  	Case  ==  .Event:BeginAirLift % 3A
  5F4:  		SetConst  *Var[0]  00000001 
  604:  		SetConst  *Var[1]  00620006 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  614:  		ExecWait DoAirLift 
  620:  	Case  ==  .Event:BlowAway % 16
  62C:  		SetConst  *Var[0]  00000001 
  63C:  		SetConst  *Var[1]  00620009 
				Call	 GetActorVar ( .Actor:Self 00000001 *VarF )
				Mul *VarF 100
				Add *Var[1] *VarF
  64C:  		ExecWait DoBlowAway 
  658:  		Return
  660:  	Default
  668:  EndSwitch
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Mul *Var[F] 100
		Set *Var[E] 00620002
		Add *Var[E] *Var[F]
  670:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}

%new AI
%charge		(If red goomba is charged, skip to headbonk) (If red goomba is dead, charge and attack on the same turn)
%charge attack
%headbonk
%try boost (skip to 2 if not possible)

#new:Script $Script_TakeTurn_BlueGoomba	
{
	Label AIStart
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
	If *Var[0] == 1`
		ExecWait $Script_Charge_Goomba
		Return
	EndIf
	Label Move
	Call     GetActorVar 	( .Actor:Self 00000002 *Var[C] )
	Switch *VarC
		Case == 0
			Call	SetActorVar		( .Actor:Self 00000002 00000001 )
			Call	ActorExists	( .Actor:Enemy1 *Var[B] )
			If *VarB == .True
				Call	GetActorVar ( .Actor:Enemy1 00000000 *VarA )
				If *VarA == 00000001
					Goto Move
				EndIf
				ExecWait $Script_Charge_Goomba
				Return
			Else
				ExecWait $Script_Charge_Goomba
				Goto AIStart
			EndIf
			Return	
		Case == 1
			Call	SetActorVar		( .Actor:Self 00000002 00000002 )
			ExecWait $Script_Headbonk_Goomba
			Return
		Case == 2			
			%if goomba king can be buffed, buff in state 1 (skip to 2 if not possible
			Call	SetActorVar		( .Actor:Self 00000002 00000000 )
			Call	ActorExists	( .Actor:Enemy0 *Var[0] ) 
			If  *Var[0]  ==  .True
				Call	GetActorAttackBoost	( .Actor:Enemy0 *Var[0] )
				If  *Var[0]  <  00000005
					Set  *Var[0]  .Actor:Enemy0
					ExecWait	$Script_BoostGoombaKing
					Return
				Else
					Goto Move
				EndIf
			Else
				Goto Move
			EndIf	
		Default
			Call	SetActorVar		( .Actor:Self 00000002 00000000 )
			ExecWait $Script_Charge_Goomba
			Call	ActorExists	( .Actor:Enemy2 *Var[B] )
			If *Var[B] == .False
				Goto AIStart
			EndIf
			Return		
	EndSwitch
	Return
	End
}

#new:Script $Script_Init_BlueGoomba
{
    0:  ExecWait $Script_Init2_BlueGoomba 
    %C:  Call     SetEnemyHP  	( .Actor:Self 00000002 )
		If	*Flag_Rematch0  ==  .True
			Call	$Function_SetLevel	( $BlueGoomba2 0` )
		EndIf
		Call     SetActorVar 	( .Actor:Self 00000000 00000000 ) %is charged
		Call     SetActorVar 	( .Actor:Self 00000001 00000001 ) %blue goomba
		Call     SetActorVar 	( .Actor:Self 00000002 00000000 ) %AI state
		Call	 $Function_GetCurseState ( *VarB )
		Call     SetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 1`
				%Set to dark palette
				Call     SetActorVar 	( .Actor:Self 00000001 00000016 ) %palette 16
				Call     SetActorVar 	( .Actor:Self 0000000F 00000001 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Dark )
			CaseOR == 2`
			CaseOR == 3`
				%Set to golden palette
				Call     SetActorVar 	( .Actor:Self 00000001 00000004 ) %palette 4
				Call     SetActorVar 	( .Actor:Self 0000000F 00000002 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Golden )
			EndCaseGroup
			Default
				%Set to regular palette				
				Call     SetActorVar 	( .Actor:Self 0000000F 00000000 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_BlueGoomba )
		EndSwitch	
   20:  Call     $Function_80218780 ( )
   2C:  Return
   34:  End
}

#new:DefenseTable $DefenseTable_RedGoomba
{
.Element:Normal 00000000
.Element:Blast	00000063
.Element:Fire	00000063
.Element:End
}

#new:StatusTable $StatusTable_RedGoomba %dizzy, shrink, stop
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy     100`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink     50`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_RedGoomba
{
00800000 01000000 001800FF $IdleAnimations_RedGoomba $DefenseTable_RedGoomba 00000000 00000000 00FD0000 00000000 
}

#new:Actor $RedGoomba2
{
% stats
[Index]        91b 
[Level]        40`b 
[MaxHP]        70`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_RedGoomba 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_RedGoomba 
[Script]      $Script_Init_RedGoomba 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:IdleAnimations $IdleAnimations_RedGoomba
{
.Status:Normal    00620002
.Status:Stone     00620000
.Status:Sleep     0062000D
.Status:Poison    00620002
.Status:Stop      00620000
.Status:Static    00620002
.Status:Paralyze  00620000
.Status:Dizzy     0062000C
.Status:Fear      0062000C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoombaMoving
{
.Status:Normal    00620006
.Status:Stone     00620000
.Status:Sleep     0062000D
.Status:Poison    00620002
.Status:Stop      00620000
.Status:Static    00620006
.Status:Paralyze  00620000
.Status:Dizzy     0062000C
.Status:Fear      0062000C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoomba_Charged
{
.Status:Normal    0062000D
.Status:Stone     0062000D
.Status:Sleep     0062000D
.Status:Poison    0062000D
.Status:Stop      0062000D
.Status:Static    0062000D
.Status:Paralyze  0062000D
.Status:Dizzy     0062000C
.Status:Fear      0062000C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoomba_Dark
{
.Status:Normal    00621502
.Status:Stone     00621500
.Status:Sleep     0062150D
.Status:Poison    00621502
.Status:Stop      00621500
.Status:Static    00621502
.Status:Paralyze  00621500
.Status:Dizzy     0062150C
.Status:Fear      0062150C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoombaMoving_Dark
{
.Status:Normal    00621506
.Status:Stone     00621500
.Status:Sleep     0062150D
.Status:Poison    00621502
.Status:Stop      00621500
.Status:Static    00621506
.Status:Paralyze  00621500
.Status:Dizzy     0062150C
.Status:Fear      0062150C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoomba_Charged_Dark
{
.Status:Normal    0062150D
.Status:Stone     0062150D
.Status:Sleep     0062150D
.Status:Poison    0062150D
.Status:Stop      0062150D
.Status:Static    0062150D
.Status:Paralyze  0062150D
.Status:Dizzy     0062150C
.Status:Fear      0062150C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoomba_Golden
{
.Status:Normal    00620302
.Status:Stone     00620300
.Status:Sleep     0062030D
.Status:Poison    00620302
.Status:Stop      00620300
.Status:Static    00620302
.Status:Paralyze  00620300
.Status:Dizzy     0062030C
.Status:Fear      0062030C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoombaMoving_Golden
{
.Status:Normal    00620306
.Status:Stone     00620300
.Status:Sleep     0062030D
.Status:Poison    00620302
.Status:Stop      00620300
.Status:Static    00620306
.Status:Paralyze  00620300
.Status:Dizzy     0062030C
.Status:Fear      0062030C
.Status:End
}

#new:IdleAnimations $IdleAnimations_RedGoomba_Charged_Golden
{
.Status:Normal    0062030D
.Status:Stone     0062030D
.Status:Sleep     0062030D
.Status:Poison    0062030D
.Status:Stop      0062030D
.Status:Static    0062030D
.Status:Paralyze  0062030D
.Status:Dizzy     0062030C
.Status:Fear      0062030C
.Status:End
}

#new:Script $Script_Init2_RedGoomba
{
		Call	$Function_SetTattle_B ( 001C0100 )
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_RedGoomba )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Goomba )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Goomba )
   3C:  Return
   44:  End
}

%new AI
%headbonk
%try boost (skip to 2 if not possible)
%charge		(If blue goomba is dead, charge and attack on the same turn)
%charge attack

#new:Script $Script_TakeTurn_RedGoomba	
{
	Label AIStart
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
	If *Var[0] == 1`
		ExecWait $Script_Charge_Goomba
		Return
	EndIf
	Label Move
	Call     GetActorVar 	( .Actor:Self 00000002 *Var[C] )
	Switch *VarC
		Case == 0
			Call	SetActorVar		( .Actor:Self 00000002 00000001 )
			ExecWait $Script_Headbonk_Goomba
			Return
		Case == 1
			%if goomba king can be buffed, buff in state 1 (skip to 2 if not possible
			Call	SetActorVar		( .Actor:Self 00000002 00000002 )
			Call	ActorExists	( .Actor:Enemy0 *Var[0] ) 
			If  *Var[0]  ==  .True
				Call	GetActorAttackBoost	( .Actor:Enemy0 *Var[0] )
				If  *Var[0]  <  00000005
					Set  *Var[0]  .Actor:Enemy0
					ExecWait	$Script_BoostGoombaKing
					Return
				Else
					Goto Move
				EndIf
			Else
				Goto Move
			EndIf
		Case == 2			
			Call	SetActorVar		( .Actor:Self 00000002 00000000 )
			Call	ActorExists	( .Actor:Enemy2 *Var[B] )
			If *VarB == .True
				Call	GetActorVar ( .Actor:Enemy2 00000000 *VarA )
				If *VarA == 00000001
					Goto Move
				EndIf
				ExecWait $Script_Charge_Goomba
				Return
			Else
				ExecWait $Script_Charge_Goomba
				Goto AIStart
			EndIf
			Return	
		Default
			Call	SetActorVar		( .Actor:Self 00000002 00000000 )
			Call	ActorExists	( .Actor:Enemy2 *Var[B] )
			If *VarB == .True
				Call	GetActorVar ( .Actor:Enemy2 00000000 *VarA )
				If *VarA == 00000001
					Goto Move
				EndIf
				ExecWait $Script_Charge_Goomba
				Return
			Else
				ExecWait $Script_Charge_Goomba
				Goto AIStart
			EndIf
			Return	
		EndSwitch
	End
}

#new:Script $Script_BoostGoombaKing
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self 00000000 )
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	0000000F 
	Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
	Mul *Var[F] 100
	Set *Var[E] 0062000A
	Add *Var[E] *Var[F]
	Call	SetAnimation	( .Actor:Self 00000001 *Var[E] )
	Wait	00000005 
	Call	PlaySoundAtActor	( .Actor:Self 000020D4 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	0000001E 
	Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
	Mul *Var[F] 100
	Set *Var[E] 00620002
	Add *Var[E] *Var[F]
	Call	SetAnimation	( .Actor:Self 00000001 *Var[E] )
	Wait	00000005 
	Thread
		Wait	0000000A 
		Call	PlaySoundAtActor 	( *Var[8] 000002DD )
	EndThread
	Thread
		Call	8026BF48	( 00000001 )
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Switch *VarF
			CaseOR == 0
			CaseOR == 3
			CaseOR == 15
				Call	BoostAttack 	( *Var[8] 00000003 )
			EndCaseGroup
			CaseOR == 1
			CaseOR == 4
			CaseOR == 16
				Call	BoostDefense 	( *Var[8] 00000003 )
			EndCaseGroup
		EndSwitch
		Call	8026BF48	( 00000000 )
	EndThread
	Call	8027114C ( )
	Call	UseBattleCamPreset 	( 00000002 )
	Wait	0000000A 
	Call	8027D7F0 ( )
	Call	EnableIdleScript 	( .Actor:Self 00000001 )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Headbonk_Goomba
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Mul *Var[F] 100
		Set *Var[E] 00620006
		Add *Var[E] *Var[F]
   74:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   CC:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Mul *Var[F] 100
		Set *Var[E] 00620002
		Add *Var[E] *Var[F]
   E4:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
   FC:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  118:  Wait     00000001 
  124:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  140:  Wait     00000005 
  14C:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Mul *Var[F] 100
		Set *Var[E] 00620008
		Add *Var[E] *Var[F]
  168:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  180:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  1A4:  Switch  *Var[0] 
  1B0:  	CaseOR  ==  .HitResult:Miss % 6
  1BC:  	CaseOR  ==  .HitResult:Lucky % 5
  1C8:  		Set  *Var[A]  *Var[0] 
  1D8:  		Call     SetGoalToTarget 	( .Actor:Self )
  1E8:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  204:  		Sub  *Var[0]  0000000A 
  214:  		Set  *Var[1]  0000000A 
  224:  		Add  *Var[2]  00000003 
  234:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  250:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  264:  		Thread
  26C:  			Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  288:  			Set  *Var[0]  00000000 
  298:  			Loop     00000010 
  2A4:  				Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  2C0:  				Call     $Function_8021893C ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  2E0:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  2FC:  				Set  *Var[1]  *Var[4] 
  30C:  				Set  *Var[2]  *Var[5] 
  31C:  				Set  *Var[3]  *Var[6] 
  32C:  				Wait     00000001 
  338:  			EndLoop
  340:  		EndThread
  348:  		Thread
  350:  			Wait     00000006 
					Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
					Mul *Var[F] 100
					Set *Var[E] 00620008
					Add *Var[E] *Var[F]
  35C:  			Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  374:  		EndThread
  37C:  		Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 0062000D
				Add *Var[E] *Var[F]
  39C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  3B4:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  3D0:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000005 00000000 )
  3EC:  		Wait     00000001 
  3F8:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  414:  		Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  430:  		Wait     00000001 
  43C:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  458:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000007 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620009
				Add *Var[E] *Var[F]
  474:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  48C:  		Wait     00000005 
  498:  		If  *Var[A]  ==  00000005 
  4A8:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4CC:  		EndIf
  4D4:  		Wait     00000005 
  4E0:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620008
				Add *Var[E] *Var[F]
  4FC:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  514:  		Call     SetGoalToTarget 	( .Actor:Self )
  524:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  540:  		Add  *Var[0]  00000014 
  550:  		Set  *Var[1]  00000000 
  560:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  57C:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
  590:  		Thread
  598:  			Wait     00000004 
  5A4:  			Set  *Var[0]  000000B4 
  5B4:  			Loop     00000004 
  5C0:  				Sub  *Var[0]  0000002D 
  5D0:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  5EC:  				Wait     00000001 
  5F8:  			EndLoop
					Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
					Mul *Var[F] 100
					Set *Var[E] 00620008
					Add *Var[E] *Var[F]
  600:  			Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  618:  		EndThread
  620:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 0062000C
				Add *Var[E] *Var[F]
  640:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  658:  		Wait     00000005 
  664:  		Call     UseBattleCamPreset 	( 00000002 )
  674:  		Call     YieldTurn   	( )
  680:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  694:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6B0:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  6C8:  		Call     SetGoalToHome 	( .Actor:Self )
  6D8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6EC:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  704:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  71C:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  730:  		Wait     00000005 
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  73C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  754:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  768:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  788:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  7A0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7B4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7C8:  		Return
  7D0:  	EndCaseGroup
  7D8:  	Default
  7E0:  		Call     SetGoalToTarget 	( .Actor:Self )
  7F0:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  804:  		Thread
  80C:  			Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  828:  			Set  *Var[0]  00000000 
  838:  			Loop     00000010 
  844:  				Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  860:  				Call     $Function_8021893C ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  880:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  89C:  				Set  *Var[1]  *Var[4] 
  8AC:  				Set  *Var[2]  *Var[5] 
  8BC:  				Set  *Var[3]  *Var[6] 
  8CC:  				Wait     00000001 
  8D8:  			EndLoop
  8E0:  		EndThread
  8E8:  		Thread
  8F0:  			Wait     00000006 
					Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
					Mul *Var[F] 100
					Set *Var[E] 00620008
					Add *Var[E] *Var[F]
  8FC:  			Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  914:  		EndThread
  91C:  		Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620008
				Add *Var[E] *Var[F]
  93C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  954:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  970:  		Wait     00000001 
  97C:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  998:  		Wait     00000001 
  9A4:  EndSwitch
  9AC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
		%hit again
    	Call     SetGoalToTarget 	( .Actor:Self )
    	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
    	Thread
    		Wait     00000006 
			Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
			Mul *Var[F] 100
			Set *Var[E] 00620008
			Add *Var[E] *Var[F]
    		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
    	EndThread
    	Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
		Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
		Mul *Var[F] 100
		Set *Var[E] 00620008
		Add *Var[E] *Var[F]
    	Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
   		Wait     00000001 
		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
		Wait     00000001 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  9D4:  Switch  *Var[0] 
  9E0:  	CaseOR  ==  00000000 
  9EC:  	CaseOR  ==  00000002 
  9F8:  		Call     UseBattleCamPreset 	( 00000002 )
  A08:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  A24:  		Wait     00000001 
  A30:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A4C:  		Wait     00000001 
  A58:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  A74:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  A90:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  AA8:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AC4:  		Add  *Var[0]  00000028 
  AD4:  		Set  *Var[1]  00000000 
  AE4:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  AF8:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B14:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  B34:  		Add  *Var[0]  0000001E 
  B44:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B60:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  B80:  		Add  *Var[0]  00000014 
  B90:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  BAC:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  BCC:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  BE4:  		Wait     00000003 
  BF0:  		Call     YieldTurn   	( )
  BFC:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620006
				Add *Var[E] *Var[F]
  C14:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  C2C:  		Call     SetGoalToHome 	( .Actor:Self )
  C3C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  C50:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  C68:  		Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  C80:  	EndCaseGroup
  C88:  EndSwitch
  C90:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  CA4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  CB8:  Return
  CC0:  End
}  

#new:Script $Script_Charge_Goomba %also does the charge attack
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   64:  If  *Var[0]  ==  00000000 
   74:  	Call     UseBattleCamPreset 	( 0000000E )
   84:  	Call     BattleCamTargetActor ( .Actor:Self )
   94:  	Call     MoveBattleCamOver 	( 00000014 )
   A4:  	Wait     00000014 
   B0:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:PowerUp )
   C4:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   E0:  	Add  *Var[1]  0000000A 
   F0:  	Call     PlayEffect  	( ~FX:EnergyIn:LongStreaks1 *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000002D 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
			Mul *Var[F] 100
			Set *Var[E] 00620006
			Add *Var[E] *Var[F]
  134:  	Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  14C:  	Wait     0000001E 
  158:  	Call     UseBattleCamPreset 	( 00000002 )
  168:  	Call     MoveBattleCamOver 	( 00000014 )
  178:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  194:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  1A8:  	Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  1C4:  	Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  %1E4:  	Call     PlaySoundAtActor 	( .Actor:Self .Sound:BigPowerUp ) %Call     PlaySoundAtActor 	( .Actor:Self 000020DD )
  %1F8:  	Call     $Function_80218000 ( 00000080 0000000A )
  20C:  	Thread
  214:  		Call     ShakeCam    	( 00000001 00000000 00000005 *Fixed[0.5] )
  230:  	EndThread
  238:  	Call     SetActorVar 	( .Actor:Self 00000000 00000001 )
			Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
			If *Var[F] == 1
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged )
			Else
  250:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged )
			EndIf
			Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
			Switch *VarE
				Case == 0`
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged )
				Case == 1`
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged )
				Case == 3`
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Golden )
				Case == 4`
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Golden )
				Case == 21` %= 0x15
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Charged_Dark )
				Case == 22`
					Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Charged_Dark )
			EndSwitch
			Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
			Mul *Var[F] 100
			Set *Var[E] 00620008
			Add *Var[E] *Var[F]
  268:  	Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  280:  	Call     EnableActorGlow 	( .Actor:Self .True )
  294:  	Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .True )
  2B0:  	Wait     00000002 
  2BC:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  2D0:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  2E4:  	Return
  2EC:  EndIf
  2F4:  Call     UseBattleCamPreset 	( 0000003F )
  304:  Call     BattleCamTargetActor ( .Actor:Self )
  314:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  32C:  Loop     00000014 
  338:  	Call     SetActorDispOffset ( FFFFFF81 00000001 00000000 00000000 )
  354:  	Wait     00000001 
  360:  	Call     SetActorDispOffset ( FFFFFF81 FFFFFFFF 00000000 00000000 )
  37C:  	Wait     00000001 
  388:  EndLoop
  390:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  3AC:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  3D0:  Switch  *Var[0] 
  3DC:  	CaseOR  ==  00000006 
  3E8:  	CaseOR  ==  00000005 
  3F4:  		Set  *Var[A]  *Var[0] 
  404:  		Thread
  40C:  			Loop     
  418:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  434:  				Add  *Var[0]  0000001E 
  444:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  460:  				If  *Var[0]  >  *Var[3] 
  470:  					BreakLoop
  478:  				EndIf
  480:  				Wait     00000001 
  48C:  			EndLoop
  494:  			Call     UseBattleCamPreset 	( 00000001 )
  4A4:  			If  *Var[A]  ==  00000005 
  4B4:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4D8:  			EndIf
  4E0:  			Wait     0000000F 
  4EC:  			Call     UseBattleCamPreset 	( 00000002 )
  4FC:  		EndThread
  504:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  520:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  53C:  		Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  558:  		Call     SetGoalToTarget 	( .Actor:Self )
  568:  		Call     AddGoalPos 	( .Actor:Self FFFFFF38 00000000 00000000 )
  584:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.015] ) %0.01 -> 0.015
  598:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  5AC:  		Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  5CC:  		Call     8026F6EC ( FFFFFF81 )
  5DC:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  5F8:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  614:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  630:  		Call     SetActorPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  64C:  		Wait     00000014 
  658:  		Call     EnableActorGlow 	( .Actor:Self .False )
  66C:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  688:  		Call     YieldTurn   	( )
  694:  		Call     SetActorPos 	( .Actor:Self 0000012C 00000000 00000000 )
  6B0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620006
				Add *Var[E] *Var[F]
  6CC:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  6E4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6F8:  		Call     SetGoalToHome 	( .Actor:Self )
  708:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  720:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  738:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  750:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
				Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
				Switch *VarE
					Case == 0`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba )
					Case == 1`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba )
					Case == 3`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Golden )
					Case == 4`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Golden )
					Case == 21` %= 0x15
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Dark )
					Case == 22`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Dark )
				EndSwitch
  780:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  794:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7A8:  		Return
  7B0:  	EndCaseGroup
  7B8:  EndSwitch
  7C0:  Call     SetActorSounds ( FFFFFF81 00000002 0000010F 00000000 )
  7DC:  Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  7F8:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000050 )
  814:  Call     SetGoalToTarget 	( .Actor:Self )
  824:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.015] ) %0.01 -> 0.015
  838:  Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
  84C:  Call     JumpToGoal  	( .Actor:Self 00000000 00000000 00000001 00000000 )
  86C:  Wait     00000002 
  878:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000010 00000020 ) %that's a lotta damage
  8A0:  Switch  *Var[0] 
  8AC:  	CaseOR  ==  00000000 
  8B8:  	CaseOR  ==  00000002 
  8C4:  		Thread
  8CC:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
  8E8:  			Set  *Var[0]  00000050 
  8F8:  			Loop     0000003C 
  904:  				Add  *Var[0]  00000012 
  914:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  930:  				Wait     00000001 
  93C:  			EndLoop
  944:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  960:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  97C:  		EndThread
  984:  		Call     UseBattleCamPreset 	( 00000002 )
  994:  		Call     8026F6EC ( FFFFFF81 )
  9A4:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.4] ) %0.8 -> 2.4
  9B8:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9D4:  		Set  *Var[1]  00000000 
  9E4:  		Sub  *Var[0]  00000032 
  9F4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A10:  		Call     JumpToGoal  	( .Actor:Self 0000001E 00000000 00000001 00000000 )
  A30:  		Sub  *Var[0]  00000028 
  A40:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  A5C:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  A7C:  		Sub  *Var[0]  0000001E 
  A8C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AA8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  AC8:  		Wait     0000000A 
  AD4:  		Call     EnableActorGlow 	( .Actor:Self .False )
  AE8:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00400000 .False )
  B04:  		Call     YieldTurn   	( )
  B10:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620006
				Add *Var[E] *Var[F]
  B24:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  B3C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  B50:  		Call     SetGoalToHome 	( .Actor:Self )
  B60:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call	 GetActorVar			( .Actor:Self 00000001 *Var[F] )
				Mul *Var[F] 100
				Set *Var[E] 00620002
				Add *Var[E] *Var[F]
  B78:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[E] )
  B90:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  BA4:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
				Call	 GetActorVar ( .Actor:Self 00000001 *Var[E] )
				Switch *VarE
					Case == 0`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba )
					Case == 1`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba )
					Case == 3`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Golden )
					Case == 4`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Golden )
					Case == 21` %= 0x15
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Dark )
					Case == 22`
						Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_BlueGoomba_Dark )
				EndSwitch
  BD4:  	EndCaseGroup
  BDC:  EndSwitch
	%
  BE4:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  BF8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  C0C:  Return
  C14:  End
}


#new:Script $Script_Init_RedGoomba
{
    0:  ExecWait $Script_Init2_RedGoomba 
		If	*Flag_Rematch0  ==  .True
			Call	$Function_SetLevel	( $RedGoomba2 0` )
		EndIf
    %C:  Call     SetEnemyHP  	( .Actor:Self 00000002 )
		Call     SetActorVar 	( .Actor:Self 00000000 00000000 ) %is charged
		Call     SetActorVar 	( .Actor:Self 00000001 00000000 ) %red goomba
		Call     SetActorVar 	( .Actor:Self 00000002 00000000 ) %AI state
		Call	 $Function_GetCurseState ( *VarB )
		Call     SetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 1`
				%Set to dark palette
				Call     SetActorVar 	( .Actor:Self 0000000F 00000001 )
				Call     SetActorVar 	( .Actor:Self 00000001 00000015 ) %+ 15
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Dark )
			CaseOR == 2`
			CaseOR == 3`
				%Set to golden palette
				Call     SetActorVar 	( .Actor:Self 0000000F 00000002 )
				Call     SetActorVar 	( .Actor:Self 00000001 00000003 ) %+ 3
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_RedGoomba_Golden )
			EndCaseGroup
			Default
				%Set to regular palette				
				Call     SetActorVar 	( .Actor:Self 0000000F 00000000 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_RedGoomba )
		EndSwitch	
   20:  Call     $Function_80218A30 ( )
   2C:  Return
   34:  End
}


#new:IdleAnimations $IdleAnimations_GoombaKing
{
.Status:Normal    00630001
.Status:Stone     00630000
.Status:Sleep     00630008
.Status:Poison    00630000
.Status:Stop      00630000
.Status:Static    00630000
.Status:Paralyze  00630000
.Status:Dizzy     00630007
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoombaKingMoving
{
.Status:Normal    00630004
.Status:Stone     00630000
.Status:Sleep     00630008
.Status:Poison    00630000
.Status:Stop      00630000
.Status:Static    00630000
.Status:Paralyze  00630000
.Status:Dizzy     00630007
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoombaKing_Dark
{
.Status:Normal    00630901
.Status:Stone     00630900
.Status:Sleep     00630908
.Status:Poison    00630900
.Status:Stop      00630900
.Status:Static    00630900
.Status:Paralyze  00630900
.Status:Dizzy     00630907
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoombaKingMoving_Dark
{
.Status:Normal    00630904
.Status:Stone     00630900
.Status:Sleep     00630908
.Status:Poison    00630900
.Status:Stop      00630900
.Status:Static    00630900
.Status:Paralyze  00630900
.Status:Dizzy     00630907
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoombaKing_Golden
{
.Status:Normal    00630101
.Status:Stone     00630100
.Status:Sleep     00630108
.Status:Poison    00630100
.Status:Stop      00630100
.Status:Static    00630100
.Status:Paralyze  00630100
.Status:Dizzy     00630107
.Status:End
}

#new:IdleAnimations $IdleAnimations_GoombaKingMoving_Golden
{
.Status:Normal    00630104
.Status:Stone     00630100
.Status:Sleep     00630108
.Status:Poison    00630100
.Status:Stop      00630100
.Status:Static    00630100
.Status:Paralyze  00630100
.Status:Dizzy     00630107
.Status:End
}

%another animation list?
/%
MISSING: 80220888 to 80220910 (00442318 to 004423A0)
00000001 00630007 0000000C 00630000 00000006 00630008 00000009 00630000 
00000008 00630000 0000000B 00630000 00000005 00630000 00000004 00630007 
00000000 00000001 00630009 0000000C 00630000 00000006 00630008 00000009 
00630000 00000008 00630000 0000000B 00630000 00000005 00630000 00000004 
00630007 00000000 
%/

#new:DefenseTable $DefenseTable_GoombaKing
{
.Element:Normal 00000000
.Element:End
}

#new:StatusTable $StatusTable_GoombaKing %stop only
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}

#new:PartsTable $PartsTable_GoombaKing
{
00020020 01000000 E70F00FF $IdleAnimations_GoombaKing $DefenseTable_GoombaKing 00000000 00000000 00000000 00000000 
00800020 02000000 005000FF 00000000 $DefenseTable_GoombaKing 00000000 00000000 00000000 00000000 
}

#new:Actor $GoombaKing
{
% stats
[Index]        92b 
[Level]        60`b 
[MaxHP]       100`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_GoombaKing 
% ai
[PartsCount]   2`s 
[PartsTable] $PartsTable_GoombaKing 
[Script]      $Script_Init_GoombaKing 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   3`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         56`b  80`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]   -6`b  38`b % dx dy
[StatusIcon]   12`b  75`b % dx dy
}

#new:Script $Script_Init_GoombaKing
{
		Call	$Function_SetTattle_B ( 001C0102 )
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_GoombaKing )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_GoombaKing )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_GoombaKing )
   %3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_GoombaKing )
   50:  Exec     $Script_80222D9C *Var[0] 
		If	*Flag_Rematch0  ==  .True
			Call	$Function_SetLevel	( $GoombaKing 0` )
		EndIf
   60:  Call     SetActorVar 	( .Actor:Self 00000004 *Var[0] )
   78:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   90:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   A8:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 )
   C0:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 )
   D8:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 )
   F0:  Call     SetActorVar 	( .Actor:Self 00000006 00000000 )
		Call	 $Function_GetCurseState ( *VarB )
		Call     SetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 1`
				%Set to dark palette
				Call     SetActorVar 	( .Actor:Self 0000000F 00000001 )
				Call     SetActorVar 	( .Actor:Self 0000000E 00000009 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Dark )
			CaseOR == 2`
			CaseOR == 3`
				%Set to golden palette
				Call     SetActorVar 	( .Actor:Self 0000000F 00000002 )
				Call     SetActorVar 	( .Actor:Self 0000000E 00000001 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Golden )
			EndCaseGroup
			Default
				%Set to regular palette				
				Call     SetActorVar 	( .Actor:Self 0000000F 00000000 )
				Call     SetActorVar 	( .Actor:Self 0000000E 00000000 )
				Call	 SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_GoombaKing )
		EndSwitch		
  108:  Return
  110:  End
}

#new:Script $Script_Idle_GoombaKing
{
    0:  Label    00000000 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add  *Var[0]  00000050 
   30:  Wait     *Var[0] 
   3C:  Label    00000001 
   48:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   5C:  If  *Var[0]  &  0035D000 
   6C:  	Wait     00000001 
   78:  	Goto     00000001 
   84:  EndIf
   8C:  Call     SetGoalToHome 	( .Actor:Self )
   9C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Add  *Var[0]  00000005 
   C8:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
		Call     GetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving_Dark )
			Case == 2`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving_Golden )
		EndSwitch
   F4:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  110:  Call     8027A264 ( FFFFFF81 00000000 )
		Call     GetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Dark )
			Case == 2`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Golden )
		EndSwitch
  13C:  Wait     00000014 
  148:  Label    00000002 
  154:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  168:  If  *Var[0]  &  0035D000 
  178:  	Wait     00000001 
  184:  	Goto     00000002 
  190:  EndIf
  198:  Call     SetGoalToHome 	( .Actor:Self )
  1A8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  Call     8026B6D0 ( FFFFFF81 *Fixed[1.0] )
		Call     GetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving_Dark )
			Case == 2`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKingMoving_Golden )
		EndSwitch
  1F0:  Call     8026A62C ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  20C:  Call     8027A264 ( FFFFFF81 00000000 )
		Call     GetActorVar 	( .Actor:Self 0000000F *VarB )
		Switch *VarB
			Case == 0`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing )
			Case == 1`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Dark )
			Case == 2`
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_GoombaKing_Golden )
		EndSwitch
  238:  Wait     00000050 
  244:  Goto     00000000 
  250:  Return
  258:  End
}

#new:Script $Script_80220DB0
{
    0:  Call     UseBattleCamPreset 	( 00000002 )
   10:  Call     SetAnimation 	( .Actor:Self *Var[0] *Var[1] )
   28:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   44:  Set  *Var[1]  00000000 
   54:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   70:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
   84:  Call     AddGoalPos 	( .Actor:Self 0000001E 00000000 00000000 )
   A0:  Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
   C0:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
   D4:  Call     AddGoalPos 	( .Actor:Self 0000000F 00000000 00000000 )
   F0:  Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  110:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
  124:  Call     AddGoalPos 	( .Actor:Self 00000005 00000000 00000000 )
  140:  Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  160:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
  174:  Return
  17C:  End
}

#new:Script $Script_HandleEvent_GoombaKing
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch  *Var[0] 
   64:  	Case  ==  .Event:HitCombo % 9
   70:  		SetConst  *Var[0]  00000001 
   80:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
   90:  		ExecWait DoNormalHit 
   9C:  	Case  ==  .Event:Hit % A
   A8:  		SetConst  *Var[0]  00000001 
   B8:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
   C8:  		ExecWait DoNormalHit 
   D4:  	Case  ==  .Event:BurnHit % E
   E0:  		SetConst  *Var[0]  00000001 
   F0:  		SetConst  *Var[1]  0063000D 
  100:  		SetConst  *Var[2]  0063000E 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
				Add		 *Var2 *VarC
  110:  		ExecWait DoBurnHit 
  11C:  	Case  ==  .Event:SpinSmashHit % B
  128:  		SetConst  *Var[0]  00000001 
  138:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  148:  		ExecWait DoSpinSmashHit 
  154:  	Case  ==  .Event:ShockHit % 2F
  160:  		SetConst  *Var[0]  00000001 
  170:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  180:  		ExecWait DoShockHit 
  18C:  		SetConst  *Var[0]  00000001 
  19C:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  1AC:  		ExecWait $Script_80220DB0 
  1B8:  		SetConst  *Var[0]  00000001 
  1C8:  		SetConst  *Var[1]  00630004 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  1D8:  		ExecWait DoReturnHome 
  1E4:  	Case  ==  .Event:ShockDeath % 26
  1F0:  		SetConst  *Var[0]  00000001 
  200:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  210:  		ExecWait DoShockHit 
  21C:  		Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  234:  		Kill     *Var[0] 
  240:  		SetConst  *Var[0]  00000001 
  250:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  260:  		ExecWait $Script_GoombaKingDeath 
  26C:  		Return
  274:  	CaseOR  ==  00000017 % 17
  280:  	CaseOR  ==  .Event:Immune % 19
  28C:  		SetConst  *Var[0]  00000001 
  29C:  		SetConst  *Var[1]  00630001 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  2AC:  		ExecWait DoImmune 
  2B8:  	EndCaseGroup
  2C0:  	Case  ==  .Event:Death % 20
  2CC:  		SetConst  *Var[0]  00000001 
  2DC:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  2EC:  		ExecWait DoNormalHit 
  2F8:  		Wait     0000000A 
  304:  		Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  31C:  		Kill     *Var[0] 
  328:  		SetConst  *Var[0]  00000001 
  338:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  348:  		ExecWait $Script_GoombaKingDeath 
  354:  		Return
  35C:  	Case  ==  .Event:BurnDeath % 24
  368:  		SetConst  *Var[0]  00000001 
  378:  		SetConst  *Var[1]  0063000D 
  388:  		SetConst  *Var[2]  0063000E 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
				Add		 *Var2 *VarC
  398:  		ExecWait DoBurnHit 
  3A4:  		Wait     0000000A 
  3B0:  		Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  3C8:  		Kill     *Var[0] 
  3D4:  		SetConst  *Var[0]  00000001 
  3E4:  		SetConst  *Var[1]  0063000E 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  3F4:  		ExecWait $Script_GoombaKingDeath 
  400:  		Return
  408:  	Case  ==  .Event:SpinSmashDeath % 21
  414:  		SetConst  *Var[0]  00000001 
  424:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  434:  		ExecWait DoSpinSmashHit 
  440:  		Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  458:  		Kill     *Var[0] 
  464:  		SetConst  *Var[0]  00000001 
  474:  		SetConst  *Var[1]  00630006 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  484:  		ExecWait $Script_GoombaKingDeath 
  490:  		Return
  498:  	Case  ==  .Event:SpikeContact % 2A
  4A4:  		Call     SetAnimation 	( .Actor:Self 00000001 00630006 )
  4BC:  		Wait     00000014 
  4C8:  		Call     SetAnimation 	( .Actor:Self 00000001 00630004 )
  4E0:  		Call     SetGoalToHome 	( .Actor:Self )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  51C:  		Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  534:  	Case  ==  .Event:EndFirstStrike % 35
  540:  		SetConst  *Var[0]  00000001 
  550:  		SetConst  *Var[1]  00630001 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  560:  		ExecWait DoReturnHome 
  56C:  		Call     HPBarToHome 	( .Actor:Self )
  57C:  	Case  ==  .Event:RecoverStatus % 31
  588:  		SetConst  *Var[0]  00000001 
  598:  		SetConst  *Var[1]  00630001 
   				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *Var1 *VarC
  5A8:  		ExecWait DoRecover 
  5B4:  	Default
  5BC:  EndSwitch
  5C4:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5D8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  5EC:  Return
  5F4:  End
}

#new:Script $Script_TakeTurn_GoombaKing
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
   44:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   58:  Call     SetGoalToTarget 	( .Actor:Self )
   68:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   7C:  If  *Var[0]  !&  00080000 
   8C:  	Call     GetActorVar 	( .Actor:Enemy3 .NutGrowthCounter *Var[0] )
   A4:  	If  *Var[0]  <=  00000000 %can nuts be dropped?
   D8:  		Sub  *Var[0]  00000001 
				Call SetActorVar ( .Actor:Enemy3 .NutGrowthCounter .NutGrowthTurns )
  100:  		ExecWait $Script_DropPlayerNut 
  10C:  		Return
  11C:  	EndIf
  124:  EndIf
  12C:  ExecWait $Script_GoombaKing_Kick 
  138:  Return
  140:  Return
  148:  End
}

#new:Script $Script_GoombaKing_Kick
{
    0:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   14:  If  *Var[0]  !&  00080000 
   24:  	Call     UseBattleCamPreset 	( 0000003F )
   34:  	Call     AddBattleCamZoom  	( FFFFFF9C )
   44:  	Call     SetBattleCamOffsetZ 	( 00000014 )
   54:  	Call     BattleCamTargetActor ( .Actor:Self )
   64:  	Call     MoveBattleCamOver 	( 0000001E )
   74:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   8C:  Else
   94:  	Call     UseBattleCamPreset 	( 0000003F )
   A4:  	Call     AddBattleCamZoom  	( FFFFFF9C )
   B4:  	Call     BattleCamTargetActor ( .Actor:Self )
   C4:  	Call     MoveBattleCamOver 	( 00000014 )
   D4:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   EC:  EndIf
   F4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  108:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  11C:  If  *Var[0]  !&  00080000 
  12C:  	Call     SetGoalToTarget 	( .Actor:Self )
  13C:  	Call     AddGoalPos 	( .Actor:Self 00000020 00000000 00000000 )
  158:  Else
  160:  	Call     SetGoalToTarget 	( .Actor:Self )
  170:  	Call     AddGoalPos 	( .Actor:Self 0000000C 00000000 00000000 )
  18C:  EndIf
  194:  Call     SetActorSpeed 	( .Actor:Self *Fixed[2.0] )
   		Set *VarD 00630004
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
  1A8:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  1C0:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   		Set *VarD 00630001
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
  1D8:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  1F0:  Wait     00000008 
		Loop 3
  1FC:  Thread
  204:  	Call     PlaySoundAtActor 	( .Actor:Self 000020ED )
  218:  	Wait     0000000A 
  224:  	Call     PlaySoundAtActor 	( .Actor:Self 000020ED )
  238:  EndThread
   		Set *VarD 00630005
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
  240:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  258:  Set  *Var[0]  00000000 
  268:  Loop     00000014 
  274:  	Add  *Var[0]  00000012 
  284:  	Call     SetActorYaw 	( .Actor:Self *Var[0] )
  298:  	Wait     00000001 
  2A4:  EndLoop
  2AC:  Call     SetActorYaw 	( .Actor:Self 00000000 )
  2C0:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
  2E4:  Switch  *Var[A] 
  2F0:  	CaseOR  ==  .HitResult:Miss % 6
  2FC:  	CaseOR  ==  .HitResult:Lucky % 5
  308:  		If  *Var[A]  ==  00000005 
  318:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  33C:  		EndIf
				Set *VarD 00630007
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  344:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  35C:  		Set  *Var[0]  00000000 
  36C:  		Loop     00000014 
  378:  			Add  *Var[0]  00000012 
  388:  			Call     SetActorYaw 	( .Actor:Self *Var[0] )
  39C:  			Wait     00000001 
  3A8:  		EndLoop
  3B0:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  3C4:  		Call     UseBattleCamPreset 	( 00000002 )
  3D4:  		Call     MoveBattleCamOver 	( 00000014 )
				Set *VarD 00630001
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  3E4:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  3FC:  		Call     SetGoalToHome 	( .Actor:Self )
  40C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
				Set *VarD 00630004
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  420:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  438:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Set *VarD 00630001
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  450:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  468:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  47C:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  490:  		Return
  498:  	EndCaseGroup
  4A0:  EndSwitch
  4A8:  Call     UseBattleCamPreset 	( 00000002 )
  4B8:  Call     MoveBattleCamOver 	( 00000014 )
  4C8:  Wait     00000002 
  4D4:  Call     SetGoalToTarget 	( .Actor:Self )
  4E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[A] 00000000 00000000 00000000 00000008 00000020 )
		%again!
		EndLoop
  50C:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  528:  Call     SetActorYaw 	( .Actor:Self 00000000 )
  53C:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
		Set *VarD 00630001
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
  558:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  570:  Switch  *Var[A] 
  57C:  	Default
  584:  		Wait     00000014 
				Set *VarD 00630001
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  590:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  5A8:  		Call     SetGoalToHome 	( .Actor:Self )
  5B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
				Set *VarD 00630004
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  5CC:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  5E4:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Set *VarD 00630001
				Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
				Mul	 *VarC 100
				Add		 *VarD *VarC
  5FC:  		Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  614:  EndSwitch
  61C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  630:  Call     UseIdleAnimation 	( .Actor:Self .True )
  644:  Return
  64C:  End
}

#new:Script $Script_DropPlayerNut
{
    0:  Call     UseBattleCamPreset 	( 0000000F )
   10:  Call     BattleCamTargetActor ( .Actor:Self )
   20:  Call     MoveBattleCamOver 	( 00000028 )
   30:  Wait     0000000F 
   3C:  Call     8024ECF8 ( 00000000 00000001 00000000 )
		Set *VarD 00630009
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
   54:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
   6C:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
   80:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   9C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
   D8:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
   EC:  Call     UseBattleCamPreset 	( 00000002 )
   FC:  Call     MoveBattleCamOver 	( 0000001E )
		Set *VarD 00630000
		Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
		Mul	 *VarC 100
		Add		 *VarD *VarC
  10C:  Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  124:  Thread
  12C:  	Call     80254218 ( 0000000B )
  13C:  	Call     GetStatusFlags ( .Actor:Self *Var[0] )
  150:  	If  *Var[0]  !&  00080000 
  160:  		Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[4.0] )
  17C:  	EndIf
			Set *VarD 00630001
			Call     GetActorVar 	( .Actor:Self 0000000E *VarC )
			Mul	 *VarC 100
			Add		 *VarD *VarC
  184:  	Call     SetAnimation 	( .Actor:Self 00000001 *VarD )
  19C:  	Call     PlayEffect  	( ~FX:DropLeaves:Random FFFFFFB0 0000007D 00000000 00000064 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1E0:  	Call     PlayEffect  	( ~FX:DropLeaves:Random FFFFFFF1 00000087 00000000 00000055 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  224:  	Call     PlayEffect  	( ~FX:DropLeaves:Random 00000064 00000067 00000000 00000046 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  268:  EndThread
  270:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
  294:  Switch  *Var[A] 
  2A0:  	CaseOR  ==  .HitResult:Miss % 6
  2AC:  	CaseOR  ==  .HitResult:Lucky % 5
  2B8:  		Thread
  2C0:  			Wait     0000000C 
  2CC:  			Call     PlaySoundAtPart 	( .Actor:Enemy3 00000003 00000301 )
  2E4:  		EndThread
  2EC:  		Thread
  2F4:  			Wait     0000000A 
  300:  			Call     SetPartJumpGravity 	( .Actor:Enemy3 00000003 *Fixed[1.5] )
  318:  			Call     GetPartOffset 	( .Actor:Enemy3 00000003 *Var[0] *Var[1] *Var[2] )
  338:  			Call     FallPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000E )
  35C:  			Sub  *Var[0]  0000000C 
  36C:  			Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000A .True )
  394:  			Sub  *Var[0]  00000007 
  3A4:  			Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 00000007 .True )
  3CC:  			Loop     00000014 
  3D8:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .False )
  3F4:  				Wait     00000001 
  400:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .True )
  41C:  				Wait     00000001 
  428:  			EndLoop
  430:  		EndThread
  438:  		Thread
  440:  			Wait     00000005 
  44C:  			Call     PlaySoundAtPart 	( .Actor:Enemy3 00000004 00000301 )
  464:  		EndThread
  46C:  		Thread
  474:  			Wait     00000003 
  480:  			Call     SetPartJumpGravity 	( .Actor:Enemy3 00000004 *Fixed[1.5] )
  498:  			Call     GetPartOffset 	( .Actor:Enemy3 00000004 *Var[0] *Var[1] *Var[2] )
  4B8:  			Call     FallPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000F )
  4DC:  			Sub  *Var[0]  0000000C 
  4EC:  			Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000A .True )
  514:  			Sub  *Var[0]  00000007 
  524:  			Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 00000007 .True )
  54C:  			Loop     00000014 
  558:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .False )
  574:  				Wait     00000001 
  580:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .True )
  59C:  				Wait     00000001 
  5A8:  			EndLoop
  5B0:  		EndThread
  5B8:  		Thread
  5C0:  			Wait     00000011 
  5CC:  			Call     PlaySoundAtPart 	( .Actor:Enemy3 00000005 00000301 )
  5E4:  		EndThread
  5EC:  		Thread
  5F4:  			Wait     0000000F 
  600:  			Call     SetPartJumpGravity 	( .Actor:Enemy3 00000005 *Fixed[1.5] )
  618:  			Call     GetPartOffset 	( .Actor:Enemy3 00000005 *Var[0] *Var[1] *Var[2] )
  638:  			Call     FallPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000011 )
  65C:  			Add  *Var[0]  0000000C 
  66C:  			Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 0000000A .True )
  694:  			Add  *Var[0]  00000007 
  6A4:  			Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000007 .True )
  6CC:  			Loop     00000014 
  6D8:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .False )
  6F4:  				Wait     00000001 
  700:  				Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .True )
  71C:  				Wait     00000001 
  728:  			EndLoop
  730:  		EndThread
  738:  		Wait     0000000F 
  744:  		If  *Var[A]  ==  00000005 
  754:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  778:  		EndIf
  780:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  794:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  7A8:  		Return
  7B0:  	EndCaseGroup
  7B8:  EndSwitch
  7C0:  Thread
  7C8:  	Wait     0000000C 
  7D4:  	Call     PlaySoundAtPart 	( .Actor:Enemy3 00000003 00000301 )
  7EC:  EndThread
  7F4:  Thread
  7FC:  	Wait     0000000A 
  808:  	Call     SetPartJumpGravity 	( .Actor:Enemy3 00000003 *Fixed[1.5] )
  820:  	Call     GetPartOffset 	( .Actor:Enemy3 00000003 *Var[0] *Var[1] *Var[2] )
  840:  	Call     FallPartTo 	( .Actor:Enemy3 00000003 *Var[0] 00000023 *Var[2] 0000000E )
  864:  	Sub  *Var[0]  0000000C 
  874:  	Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000A .True )
  89C:  	Sub  *Var[0]  00000007 
  8AC:  	Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 00000007 .True )
  8D4:  	Loop     00000014 
  8E0:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .False )
  8FC:  		Wait     00000001 
  908:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .True )
  924:  		Wait     00000001 
  930:  	EndLoop
  938:  EndThread
  940:  Thread
  948:  	Wait     00000005 
  954:  	Call     PlaySoundAtPart 	( .Actor:Enemy3 00000004 00000301 )
  96C:  EndThread
  974:  Thread
  97C:  	Wait     00000003 
  988:  	Call     SetPartJumpGravity 	( .Actor:Enemy3 00000004 *Fixed[1.5] )
  9A0:  	Call     GetPartOffset 	( .Actor:Enemy3 00000004 *Var[0] *Var[1] *Var[2] )
  9C0:  	Call     FallPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000F )
  9E4:  	Sub  *Var[0]  0000000C 
  9F4:  	Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000A .True )
  A1C:  	Sub  *Var[0]  00000007 
  A2C:  	Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 00000007 .True )
  A54:  	Loop     00000014 
  A60:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .False )
  A7C:  		Wait     00000001 
  A88:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .True )
  AA4:  		Wait     00000001 
  AB0:  	EndLoop
  AB8:  EndThread
  AC0:  Thread
  AC8:  	Wait     00000011 
  AD4:  	Call     PlaySoundAtPart 	( .Actor:Enemy3 00000005 00000301 )
  AEC:  EndThread
  AF4:  Thread
  AFC:  	Wait     0000000F 
  B08:  	Call     SetPartJumpGravity 	( .Actor:Enemy3 00000005 *Fixed[1.5] )
  B20:  	Call     GetPartOffset 	( .Actor:Enemy3 00000005 *Var[0] *Var[1] *Var[2] )
  B40:  	Call     FallPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000011 )
  B64:  	Add  *Var[0]  0000000C 
  B74:  	Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 0000000A .True )
  B9C:  	Add  *Var[0]  00000007 
  BAC:  	Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000007 .True )
  BD4:  	Loop     00000014 
  BE0:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .False )
  BFC:  		Wait     00000001 
  C08:  		Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .True )
  C24:  		Wait     00000001 
  C30:  	EndLoop
  C38:  EndThread
  C40:  Wait     00000018 
  C4C:  Wait     00000002 
  C58:  Call     SetGoalToTarget 	( .Actor:Self )
  C68:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 80001264 0000000A 00000020 ) %10 damage + 2 turn sleep
  C90:  Switch  *Var[0] 
  C9C:  	Case  ==  0000000A 
  CA8:  		Return
  CB0:  EndSwitch
  CB8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  CCC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  CE0:  Return
  CE8:  End
}

#new:Script $Script_80222D9C
{
    0:  Label    00000000 
    C:  Wait     00000001 
   18:  Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
		ConstAND *Var0 FFFF00FF		
   30:  If  *Var[0]  !=  00630004 
   40:  	Goto     00000000 
   4C:  EndIf
   54:  Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
		ConstAND *Var0 FFFF00FF		
   6C:  If  *Var[0]  !=  00630004 
   7C:  	Goto     00000000 
   88:  EndIf
   90:  Call     80254218 ( 00000001 )
   A0:  Call     8026DF88 ( FFFFFF81 00000001 *Var[0] )
   B8:  If  *Var[0]  ==  00000001 
   C8:  	Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   E0:  	If  *Var[0]  ==  00000000 
   F0:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  104:  		If  *Var[0]  !&  00080000 
  114:  			Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.20019531] )
  130:  		EndIf
  138:  	Else
  140:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  154:  		If  *Var[0]  !&  00080000 
  164:  			Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.7001953] )
  180:  		EndIf
  188:  	EndIf
  190:  EndIf
  198:  Goto     00000000 
  1A4:  Return
  1AC:  End
}

#new:Script $Script_GoombaKingDeath
{
    0:  Call     8027D32C ( FFFFFF81 )
   10:  Call     UseIdleAnimation 	( .Actor:Self .False )
   24:  Set  *Var[2]  00000000 
   34:  Call     SetAnimation 	( .Actor:Self *Var[0] *Var[1] )
   4C:  Wait     0000000A 
   58:  Loop     00000018 
   64:  	Call     SetActorYaw 	( .Actor:Self *Var[2] )
   78:  	Add  *Var[2]  0000001E 
   88:  	Wait     00000001 
   94:  EndLoop
   9C:  Call     SetActorYaw 	( .Actor:Self 00000000 )
   B0:  Call     GetActorPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
   CC:  Call     PlayEffect  	( ~FX:BigSmokePuff *Var[2] *Var[3] *Var[4] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  110:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:Death )
  124:  Call     DropStarPoints ( .Actor:Self )
  134:  Set  *Var[3]  00000000 
  144:  Loop     0000000C 
  150:  	Call     SetActorRotation 	( .Actor:Self *Var[3] 00000000 00000000 )
  16C:  	Add  *Var[3]  00000008 
  17C:  	Wait     00000001 
  188:  EndLoop
  190:  Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .True )
  1AC:  Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  1C4:  Wait     0000001E 
  360:  Call     RemoveActor 	( .Actor:Self )
  370:  Return
  378:  End
}

#new:IdleAnimations $IdleAnimations_Nut
{
.Status:Normal    00640000
.Status:End
}

#new:DefenseTable $DefenseTable_Tree
{
.Element:Normal 00000063
.Element:End
}

#new:StatusTable $StatusTable_Tree
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_Tree
{
00800000 01000000 000A00FF 00000000 $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 02000000 000A00FF $IdleAnimations_Nut $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 03000000 000A00FF $IdleAnimations_Nut $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 04000000 000A00FF $IdleAnimations_Nut $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 05000000 000A00FF $IdleAnimations_Nut $DefenseTable_Tree 00000000 00000000 00000000 00000000 
}

#new:Actor $GoomnutTree
{
% stats
[Index]        93b 
[Level]         1`b 
[MaxHP]        -1`b %uh oh, I made hp unsigned so this is actually something else
[Coins]         0`b 
[Flags]       02004004 
[StatusTable] $StatusTable_Tree 
% ai
[PartsCount]   5`s 
[PartsTable] $PartsTable_Tree 
[Script]      $Script_Init_Tree 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   0`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]          0`b   0`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]    0`b   0`b % dx dy
[StatusIcon]    0`b   0`b % dx dy
}

/%
MISSING: 80223478 to 80223488 (00444F08 to 00444F18)
00000002 00000000 00000001 00000000 
%/

#define .NutGrowthCounter 00000006
#define .NutGrowthTurns 00000003

#new:Script $Script_Init_Tree
{
        Set      *Var[A]   00000000
        Set      *Var[B]   00000000
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Tree )
    0:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_Tree )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Tree )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Tree )
   3C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 ) % no longer used
   54:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 ) % no longer used
   6C:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 ) % no longer used
   84:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 ) % no longer used
   9C:  Call     SetActorVar 	( .Actor:Self 00000004 00000000 ) % no longer used
   B4:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 ) % dropped nut on Goombas
   CC:  Call     SetActorVar 	( .Actor:Self .NutGrowthCounter -1` ) % turns before nuts regrow
   E4:  Call     SetPartPos 	( .Actor:Self 00000002 0000000A 0000008C 0000000A )
  104:  Call     SetPartPos 	( .Actor:Self 00000003 FFFFFFA1 0000008C 0000000A )
  124:  Call     SetPartPos 	( .Actor:Self 00000004 FFFFFF8D 00000082 00000000 )
  144:  Call     SetPartPos 	( .Actor:Self 00000005 FFFFFFBF 00000076 00000005 )
  164:  Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  184:  Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  1A4:  Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  1C4:  Call     8026D158 ( FFFFFF81 00000001 00000004 00000001 )
  1E0:  Return
  1E8:  End
}

#new:Script $Script_NextTurn_Tree
{
	Call	GetBattlePhase ( *Var[0] )
	If  *Var[0]  ==  .Phase:EnemyEnd
		Call	GetActorVar	( .Actor:Self .NutGrowthCounter *Var[0] )
		Sub		*Var[0]  1
		Call	SetActorVar	( .Actor:Self .NutGrowthCounter *Var[0] )
		If  *Var[0]  ==  0
			Call     SetPartPos 	( .Actor:Self 00000003 FFFFFFA1 0000008C 0000000A )
			Call     SetPartPos 	( .Actor:Self 00000004 FFFFFF8D 00000082 00000000 )
			Call     SetPartPos 	( .Actor:Self 00000005 FFFFFFBF 00000076 00000005 )
			Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .False )
			Call     SetPartFlagBits 	( .Actor:Self 00000004 00000001 .False )
			Call     SetPartFlagBits 	( .Actor:Self 00000005 00000001 .False )
			% regrow nuts
			Call     MakeLerp	( 0` 50` 30` 00000000 )
			Label    1
				Call	UpdateLerp  	( )
				DivF	*Var[0]  100`
				Call	SetPartScale	( .Actor:Self 00000003 *Var[0] *Var[0] *Fixed[1.0] )
				Call	SetPartScale	( .Actor:Self 00000004 *Var[0] *Var[0] *Fixed[1.0] )
				Call	SetPartScale	( .Actor:Self 00000005 *Var[0] *Var[0] *Fixed[1.0] )
				Wait     1 
			If  *Var[1]  ==  .True 
				Goto     1
			EndIf
			%
		EndIf
	EndIf
	Return
	End
}

#new:Script $Script_Idle_Tree
{
    0:  Return
    8:  End
}

#new:Script $Script_HandleEvent_Tree
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastElement ( *Var[E] )
   38:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   4C:  Switch  *Var[0] 
   58:  	CaseOR  ==  .Event:HitCombo % 9
   64:  	CaseOR  ==  00000017 % 17
   70:  		ExecWait $Script_ShakeTree 
   7C:  	EndCaseGroup
   84:  	CaseOR  ==  .Event:Hit % A
			CaseOR  ==  .Event:BurnHit %hopefully fix problems
   90:  	CaseOR  ==  .Event:Immune % 19
   9C:  		ExecWait $Script_ShakeTree 
   A8:  		ExecWait $Script_DropGoombaNut 
   B4:  	EndCaseGroup
   BC:  	Case  ==  .Event:SpinSmashHit % B
   C8:  		ExecWait $Script_ShakeTree 
   D4:  		ExecWait $Script_DropGoombaNut 
   E0:  	Case  ==  .Event:Death % 20
   EC:  		ExecWait $Script_ShakeTree 
   F8:  	Case  ==  .Event:SpinSmashDeath % 21
  104:  		ExecWait $Script_ShakeTree 
  110:  	Case  ==  .Event:SpikeContact % 2A
  11C:  	Case  ==  .Event:ShockHit % 2F
  128:  	Case  ==  .Event:EndFirstStrike % 35
  134:  	Default
  13C:  EndSwitch
  144:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  158:  Call     UseIdleAnimation 	( .Actor:Self .True )
  16C:  Return
  174:  End
}

#new:Script $Script_TakeTurn_Tree
{
    0:  Switch  *Var[0] 
    C:  	Case  ==  00000006 
   18:  		Return
   20:  EndSwitch
   28:  Switch  *Var[0] 
   34:  	Case  ==  00000000 
   40:  	Case  ==  0000000A 
   4C:  EndSwitch
   54:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
   68:  Call     UseIdleAnimation 	( .Actor:Self .True )
   7C:  Return
   84:  End
}

#new:Script $Script_80223890
{
    0:  SetTimescale *Fixed[2.0] 
    C:  UseIntBuffer *Var[0] 
   18:  Get4Int  *Var[1] *Var[2] *Var[3] *Var[4] 
   30:  Get1Int  *Var[5] 
   3C:  Call     GetActorPos 	( .Actor:Player *Var[6] *Var[F] *Var[8] )
   58:  Call     PlaySound   	( 00000165 )
   68:  Call     PlaySound   	( 00000166 )
   78:  Thread
   80:  	Set  *Flag[00]  00000000 
   90:  	If  *Var[1]  !=  00000000 
   A0:  		Wait     00000001 
   AC:  		Loop     00000005 
   B8:  			UseIntBuffer *Var[1] 
   C4:  			Get1Int  *Var[2] 
   D0:  			Loop     *Var[2] 
   DC:  				Get1Int  *Var[3] 
   E8:  				Call     $Function_80218B80 ( *Var[3] *Fixed[0.10058594] *Fixed[0.20019531] *Var[F] 00000000 )
  108:  				If  *Flag[00]  ==  00000000 
  118:  					Set  *Flag[00]  00000001 
  128:  					Call     PlaySoundAtModel 	( *Var[3] 00000166 00000000 )
  140:  				EndIf
  148:  			EndLoop
  150:  			Wait     00000001 
  15C:  			UseIntBuffer *Var[1] 
  168:  			Get1Int  *Var[2] 
  174:  			Loop     *Var[2] 
  180:  				Get1Int  *Var[3] 
  18C:  				Call     $Function_80218B80 ( *Var[3] *Fixed[0.10058594] *Fixed[-0.19921875] *Var[F] 00000000 )
  1AC:  			EndLoop
  1B4:  			Wait     00000001 
  1C0:  		EndLoop
  1C8:  		UseIntBuffer *Var[1] 
  1D4:  		Get1Int  *Var[2] 
  1E0:  		Loop     *Var[2] 
  1EC:  			Get1Int  *Var[3] 
  1F8:  			Call     TranslateModel ( *Var[3] 00000000 00000000 00000000 )
  214:  		EndLoop
  21C:  		Wait     00000001 
  228:  	EndIf
  230:  EndThread
  238:  Thread
  240:  	Set  *Flag[00]  00000000 
  250:  	If  *Var[2]  !=  00000000 
  260:  		Loop     00000005 
  26C:  			UseIntBuffer *Var[2] 
  278:  			Get1Int  *Var[3] 
  284:  			Loop     *Var[3] 
  290:  				Get1Int  *Var[4] 
  29C:  				Call     $Function_80218B80 ( *Var[4] *Fixed[0.10058594] *Fixed[0.20019531] *Var[F] 00000000 )
  2BC:  				If  *Flag[00]  ==  00000000 
  2CC:  					Set  *Flag[00]  00000001 
  2DC:  					Call     PlaySoundAtModel 	( *Var[4] 00000165 00000000 )
  2F4:  				EndIf
  2FC:  			EndLoop
  304:  			Wait     00000001 
  310:  			UseIntBuffer *Var[2] 
  31C:  			Get1Int  *Var[3] 
  328:  			Loop     *Var[3] 
  334:  				Get1Int  *Var[4] 
  340:  				Call     $Function_80218B80 ( *Var[4] *Fixed[0.10058594] *Fixed[-0.19921875] *Var[F] 00000000 )
  360:  			EndLoop
  368:  			Wait     00000001 
  374:  		EndLoop
  37C:  		UseIntBuffer *Var[2] 
  388:  		Get1Int  *Var[3] 
  394:  		Loop     *Var[3] 
  3A0:  			Get1Int  *Var[4] 
  3AC:  			Call     TranslateModel ( *Var[4] 00000000 00000000 00000000 )
  3C8:  		EndLoop
  3D0:  		Wait     00000001 
  3DC:  	EndIf
  3E4:  EndThread
  3EC:  Thread
  3F4:  	If  *Var[4]  !=  00000000 
  404:  		UseIntBuffer *Var[4] 
  410:  		Get1Int  *Var[5] 
  41C:  		Loop     *Var[5] 
  428:  			Get3Int  *Var[6] *Var[7] *Var[8] 
  43C:  			Call     PlayEffect  	( ~FX:DropLeaves:Random *Var[6] *Var[7] *Var[8] 00000064 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  480:  		EndLoop
  488:  	EndIf
  490:  EndThread
  498:  Wait     0000000F 
  4A4:  Return
  4AC:  End
}

#new:Unknown $???_80223D44
{
00000002 00000021 00000024 
}

#new:Unknown $???_80223D50
{
00000003 00000026 00000027 00000028 
}

#new:Unknown $???_80223D60
{
00000002 FFFFFFF6 0000008C 00000000 00000064 0000008C 00000000 
}

#new:Unknown $???_80223D7C
{
$???_80223D44 $???_80223D50 00000000 $???_80223D60 00000000 
}

#new:Script $Script_ShakeTree
{
    0:  Set  *Var[0]  $???_80223D7C 
   10:  ExecWait $Script_80223890 
   1C:  Return
   24:  End
}

#new:Script $Script_DropGoombaNut %9 each lol
{
    0:  Call     PlayEffect  	( ~FX:DropLeaves:Random FFFFFFE7 00000078 00000000 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
   44:  Call     GetActorVar 	( .Actor:Self 00000005 *Var[0] )
   5C:  If  *Var[0]  !=  00000000 
   6C:  	Return
   74:  EndIf
   7C:  Call     UseBattleCamPreset 	( 0000000F )
   8C:  Call     BattleCamTargetActor ( .Actor:Enemy0 )
   9C:  Wait     00000014 
   A8:  Call     SetActorVar 	( .Actor:Self 00000005 00000001 )
   C0:  Call     ActorExists 	( .Actor:Enemy0 *Var[0] )
   D4:  If  *Var[0]  ==  00000000 
   E4:  	Call     SetGoalPos 	( .Actor:Self 0000000A 00000000 0000000A )
  100:  	Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  11C:  	Call     PlaySoundAtPart 	( .Actor:Self 00000002 00000301 )
  134:  	Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.80078125] )
  14C:  	Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[4.0] )
  164:  	Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000014 0000000A 00000014 )
  188:  	Call     JumpPartTo 	( .Actor:Self 00000002 0000001E 00000014 0000000A 0000000A .True )
  1B0:  	Call     JumpPartTo 	( .Actor:Self 00000002 00000028 00000014 0000000A 00000005 .True )
  1D8:  	Loop     00000014 
  1E4:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  200:  		Wait     00000001 
  20C:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  228:  		Wait     00000001 
  234:  	EndLoop
  23C:  	Return
  244:  EndIf
  24C:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 00000301 )
  264:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.80078125] )
  27C:  Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[4.0] )
  294:  Call     GetStatusFlags ( .Actor:Enemy0 *Var[0] )
  2A8:  If  *Var[0]  !&  00080000 
  2B8:  	Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000050 0000000A 0000000A )
  2DC:  Else
  2E4:  	Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000020 0000000A 0000000A )
  308:  EndIf
  310:  Call     UseBattleCamPreset 	( 00000002 )
  320:  Call     MoveBattleCamOver 	( 0000001E )
  330:  Call     SetOwnerTarget ( 00000200 00000002 )
  344:  Call     SetGoalToTarget 	( .Actor:Self )
  354:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000009 00000020 )
  37C:  Call     ActorExists 	( .Actor:Enemy1 *Var[0] )
  390:  If  *Var[0]  ==  00000000 
  3A0:  	Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  3C0:  	Add  *Var[0]  00000041 
  3D0:  	Set  *Var[1]  00000014 
  3E0:  	Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  3F8:  	Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  420:  	Add  *Var[0]  0000000C 
  430:  	Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  458:  	Loop     00000014 
  464:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  480:  		Wait     00000001 
  48C:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  4A8:  		Wait     00000001 
  4B4:  	EndLoop
  4BC:  	Return
  4C4:  EndIf
  4CC:  Call     GetActorPos 	( .Actor:Enemy1 *Var[0] *Var[1] *Var[2] )
  4E8:  Call     GetStatusFlags ( .Actor:Enemy1 *Var[3] )
  4FC:  If  *Var[3]  !&  00080000 
  50C:  	Add  *Var[1]  00000032 
  51C:  Else
  524:  	Add  *Var[1]  00000014 
  534:  EndIf
  53C:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  554:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  57C:  Call     SetOwnerTarget ( 00000201 00000001 )
  590:  Call     SetGoalToTarget 	( .Actor:Self )
  5A0:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000009 00000020 )
  5C8:  Call     ActorExists 	( .Actor:Enemy2 *Var[0] )
  5DC:  If  *Var[0]  ==  00000000 
  5EC:  	Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  60C:  	Add  *Var[0]  00000023 
  61C:  	Set  *Var[1]  00000014 
  62C:  	Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  644:  	Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  66C:  	Add  *Var[0]  0000000C 
  67C:  	Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  6A4:  	Loop     00000014 
  6B0:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  6CC:  		Wait     00000001 
  6D8:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  6F4:  		Wait     00000001 
  700:  	EndLoop
  708:  	Return
  710:  EndIf
  718:  Call     GetActorPos 	( .Actor:Enemy2 *Var[0] *Var[1] *Var[2] )
  734:  Call     GetStatusFlags ( .Actor:Enemy2 *Var[3] )
  748:  If  *Var[3]  !&  00080000 
  758:  	Add  *Var[1]  00000032 
  768:  Else
  770:  	Add  *Var[1]  00000014 
  780:  EndIf
  788:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  7A0:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  7C8:  Call     SetOwnerTarget ( 00000202 00000001 )
  7DC:  Call     SetGoalToTarget 	( .Actor:Self )
  7EC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000009 00000020 )
  814:  Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  834:  Add  *Var[0]  00000014 
  844:  Set  *Var[1]  00000014 
  854:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  86C:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  894:  Add  *Var[0]  0000000C 
  8A4:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  8CC:  Loop     00000014 
  8D8:  	Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  8F4:  	Wait     00000001 
  900:  	Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  91C:  	Wait     00000001 
  928:  EndLoop
  930:  Return
  938:  End
}


#new:Script $Script_BeforeBattle_80225788
{
    0:  Call     SetSpriteShading 	( FFFFFFFF )
   10:  Call     $Function_80219708 ( )
   1C:  Set  *Var[0]  00000001 
   2C:  Set  *Var[2]  00000000 
   3C:  Exec     $Script_80225400 
   48:  Set  *Var[0]  00000004 
   58:  Set  *Var[2]  00000046 
   68:  Exec     $Script_80225400 
   74:  Return
   7C:  End
}

#new:Script $Script_AfterBattle_8022580C
{
    0:  Return
    8:  End
}

#new:Script $Script_80225400
{
    0:  Set  *Var[A]  *Var[0] 
   10:  Set  *Var[7]  *Var[2] 
   20:  Mul  *Var[7]  0000000A 
   30:  Label    00000000 
   3C:  Add  *Var[7]  00000004 
   4C:  If  *Var[7]  >  00000E0F 
   5C:  	Sub  *Var[7]  00000E10 
   6C:  EndIf
   74:  Call     $Function_802194A0 ( *Var[7] *Var[0] *Var[1] *Var[2] *Var[3] )
   94:  Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
   B0:  Call     RotateModel 	( *Var[A] *Var[3] 00000000 00000001 00000000 )
   D0:  Wait     00000001 
   DC:  Goto     00000000 
   E8:  Return
   F0:  End
}

#new:Function $Function_802194A0
{
    0:  ADDIU		SP, SP, FFA8
    4:  SW			S4, 20 (SP)
    8:  COPY		S4, A0
    C:  SW			RA, 24 (SP)
   10:  SW			S3, 1C (SP)
   14:  SW			S2, 18 (SP)
   18:  SW			S1, 14 (SP)
   1C:  SW			S0, 10 (SP)
   20:  SDC1		F30, 50 (SP)
   24:  SDC1		F28, 48 (SP)
   28:  SDC1		F26, 40 (SP)
   2C:  SDC1		F24, 38 (SP)
   30:  SDC1		F22, 30 (SP)
   34:  SDC1		F20, 28 (SP)
   38:  LW			S0, C (S4)
   3C:  LW			A1, 0 (S0)
   40:  JAL			~Func:get_variable
   44:  ADDIU		S0, S0, 4
   48:  MTC1		V0, F0
   4C:  NOP
   50:  CVT.D.W		F0, F0
   54:  LW			S1, 0 (S0)
   58:  ADDIU		S0, S0, 4
   5C:  LIF			F3, 2.5625
   64:  MTC1		R0, F2
   68:  LIO			AT, 40C90FD0
   70:  MTC1		AT, F20
   74:  LW			S3, 0 (S0)
   78:  DIV.D		F0, F0, F2
   7C:  CVT.S.D		F30, F0
   80:  MUL.S		F20, F30, F20
   84:  NOP
   88:  ADDIU		S0, S0, 4
   8C:  LW			S2, 0 (S0)
   90:  LIF			F0, 360.0
   98:  LW			S0, 4 (S0)
   9C:  DIV.S		F20, F20, F0
   A0:  JAL			~Func:sin_rad
   A4:  MOV.S		F12, F20
   A8:  LIF			F12, 8.0
   B0:  NOP
   B4:  MUL.S		F12, F20, F12
   B8:  NOP
   BC:  LIF			F28, 150.0
   C4:  NOP
   C8:  MUL.S		F22, F0, F28
   CC:  NOP
   D0:  MTC1		R0, F26
   D4:  JAL			~Func:sin_rad
   D8:  ADD.S		F22, F22, F26
   DC:  LIF			F2, 10.0
   E4:  NOP
   E8:  MUL.S		F24, F0, F2
   EC:  NOP
   F0:  MOV.S		F12, F20
   F4:  JAL			~Func:cos_rad
   F8:  ADD.S		F24, F24, F26
   FC:  COPY		A0, S4
  100:  MUL.S		F20, F0, F28
  104:  NOP
  108:  COPY		A1, S1
  10C:  MFC1		A2, F22
  110:  LIF			F0, 20.0
  118:  LIF			F2, -50.0
  120:  DIV.S		F20, F20, F0
  124:  JAL			~Func:set_float_variable
  128:  ADD.S		F20, F20, F2
  12C:  COPY		A0, S4
  130:  MFC1		A2, F24
  134:  JAL			~Func:set_float_variable
  138:  COPY		A1, S3
  13C:  COPY		A0, S4
  140:  MFC1		A2, F20
  144:  JAL			~Func:set_float_variable
  148:  COPY		A1, S2
  14C:  LIF			F0, 90.0
  154:  NOP
  158:  C.LT.S		F0, F30
  15C:  NOP
  160:  BC1F		.o190
  164:  CLEAR		A2
  168:  LIF			F0, 270.0
  170:  NOP
  174:  C.LT.S		F30, F0
  178:  NOP
  17C:  BC1TL		.o184
  180:  ADDIU		A2, R0, B4
        .o184
  184:  LIF			F0, 90.0
  18C:  NOP
        .o190
  190:  SUB.S		F0, F0, F30
  194:  ABS.S		F0, F0
  198:  TRUNC.W.S	F4, F0
  19C:  MFC1		V0, F4
  1A0:  NOP
  1A4:  SLTI		V0, V0, 2D
  1A8:  BEQ			V0, R0, .o1CC
  1AC:  NOP
  1B0:  LIF			F0, 45.0
  1B8:  NOP
  1BC:  SUB.S		F0, F30, F0
  1C0:  ADD.S		F0, F0, F0
  1C4:  TRUNC.W.S	F4, F0
  1C8:  MFC1		A2, F4
        .o1CC
  1CC:  LIF			F0, 270.0
  1D4:  NOP
  1D8:  SUB.S		F0, F0, F30
  1DC:  ABS.S		F0, F0
  1E0:  TRUNC.W.S	F4, F0
  1E4:  MFC1		V0, F4
  1E8:  NOP
  1EC:  SLTI		V0, V0, 2D
  1F0:  BEQ			V0, R0, .o224
  1F4:  COPY		A0, S4
  1F8:  LIF			F0, 225.0
  200:  NOP
  204:  SUB.S		F0, F30, F0
  208:  ADD.S		F0, F0, F0
  20C:  LIF			F2, 180.0
  214:  NOP
  218:  ADD.S		F0, F0, F2
  21C:  TRUNC.W.S	F4, F0
  220:  MFC1		A2, F4
        .o224
  224:  JAL			~Func:set_variable
  228:  COPY		A1, S0
  22C:  LW			RA, 24 (SP)
  230:  LW			S4, 20 (SP)
  234:  LW			S3, 1C (SP)
  238:  LW			S2, 18 (SP)
  23C:  LW			S1, 14 (SP)
  240:  LW			S0, 10 (SP)
  244:  LDC1		F30, 50 (SP)
  248:  LDC1		F28, 48 (SP)
  24C:  LDC1		F26, 40 (SP)
  250:  LDC1		F24, 38 (SP)
  254:  LDC1		F22, 30 (SP)
  258:  LDC1		F20, 28 (SP)
  25C:  ADDIU		V0, R0, 2
  260:  JR			RA
  264:  ADDIU		SP, SP, 58
}

#new:ForegroundModelList $ForegroundModelList_8022581C
{
0000001D 00000022 00000021 00000000 
}

#new:Stage $Stage_GoombaRoad
{
"kmr_tex" % kmr_tex
"kmr_bt06_shape"  % kmr_bt06_shape
"kmr_bt06_hit"  % kmr_bt06_hit
$Script_BeforeBattle_80225788 
$Script_AfterBattle_8022580C 
"kmr_bg"  % kmr_bg
$ForegroundModelList_8022581C 
00000000 
00000000 
00000000 
}
