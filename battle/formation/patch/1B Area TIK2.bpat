@ $Blooper %general stat buffs
{
[MaxHP]        40`b %buff 30 -> 40
}

%statuses only work once (but most of them will work here)
@ $StatusTable_8021A714
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      50`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy      50`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   50`
	.Status:Shrink     50`
	.Status:Stop       50`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod  -1`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod       0`
	.Status:End
}

@ $DefenseTable_8021A708
{
.Element:Normal 00000000
.Element:Throw	FFFFFFFF
.Element:End
}

@ $Script_Tackle
{
[550]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 ) %3 -> 4
}

@ $Script_SprayInk
{
[6CC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80020364 00000003 00000020 ) %damage unchanged, but now has 100% poison chance
}

@ $ElectroBlooper %stat buffs, electrical attack is stronger, harder to de-charge
{
[MaxHP]			70`b %buff 50 -> 70
[Level]        60`b %50 -> 60 
[PowerBounce]    3`b 
%Still possible with 5 hp mario :)
}

@ $DefenseTable_8021C658
{
.Element:Normal 00000000
.Element:Throw	FFFFFFFF
.Element:End
}

%more resistant than original blooper
@ $StatusTable_8021C664
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      20` %It still works, but do you really want him healing 7 hp per turn?
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0` %why would "electro" blooper be weak to electrical stuff
.Status:Shrink     50` 
.Status:Stop       50` 
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -3`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}

@ $DefenseTable_8021C658
{
.Element:Normal 00000000
.Element:Shock 00000063 %did you really think electrical attacks would work on "electro" blooper?
.Element:Throw	FFFFFFFF
.Element:End
}

@ $Script_SprayInk_ElectroBlooper
{
[6CC] Call EnemyDamageTarget ( .Actor:Self *Var[F] 10000000 00000000 80020264 00000006 00000020 ) %6 + 2 turn poison. oof
}

@ $Script_Tackle_ElectroBlooper
{
[550]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000020 ) %4 -> 6
}

@ $Script_ElectroTackle
{
[53C]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000020 00000008 00000000 0000000F 00000020 ) %6 -> 15 mega oof 
}

@ $Script_HandleEvent_8021CEE8 %change all de-charge script calls to only happen when you do 6+ damage in one hit
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   3C:  Switch  *Var[0] 
   48:  	CaseOR  ==  .Event:HitCombo
   54:  	CaseOR  ==  .Event:Hit
   60:  		SetConst  *Var[0]  00000001 
   70:  		SetConst  *Var[1]  00500004 
   80:  		ExecWait DoNormalHit 
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)
   8C:  			ExecWait $Script_8021EE44
				EndIf
   98:  	EndCaseGroup
   A0:  	Case  ==  .Event:Death
   AC:  		SetConst  *Var[0]  00000001 
   BC:  		SetConst  *Var[1]  00500004 
   CC:  		ExecWait DoNormalHit 
   D8:  		ExecWait $Script_8021EE44 
   E4:  		SetConst  *Var[1]  00500004 
   F4:  		ExecWait $Script_8021D3E0 
  100:  		Return
  108:  	Case  ==  .Event:BurnHit
  114:  		Set  *Var[0]  00000001 
  124:  		Set  *Var[1]  00500005 
  134:  		Set  *Var[2]  00500006 
  144:  		ExecWait DoBurnHit 
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)
  150:  			ExecWait $Script_8021EE44
				EndIf
  15C:  	Case  ==  .Event:BurnDeath
  168:  		Set  *Var[0]  00000001 
  178:  		Set  *Var[1]  00500005 
  188:  		Set  *Var[2]  00500006 
  198:  		ExecWait DoBurnHit 
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)
  1A4:  			ExecWait $Script_8021EE44 
				EndIf
  1B0:  		SetConst  *Var[1]  00500006 
  1C0:  		ExecWait $Script_8021D3E0 
  1CC:  		Return
  1D4:  	Case  ==  .Event:SpinSmashHit
  1E0:  		SetConst  *Var[0]  00000001 
  1F0:  		SetConst  *Var[1]  00500004 
  200:  		ExecWait 8029B998 
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)
  20C:  			ExecWait $Script_8021EE44
				EndIf
  218:  	Case  ==  .Event:SpinSmashDeath
  224:  		SetConst  *Var[0]  00000001 
  234:  		SetConst  *Var[1]  00500004 
  244:  		ExecWait 8029B998
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)  
  250:  			ExecWait $Script_8021EE44 
				EndIf
  25C:  		SetConst  *Var[0]  00000001 
  26C:  		SetConst  *Var[1]  00500004 
  27C:  		ExecWait $Script_8021D3E0 
  288:  		Return
  290:  	CaseOR  ==  00000017
  29C:  	CaseOR  ==  .Event:Immune
  2A8:  	CaseOR  ==  .Event:AirLiftFailed
  2B4:  	CaseOR  ==  0000001D
  2C0:  	CaseOR  ==  0000001E
  2CC:  		SetConst  *Var[0]  00000001 
  2DC:  		SetConst  *Var[1]  00500000 
  2EC:  		ExecWait DoImmune 
  2F8:  	EndCaseGroup
  300:  	CaseOR  ==  .Event:StarBeam
  30C:  	CaseOR  ==  00000014
				Call	GetLastDamage ( .Actor:Self *Var[0] )
				If (*Var[0] >= 6)
  318:  			ExecWait $Script_8021EE44 
				EndIf
  324:  		SetConst  *Var[0]  00000001 
  334:  		SetConst  *Var[1]  00500004 
  344:  		ExecWait DoNormalHit 
  350:  	EndCaseGroup
  358:  	Case  ==  .Event:ShockHit
  364:  		SetConst  *Var[0]  00000001 
  374:  		SetConst  *Var[1]  00500004 
  384:  		ExecWait DoShockHit 
  390:  		SetConst  *Var[0]  00000001 
  3A0:  		SetConst  *Var[1]  00500004 
  3B0:  		ExecWait DoJumpBack 
  3BC:  		ExecWait $Script_8021C54C 
  3C8:  	Case  ==  .Event:ShockDeath
  3D4:  		SetConst  *Var[0]  00000001 
  3E4:  		SetConst  *Var[1]  00500004 
  3F4:  		ExecWait DoShockHit 
  400:  		SetConst  *Var[0]  00000001 
  410:  		SetConst  *Var[1]  00500004 
  420:  		ExecWait DoJumpBack 
  42C:  		SetConst  *Var[0]  00000001 
  43C:  		SetConst  *Var[1]  00500004 
  44C:  		ExecWait $Script_8021D3E0 
  458:  		Return
  460:  	Case  ==  .Event:EndFirstStrike
  46C:  		ExecWait $Script_8021C54C 
  478:  	Case  ==  .Event:RecoverStatus
  484:  		SetConst  *Var[0]  00000001 
  494:  		SetConst  *Var[1]  00500000 
  4A4:  		ExecWait DoRecover 
  4B0:  	Default
  4B8:  EndSwitch
  4C0:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  4D4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  4E8:  Return
  4F0:  End
}
  
@ $SuperBlooper %stat buffs, AI changes
{
[MaxHP]        100`b %70 -> 100
[Level] 74`b
[PowerBounce]  3`b 
} 

%more resistant than electro blooper, less stuff works
@ $StatusTable_8021F554
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      40`	%still works, but 10 hp per turn healing is not what you want
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy      50`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   50`
	.Status:Shrink      0`
	.Status:Stop       50`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod  -1`
	.Status:ShrinkTurnMod    -2`
	.Status:StopTurnMod      -2`
	.Status:End
}
 
%AI changes
%always spawns babies when possible, then does other stuff

%attack changes
%Ink is a triple hit for 2-4-6
%Tackles are much faster (higher jumpscale)

%Movement speed is faster to reflect the faster attacks

@ $Script_TakeTurn_SuperBlooper
{
    0:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   18:  Switch  *Var[0] 
   24:  	Case  ==  00000003 
   30:  		Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   48:  		If  *Var[0]  ==  00000000 
   58:  			Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
   70:  		EndIf
			/%
   78:  	Case  ==  00000001 
   84:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
   98:  		If  *Var[0]  &  00080000 
   A8:  			Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
   C0:  		Else
   C8:  			Call     ActorExists 	( .Actor:Enemy1 *Var[0] )
   DC:  			If  *Var[0]  !=  00000000 
   EC:  				Call     ActorExists 	( .Actor:Enemy2 *Var[0] )
  100:  				If  *Var[0]  !=  00000000 
  110:  					Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
  128:  				EndIf
  130:  			EndIf
  138:  		EndIf
			%/
  140:  	Default
  148:  EndSwitch
		Call     ActorExists 	( .Actor:Enemy1 *Var[0] )
		If  *Var[0]  !=  00000000 
			Call     ActorExists 	( .Actor:Enemy2 *Var[0] )
			If  *Var[0]  !=  00000000 
				Goto 0
			EndIf
		EndIf
		ExecWait $Script_SpawnBabies
		Label 0
  150:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  168:  Switch  *Var[0] 
  1AC:  	Case  ==  00000001
  1B8:  		Call     SetActorVar 	( .Actor:Self 00000001 00000002 )
  1D0:  		ExecWait $Script_Enrage 
  1DC:  		Return
  1E4:  	Case  ==  00000002 
  1F0:  		Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
  208:  		ExecWait $Script_EnragedTackle 
  214:  		Return
  21C:  	Default
  224:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  238:  		If  *Var[0]  !&  00080000 
  248:  			Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
  260:  			Call     RandInt     	( 00000064 *Var[0] )
  274:  			If  *Var[0]  <  00000032 
  284:  				ExecWait $Script_Tackle_SuperBlooper 
  290:  			Else
  298:  				ExecWait $Script_SprayInk_SuperBlooper 
  2A4:  			EndIf
  2AC:  		Else
  2B4:  			ExecWait $Script_Tackle_SuperBlooper 
  2C0:  		EndIf
  2C8:  EndSwitch
  2D0:  Return
  2D8:  End
}

@ $Script_Tackle_SuperBlooper
{
[18C]  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.5] ) %1.5 -> 4.5
[1BC]  	Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
[244]  	Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
[290]  	Call     JumpToGoal  	( .Actor:Self 00000003 00000000 00000001 00000000 )
[38C]   Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.5] ) %1.5 -> 4.5
[3E8]   Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 ) %10(16) -> 6
[414]   Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000020 ) %5 -> 6
}

@ $Script_8021EF60
{
    0:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
   18:  Call     SetAnimation 	( .Actor:Self 00000001 0050000C )
   30:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
   4C:  If  *Var[B]  >  00000014 
   5C:  	Sub  *Var[B]  00000014 
   6C:  Else
   74:  	Set  *Var[B]  00000000 
   84:  EndIf
   8C:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.6] ) %0.3 ish -> 0.6
   A0:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
   BC:  Call     80279BEC ( FFFFFF81 00000008 )
   D0:  Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
   EC:  Call     PlaySoundAtActor 	( .Actor:Self 000003DC )
  100:  Set  *Var[7]  *Var[4] 
  110:  Add  *Var[7]  *Var[4] 
  120:  Add  *Var[7]  *Var[0] 
  130:  MulF  *Var[7]  *Fixed[0.33007812] 
  140:  Set  *Var[8]  *Var[5] 
  150:  Add  *Var[8]  *Var[5] 
  160:  Add  *Var[8]  *Var[1] 
  170:  MulF  *Var[8]  *Fixed[0.33007812] 
  180:  Set  *Var[9]  *Var[6] 
  190:  Add  *Var[9]  *Var[6] 
  1A0:  Add  *Var[9]  *Var[2] 
  1B0:  MulF  *Var[9]  *Fixed[0.33007812] 
  1C0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] ) %3 -> 6
  1D4:  Call     SetGoalPos 	( .Actor:Self *Var[7] *Var[8] *Var[9] )
  1F0:  Call     FlyToGoal  	( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
  20C:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
  224:  Call     SetAnimation 	( .Actor:Self 00000001 0050000C )
  23C:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  258:  Sub  *Var[B]  00000014 
  268:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  284:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.6] ) %0.3 ish -> 0.6
  298:  Call     80279BEC ( FFFFFF81 00000008 )
  2AC:  Call     PlaySoundAtActor 	( .Actor:Self 000003DC )
  2C0:  Set  *Var[7]  *Var[0] 
  2D0:  Add  *Var[7]  *Var[0] 
  2E0:  Add  *Var[7]  *Var[4] 
  2F0:  MulF  *Var[7]  *Fixed[0.33007812] 
  300:  Set  *Var[8]  *Var[1] 
  310:  Add  *Var[8]  *Var[1] 
  320:  Add  *Var[8]  *Var[5] 
  330:  MulF  *Var[8]  *Fixed[0.33007812] 
  340:  Set  *Var[9]  *Var[2] 
  350:  Add  *Var[9]  *Var[2] 
  360:  Add  *Var[9]  *Var[6] 
  370:  MulF  *Var[9]  *Fixed[0.33007812] 
  380:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] ) %3 -> 6
  394:  Call     SetGoalPos 	( .Actor:Self *Var[7] *Var[8] *Var[9] )
  3B0:  Call     FlyToGoal  	( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
  3CC:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
  3E4:  Call     SetAnimation 	( .Actor:Self 00000001 0050000C )
  3FC:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  418:  Sub  *Var[B]  00000014 
  428:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  444:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.6] ) %0.3 ish -> 6
  458:  Call     80279BEC ( FFFFFF81 00000008 )
  46C:  Call     PlaySoundAtActor 	( .Actor:Self 000003DC )
  480:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] ) %3 -> 6
  494:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4B0:  Call     FlyToGoal  	( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
  4CC:  Return
  4D4:  End
}

@ $Script_SprayInk_SuperBlooper
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   68:  Add  *Var[0]  00000055 
   78:  Add  *Var[1]  0000002D 
   88:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
   A0:  Call     SetAnimation 	( .Actor:Self 00000001 0050000C )
   B8:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
   D4:  If  *Var[B]  >  0000001E 
   E4:  	Sub  *Var[B]  0000001E 
   F4:  Else
   FC:  	Set  *Var[B]  00000000 
  10C:  EndIf
  114:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  128:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  144:  Call     80279BEC ( FFFFFF81 00000008 )
  158:  Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  174:  Call     PlaySoundAtActor 	( .Actor:Self 000003DC )
  188:  Set  *Var[7]  *Var[4] 
  198:  Add  *Var[7]  *Var[0] 
  1A8:  MulF  *Var[7]  *Fixed[0.5] 
  1B8:  Set  *Var[8]  *Var[5] 
  1C8:  Add  *Var[8]  *Var[1] 
  1D8:  MulF  *Var[8]  *Fixed[0.5] 
  1E8:  Set  *Var[9]  *Var[6] 
  1F8:  Add  *Var[9]  *Var[2] 
  208:  MulF  *Var[9]  *Fixed[0.5] 
  218:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
  22C:  Call     SetGoalPos 	( .Actor:Self *Var[7] *Var[8] *Var[9] )
  248:  Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
  264:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
  27C:  Call     SetAnimation 	( .Actor:Self 00000001 0050000C )
  294:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  2B0:  Sub  *Var[B]  00000014 
  2C0:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  2DC:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.30078125] )
  2F0:  Call     80279BEC ( FFFFFF81 00000008 )
  304:  Call     PlaySoundAtActor 	( .Actor:Self 000003DC )
  318:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
  32C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  348:  Call     FlyToGoal  	( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
  364:  Call     SetAnimation 	( .Actor:Self 00000001 00500003 )
  37C:  Call     GetActorPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  398:  Sub  *Var[B]  0000001E 
  3A8:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.20019531] )
  3BC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[1.0] )
  3D0:  Call     SetGoalPos 	( .Actor:Self *Var[A] *Var[B] *Var[C] )
  3EC:  Call     FlyToGoal  	( .Actor:Self 00000010 00000000 .Easing:Linear )
  408:  Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000028 00000000 )
  424:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFD8 )
  440:  Call     PlaySoundAtActor 	( .Actor:Self 000003DE )
  454:  Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  470:  Add  *Var[3]  00000001 
  480:  Sub  *Var[4]  0000001E 
  490:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  4AC:  Call     $Function_80218884 ( *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] )
  4D0:  Call     EnemyTestTarget ( .Actor:Self *Var[F] 10000000 00000000 00000001 00000010 )
  4F4:  Switch  *Var[F] 
  500:  	CaseOR  ==  .HitResult:Miss % 6
  50C:  	CaseOR  ==  .HitResult:Lucky % 5
  518:  		Wait     0000000A 
  524:  		If  *Var[F]  ==  00000005 
  534:  			Call     EnemyTestTarget ( .Actor:Self *Var[F] 80000000 00000000 00000000 00000000 )
  558:  		EndIf
  560:  		Wait     0000001E 
  56C:  		Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
  584:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  5A0:  		Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  5BC:  		ExecWait $Script_8021F43C 
  5C8:  		Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  5DC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  5F0:  		Return
  5F8:  	EndCaseGroup
  600:  EndSwitch
  608:  Wait     0000000A 
  614:  Call     SetGoalToTarget 	( .Actor:Self )
  624:  Call     80269EAC ( 0000001A )	%mario becomes blackened on hit?
  634:  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80020119 00000002 00000040 )
		Wait 	 00000006
		Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80020232 00000004 00000040 )
		Wait 	 00000006
		Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80020364 00000006 00000020 )
  65C:  Wait     0000001E 
  668:  Call     SetAnimation 	( .Actor:Self 00000001 00500000 )
  680:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  69C:  Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  6B8:  ExecWait $Script_8021F43C 
  6C4:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  6D8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6EC:  Return
  6F4:  End
}
  
@ $Script_EnragedTackle
{
[18C]  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.5] ) %1.5 -> 4.5
[1BC]  Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
[250]  Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
[29C]  Call     JumpToGoal  	( .Actor:Self 00000003 00000000 00000001 00000000 )
[398]  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.5] ) %1.5 -> 4.5
[3F4]  Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
[458]  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 00000000 00000000 00000000 00000010 00000040 ) %10 -> 16
[52C]  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] ) %0.4 ish -> 2
[55C]  Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
[594]  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 00000000 00000000 00000000 00000010 00000020 ) %10 -> 16
[668]  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[6.0] ) %1.2 ish -> 6.0
[698]  Call     JumpToGoal  	( .Actor:Self 00000002 00000000 00000001 00000000 )
}

@ $Script_TakeTurn_8022319C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   68:  Set  *Var[1]  00000064 
   78:  Set  *Var[3]  0000000C 
   88:  ExecWait $Script_80221F40 
   94:  Thread
   9C:  	Wait     00000002 
   A8:  	Call     PlaySoundAtActor 	( .Actor:Self 00000301 )
   BC:  EndThread
   C4:  Call     EnemyTestTarget ( .Actor:Self *Var[F] 10000000 00000000 00000001 00000010 ) %this should make them immune to zaptap
   E8:  Switch  *Var[F] 
   F4:  	CaseOR  ==  .HitResult:Miss % 6
  100:  	CaseOR  ==  .HitResult:Lucky % 5
  10C:  		Call     SetAnimation 	( .Actor:Self 00000001 00510002 )
  124:  		Call     SetGoalToTarget 	( .Actor:Self )
  134:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  		Set  *Var[1]  00000000 
  160:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  174:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  190:  		Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  1B0:  		If  *Var[F]  ==  00000005 
  1C0:  			Call     EnemyTestTarget ( .Actor:Self *Var[F] 80000000 00000000 00000000 00000000 )
  1E4:  		EndIf
  1EC:  		Add  *Var[0]  0000001E 
  1FC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  218:  		Call     JumpToGoal  	( .Actor:Self 0000000C 00000000 00000001 00000000 )
  238:  		Add  *Var[0]  00000014 
  248:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  264:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  284:  		ExecWait $Script_8022241C 
  290:  		Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  2A4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  2B8:  		Return
  2C0:  	EndCaseGroup
  %2C8:  	CaseOR  ==  .HitResult:HitStatic % 7
  2D4:  	CaseOR  ==  .HitResult:Immune % 8
  2E0:  		Call     SetAnimation 	( .Actor:Self 00000001 00510002 )
  2F8:  		Call     SetGoalToTarget 	( .Actor:Self )
  308:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  324:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.5] )
  338:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  354:  		Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  374:  		If  *Var[F]  ==  00000007 
  384:  			Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 00000000 00000001 00000040 ) %stone cap negates damage siphon
  3AC:  		EndIf
  3B4:  		Add  *Var[0]  0000001E 
  3C4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3E0:  		Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  400:  		ExecWait $Script_8022241C 
  40C:  		Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
  420:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  434:  		Return
  43C:  	EndCaseGroup
  444:  EndSwitch
  44C:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  468:  Add  *Var[1]  00000032 
  478:  Call     UseBattleCamPreset 	( 00000013 )
  488:  Call     SetBattleCamTarget 	( *Var[0] *Var[1] *Var[2] )
  4A0:  Call     SetBattleCamZoom  	( 00000145 )
  4B0:  Call     MoveBattleCamOver 	( 0000001E )
  4C0:  Call     SetAnimation 	( .Actor:Self 00000001 00510002 )
  4D8:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  4EC:  Call     SetGoalToTarget 	( .Actor:Self )
  4FC:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  518:  Sub  *Var[1]  0000000A 
  528:  Sub  *Var[2]  00000005 
  538:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  554:  Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  574:  Call     SetGoalToTarget 	( .Actor:Self )
  584:  Call     SetAnimation 	( .Actor:Self 00000001 00510008 )
  59C:  Call     ShowMessageBox ( 00000031 00007FFF )
  5B0:  Call     802694A4 ( 00000001 )
  5C0:  Call     LoadActionCommand 	( 00000006 )
  5D0:  Call     802A9000 ( )
  5DC:  Call     802691C8 ( 00000001 0000000F 00000000 00000000 00000000 00000000 )
  600:  Wait     0000000A 
  60C:  Call     SetBattleFlagBits 	( 00004000 .False )
  620:  Call     802A9110 ( 00000000 00007FFF 00000003 )
  638:  Loop     00000005 
  644:  	Call     UseIdleAnimation 	( .Actor:Player .False )
  658:  	Call     SetAnimation 	( .Actor:Player 00000000 0003000C )
  670:  	Set  *Flag[00]  00000000 
  680:  	Loop     0000000A 
  68C:  		Call     802694F8 ( *Var[1] )
  69C:  		If  *Var[1]  ==  00000001 
  6AC:  			Set  *Flag[00]  00000001 
  6BC:  			BreakLoop
  6C4:  		EndIf
  6CC:  		Wait     00000001 
  6D8:  	EndLoop
  6E0:  	If  *Flag[00]  ==  00000001 
  6F0:  		Call     80276F1C ( 00000042 )
  700:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  714:  		BreakLoop
  71C:  	EndIf
  724:  	Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
  738:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  754:  	Set  *Flag[00]  00000000 
  764:  	Loop     00000002 
  770:  		Call     802694F8 ( *Var[1] )
  780:  		If  *Var[1]  ==  00000001 
  790:  			Set  *Flag[00]  00000001 
  7A0:  			BreakLoop
  7A8:  		EndIf
  7B0:  		Wait     00000001 
  7BC:  	EndLoop
  7C4:  	If  *Flag[00]  ==  00000001 
  7D4:  		Call     80276F1C ( 00000042 )
  7E4:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  7F8:  		BreakLoop
  800:  	EndIf
  808:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.1005859] *Fixed[1.0] )
  824:  	Set  *Flag[00]  00000000 
  834:  	Loop     00000002 
  840:  		Call     802694F8 ( *Var[1] )
  850:  		If  *Var[1]  ==  00000001 
  860:  			Set  *Flag[00]  00000001 
  870:  			BreakLoop
  878:  		EndIf
  880:  		Wait     00000001 
  88C:  	EndLoop
  894:  	If  *Flag[00]  ==  00000001 
  8A4:  		Call     80276F1C ( 00000042 )
  8B4:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  8C8:  		BreakLoop
  8D0:  	EndIf
  8D8:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.2001953] *Fixed[1.0] )
  8F4:  	Set  *Flag[00]  00000000 
  904:  	Loop     00000003 
  910:  		Call     802694F8 ( *Var[1] )
  920:  		If  *Var[1]  ==  00000001 
  930:  			Set  *Flag[00]  00000001 
  940:  			BreakLoop
  948:  		EndIf
  950:  		Wait     00000001 
  95C:  	EndLoop
  964:  	If  *Flag[00]  ==  00000001 
  974:  		Call     80276F1C ( 00000042 )
  984:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  998:  		BreakLoop
  9A0:  	EndIf
  9A8:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
  9C4:  	Set  *Flag[00]  00000000 
  9D4:  	Loop     00000002 
  9E0:  		Call     802694F8 ( *Var[1] )
  9F0:  		If  *Var[1]  ==  00000001 
  A00:  			Set  *Flag[00]  00000001 
  A10:  			BreakLoop
  A18:  		EndIf
  A20:  		Wait     00000001 
  A2C:  	EndLoop
  A34:  	If  *Flag[00]  ==  00000001 
  A44:  		Call     80276F1C ( 00000042 )
  A54:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  A68:  		BreakLoop
  A70:  	EndIf
  A78:  	Call     UseIdleAnimation 	( .Actor:Player .True )
  A8C:  	Call     80269EAC ( 00000001 )
  A9C:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000000 00000000 00000000 00000003 00000040 ) %siphon 3 each
  AC4:  	Call     80254218 ( 00000002 )
  AD4:  	Call     GetLastDamage 	( .Actor:Player *Var[3] )
  AE8:  	If  *Var[3]  !=  00000000 
  AF8:  		Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
  B0C:  		Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
  B20:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B3C:  		Add  *Var[1]  0000000A 
  B4C:  		Call     $Function_80218A78 ( *Var[0] *Var[1] *Var[2] *Var[3] )
  B68:  		Thread
  B70:  			Wait     0000000F 
  B7C:  			Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
  B90:  			Call     $Function_80218B2C ( *Var[0] *Var[1] *Var[2] *Var[3] )
  BAC:  		EndThread
  BB4:  		Add  *Var[0]  00000014 
  BC4:  		Add  *Var[1]  00000014 
  BD4:  		Call     PlayEffect  	( ~FX:Recover:HP *Var[0] *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  C18:  		Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
  C2C:  		Call     GetActorHP  	( .Actor:Self *Var[0] )
  C40:  		Add  *Var[0]  *Var[3] 
  C50:  		If  *Var[0]  >  *Var[1] 
  C60:  			Set  *Var[0]  *Var[1] 
  C70:  		EndIf
  C78:  		Call     SetEnemyHP  	( .Actor:Self *Var[0] )
  C8C:  	Else
  C94:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  CB0:  		Call     80276F1C ( 00000042 )
  CC0:  		Call     80269470 ( )
  CCC:  		BreakLoop
  CD4:  	EndIf
  CDC:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
  CF8:  	Set  *Flag[00]  00000000 
  D08:  	Loop     00000003 
  D14:  		Call     802694F8 ( *Var[1] )
  D24:  		If  *Var[1]  ==  00000001 
  D34:  			Set  *Flag[00]  00000001 
  D44:  			BreakLoop
  D4C:  		EndIf
  D54:  		Wait     00000001 
  D60:  	EndLoop
  D68:  	If  *Flag[00]  ==  00000001 
  D78:  		Call     80276F1C ( 00000042 )
  D88:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  D9C:  		BreakLoop
  DA4:  	EndIf
  DAC:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.2001953] *Fixed[1.0] )
  DC8:  	Set  *Flag[00]  00000000 
  DD8:  	Loop     00000002 
  DE4:  		Call     802694F8 ( *Var[1] )
  DF4:  		If  *Var[1]  ==  00000001 
  E04:  			Set  *Flag[00]  00000001 
  E14:  			BreakLoop
  E1C:  		EndIf
  E24:  		Wait     00000001 
  E30:  	EndLoop
  E38:  	If  *Flag[00]  ==  00000001 
  E48:  		Call     80276F1C ( 00000042 )
  E58:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  E6C:  		BreakLoop
  E74:  	EndIf
  E7C:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.1005859] *Fixed[1.0] )
  E98:  	Set  *Flag[00]  00000000 
  EA8:  	Loop     00000002 
  EB4:  		Call     802694F8 ( *Var[1] )
  EC4:  		If  *Var[1]  ==  00000001 
  ED4:  			Set  *Flag[00]  00000001 
  EE4:  			BreakLoop
  EEC:  		EndIf
  EF4:  		Wait     00000001 
  F00:  	EndLoop
  F08:  	If  *Flag[00]  ==  00000001 
  F18:  		Call     80276F1C ( 00000042 )
  F28:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  F3C:  		BreakLoop
  F44:  	EndIf
  F4C:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  F68:  	Call     GetPlayerHP 	( *Var[1] )
  F78:  	If  *Var[1]  ==  00000000 
  F88:  		Call     80276F1C ( 00000042 )
  F98:  		Call     80269470 ( )
  FA4:  		BreakLoop
  FAC:  	EndIf
  FB4:  	Set  *Flag[00]  00000000 
  FC4:  	Loop     0000000C 
  FD0:  		Call     802694F8 ( *Var[1] )
  FE0:  		If  *Var[1]  ==  00000001 
  FF0:  			Set  *Flag[00]  00000001 
 1000:  			BreakLoop
 1008:  		EndIf
 1010:  		Wait     00000001 
 101C:  	EndLoop
 1024:  	If  *Flag[00]  ==  00000001 
 1034:  		Call     80276F1C ( 00000042 )
 1044:  		BreakLoop
 104C:  	EndIf
 1054:  EndLoop
 105C:  Call     80276F1C ( 00000042 )
 106C:  Call     80269470 ( )
 1078:  Call     UseIdleAnimation 	( .Actor:Player .True )
 108C:  Call     UseBattleCamPreset 	( 00000002 )
 109C:  Call     MoveBattleCamOver 	( 00000014 )
 10AC:  Call     GetStatusFlags ( .Actor:Player *Var[0] )
 10C0:  If  *Var[0]  &  00100000 
 10D0:  	Call     SetAnimation 	( .Actor:Self 00000001 00510002 )
 10E8:  Else
 10F0:  	Call     SetAnimation 	( .Actor:Self 00000001 00510000 )
 1108:  EndIf
 1110:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
 112C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1148:  Add  *Var[0]  0000001E 
 1158:  Sub  *Var[1]  0000000F 
 1168:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
 117C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1198:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
 11B8:  ExecWait $Script_8022241C 
 11C4:  Call     EnableIdleScript 	( .Actor:Self FFFFFFFF )
 11D8:  Call     UseIdleAnimation 	( .Actor:Self .True )
 11EC:  Return
 11F4:  End
}

#import newenemy/PhalanxGuy.bpat %he appears out of the ultra boot chest
%same stats, but more aggressive AI 
%can also spear and charge on same turn below 30 hp
  
@ $Script_TakeTurn_PGuy %below 30 hp, can spear and charge on same turn
{
    Call     GetBattlePhase ( *Var[0] )
	If  *Var[0]  ==  .Phase:FirstStrike % 1
		ExecWait $Script_SpearStab_PGuy
		ExecWait $Script_8021BB18_14 
		Return
	EndIf
	Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
	If (*Var[0] == 1`)
		ExecWait $Script_ChargeAttack_PhalanxGuy
		Return
	Else
		Call	 GetActorHP ( .Actor:Self *Var[B] )
		Call	 GetEnemyMaxHP ( .Actor:Self *Var[C] )
		Mul *Var[C] 3
		Div *Var[C] 5
		If *Var[B] < *Var[C]
			ExecWait $Script_SpearStab_PGuy
			ExecWait $Script_Charge_PhalanxGuy
			Return
		EndIf
		Call     GetActorVar 	( .Actor:Self 00000004 *Var[C] )
		Add *Var[C] 1
		Mod *Var[C] 3
		Call     SetActorVar 	( .Actor:Self 00000004 *Var[C] )
		If *Var[C] == 00000000
			ExecWait $Script_Charge_PhalanxGuy
		Else 
			ExecWait $Script_SpearStab_PGuy
		EndIf
	EndIf
	Return
	End
}

@ $Script_SpearStab_PGuy
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000002 00420106 )
   8C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
   A0:  Call     SetGoalToTarget 	( .Actor:Self )
   B0:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   CC:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
   E0:  If  *Var[A]  &  00080000 
   F0:  	Add  *Var[0]  0000000A 
  100:  Else
  108:  	Add  *Var[0]  00000019 
  118:  EndIf
  120:  Set  *Var[1]  00000000 
  130:  Add  *Var[2]  00000001 
  140:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  15C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  174:  Call     SetAnimation 	( .Actor:Self 00000002 00420104 )
  18C:  Wait     00000005 
  198:  Call     SetAnimation 	( .Actor:Self 00000002 0042011A )
  1B0:  Wait     0000000F 
  1BC:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 10000000 00000000 00000001 00000010 )
  1E0:  Switch  *Var[0] 
  1EC:  	Case  ==  .HitResult:Lucky % 5
  204:  		Set  *Var[A]  *Var[0] 
				Set  *VarB	*Var0
  214:  		Call     PlaySoundAtActor 	( .Actor:Self 00000309 )
  228:  		Call     SetAnimation 	( .Actor:Self 00000002 0042011B )
  240:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  254:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  270:  		Sub  *Var[0]  0000001E 
  280:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  29C:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  2CC:  		Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  2F8:  		Sub  *Var[0]  00000014 
  308:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  324:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  344:  		Wait     0000000F 
  350:  		Wait     00000014 
  35C:  		Call     UseBattleCamPreset 	( 00000002 )
  36C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  %380:  		Call     AddActorDecoration 	( .Actor:Self 00000002 00000000 .Decoration:Sweat )
  39C:  		ExecWait $Script_80218D7C_14 
  3A8:  		Call     RemoveActorDecoration 	( .Actor:Self 00000002 00000000 )
  3C0:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
				Call	 GetActorVar (.Actor:Self 00000003 *Var[C])
				If *Var[C] !& 00000008
					Call     ActorSpeak  	( $MissBoost .Actor:Self 00000002 00420110 00420103 ) % time to charge
					Add	*Var[C] 00000008
					Call SetActorVar (.Actor:Self 00000003 *Var[C])
				EndIf
				Call	 BoostAttack ( .Actor:Self 00000003 )
				Call     EnableIdleScript 	( .Actor:Self 00000001 )
				Call     UseIdleAnimation 	( .Actor:Self .True )
				Return
  1F8:  	Case  ==  .HitResult:Miss % 6
  204:  		Set  *Var[A]  *Var[0] 
  214:  		Call     PlaySoundAtActor 	( .Actor:Self 00000309 )
  228:  		Call     SetAnimation 	( .Actor:Self 00000002 0042011B )
  240:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  254:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  270:  		Sub  *Var[0]  0000001E 
  280:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  29C:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  2BC:  		If  *Var[A]  ==  00000005 
  2CC:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  2F0:  		EndIf
  2F8:  		Sub  *Var[0]  00000014 
  308:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  324:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  344:  		Wait     0000000F 
  350:  		Wait     00000014 
  35C:  		Call     UseBattleCamPreset 	( 00000002 )
  36C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  %380:  		Call     AddActorDecoration 	( .Actor:Self 00000002 00000000 .Decoration:Sweat )
  39C:  		ExecWait $Script_80218D7C_14 
  3A8:  		Call     RemoveActorDecoration 	( .Actor:Self 00000002 00000000 )
  3C0:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
				Call	 GetActorVar (.Actor:Self 00000003 *Var[C])
				If *Var[C] !& 00000004
					Call     ActorSpeak  	( $MissCharge .Actor:Self 00000002 00420110 00420103 ) % time to charge
					Add	*Var[C] 00000004
					Call SetActorVar (.Actor:Self 00000003 *Var[C])
				EndIf
				ExecWait $Script_ChargeB_PhalanxGuy
  3D4:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3E8:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3FC:  		Return
  40C:  EndSwitch
		Set *Var[D] 0
		Loop 3
			Call     SetAnimation 	( .Actor:Self 00000002 0042011A )
  414:  	Call     PlaySoundAtActor 	( .Actor:Self 00000309 )
  428:  	Call     SetAnimation 	( .Actor:Self 00000002 0042011B )
			Call	 GetActorHP ( .Actor:Self *Var[B] )
			%make this happen at 30 health, or 3/5
			Call	 GetEnemyMaxHP ( .Actor:Self *Var[C] )
			Mul 	*Var[C] 3
			Div		*Var[C] 5
			If (*Var[B] > *Var[C])
				Wait 	00000004 %5 -> 4
			Else
  440:  		Wait     00000002 %3 -> 2 (good luck!)
			EndIf
  458:  	Call     SetGoalToTarget 	( .Actor:Self )
  468:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000006 00000020 ) %6 * 3 = 18, but chill out decreases it to 9, and defense badges reduce it further
			Add *Var[D] 1 %note that you can pretty easily negate all 6 damage
			If *Var[D] < 3
				Call     SetAnimation 	( .Actor:Self 00000002 0042011A )
				Wait     00000006
			EndIf
		EndLoop
  490:  Switch  *Var[0] 
  49C:  	CaseOR  ==  00000000 
  4A8:  	CaseOR  ==  00000002 
  4B4:  		Call     UseBattleCamPreset 	( 00000002 )
  4C4:  		Wait     00000014 
  4D0:  		ExecWait $Script_80218D7C_14 
  4DC:  	EndCaseGroup
  4E4:  EndSwitch
  4EC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  500:  Call     UseIdleAnimation 	( .Actor:Self .True )
  514:  Return
  51C:  End
}

@ $StatusTable_80218744_14 %you can dizzy and paralyze, but for very short time
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod       0`
.Status:End
}
	
@ $StatusTable_PhalanxGuy %only statuses that will really work are dizzy and shrink
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod       0`
.Status:End
}

@ $StatusTable_PhalanxGuy_Charge %can't stop the charge
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -3`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod       0`
.Status:End
}
	
#new:Formation $Formation_03
{
$PhalanxGuy 00000002 0000000A 00000000 00000000 00000000 00000000 
}

#import newenemy/Robotoad.bpat
#import newenemy/UltraBlooper.bpat

#new:Formation $Formation_04
{
$Robotoad 00000002 0000000A 00000000 00000000 00000000 00000000 
}

/%
#new:Vector3D $Vector3D_UltraPos
{
	150`
	120`
	-10`
}
%/

#new:Formation $Formation_05
{
$UltraBlooper $Vector3D_80227A30 0000000A 00000000 00000000 00000000 00000000
}

@ $FormationTable
{
$SJIS_80227C0C 00000001 $Formation_00 $Stage_80224F74 00000000 
$SJIS_80227BF8 00000001 $Formation_01 $Stage_80224F74 00000000 
$SJIS_80227BD8 00000001 $Formation_02 $Stage_80224F74 00000000 
00000000 00000001 $Formation_03 $Stage_80224F74 00000000 %phalanx guy
00000000 00000001 $Formation_04 $Stage_80224F74 00000000 %robotoad
00000000 00000001 $Formation_05 $Stage_80224F74 00000000 %ultra blooper
00000000 00000000 00000000 00000000 00000000 % unused
}


