%shy guy changes$Script_Init_8021AE68
%now they have 3 attacks
%regular tackle
%acrobatic attack (jump on mario, then backflip and hit mario again)
%acrobatic attack (jump on mario, then frontflip onto partner)

%red: normal
%blue: increased frontflip chance
%green: increased backflip chance
%yellow: increased tackle chance, but can tackle twice
%pink: increased tackle chance, but tackle shrinks

%anti:
%gets a third acrobatic attack at less than 30 hp
%a triple flip that does 20 damage

%since all 5 shy guy colors are basically identical script-wise, I'm going to unify them
%	(though anti-guy is separate still)
%actorvar 1 is now a palette value

%unfortunately it's a bit more complicated than that

%This file contains a lot of enemy types

%#import newenemy/ShyGuy.bpat
#import newenemy/RedBobomb.bpat
#import newenemy/CryoGuy.bpat
#import newenemy/FluffPuff.bpat

%#delete $ShyGuy_RED
#delete $DefenseTable_80219210
#delete $StatusTable_80219224
#delete $PartsTable_802192D0
#delete $IdleAnimations_8021931C
#delete $Script_Init_80219368
#delete $Script_Idle_802193B4
#delete $Script_802194C4
#delete $Script_HandleEvent_80219528
#delete $Script_80219A04
#delete $Script_8021A12C
#delete $Script_TakeTurn_8021ACB4

%#delete $ShyGuy_BLU
#delete $DefenseTable_8021AD10
#delete $StatusTable_8021AD24
#delete $PartsTable_8021ADD0
#delete $IdleAnimations_8021AE1C
#delete $Script_Init_8021AE68
#delete $Script_Idle_8021AEB4
#delete $Script_8021AFC4
#delete $Script_HandleEvent_8021B028
#delete $Script_8021B504
#delete $Script_8021BC2C
#delete $Script_TakeTurn_8021C7B4

%#delete $ShyGuy_GRN
#delete $DefenseTable_8021C810
#delete $StatusTable_8021C824
#delete $PartsTable_8021C8D0
#delete $IdleAnimations_8021C91C
#delete $Script_Init_8021C968
#delete $Script_Idle_8021C9B4
#delete $Script_8021CAC4
#delete $Script_HandleEvent_8021CB28
#delete $Script_8021D004
#delete $Script_8021D72C
#delete $Script_TakeTurn_8021E2B4

%#delete $ShyGuy_PNK
#delete $DefenseTable_8021E310
#delete $StatusTable_8021E324
#delete $PartsTable_8021E3D0
#delete $IdleAnimations_8021E41C
#delete $Script_Init_8021E468
#delete $Script_Idle_8021E4B4
#delete $Script_8021E5C4
#delete $Script_HandleEvent_8021E628
#delete $Script_8021EB04
#delete $Script_8021F22C
#delete $Script_TakeTurn_8021FDB4

%#delete $ShyGuy_YLW
#delete $DefenseTable_8021FE10
#delete $StatusTable_8021FE24
#delete $PartsTable_8021FED0
#delete $IdleAnimations_8021FF1C
#delete $Script_Init_8021FF68
#delete $Script_Idle_8021FFB4
#delete $Script_802200C4
#delete $Script_HandleEvent_80220128
#delete $Script_80220604
#delete $Script_80220D2C
#delete $Script_TakeTurn_802218B4


%Formations n stuff
@ $Formation_00 %2 red + red bobomb + fluff puff
{
$ShyGuy_RED 00000001 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_RED 00000002 00000009 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000003 00000008 00000000 00000000 00000000 00000000
$FluffPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_01 %2 blue + medi guy
{
$ShyGuy_BLU 00000001 0000000A 00000000 00000001 00000000 00000000 
$ShyGuy_BLU 00000002 00000009 00000000 00000001 00000000 00000000 
$MediGuy 00000007 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_02 %2 yellow + bobomb
{
$ShyGuy_YLW 00000001 0000000A 00000000 00000004 00000000 00000000 
$ShyGuy_YLW 00000002 00000009 00000000 00000004 00000000 00000000 
$Red_Bobomb 00000003 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_03 %3 yellow + cryo guy
{
$ShyGuy_YLW	 	00000000 0000000A 00000000 00000004 00000000 00000000 
$ShyGuy_YLW 	00000001 00000009 00000000 00000004 00000000 00000000 
$ShyGuy_YLW 	00000002 00000008 00000000 00000004 00000000 00000000 
$CryoGuy 	00000003 00000007 00000000 00000004 00000000 00000000 
}

@ $Formation_04 %2 pink + medi guy + fluff puff
{
$ShyGuy_PNK		 00000001 0000000A 00000000 00000003 00000000 00000000 
$ShyGuy_PNK 	00000002 00000009 00000000 00000003 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$FluffPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_05 %2 green + spy guy
{
$ShyGuy_GRN		00000001 0000000A 00000000 00000002 00000000 00000000 
$ShyGuy_GRN		 00000002 00000009 00000000 00000002 00000000 00000000 
$SpyGuy		 00000003 00000008 00000002 00000000 00000000 00000000 
}

@ $Formation_06 %1 red and 2 medi
{
$ShyGuy_RED	 00000000 0000000A 00000000 00000000 00000000 00000000 
$MediGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_07 %1 blue, 1 groove, 1 medi
{
$ShyGuy_BLU		 00000000 0000000A 00000000 00000001 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_08 %1 yellow, 1 spy, 1 medi + bobomb
{
$ShyGuy_YLW 00000000 0000000A 00000000 00000004 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_09 %yellow green red blue
{
$ShyGuy_YLW 00000000 0000000A 00000000 00000004 00000000 00000000 
$ShyGuy_GRN 00000001 00000009 00000000 00000002 00000000 00000000 
$ShyGuy_RED 00000002 00000008 00000000 00000000 00000000 00000000 
$ShyGuy_BLU 00000003 00000007 00000000 00000001 00000000 00000000 
}

@ $Formation_0A %1 pink, 1 pyro, 1 medi, 1 fluff puff
{
$ShyGuy_PNK 00000000 0000000A 00000000 00000003 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$FluffPuff 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0B %1 pink, 1 groove, 2 medi
{
$ShyGuy_PNK  00000000 0000000A 00000000 00000003 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0C %1 green, 1 sky, 1 medi
{
$ShyGuy_GRN 00000000 0000000A 00000000 00000002 00000000 00000000 
$SkyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_0D
$SkyGuy 00000005 0000000A 00000000 00000000 00000000 00000000 
$SkyGuy 00000006 00000009 00000000 00000000 00000000 00000000 
%/

@ $Formation_0E %1 sky, 1 yellow
{
$SkyGuy 00000005 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_YLW 00000002 00000009 00000000 00000004 00000000 00000000 
}

@ $Formation_0F %2 sky, 1 yellow + cryo guy
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$SkyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$ShyGuy_YLW 00000002 00000008 00000000 00000004 00000000 00000000
$CryoGuy 00000003 00000007 00000000 00000000 00000000 00000000
}

/%
@ $Formation_10
$SkyGuy 00000005 0000000A 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000009 00000000 00000000 00000000 00000000 
%/

@ $Formation_11
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$SkyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$SpyGuy 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_12 %1 sky, 1 green, 1 medi
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_GRN 00000001 00000009 00000000 00000002 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_13 %1 sky, 1 green, 2 medi
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_GRN 00000001 00000009 00000000 00000002 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_14
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_15 %+2 red bobombs
{
$SpyGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000002 00000008 00000000 00000000 00000000 00000000
$Red_Bobomb 00000003 00000007 00000000 00000000 00000000 00000000
}

/%
@ $Formation_16
$SpyGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000002 00000009 00000000 00000000 00000000 00000000 
%/

@ $Formation_17 %+2 red bobombs
{
$SpyGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000009 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000002 00000008 00000000 00000000 00000000 00000000
$Red_Bobomb 00000003 00000007 00000000 00000000 00000000 00000000
}

/%
@ $Formation_18 %+ cryo guy
$SpyGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$CryoGuy 00000002 00000008 00000000 00000000 00000000 00000000
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
%/

@ $Formation_19 %spy guy -> cryo guy
{
$SpyGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$CryoGuy 00000002 00000008 00000000 00000000 00000000 00000000
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_1A
$SpyGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$SpyGuy 00000002 00000008 00000000 00000000 00000000 00000000 
$SpyGuy 00000003 00000007 00000000 00000000 00000000 00000000 

@ $Formation_1B
$SpyGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$GrooveGuy 00000002 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 

@ $Formation_1C
$PyroGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000002 00000009 00000000 00000000 00000000 00000000 

@ $Formation_1D
$PyroGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$PyroGuy 00000002 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_1E
{
$FluffPuff 00000005 0000000A 00000000 00000000 00000000 00000000 
$FluffPuff 00000006 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_1F
{
$FluffPuff 00000005 0000000A 00000000 00000000 00000000 00000000 
$FluffPuff 00000006 00000009 00000000 00000000 00000000 00000000 
$CryoGuy 00000003 00000006 00000000 00000000 00000000 00000000 
}

@ $Formation_20
{
$FluffPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$FluffPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_21	%maybe you can see the resemblance between cryo guys and pyro guys since I copied the mask and limbs from pyro guy to cryo guy
{
$FluffPuff 00000005 0000000A 00000000 00000000 00000000 00000000 
$CryoGuy 00000002 00000009 00000000 00000000 00000000 00000000 
$PyroGuy 00000003 00000008 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_22
$PyroGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpyGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$GrooveGuy 00000002 00000008 00000000 00000000 00000000 00000000 

@ $Formation_23
$PyroGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 

@ $Formation_24
$PyroGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$SpyGuy 00000002 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_25 %+cryo guy + fluff puff
{
$GrooveGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
$GrooveGuy 00000002 00000009 00000000 00000000 00000000 00000000 
$CryoGuy 00000003 00000007 00000000 00000000 00000000 00000000
$FluffPuff 00000007 00000006 00000000 00000000 00000000 00000000 
}

@ $Formation_26
{
$CryoGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$CryoGuy 00000002 00000008 00000000 00000000 00000000 00000000 
$PyroGuy 00000003 00000007 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_27
$GrooveGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$MediGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 

@ $Formation_28
$GrooveGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_29 %crashes?
{
$ShyGuy_RED 00000001 0000000A 00000000 00000000 00000000 00000000 
}

/%
@ $Formation_2A
$GrooveGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$PyroGuy 00000002 00000008 00000000 00000000 00000000 00000000 
%/

@ $Formation_2B %1 groove, 1 blue, 1 sky, 1 cryo
{
$GrooveGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_BLU 00000001 00000009 00000000 00000001 00000000 00000000 
$SkyGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$CryoGuy 00000003 00000007 00000000 00000000 00000000 00000000
}

/% no change to anti formation
@ $Formation_2C
$AntiGuy 00000001 0000000A 00000000 00000000 00000000 00000000 
%/

%this will probably get moved
%as of now, you only have to fight anti guy to get the first power plus

%#import newenemy/AntiGuy.bpat
#import newenemy/PhalanxGuy.bpat
#import newenemy/CovertGuy.bpat
#import newenemy/PermafrostGuy.bpat
#import newenemy/NuclearGuy.bpat

@ $Script_NextTurn_PermafrostGuy %remove the time limit
{
Return							 %if you actually beat them within 6 turns, i'll be impressed
End
}

%the game normally only allows 4 enemies in a line
%but manually specifying positions works fine

#new:Vector3D $Vector3D_Pos1
{
5` 0` -20`
}

#new:Vector3D $Vector3D_Pos2
{
35` 0` -9`
}

#new:Vector3D $Vector3D_Pos3
{
65` 0` 2`
}

#new:Vector3D $Vector3D_Pos4
{
95` 0` 13`
}

#new:Vector3D $Vector3D_Pos5
{
125` 0` 25`
}

#new:Formation $Formation_2D
{
$AntiGuy $Vector3D_Pos1 0000000A 00000000 00000000 00000000 00000000 
$PhalanxGuy $Vector3D_Pos2 00000009 00000000 00000000 00000000 00000000 
$CovertGuy $Vector3D_Pos3 00000008 00000000 00000000 00000000 00000000 
$PermafrostGuy $Vector3D_Pos4 00000007 00000000 00000000 00000000 00000000 
$NuclearGuy $Vector3D_Pos5 00000006 00000000 00000000 00000000 00000000 
}

@ $FormationTable
{
$SJIS_8023107C 00000004 $Formation_00 $Stage_8022DE0C 00000000 
$SJIS_80231074 00000003 $Formation_01 $Stage_8022DE0C 00000000 
$SJIS_80231068 00000003 $Formation_02 $Stage_8022DE0C 00000000 
$SJIS_8023105C 00000004 $Formation_03 $Stage_8022DE0C 00000000 
$SJIS_80231054 00000004 $Formation_04 $Stage_8022DE0C 00000000 
$SJIS_80231048 00000003 $Formation_05 $Stage_8022DE0C 00000000 
$SJIS_80231034 00000003 $Formation_06 $Stage_8022DE0C 00000000 % unused
$SJIS_80231018 00000003 $Formation_07 $Stage_8022DE0C 00000000 % unused
$SJIS_80230FFC 00000004 $Formation_08 $Stage_8022DE0C 00000000 % unused
$SJIS_80230FE4 00000004 $Formation_09 $Stage_8022DE0C 00000000 
$SJIS_80230FCC 00000004 $Formation_0A $Stage_8022DE0C 00000000 % unused
$SJIS_80230FB0 00000004 $Formation_0B $Stage_8022DE0C 00000000 % unused
$SJIS_80230F94 00000003 $Formation_0C $Stage_8022DE0C 00000000 % unused
$SJIS_80230F88 00000002 $Formation_0D $Stage_8022DE0C 00000000 % unused
$SJIS_80230F78 00000002 $Formation_0E $Stage_8022DE0C 00000000 % unused
$SJIS_80230F64 00000004 $Formation_0F $Stage_8022DE0C 00000000 
$SJIS_80230F50 00000002 $Formation_10 $Stage_8022DE0C 00000000 % unused
$SJIS_80230F38 00000003 $Formation_11 $Stage_8022DE0C 00000000 % unused
$SJIS_80230F1C 00000003 $Formation_12 $Stage_8022DE0C 00000000 
$SJIS_80230F00 00000004 $Formation_13 $Stage_8022DE0C 00000000 % unused
$SJIS_80230EE0 00000003 $Formation_14 $Stage_8022DE0C 00000000 
$SJIS_80230ED4 00000004 $Formation_15 $Stage_8022DE0C 00000000 % unused
$SJIS_80230EC0 00000002 $Formation_16 $Stage_8022DE0C 00000000 % unused
$SJIS_80230EAC 00000004 $Formation_17 $Stage_8022DE0C 00000000 
$SJIS_80230E94 00000004 $Formation_18 $Stage_8022DE0C 00000000 % unused
$SJIS_80230E7C 00000004 $Formation_19 $Stage_8022DE0C 00000000 
$SJIS_80230E70 00000004 $Formation_1A $Stage_8022DE0C 00000000 % unused
$SJIS_80230E48 00000004 $Formation_1B $Stage_8022DE0C 00000000 
$SJIS_80230E3C 00000002 $Formation_1C $Stage_8022DE0C 00000000 % unused
$SJIS_80230E30 00000003 $Formation_1D $Stage_8022DE0C 00000000 
$SJIS_80230E1C 00000003 $Formation_1E $Stage_8022DE0C 00000000 % unused		fluff puff encounter 1
$SJIS_80230E04 00000003 $Formation_1F $Stage_8022DE0C 00000000 % unused		fluff puff encounter 2
$SJIS_80230DEC 00000004 $Formation_20 $Stage_8022DE0C 00000000 % unused		fluff puff encounter 3
$SJIS_80230DCC 00000003 $Formation_21 $Stage_8022DE0C 00000000 % unused		fluff puff encounter 4
$SJIS_80230DAC 00000003 $Formation_22 $Stage_8022DE0C 00000000 		
$SJIS_80230D8C 00000004 $Formation_23 $Stage_8022DE0C 00000000 % unused
$SJIS_80230D78 00000003 $Formation_24 $Stage_8022DE0C 00000000 
$SJIS_80230D68 00000004 $Formation_25 $Stage_8022DE0C 00000000 
$SJIS_80230D58 00000004 $Formation_26 $Stage_8022DE0C 00000000 % cryo guy formation
$SJIS_80230D40 00000003 $Formation_27 $Stage_8022DE0C 00000000 % unused
$SJIS_80230D28 00000003 $Formation_28 $Stage_8022DE0C 00000000 % unused
$SJIS_80230D0C 00000001 $Formation_29 $Stage_8022DB78 00000000 % now used for the shy guy jackpot for the slot machine
$SJIS_80230CF0 00000003 $Formation_2A $Stage_8022DE0C 00000000 
$SJIS_80230CD4 00000004 $Formation_2B $Stage_8022DE0C 00000000 
$SJIS_80230CC8 00000001 $Formation_2C $Stage_8022DE0C 00000000 
00000000 00000005 $Formation_2D $Stage_8022DE0C 00000000 %unused 5-guy fight
00000000 00000003 $Formation_2E $Stage_Pit1 00000000 %floor 31
00000000 00000003 $Formation_2F $Stage_Pit1 00000000 %floor 32
00000000 00000004 $Formation_30 $Stage_Pit1 00000000 %floor 33
00000000 00000004 $Formation_31 $Stage_Pit1 00000000 %floor 34
00000000 00000005 $Formation_32 $Stage_Pit1 00000000 %floor 35
00000000 00000004 $Formation_33 $Stage_Pit1 00000000 %floor 36
00000000 00000004 $Formation_34 $Stage_Pit1 00000000 %floor 37
00000000 00000004 $Formation_35 $Stage_Pit1 00000000 %floor 38
00000000 00000005 $Formation_36 $Stage_Pit1 00000000 %floor 39
00000000 00000000 00000000 00000000 00000000 % unused
}

@ $StageTable
{
$ASCII_802310C4 $Stage_8022DB78 
$ASCII_802310BC $Stage_8022DBEC 
$ASCII_802310B4 $Stage_8022DC80 
$ASCII_802310AC $Stage_8022DCFC 
$ASCII_802310A4 $Stage_8022DE0C 
$ASCII_8023109C $Stage_8022F550 
$ASCII_80231094 $Stage_8022F5FC 
$ASCII_8023108C $Stage_8022F87C 
$ASCII_80231084 $Stage_8022F8FC 
"pit_04" $Stage_Pit1
00000000 00000000 
}

#new:Stage $Stage_Pit1
{
"kpa_tex"
"pit_b01_shape"
"pit_b01_hit"
$Script_BeforeBattle_Pit
$Script_AfterBattle_Pit
00000000 
00000000 
00000000 
00000000 
00000000 
}

%to make things easier to add, I'm adding the pit scripts every time even when I don't need to
#new:Script $Script_BeforeBattle_Pit
{
	Return
	End
}

#new:Script $Script_AfterBattle_Pit
{
	Return
	End
}

%for reference, here's all the shyguy colors
/%
$ShyGuy_YLW 00000000 0000000A 00000000 00000004 00000000 00000000 
$ShyGuy_PNK 00000000 0000000A 00000000 00000003 00000000 00000000 
$ShyGuy_GRN 00000001 00000009 00000000 00000002 00000000 00000000 
$ShyGuy_BLU 00000003 00000007 00000000 00000001 00000000 00000000 
$ShyGuy_RED 00000002 00000008 00000000 00000000 00000000 00000000 
%/

#new:Formation $Formation_2E
{
$ShyGuy_RED 00000001 0000000A 00000000 00000000 00000000 00000000 
$ShyGuy_RED 00000002 00000009 00000000 00000000 00000000 00000000 
$FluffPuff 00000007 00000008 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_2F
{
$ShyGuy_BLU 00000001 0000000A 00000000 00000001 00000000 00000000 
$ShyGuy_BLU 00000002 00000009 00000000 00000001 00000000 00000000 
$MediGuy 00000007 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_30
{
$ShyGuy_YLW 00000000 0000000A 00000000 00000004 00000000 00000000 
$ShyGuy_GRN 00000001 00000009 00000000 00000002 00000000 00000000 
$ShyGuy_RED 00000002 00000008 00000000 00000000 00000000 00000000 
$ShyGuy_BLU 00000003 00000007 00000000 00000001 00000000 00000000 
}

#new:Formation $Formation_31
{
$ShyGuy_GRN 00000001 0000000A 00000000 00000002 00000000 00000000 
$ShyGuy_YLW 00000002 00000009 00000000 00000004 00000000 00000000 
$SpyGuy 00000003 00000008 00000000 00000001 00000000 00000000 
$FluffPuff 00000007 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_32 %this formation is very sprite heavy, having 3 sky guys would cause other sprites to disappear
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$SkyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$FluffPuff 00000007 00000007 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000003 00000006 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_33
{
$ShyGuy_PNK 00000000 0000000A 00000000 00000003 00000000 00000000 
$GrooveGuy 00000001 00000009 00000000 00000002 00000000 00000000 
$Red_Bobomb 00000002 00000008 00000000 00000000 00000000 00000000 
$Red_Bobomb 00000003 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_34
{
$PyroGuy 00000000 0000000A 00000000 00000003 00000000 00000000 
$PyroGuy 00000001 00000009 00000000 00000003 00000000 00000000 
$PyroGuy 00000002 00000008 00000000 00000003 00000000 00000000 
$Red_Bobomb 00000003 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_35
{
$SkyGuy 00000004 0000000A 00000000 00000000 00000000 00000000 
$SkyGuy 00000005 00000009 00000000 00000000 00000000 00000000 
$MediGuy 00000006 00000008 00000000 00000000 00000000 00000000 
$MediGuy 00000007 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $Formation_36
{
$ShyGuy_BLU 00000001 0000000A 00000000 00000001 00000000 00000000 
$CryoGuy 00000002 00000009 00000000 00000001 00000000 00000000 
$CryoGuy 00000003 00000008 00000000 00000001 00000000 00000000 
$FluffPuff 00000006 00000007 00000000 00000000 00000000 00000000 
$FluffPuff 00000007 00000006 00000000 00000000 00000000 00000000 
}

#new:DefenseTable $DefenseTable_ShyGuy %$DefenseTable_80219210
{
.Element:Normal 00000000
.Element:Shock  00000000
.Element:End
}

#new:StatusTable $StatusTable_ShyGuy %$StatusTable_80219224 
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      70`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      30` %90 -> 30
.Status:Fear      100`
.Status:Static     20` %30 -> 20
.Status:Paralyze   70` %90 -> 70
.Status:Shrink     75`
.Status:Stop       60` %90 -> 60
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_ShyGuy_R %$PartsTable_802192D0
{
00800000 01000000 001800FF $IdleAnimations_ShyGuy_R $DefenseTable_ShyGuy 00000000 00000000 FFF60000 00000000 
}

#new:PartsTable $PartsTable_ShyGuy_B %$PartsTable_802192D0
{
00800000 01000000 001800FF $IdleAnimations_ShyGuy_B $DefenseTable_ShyGuy 00000000 00000000 FFF60000 00000000 
}

#new:PartsTable $PartsTable_ShyGuy_G %$PartsTable_802192D0
{
00800000 01000000 001800FF $IdleAnimations_ShyGuy_G $DefenseTable_ShyGuy 00000000 00000000 FFF60000 00000000 
}

#new:PartsTable $PartsTable_ShyGuy_P %$PartsTable_802192D0
{
00800000 01000000 001800FF $IdleAnimations_ShyGuy_P $DefenseTable_ShyGuy 00000000 00000000 FFF60000 00000000 
}

#new:PartsTable $PartsTable_ShyGuy_Y %$PartsTable_802192D0
{
00800000 01000000 001800FF $IdleAnimations_ShyGuy_Y $DefenseTable_ShyGuy 00000000 00000000 FFF60000 00000000 
}

@ $ShyGuy_RED
{
[MaxHP]         9`b 
[StatusTable] $StatusTable_ShyGuy 
[PartsTable] $PartsTable_ShyGuy_R
[Script]      $Script_Init_ShyGuy 
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $ShyGuy_BLU
{
[MaxHP]         9`b 
[StatusTable] $StatusTable_ShyGuy 
[PartsTable] $PartsTable_ShyGuy_B
[Script]      $Script_Init_ShyGuy 
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $ShyGuy_GRN
{
[MaxHP]         9`b 
[StatusTable] $StatusTable_ShyGuy 
[PartsTable] $PartsTable_ShyGuy_G
[Script]      $Script_Init_ShyGuy 
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $ShyGuy_PNK
{
[MaxHP]         9`b 
[StatusTable] $StatusTable_ShyGuy 
[PartsTable] $PartsTable_ShyGuy_P
[Script]      $Script_Init_ShyGuy 
[Hurricane]    60`b % Bow's "Spook" as well
}

@ $ShyGuy_YLW
{
[MaxHP]         9`b 
[StatusTable] $StatusTable_ShyGuy 
[PartsTable] $PartsTable_ShyGuy_Y
[Script]      $Script_Init_ShyGuy 
[Hurricane]    60`b % Bow's "Spook" as well
}

#new:IdleAnimations $IdleAnimations_ShyGuy_R
{
.Status:Normal    003B0001
.Status:Stone     003B0000
.Status:Sleep     003B0012
.Status:Poison    003B0001
.Status:Stop      003B0000
.Status:Static    003B0001
.Status:Paralyze  003B0000
.Status:Dizzy     003B0013
.Status:Fear      003B0013
.Status:End
}

#new:IdleAnimations $IdleAnimations_ShyGuy_B
{
.Status:Normal    003B0101
.Status:Stone     003B0100
.Status:Sleep     003B0112
.Status:Poison    003B0101
.Status:Stop      003B0100
.Status:Static    003B0101
.Status:Paralyze  003B0100
.Status:Dizzy     003B0113
.Status:Fear      003B0113
.Status:End
}

#new:IdleAnimations $IdleAnimations_ShyGuy_G
{
.Status:Normal    003B0201
.Status:Stone     003B0200
.Status:Sleep     003B0212
.Status:Poison    003B0201
.Status:Stop      003B0200
.Status:Static    003B0201
.Status:Paralyze  003B0200
.Status:Dizzy     003B0213
.Status:Fear      003B0213
.Status:End
}

#new:IdleAnimations $IdleAnimations_ShyGuy_P
{
.Status:Normal    003B0301
.Status:Stone     003B0300
.Status:Sleep     003B0312
.Status:Poison    003B0301
.Status:Stop      003B0300
.Status:Static    003B0301
.Status:Paralyze  003B0300
.Status:Dizzy     003B0313
.Status:Fear      003B0313
.Status:End
}

#new:IdleAnimations $IdleAnimations_ShyGuy_Y
{
.Status:Normal    003B0401
.Status:Stone     003B0400
.Status:Sleep     003B0412
.Status:Poison    003B0401
.Status:Stop      003B0400
.Status:Static    003B0401
.Status:Paralyze  003B0400
.Status:Dizzy     003B0413
.Status:Fear      003B0413
.Status:End
}


#new:Script $Script_Init_ShyGuy %$Script_Init_80219368
{
		Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
		Switch (*Var[2])
			Case == 00000000
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_ShyGuy_R )
			Case == 00000001
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_ShyGuy_B )
			Case == 00000002
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_ShyGuy_G )
			Case == 00000003
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_ShyGuy_P )
			Case == 00000004
				Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_ShyGuy_Y )
		EndSwitch
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_ShyGuy )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_ShyGuy )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_ShyGuy )
   3C:  Return
   44:  End
}

#new:Script $Script_Idle_ShyGuy
{
    0:  Label    00000000 
    C:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   20:  If  *Var[0]  &  00001000 
   30:  	Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFC 0000000E )
   4C:  	Call     8027D4C8 ( FFFFFF81 00000001 00000000 00000000 )
   68:  	Call     $Function_80218000 ( FFFFFFF6 0000000D 0000000A 0000000D )
   84:  Else
   8C:  	Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000018 )
   A8:  	Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFF6 )
   C4:  	Call     $Function_80218000 ( FFFFFFF6 00000014 0000000A 00000014 )
   E0:  EndIf
   E8:  Wait     00000001 
   F4:  Goto     00000000 
  100:  Return
  108:  End
}

#new:Script $Script_802194C4_ShyGuy %$Script_802194C4
{
    0:  Call     8026F6EC ( FFFFFF81 )
   10:  SetConst  *Var[0]  00000001 
   20:  SetConst  *Var[1]  003B0003
		Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
		Mul *Var[2] 100
		Add *Var[1] *Var[2]
   30:  ExecWait DoReturnHome 
		Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
		Mul *Var[2] 100
		Add *Var[2] 003B0001
   3C:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[2] )
   54:  Return
   5C:  End
}

#new:Script $Script_HandleEvent_ShyGuy %$Script_HandleEvent_80219528
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   28:  Switch  *Var[0] 
   34:  	CaseOR  ==  .Event:HitCombo
   40:  	CaseOR  ==  .Event:Hit
   4C:  		SetConst  *Var[0]  00000001 
   5C:  		SetConst  *Var[1]  003B000C 
				Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
				Mul *Var[2] 100
				Add *Var[1] *Var[2]
   6C:  		ExecWait DoNormalHit 
   78:  	EndCaseGroup
   80:  	Case  ==  .Event:BurnHit
   8C:  		SetConst  *Var[0]  00000001 
   9C:  		SetConst  *Var[1]  003B000D 
   AC:  		SetConst  *Var[2]  003B000E 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
				Add *Var[2] *Var[C]
   BC:  		ExecWait DoBurnHit 
   C8:  	Case  ==  .Event:BurnDeath
   D4:  		SetConst  *Var[0]  00000001 
   E4:  		SetConst  *Var[1]  003B000D 
   F4:  		SetConst  *Var[2]  003B000E 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
				Add *Var[2] *Var[C]
  104:  		ExecWait DoBurnHit 
  110:  		SetConst  *Var[0]  00000001 
  120:  		SetConst  *Var[1]  003B000E 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  130:  		ExecWait DoDeath 
  13C:  		Return
  144:  	Case  ==  .Event:SpinSmashHit
  150:  		SetConst  *Var[0]  00000001 
  160:  		SetConst  *Var[1]  003B000C 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  170:  		ExecWait 8029B998 
  17C:  	Case  ==  .Event:SpinSmashDeath
  188:  		SetConst  *Var[0]  00000001 
  198:  		SetConst  *Var[1]  003B000C 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  1A8:  		ExecWait 8029B998 
  1B4:  		SetConst  *Var[0]  00000001 
  1C4:  		SetConst  *Var[1]  003B000C 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  1D4:  		ExecWait DoDeath 
  1E0:  		Return
  1E8:  	Case  ==  .Event:ShockHit
  1F4:  		SetConst  *Var[0]  00000001 
  204:  		SetConst  *Var[1]  003B000C
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]  
  214:  		ExecWait DoShockHit 
  220:  		SetConst  *Var[0]  00000001 
  230:  		SetConst  *Var[1]  003B000C 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  240:  		ExecWait DoJumpBack 
  24C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  260:  		ExecWait $Script_802194C4_ShyGuy 
  26C:  	Case  ==  .Event:ShockDeath
  278:  		SetConst  *Var[0]  00000001 
  288:  		SetConst  *Var[1]  003B000C 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  298:  		ExecWait DoShockHit 
  2A4:  		SetConst  *Var[0]  00000001 
  2B4:  		SetConst  *Var[1]  003B000C
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]  
  2C4:  		ExecWait DoDeath 
  2D0:  		Return
  2D8:  	CaseOR  ==  00000017
  2E4:  	CaseOR  ==  .Event:Immune
  2F0:  	CaseOR  ==  .Event:AirLiftFailed
  2FC:  		SetConst  *Var[0]  00000001 
  30C:  		SetConst  *Var[1]  003B0001 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  31C:  		ExecWait DoImmune 
  328:  	EndCaseGroup
  330:  	Case  ==  .Event:Death
  33C:  		SetConst  *Var[0]  00000001 
  34C:  		SetConst  *Var[1]  003B000C 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  35C:  		ExecWait DoNormalHit 
  368:  		Wait     0000000A 
  374:  		SetConst  *Var[0]  00000001 
  384:  		SetConst  *Var[1]  003B000C 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  394:  		ExecWait DoDeath 
  3A0:  		Return
  3A8:  	Case  ==  .Event:RecoverStatus
  3B4:  		SetConst  *Var[0]  00000001 
  3C4:  		SetConst  *Var[1]  003B0001 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  3D4:  		ExecWait DoRecover 
  3E0:  	Case  ==  .Event:ScareAway
  3EC:  		SetConst  *Var[0]  00000001 
  3FC:  		SetConst  *Var[1]  003B0003 
  40C:  		SetConst  *Var[2]  003B0014 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
				Add *Var[2] *Var[C]
  41C:  		ExecWait DoScareAway 
  428:  		Return
  430:  	Case  ==  .Event:BeginAirLift
  43C:  		SetConst  *Var[0]  00000001 
  44C:  		SetConst  *Var[1]  003B000C
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]  
  45C:  		ExecWait DoAirLift 
  468:  	Case  ==  .Event:BlowAway
  474:  		SetConst  *Var[0]  00000001 
  484:  		SetConst  *Var[1]  003B000C 
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  494:  		ExecWait DoBlowAway 
  4A0:  		Return
  4A8:  	Default
  4B0:  EndSwitch
  4B8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  4CC:  Return
  4D4:  End
}

#new:Script $Script_ShyGuy_Tackle %$Script_80219A04
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
		Mul *Var[2] 100
		Add *Var[2] 003B0003
   84:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[2] )
   9C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
   B0:  Call     SetGoalToTarget 	( .Actor:Self )
   C0:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   DC:  Add  *Var[0]  00000032 
   EC:  Set  *Var[1]  00000000 
   FC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  118:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  130:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  154:  Switch  *Var[0] 
  160:  	CaseOR  ==  00000006 
  16C:  	CaseOR  ==  00000005 
  178:  		Set  *Var[A]  *Var[0] 
  188:  		Call     SetActorSounds ( FFFFFF81 00000002 000002EF 00000000 )
  1A4:  		Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  1C0:  		Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  1DC:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
				Call GetActorVar  (.Actor:Self 00000001 *Var[2] )
				Mul *Var[2] 100
				Add *Var[2] 003B0004
  1F0:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[2] )
  208:  		Call     SetGoalToTarget 	( .Actor:Self )
  218:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Add *Var[2] 1 %the above stuff sets it to animation 4, so adding 1 sets it to animation 5
  230:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[2] )
  248:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  25C:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  270:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  28C:  		Sub  *Var[0]  0000001E 
  29C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2B8:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  2D8:  		If  *Var[A]  ==  00000005 
  2E8:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  30C:  		EndIf
  314:  		Call     8026F6EC ( FFFFFF81 )
  324:  		Sub  *Var[0]  00000014 
  334:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  350:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  370:  		Wait     0000000F 
  37C:  		Call     UseBattleCamPreset 	( 00000002 )
  38C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  3A0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3BC:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  3D0:  		SetConst  *Var[0]  00000001 
  3E0:  		SetConst  *Var[1]  003B0004 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  3F0:  		ExecWait DoReturnHome 
  3FC:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  414:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0001
  428:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  440:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  454:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  468:  		Return
  470:  	EndCaseGroup
  478:  EndSwitch
  480:  Thread
  488:  	Wait     00000003 
  494:  	Call     PlaySoundAtActor 	( .Actor:Self 000002EF )
  4A8:  EndThread
  4B0:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  4CC:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  4E8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0004
  4FC:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  514:  Call     SetGoalToTarget 	( .Actor:Self )
  524:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  540:  Add  *Var[0]  0000000A 
  550:  Set  *Var[1]  00000000 
  560:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  57C:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0005
  594:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  5AC:  Wait     00000002 
  5B8:  Call     SetGoalToTarget 	( .Actor:Self )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		If (*Var[C] == 00000003) %pink
			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80080264 00000002 00000020 )
		Else
  5C8:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000002 00000020 )
		EndIf
  5F0:  Call     8026F6EC ( FFFFFF81 )
  600:  Call     UseBattleCamPreset 	( 00000002 )
  610:  Call     MoveBattleCamOver 	( 0000000F )
  620:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  63C:  Add  *Var[0]  0000001E 
  64C:  Set  *Var[1]  00000000 
  65C:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  670:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  68C:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0001
  6AC:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  6C4:  Wait     00000008 
  6D0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  6E4:  ExecWait $Script_802194C4_ShyGuy 
  6F0:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  704:  Call     UseIdleAnimation 	( .Actor:Self .True )
  718:  Return
  720:  End
}

#new:Script $Script_ShyGuy_Backflip %backflip
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
   98:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
   B0:  Wait     00000014 
		Sub	*Var[C] 6 %animation 9 -> animation 3
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   E8:  Call     SetGoalToTarget 	( .Actor:Self )
   F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  Add  *Var[0]  00000050 
  124:  Set  *Var[1]  00000000 
  134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0004
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1CC:  Sub  *Var[0]  00000028 
  1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )		
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0009
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  294:  		Thread
  29C:  			Wait     0000000C 
					Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
					Mul *Var[C] 100
					Add *Var[C] 003B000A
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  344:  		Call     JumpToGoal  	( .Actor:Self 00000018 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0005
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0004 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0001 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  5E0:  Thread
  5E8:  	Wait     00000009 
			Set *Var[D] *Var[C]
			Add *Var[D] 1 %animation 10
  5F4:  	Call     SetAnimation 	( .Actor:Self 00000001 *Var[D] )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
		Thread
			Wait     00000005
			Set *Var[D] *Var[C]
			Add *Var[D] 1 %animation 10
			Call     SetAnimation 	( .Actor:Self 00000001 *Var[D] )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
			Set  *Var[3]  00000000 
			Loop     0000000F 
				Sub  *Var[3]  00000018 %24 degrees 
				If  *Var[3]  <  00000000
					Add  *Var[3]  00000168 
				EndIf
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
				Wait     00000001 
			EndLoop
    		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
		EndThread
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
		Wait     00000002 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  /%
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 
  810:  			Goto     00000001 
  81C:  		EndIf
  %/
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0009
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  8F0:  		Wait     0000000A 
				Sub *Var[C] 2 %animation 7
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  914:  		Wait     0000000F 
  /%				always cheer
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0010 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0011 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0013 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  %/
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0004 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0001
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}

#new:Script $Script_ShyGuy_Frontflip %backflip
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
   98:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
   B0:  Wait     00000014 
		Sub	*Var[C] 6 %animation 9 -> animation 3
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   E8:  Call     SetGoalToTarget 	( .Actor:Self )
   F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  Add  *Var[0]  00000050 
  124:  Set  *Var[1]  00000000 
  134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0004
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1CC:  Sub  *Var[0]  00000028 
  1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )		
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0009
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  294:  		Thread
  29C:  			Wait     0000000C 
					Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
					Mul *Var[C] 100
					Add *Var[C] 003B000A
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  344:  		Call     JumpToGoal  	( .Actor:Self 00000018 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0005
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0004 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0001 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  5E0:  Thread
  5E8:  	Wait     00000009 
			Set *Var[D] *Var[C]
			Add *Var[D] 1 %animation 10
  5F4:  	Call     SetAnimation 	( .Actor:Self 00000001 *Var[D] )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Mul *Var[C] 100
		Add *Var[C] 003B0009
		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
		Thread
			Wait     00000005
			Set *Var[D] *Var[C]
			Add *Var[D] 1 %animation 10
			Call     SetAnimation 	( .Actor:Self 00000001 *Var[D] )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
			Set  *Var[3]  00000000 
			Loop     0000000F 
				Add  *Var[3]  00000018 %24 degrees 
				If  *Var[3]  >  00000168
					Sub  *Var[3]  00000168 
				EndIf
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
				Wait     00000001 
			EndLoop
    		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
		EndThread
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
		Call     SetTargetActor ( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
		Wait     00000002 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000001 00000020 )
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  /%
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 
  810:  			Goto     00000001 
  81C:  		EndIf
  %/
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0009
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  8F0:  		Wait     0000000A 
				Sub *Var[C] 2 %animation 7
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  914:  		Wait     0000000F 
  /%				always cheer
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0010 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0011 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0013 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  %/
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0004 
				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[1] *Var[C]
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  				Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
				Mul *Var[C] 100
				Add *Var[C] 003B0001
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 *Var[C] )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}


#new:Script $Script_TakeTurn_ShyGuy %$Script_TakeTurn_8021ACB4
{
		Call GetActorVar  (.Actor:Self 00000001 *Var[C] )
		Switch (*Var[C])
			Case == 00000000
				Call     RandInt     	( 00000002 *Var[0] )
				Switch  (*Var[0]) 
					Case == 00000000 
						ExecWait $Script_ShyGuy_Tackle 
					Case == 00000001
						ExecWait $Script_ShyGuy_Backflip
					Default
						ExecWait $Script_ShyGuy_Frontflip
				EndSwitch
			Case == 00000001 %higher frontflip chance
				Call     RandInt     	( 00000003 *Var[0] )
				Switch  (*Var[0]) 
					Case == 00000000 
						ExecWait $Script_ShyGuy_Tackle 
					Case == 00000001
						ExecWait $Script_ShyGuy_Backflip
					Default
						ExecWait $Script_ShyGuy_Frontflip
				EndSwitch
			Case == 00000002 %higher backflip chance
				Call     RandInt     	( 00000003 *Var[0] )
				Switch  (*Var[0]) 
					Case == 00000000 
						ExecWait $Script_ShyGuy_Tackle 
					Case == 00000001
						ExecWait $Script_ShyGuy_Frontflip
					Default
						ExecWait $Script_ShyGuy_Backflip
				EndSwitch			
			Case == 00000003 %higher tackle chance
				Call     RandInt     	( 00000003 *Var[0] )
				Switch  (*Var[0]) 
					Case == 00000000 
						ExecWait $Script_ShyGuy_Backflip
					Case == 00000001
						ExecWait $Script_ShyGuy_Frontflip
					Default
						ExecWait $Script_ShyGuy_Tackle
				EndSwitch			
			Case == 00000004 %higher tackle chance
				Call     RandInt     	( 00000003 *Var[0] )
				Switch  (*Var[0]) 
					Case == 00000000 
						ExecWait $Script_ShyGuy_Backflip
					Case == 00000001
						ExecWait $Script_ShyGuy_Frontflip
					Default
						ExecWait $Script_ShyGuy_Tackle
				EndSwitch	
		EndSwitch
		Return
		End
}




%Anti guy

%basically immune to everything but shrink and paralyze
@ $StatusTable_8022191C
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   50`
.Status:Shrink    100`
.Status:Stop        0`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}

@ $AntiGuy
{
[PowerBounce]  3`b
}

@ $Script_Init_80221A60
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_802233AC )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_80221AAC )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_80221C20 )
		Call 	 SetActorVar  (.Actor:Self 00000000 00000000 ) %turn cycle thing
   3C:  Return
   44:  End
}

@ $Script_TakeTurn_802233AC
{
		%old AI:
		%randomly choose between tackle, bflip, frontflip
		%new AI:
		%every other turn, alternates backflip / (fronflip, tackle/tripleflip)
		%backflip, tackle, backflip, frontflip 
		%tackle and frontflip get replaced by tripleflip at low health
		Call GetActorVar  (.Actor:Self 00000000 *Var[F] )
		Add *Var[F] 1
		Set *Var[E] *Var[F]
		Mod *Var[E] 2
		Mod *Var[F] 4
		Call SetActorVar  (.Actor:Self 00000000 *Var[F] )
		If *Var[E] == 0
			ExecWait $Script_80222824 %backflip
			Return
		EndIf
		If *Var[F] > 1 %2 or 3
			Call	 GetActorHP ( .Actor:Self *Var[B] )
			%make this happen at 1/5 health
			Call	 GetEnemyMaxHP ( .Actor:Self *Var[C] )
			Div		*Var[C] 5
			If (*Var[B] > *Var[C])
				ExecWait $Script_AntiGuy_FrontFlip %frontflip
			Else
				ExecWait $Script_AntiGuy_TripleFlip %tripleflip
			EndIf		
		Else
			Call	 GetActorHP ( .Actor:Self *Var[B] )
			%make this happen at 3/5 health
			Call	 GetEnemyMaxHP ( .Actor:Self *Var[C] )
			Mul 	*Var[C] 3
			Div		*Var[C] 5
			If (*Var[B] > *Var[C])
				ExecWait $Script_802220FC %tackle
			Else
				ExecWait $Script_AntiGuy_TripleFlip %frontflip
			EndIf		
		EndIf
		/%
		Call     RandInt     	( 00000002 *Var[0] )
		Switch  (*Var[0]) 
			Case == 00000000 				
				Call	 GetActorHP ( .Actor:Self *Var[B] )
				%make this happen at 3/5 health
				Call	 GetEnemyMaxHP ( .Actor:Self *Var[C] )
				Mul 	*Var[C] 3
				Div		*Var[C] 5
				If (*Var[B] > *Var[C])
					ExecWait $Script_802220FC %tackle
				Else
					Call     GetStatusFlags ( .Actor:Self *Var[5] )
					If  *Var[5]  !&  00080000 
						ExecWait $Script_AntiGuy_TripleFlip %frontflip
					Else 
						ExecWait $Script_80222824 %backflip
					EndIf
				EndIf
			Case == 00000001
				ExecWait $Script_80222824 %backflip
			Default
				ExecWait $Script_AntiGuy_FrontFlip %frontflip
		EndSwitch	
		%/
   4C:  Return
   54:  End
}
   
%flat mario function? Call     80269EAC ( 00000017 )

@ $Script_80222824 %the backflip does 24 damage without defense
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
   B0:  Wait     00000014 
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 003B0503 )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   E8:  Call     SetGoalToTarget 	( .Actor:Self )
   F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  Add  *Var[0]  00000050 
  124:  Set  *Var[1]  00000000 
  134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 003B0504 )
  1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1CC:  Sub  *Var[0]  00000028 
  1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  294:  		Thread
  29C:  			Wait     0000000C 
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  344:  		Call     JumpToGoal  	( .Actor:Self 00000018 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0505 )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0504 
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  5E0:  Thread
  5E8:  	Wait     00000009 
  5F4:  	Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 0000000C 00000020 ) 
		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
		Thread
			Wait     00000005
			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
			Set  *Var[3]  00000000 
			Loop     0000000F 
				Sub  *Var[3]  00000018 %24 degrees 
				If  *Var[3]  <  00000000
					Add  *Var[3]  00000168 
				EndIf
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
				Wait     00000001 
			EndLoop
    		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
		EndThread
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     JumpToGoal  	( .Actor:Self 0000001A 00000000 00000001 00000000 )
		Wait     00000002 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 0000000C 00000020 )
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  /%			
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  %/
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 %he still gets mad if you somehow manage to avoid all that damage
  810:  			Goto     00000001 
  81C:  		EndIf
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  8F0:  		Wait     0000000A 
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0507 )
  914:  		Wait     0000000F 
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0510 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0511 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0513 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0504 
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}
  
#new:Script $Script_AntiGuy_FrontFlip %the frontflip does 12 and 4 to partner
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
   B0:  Wait     00000014 
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 003B0503 )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   E8:  Call     SetGoalToTarget 	( .Actor:Self )
   F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  Add  *Var[0]  00000050 
  124:  Set  *Var[1]  00000000 
  134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 003B0504 )
  1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1CC:  Sub  *Var[0]  00000028 
  1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  294:  		Thread
  29C:  			Wait     0000000C 
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  344:  		Call     JumpToGoal  	( .Actor:Self 00000018 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0505 )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0504 
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  5E0:  Thread
  5E8:  	Wait     00000009 
  5F4:  	Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 0000000C 00000020 ) 
		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
		Thread
			Wait     00000005
			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
			Set  *Var[3]  00000000 
			Loop     0000000F 
				Add  *Var[3]  00000018 %24 degrees 
				If  *Var[3]  >  00000168
					Sub  *Var[3]  00000168 
				EndIf
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
				Wait     00000001 
			EndLoop
    		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
		EndThread
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
		Call     SetTargetActor ( .Actor:Self .Actor:Partner )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     JumpToGoal  	( .Actor:Self 0000001A 00000000 00000001 00000000 )
		Wait     00000002 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 )
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  /%			
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  %/
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 %he still gets mad if you somehow manage to avoid all that damage
  810:  			Goto     00000001 
  81C:  		EndIf
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  8F0:  		Wait     0000000A 
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0507 )
  914:  		Wait     0000000F 
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0510 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0511 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0513 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0504 
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}
 
#new:Script $Script_AntiGuy_TripleFlip %the tripleflip does 20 damage
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
   B0:  Wait     00000014 
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 003B0503 )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   %skip running, he's gonna jump all the way over to you
   % E8:  Call     SetGoalToTarget 	( .Actor:Self )
   % F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 114:  Add  *Var[0]  00000050 
  % 124:  Set  *Var[1]  00000000 
  % 134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  % 168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  % 184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  % 1A0:  Call     SetAnimation 	( .Actor:Self 00000001 003B0504 )
  % 1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  % 1CC:  Sub  *Var[0]  00000028 
  % 1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  % 1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  294:  		Thread
  29C:  			Wait     0000000C 
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2] ) %
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Thread 
					Wait     00000005
					Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
					Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
					Set  *Var[3]  00000000 
					Loop     0000001E %30 frames 
						Add  *Var[3]  00000024 %36 degrees 
						If  *Var[3]  >  00000168
							Sub  *Var[3]  00000168 
						EndIf
						Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
						Wait     00000001 
					EndLoop
					Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
					Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
				EndThread
  344:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0505 )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0504 
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  5E0:  Thread
			Wait     00000005
			Call     SetAnimation 	( .Actor:Self 00000001 003B050A )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
			Set  *Var[3]  00000000 
			Loop     0000001E %30 frames 
				Add  *Var[3]  00000024 %36 degrees 
				If  *Var[3]  >  00000168
					Sub  *Var[3]  00000168 
				EndIf
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
				Wait     00000001 
			EndLoop
    		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
		Call     80269EAC ( 00000017 ) %flat mario?
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000014 00000020 ) 
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  /%			
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  %/
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 %he still gets mad if you somehow manage to avoid all that damage
  810:  			Goto     00000001 
  81C:  		EndIf
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0509 )
  8F0:  		Wait     0000000A 
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0507 )
  914:  		Wait     0000000F 
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0510 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0511 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0513 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0504 
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0501 )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}
  
%ehh i'm to lazy to recode everything myself
%so its also copied from mq jr

%basic summary:
%better healing AI
%swoop attack is faster and does 4 damage
%better defense

@ $MediGuy
{
% stats
[Index]        22b 
[Level]        14`b 
[MaxHP]         8`b
[AirLift]	   50`b  
[Hurricane]    40`b % Bow's "Spook" as well
}

#delete $Script_8022486C

@ $DefenseTable_8022345C
{
.Element:Normal  00000001
.Element:Shock   00000000
.Element:Throw	 00000000
.Element:End
}

@ $StatusTable_80223470
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      50`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      90`
.Status:Fear      100`
.Status:Static     50`
.Status:Paralyze   80`
.Status:Shrink     75`
.Status:Stop       80`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -1`
.Status:End
}


#new:Script $Script_RunAway_MediGuy
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  8027D32C  ( FFFFFF81 )
   38:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   4C:  If  *Var0  !=  .Event:ScareAway % 39
   5C:  	Call  UseBattleCamPreset    ( 0000000E )
   6C:  	Call  BattleCamTargetActor  ( .Actor:Self )
   7C:  	Call  MoveBattleCamOver     ( 0000000F )
   8C:  	Wait  15`
   98:  	Call  UseBattleCamPreset    ( 00000001 )
   A8:  EndIf
   B0:  Call  SetActorSpeed ( .Actor:Self *Fixed[1.0] )
   C4:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
   E0:  Add   *Var0  00000014 
   F0:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  10C:  Call  RunToGoal     ( .Actor:Self 00000000 .False )
  124:  Wait  10`
  130:  Call  SetActorYaw   ( .Actor:Self 000000B4 )
  144:  Call  EnableActorBlur       ( .Actor:Self 00000001 )
  158:  Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
  16C:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  188:  Add   *Var0  000000C8 
  198:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  1B4:  Call  RunToGoal     ( .Actor:Self 00000000 .False )
  1CC:  Call  YieldTurn ( )
  1D8:  Call  UseBattleCamPreset    ( 00000002 )
  1E8:  ExecWait  ForceNextTarget 
  1F4:  Call  8027D32C      ( FFFFFF81 )
  204:  Call  RemoveActor   ( .Actor:Self )
  214:  Return
  21C:  End
}

@ $Script_TakeTurn_8022494C
{
	%if you're the last one remaining, run away
	Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
	If  *Var0  ==  00000001 
		ExecWait  $Script_RunAway_MediGuy
		Return
	EndIf
	Set      *Var[A] 00000000 % num hurt
	Set      *Var[B] 00000000 % heal all amount
	Set      *Var[C] 00000000 % best heal amount
	Set      *Var[D] 00000000 % best npc
	Set      *Var[E] 7FFFFFFF % best npc HP
	% check HP of allies
	Call     EnemyCreateTargetList 	( 00000002 )
	Call     InitTargetIterator 	( )
		Label    0` 
		Call     GetOwnerTarget	( *Var[0] *Var[1] )
		Call     GetActorHP		( *Var[0] *Var[2] )
		Call     GetEnemyMaxHP	( *Var[0] *Var[3] )
		If       *Var[2]  !=  *Var[3]
			Call     GetOwnerTarget		( *Var[0] *Var[1] )
			Add      *Var[A] 00000001 
			% get heal amount
			Set     *Var[F] *Var[3]
			Sub     *Var[F] *Var[2]
			Add     *Var[B] *Var[F]
			% check against most injured ally
			If	*Var[F] >= *Var[C]
				If *Var[F] == *Var[C]
					% heal amount == best heal, prioritize ally with lowest HP
					If *Var[2] < *Var[E]
						Set    *Var[C] *Var[F]
						Set    *Var[D] *Var[0]
						Set    *Var[E] *Var[2]
					EndIf
				Else
					% heal amount > best heal, found new best heal
					Set    *Var[C] *Var[F]
					Set    *Var[D] *Var[0]
					Set    *Var[E] *Var[2]
				EndIf
			EndIf
		EndIf
		Call     ChooseNextTarget 	( 00000000 *Var[0] )
		If       *Var[0]  !=  FFFFFFFF
			Goto     0` 
		EndIf
	% choose an action
	If  *Var[A] == 0
		% attack if noone is hurt
		ExecWait $Script_FlyingAttack
	Else
		% noone is badly hurt, attack with P = 0.4
		If *Var[B] < 4
			Call     RandInt ( 64 *Var[9] )
			If       *Var[9]  <=  28
				ExecWait $Script_FlyingAttack 
			Else
				ExecWait $Script_DoHeal 
			EndIf
		% need to heal someone
		Else
			ExecWait $Script_DoHeal
		EndIf
	EndIf
	Return
	End
}

% Assume numHurt > 0 when this script is executed
#new:Script $Script_DoHeal
{
	If *Var[A] == 1
		% heal the only hurt ally
		Set    *Var[0] *Var[D]
		ExecWait $Script_HealOneAlly
	Else
		% choose the option that restores the most HP
		If *Var[B] > *Var[C]
			ExecWait $Script_HealAll 
		Else
			Set    *Var[0] *Var[D]
			ExecWait $Script_HealOneAlly 
		EndIf
	EndIf
	Return
	End
}

#new:Script $Script_HealAll
{
	% begin heal all
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self .False )
	Call     SetTargetActor 	( .Actor:Self 00000000 )
	Call     UseBattleCamPreset 		( 0000000E )
	Call     BattleCamTargetActor 	( .Actor:Self )
	Call     MoveBattleCamOver 		( 0000000F )
	Wait     0000000F 
	% casting animation
	Call     GetOwnerID 		( *Var[0] )
	Call     GetActorPos       	( *Var[0] *Var[1] *Var[2] *Var[3] )
	Call     PlaySoundAtActor   ( .Actor:Self 000002F8 )
	Call     PlaySoundAtActor   ( .Actor:Self 00000214 )
	Call     PlaySoundAtActor   ( .Actor:Self 00000000 )
	Call     SetAnimation 		( .Actor:Self 00000001 00400005 )
	Add      *Var[2] 00000032 
	Call     PlayEffect       	( 00000011 00000001 *Var[1] *Var[2] *Var[3] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call     PlayEffect       	( 00000040 00000002 *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Wait     30` 
	Call     SetAnimation 	( .Actor:Self 00000001 00400001 )
	Wait     10` 
	% loop over all enemies
	Call     EnemyCreateTargetList 	( 00008002 )
	Call     InitTargetIterator	( )
		Label    00000000 
		Call     8026E8AC 	( *Var[0] *Var[1] )
		Thread
			Wait     00000005 
			Call     PlaySoundAtActor    ( *Var[0] 0000206D )
			Call     PlaySoundAtActor    ( *Var[0] 00000214 )
			Wait     30` 
			Call     PlaySoundAtActor    ( *Var[0] 0000025C )
		EndThread
		Thread
			Call     8026BF48 	( 00000001 )
			Call     HealActor  ( *Var[0] 00000003 00000001 )
			Call     8026BF48 	( 00000000 )
		EndThread
		Call     ChooseNextTarget    	( 00000000 *Var[0] )
		If       *Var[0]  !=  FFFFFFFF
			Goto     00000000 
		EndIf
	% reset and return
	Call     8027114C 	( )
	Wait     1` 
	Call     UseBattleCamPreset 	( 00000002 )
	Wait     10` 
	Call     8027D7F0 	( )
	Call     EnableIdleScript 	( .Actor:Self .True )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

% Heal individual targets for a fixed 6HP, rather than 60% (effectively 4)
@ $Script_HealOneAlly
{
[270]	Call     HealActor 	( *Var[A] 4` 00000000 )
}

% Increase swoop speed
@ $Script_FlyingAttack
{
[640]	Call     SetActorSpeed     	( .Actor:Self *Fixed[12.000000] )
[694] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 )
}


%groove guy
%regular attack does 3 
%sleep spin has a 75% chance of working

@ $StatusTable_80224A40
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      30` 
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy       0` %they spin around constantly
.Status:Fear      100`
.Status:Static     50`
.Status:Paralyze   90`
.Status:Shrink     75`
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_BasicAttack
{
[540]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000002 00000020 )
}

@ $Script_SleepySpin
{
[334] Call EnemyDamageTarget ( .Actor:Self *Var[0] 50000000 00000000 8004024B 00000000 00000020 ) %no longer makes contact, so no zaptap
}


%spy guy
%faster slingshot
%beefier

%Now they become invis when they switch weapons

@ $SpyGuy
{
[MaxHP]         6`b %health nerf because of new invis mechanic
[AirLift]	   30`b  
[Hurricane]    30`b % Bow's "Spook" as well
}

@ $DefenseTable_802274A4
{
.Element:Normal 00000001 %pretty good camo
.Element:Fire   FFFFFFFE %get your fire flowers out for these guys
.Element:End
}

@ $Script_SlingshotAttack
{
[340]	Call     SetPartMoveSpeed    	( FFFFFF81 00000002 *Fixed[18.0] ) %14 -> 18
[480]	Call     SetPartMoveSpeed    	( FFFFFF81 00000002 *Fixed[18.0] )
[4E4]   Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080364 00000002 00000020 ) %slingshot shrinks for a long time, but it's not that strong otherwise
}

@ $Script_HammerAttack  
{
[3FC] Call EnemyDamageTarget ( .Actor:Self *Var[0] 10000000 00000000 00000000 00000004 00000020 ) %you lose a command still
}

%I had a very bad idea
%What if the spy guys went invisible when they switched weapons?

% Immediately vanishes owner of calling script.
#new:Function $Function_Vanish_DarkBoo % ( duration )
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	SW		S1, 14 (SP)
	SW		S2, 18 (SP)
	% get turn count
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S1, A0, R0
	ANDI	V0, V0, 00FF
	% add electify status
	LW		A0, 148 (S1)
	JAL		~Func:get_actor
	DADDU	S2, V0, R0
	ORI		S2, S2, 0E00
	SH		S2, 218 (V0)
	% return
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	LW		S2, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

@ $Script_802276D4
{
    0:  Call  GetActorVar   ( .Actor:Self 00000003 *Var0 )
   18:  If  *Var0  ==  00000000
   28:  	Return
   30:  EndIf
   38:  Call  GetLastDamage ( .Actor:Self *Var0 )
   4C:  If  *Var0  ==  00000000
   5C:  	Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
   74:  	Return
   7C:  EndIf
   84:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
   98:  If  *Var0  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
   A8:  	Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
   C0:  	Return
   C8:  EndIf
   D0:  Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
   E8:  Switch  *Var0
   F4:  	Case  ==  00000000
  100:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0002 )
  118:  	Case  ==  00000001
  124:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0003 )
  13C:  EndSwitch
  144:  Label  0
  150:  Call  GetBattleFlags    ( *Var0 )
  160:  If  *Var0  &  00000100
  170:  	Wait  1`
  17C:  	Goto  0
  188:  EndIf
  190:  Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
  1A8:  Switch  *Var0
  1B4:  	Case  ==  00000000
  1C0:  		Call  SetActorVar   ( .Actor:Self 00000002 00000001 )
  1D8:  		Call  SetIdleAnimations     ( .Actor:Self 00000001 $IdleAnimations_80227400 )
  1F0:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0017 )
  208:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  224:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.4] )
  238:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  254:  		Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
  274:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0019 )
  28C:  		Wait  5`
  298:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0003 )
  2B0:  	Case  ==  00000001
  2BC:  		Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
  2D4:  		Call  SetIdleAnimations     ( .Actor:Self 00000001 $IdleAnimations_8022744C )
  2EC:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0018 )
  304:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  320:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.4] )
  334:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  350:  		Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
  370:  		Call  SetAnimation  ( .Actor:Self 00000001 003F001A )
  388:  		Wait  5`
  394:  		Call  SetAnimation  ( .Actor:Self 00000001 003F0002 )
  3AC:  EndSwitch
  3B4:  Wait  10`
  3C0:  Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
		Call  $Function_Vanish_DarkBoo ( 1` ) %hahaha
  3D8:  Return
  3E0:  End
}


@ $PyroGuy
{
% stats
[Index]        23b 
[Level]        15`b 
[MaxHP]         9`b 
[AirLift]	   10`b  
[Hurricane]    40`b % Bow's "Spook" as well
}

@ $Script_TakeTurn_8022D344
{
[564] Call EnemyDamageTarget ( .Actor:Self *Var[0] 00000002 00000000 00000000 00000006 00000020 ) %pretty high damage
}

%new enemy: cryo guy
%Attacks can freeze you but aren't that strong otherwise
%2 defense, but -3 fire defense
%Immune to electricity



