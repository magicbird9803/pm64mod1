%import swooper changes

@ $DefenseTable_80219850
{
.Element:Normal 00000000
.Element:Throw	FFFFFFFF
.Element:End
}

@ $Script_8021AB84
{
[5E8]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 8002024B 00000004 00000020 ) %2 -> 4 + 75% chance of 2 turn poison. That's 11 damage total if you don't block and get poisoned
}

@ $Script_TakeTurn_8021B274
{
[4B0]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 8002025F 00000004 00000020 ) %2 -> 4 + 95% chance of 2 turn poison. This one is if the swooper is on the ceiling
}

%swoopulas can drain hp much faster, and still do damage through zaptap
%no hp boost though

/%
@ $Script_8021CB94
{
[608]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 8002025F 00000008 00000020 ) %0 -> 8 + 2 turn poison
[954]  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000006 00000040 )
}
%/

/%
@ $Script_TakeTurn_8021E7B4
{
[4D0]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 8002025F 00000008 00000020 ) %0 -> 8 + 2 turn poison
[55C]	Wait     2	% was 21`
[830]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 18000000 00000000 00000000 00000006 00000040 ) 
[858]	Wait     3	% was 30` 
[8B4]  	Call  SetupMashMeter    ( 00000001 00000016 00000000 00000000 00000000 00000000 )	%you need to mash 15 times to escape (~3 times) (30 is like 4 times)
[954]	Loop     2	% was 21`
[F7C]   Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000000 00000000 00000000 00000006 00000040 )  
[11B8]	Loop     4	% was 30` 
}
%/

@ $Script_8021CB94
{
[608]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 8002025F 00000008 00000020 ) %0 -> 8 + 2 turn poison
[694]	Wait     3	% was 21`
[954]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 18000000 00000000 00000000 00000006 00000040 )
[97C]	Wait     6	% was 30`
[9D8]  	Call  SetupMashMeter    ( 00000001 00000016 00000000 00000000 00000000 00000000 )
[A78]	Loop     3	% was 21`
[184C]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000000 00000000 00000000 00000006 00000040 ) 
[1A88] Loop 6 % was 30`
}

@ $Script_TakeTurn_8021E7B4
{
    0:  Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
   18:  If  *Var0  ==  00000001
   28:  	ExecWait  $Script_8021CB94
			Call  GetActorHP    ( .Actor:Self *Var0 )
 			Call SetActorVar   ( .Actor:Self 00000001 *Var0 )
   34:  	Return
   3C:  EndIf
   44:  Call  UseIdleAnimation  ( .Actor:Self .False )
   58:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   6C:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   80:  Call  UseBattleCamPreset    ( 0000003F )
   90:  Call  BattleCamTargetActor  ( .Actor:Self )
   A0:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   B8:  Call  SetAnimation      ( .Actor:Self 00000001 00340102 )
   D0:  Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
   E8:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  104:  Sub   *Var1  00000018
  114:  Call  SetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  130:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense 00000000 00000002 00000010 )
  154:  Switch  *Var0
  160:  	CaseOR  ==  .HitResult:Miss % 6
  16C:  	CaseOR  ==  .HitResult:Lucky % 5
  178:  		Set   *VarA  *Var0
  188:  		Wait  10`
  194:  		Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  1A8:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  1BC:  		Call  SetAnimation  ( .Actor:Self 00000001 00340106 )
  1D4:  		Call  SetGoalToTarget   ( .Actor:Self )
  1E4:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  200:  		Call  AddGoalPos    ( .Actor:Self FFFFFFCE 00000000 00000000 )
  21C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  230:  		Call  SetAnimation  ( .Actor:Self 00000001 00340106 )
  248:  		Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
  264:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[10.0] )
  27C:  		Wait  15`
  288:  		Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
  2A0:  		If  *VarA  ==  .HitResult:Lucky % 5
  2B0:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2D4:  		EndIf
  2DC:  		Call  YieldTurn ( )
  2E8:  		Call  UseBattleCamPreset    ( 00000002 )
  2F8:  		Call  SetActorYaw   ( .Actor:Self 000000B4 )
  30C:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  328:  		ExecWait  $Script_8021BA70
  334:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  34C:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  360:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
  374:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  388:  		Return
  390:  	EndCaseGroup
  398:  	Case  ==  .HitResult:HitStatic % 7
  3A4:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  3B8:  		If  *Var0  &  ~Flags:StatusFlags:Static % 2000
  3C8:  			Set   *Flag[00]  .False
  3D8:  		Else
  3E0:  			Set   *Flag[00]  .True
  3F0:  		EndIf
  3F8:  EndSwitch
  400:  Wait  10`
  40C:  Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  420:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  434:  Call  SetAnimation  ( .Actor:Self 00000001 00340106 )
  44C:  Call  SetGoalToTarget       ( .Actor:Self )
  45C:  Call  AddGoalPos    ( .Actor:Self FFFFFFFC FFFFFFF8 FFFFFFF1 )
  478:  Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  48C:  Call  SetAnimation  ( .Actor:Self 00000001 00340106 )
  4A4:  Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
  4C0:  If  *Flag[00]  ==  .True
  4D0:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 8002025F 00000008 00000020 ) %0 -> 8 + 2 turn poison
  4F8:  	Return
  500:  EndIf
  508:  Call  GetStatusFlags    ( .Actor:Player *Var0 )
  51C:  If  *Var0  &  ~Flags:StatusFlags:Stone % 100000
  52C:  	Wait  10`
  538:  	Loop  00000002
  544:  		Call  SetAnimation  ( .Actor:Self 00000001 00340102 )
  55C:  		Wait     2	% was 21`
  568:  		Loop  00000002
  574:  			Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
  588:  			Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  5A4:  			Wait  1`
  5B0:  			Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
  5CC:  			Wait  1`
  5D8:  			Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
  5F4:  			Wait  1`
  600:  			Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
  61C:  			Wait  1`
  628:  			Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.5] *Fixed[1.0] )
  644:  			Wait  1`
  650:  			Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
  66C:  			Wait  1`
  678:  			Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
  694:  			Wait  1`
  6A0:  			Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
  6BC:  			Wait  1`
  6C8:  			Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  6E4:  			Wait  1`
  6F0:  		EndLoop
  6F8:  		Wait  5`
  704:  		Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
  718:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  734:  		Wait  1`
  740:  		Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
  75C:  		Wait  1`
  768:  		Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
  784:  		Wait  1`
  790:  		Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
  7AC:  		Wait  1`
  7B8:  		Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.5] *Fixed[1.0] )
  7D4:  		Wait  2`
  7E0:  		Call  SetActorScale ( .Actor:Self *Fixed[0.6] *Fixed[1.6] *Fixed[1.0] )
  7FC:  		Wait  10`
  808:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  824:  		Wait  2`
  830:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 18000000 00000000 00000000 00000006 00000040 ) 
  858:  		Wait     3	% was 30` 
  864:  	EndLoop
  86C:  Else
  874:  	Call  ShowMessageBox    ( 00000031 00007FFF )
  888:  	Call  802694A4  ( 00000001 )
  898:  	Call  LoadActionCommand ( .ActionCommand:StopLeech )
  8A8:  	Call  802A9000 ( )
  8B4:  	Call  SetupMashMeter    ( 00000001 00000016 00000000 00000000 00000000 00000000 )	%you need to mash 15 times to escape (~3 times) (30 is like 4 times)
  8D8:  	Wait  10`
  8E4:  	Call  SetBattleFlagBits ( 00004000 .False )
  8F8:  	Call  802A9110  ( 00000000 00007FFF 00000003 )
  910:  	Set   *VarD  00000000
  920:  	Loop  00000005
  92C:  		Call  SetAnimation  ( .Actor:Self 00000001 00340102 )
  944:  		Set   *Flag[00]  .False
  954:  		Loop     2	% was 21`
  960:  			Call  GetActionSuccessCopy  ( *Var1 )
  970:  			If  *Var1  ==  00000001
  980:  				Set   *Flag[00]  .True
  990:  				BreakLoop
  998:  			EndIf
  9A0:  			Wait  1`
  9AC:  		EndLoop
  9B4:  		If  *Flag[00]  ==  .True
  9C4:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  9D8:  			BreakLoop
  9E0:  		EndIf
  9E8:  		Call  SetAnimation      ( .Actor:Player 00000000 0003000C )
  A00:  		Call  UseIdleAnimation  ( .Actor:Player .False )
  A14:  		Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
  A28:  		Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A44:  		Set   *Flag[00]  .False
  A54:  		Loop  00000001
  A60:  			Call  GetActionSuccessCopy  ( *Var1 )
  A70:  			If  *Var1  ==  00000001
  A80:  				Set   *Flag[00]  .True
  A90:  				BreakLoop
  A98:  			EndIf
  AA0:  			Wait  1`
  AAC:  		EndLoop
  AB4:  		If  *Flag[00]  ==  .True
  AC4:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  AD8:  			BreakLoop
  AE0:  		EndIf
  AE8:  		Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
  B04:  		Set   *Flag[00]  .False
  B14:  		Loop  00000001
  B20:  			Call  GetActionSuccessCopy  ( *Var1 )
  B30:  			If  *Var1  ==  00000001
  B40:  				Set   *Flag[00]  .True
  B50:  				BreakLoop
  B58:  			EndIf
  B60:  			Wait  1`
  B6C:  		EndLoop
  B74:  		If  *Flag[00]  ==  .True
  B84:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  B98:  			BreakLoop
  BA0:  		EndIf
  BA8:  		Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
  BC4:  		Set   *Flag[00]  .False
  BD4:  		Loop  00000001
  BE0:  			Call  GetActionSuccessCopy  ( *Var1 )
  BF0:  			If  *Var1  ==  00000001
  C00:  				Set   *Flag[00]  .True
  C10:  				BreakLoop
  C18:  			EndIf
  C20:  			Wait  1`
  C2C:  		EndLoop
  C34:  		If  *Flag[00]  ==  .True
  C44:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  C58:  			BreakLoop
  C60:  		EndIf
  C68:  		Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
  C84:  		Set   *Flag[00]  .False
  C94:  		Loop  00000001
  CA0:  			Call  GetActionSuccessCopy  ( *Var1 )
  CB0:  			If  *Var1  ==  00000001
  CC0:  				Set   *Flag[00]  .True
  CD0:  				BreakLoop
  CD8:  			EndIf
  CE0:  			Wait  1`
  CEC:  		EndLoop
  CF4:  		If  *Flag[00]  ==  .True
  D04:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  D18:  			BreakLoop
  D20:  		EndIf
  D28:  		Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.5] *Fixed[1.0] )
  D44:  		Set   *Flag[00]  .False
  D54:  		Loop  00000002
  D60:  			Call  GetActionSuccessCopy  ( *Var1 )
  D70:  			If  *Var1  ==  00000001
  D80:  				Set   *Flag[00]  .True
  D90:  				BreakLoop
  D98:  			EndIf
  DA0:  			Wait  1`
  DAC:  		EndLoop
  DB4:  		If  *Flag[00]  ==  .True
  DC4:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  DD8:  			BreakLoop
  DE0:  		EndIf
  DE8:  		Call  SetActorScale ( .Actor:Self *Fixed[0.6] *Fixed[1.6] *Fixed[1.0] )
  E04:  		Set   *Flag[00]  .False
  E14:  		Loop  0000000A
  E20:  			Call  GetActionSuccessCopy  ( *Var1 )
  E30:  			If  *Var1  ==  00000001
  E40:  				Set   *Flag[00]  .True
  E50:  				BreakLoop
  E58:  			EndIf
  E60:  			Wait  1`
  E6C:  		EndLoop
  E74:  		If  *Flag[00]  ==  .True
  E84:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  E98:  			BreakLoop
  EA0:  		EndIf
  EA8:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  EC4:  		Set   *Flag[00]  .False
  ED4:  		Loop  00000002
  EE0:  			Call  GetActionSuccessCopy  ( *Var1 )
  EF0:  			If  *Var1  ==  00000001
  F00:  				Set   *Flag[00]  .True
  F10:  				BreakLoop
  F18:  			EndIf
  F20:  			Wait  1`
  F2C:  		EndLoop
  F34:  		If  *Flag[00]  ==  .True
  F44:  			Call  UseIdleAnimation  ( .Actor:Player .True )
  F58:  			BreakLoop
  F60:  		EndIf
  F68:  		Call  UseIdleAnimation  ( .Actor:Player .True )
  F7C:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 1A000000 00000000 00000000 00000006 00000040 ) 
  FA4:  		Call  GetLastDamage     ( .Actor:Player *Var3 )
  FB8:  		If  *Var3  !=  00000000
  FC8:  			Call  PlaySoundAtActor  ( .Actor:Self 0000206D )
  FDC:  			Call  PlaySoundAtActor  ( .Actor:Self 00000214 )
  FF0:  			Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
 100C:  			Add   *Var1  0000000F
 101C:  			Call  $Function_8021819C    ( *Var0 *Var1 *Var2 *Var3 )
 1038:  			Thread
 1040:  				Wait  15`
 104C:  				Call  PlaySoundAtActor      ( .Actor:Self 0000025C )
 1060:  				Call  $Function_80218250    ( *Var0 *Var1 *Var2 *Var3 )
 107C:  			EndThread
 1084:  			Add   *Var0  00000014
 1094:  			Add   *Var1  00000014
 10A4:  			Call  PlayEffect    ( ~FX:Recover:HP *Var0 *Var1 *Var2 *Var3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
 10E8:  			Call  GetActorHP    ( .Actor:Self *Var0 )
 10FC:  			Add   *Var0  *Var3
 110C:  			Call  SetEnemyHP    ( .Actor:Self *Var0 )
 					Call SetActorVar   ( .Actor:Self 00000001 *Var0 )
 1120:  		Else
 1128:  			Add   *VarD  00000001
 1138:  			If  *VarD  >  00000001
 1148:  				Call  80269470 ( )
 1154:  				BreakLoop
 115C:  			EndIf
 1164:  		EndIf
 116C:  		Call  GetPlayerHP   ( *Var1 )
 117C:  		If  *Var1  ==  00000000
 118C:  			Call  80269470 ( )
 1198:  			BreakLoop
 11A0:  		EndIf
 11A8:  		Set   *Flag[00]  .False
 11B8:  		Loop     4	% was 30` 
 11C4:  			Call  GetActionSuccessCopy  ( *Var1 )
 11D4:  			If  *Var1  ==  00000001
 11E4:  				Set   *Flag[00]  .True
 11F4:  				BreakLoop
 11FC:  			EndIf
 1204:  			Wait  1`
 1210:  		EndLoop
 1218:  		If  *Flag[00]  ==  .True
 1228:  			BreakLoop
 1230:  		EndIf
 1238:  	EndLoop
 1240:  	Call  80269470 ( )
 124C:  	Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
 1268:  EndIf
 1270:  Call  UseBattleCamPreset    ( 00000002 )
 1280:  Call  SetGoalToTarget   ( .Actor:Self )
 1290:  Call  AddGoalPos        ( .Actor:Self 00000032 0000000A 00000000 )
 12AC:  Call  SetActorSpeed     ( .Actor:Self *Fixed[8.0] )
 12C0:  Call  SetAnimation      ( .Actor:Self 00000001 00340102 )
 12D8:  Call  FlyToGoal ( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
 12F4:  Wait  10`
 1300:  Call  YieldTurn ( )
 130C:  ExecWait  $Script_8021BA70
 1318:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
 132C:  Call  UseIdleAnimation  ( .Actor:Self .True )
 1340:  Return
 1348:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
 135C:  Call  UseIdleAnimation  ( .Actor:Self .True )
 1370:  Return
 1378:  End	
}


%Import swoopix health changes
@ $Script_HandleEvent_8021C414
{
    0:  Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
   18:  If  *Var0  ==  00000001
   28:  	ExecWait  $Script_8021BC30
   34:  	Return
   3C:  EndIf
   44:  Call  UseIdleAnimation  ( .Actor:Self .False )
   58:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   6C:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   80:  Switch  *Var0
   8C:  	Case  ==  .Event:HitCombo % 9
   98:  		Call  GetBattlePhase    ( *Var0 )
   A8:  		If  *Var0  ==  00000001
					%HitCombo can bring them to 0 hp so I need special logic to handle it
					Call      GetActorHP  	( .Actor:Self *Var1 )
					If *Var1 == 0
						%Check previous damage
						Call      GetLastDamage ( .Actor:Self *Var2 )
						Call  	  GetActorVar   ( .Actor:Self 00000001 *Var3 )
						If *Var2 > *Var3
							Sub *Var2 *Var3
							Call SetEnemyHP  	( .Actor:Self *Var2 )
							Set *Var4 *Var2
							Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
							Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
							Call GetActorHP  	( .Actor:Self *Var2 )
							Call SetActorVar   ( .Actor:Self 00000001 *Var2 )
						Else
							Call SetActorVar   ( .Actor:Self 00000001 00000000 )
						EndIf
					Else
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
					EndIf
   B8:  			SetConst  *Var0  00000001
   C8:  			SetConst  *Var1  00340115
   D8:  			ExecWait  DoNormalHit
   E4:  		Else
					%HitCombo can bring them to 0 hp so I need special logic to handle it
					Call      GetActorHP  	( .Actor:Self *Var1 )
					If *Var1 == 0
						%Check previous damage
						Call      GetLastDamage ( .Actor:Self *Var2 )
						Call  	  GetActorVar   ( .Actor:Self 00000001 *Var3 )
						If *Var2 > *Var3
							Sub *Var2 *Var3
							Call SetEnemyHP  	( .Actor:Self *Var2 )
							Set *Var4 *Var2
							Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
							Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
							Call GetActorHP  	( .Actor:Self *Var2 )
							Call SetActorVar   ( .Actor:Self 00000001 *Var2 )
						Else
							Call SetActorVar   ( .Actor:Self 00000001 00000000 )
						EndIf
					Else
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
					EndIf
   EC:  			SetConst  *Var0  00000001
   FC:  			SetConst  *Var1  0034010E
  10C:  			ExecWait  DoNormalHit
  118:  		EndIf
  120:  	Case  ==  .Event:Hit % A
  12C:  		Call  GetBattlePhase    ( *Var0 )
  13C:  		If  *Var0  ==  00000001
					Call      GetActorHP  	( .Actor:Self *Var1 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  14C:  			SetConst  *Var0  00000001
  15C:  			SetConst  *Var1  00340115
  16C:  			ExecWait  DoNormalHit
  178:  		Else
					Call      GetActorHP  	( .Actor:Self *Var1 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  180:  			SetConst  *Var0  00000001
  190:  			SetConst  *Var1  0034010E
  1A0:  			ExecWait  DoNormalHit
  1AC:  			ExecWait  $Script_8021C0B4
  1B8:  		EndIf
  1C0:  	Case  ==  .Event:BurnHit % E
  1CC:  		Call  GetBattlePhase    ( *Var0 )
  1DC:  		If  *Var0  ==  00000001
					Call      GetActorHP  	( .Actor:Self *Var1 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  1EC:  			SetConst  *Var0  00000001
  1FC:  			SetConst  *Var1  00340117
  20C:  			SetConst  *Var2  00340118
  21C:  			ExecWait  DoBurnHit
  228:  		Else
					Call      GetActorHP  	( .Actor:Self *Var1 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  230:  			SetConst  *Var0  00000001
  240:  			SetConst  *Var1  00340111
  250:  			SetConst  *Var2  00340112
  260:  			ExecWait  DoBurnHit
  26C:  			ExecWait  $Script_8021C0B4
  278:  		EndIf
  280:  	Case  ==  .Event:BurnDeath % 24
  28C:  		Call  GetBattlePhase    ( *Var0 )
  29C:  		If  *Var0  ==  00000001
					Call      GetLastDamage ( .Actor:Self *Var2 )
					Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
					If *Var2 > *Var1
						Sub *Var2 *Var1
						Call     SetEnemyHP  	( .Actor:Self *Var2 )
						Set *Var4 *Var2
						Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
						Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
						Call GetActorHP  	( .Actor:Self *Var2 )
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
  31C:  				SetConst  *Var0  00000001
  32C:  				SetConst  *Var1  00340111
  33C:  				SetConst  *Var2  00340112
  34C:  				ExecWait  DoBurnHit
						Call  EnableIdleScript  ( .Actor:Self 00000001 )
						Call  UseIdleAnimation  ( .Actor:Self .True )
						Return
					Else
						Call SetActorVar   ( .Actor:Self 00000001 00000000 )
					EndIf
  2AC:  			SetConst  *Var0  00000001
  2BC:  			SetConst  *Var1  00340117
  2CC:  			SetConst  *Var2  00340118
  2DC:  			ExecWait  DoBurnHit
  2E8:  			SetConst  *Var0  00000001
  2F8:  			SetConst  *Var1  00340118
  308:  			ExecWait  DoDeath
  314:  		Else
					Call      GetLastDamage ( .Actor:Self *Var2 )
					Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
					If *Var2 > *Var1
						Sub *Var2 *Var1
						Call     SetEnemyHP  	( .Actor:Self *Var2 )
						Set *Var4 *Var2
						Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
						Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
						Call GetActorHP  	( .Actor:Self *Var2 )
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
  31C:  				SetConst  *Var0  00000001
  32C:  				SetConst  *Var1  00340111
  33C:  				SetConst  *Var2  00340112
  34C:  				ExecWait  DoBurnHit
						Call  EnableIdleScript  ( .Actor:Self 00000001 )
						Call  UseIdleAnimation  ( .Actor:Self .True )
						Return
					Else
						Call SetActorVar   ( .Actor:Self 00000001 00000000 )
					EndIf
  31C:  			SetConst  *Var0  00000001
  32C:  			SetConst  *Var1  00340111
  33C:  			SetConst  *Var2  00340112
  34C:  			ExecWait  DoBurnHit
  358:  			SetConst  *Var0  00000001
  368:  			SetConst  *Var1  00340112
  378:  			ExecWait  DoDeath
  384:  		EndIf
  38C:  		Return
  394:  	Case  ==  .Event:ShockHit % 2F
  3A0:  		Call  80269470 ( )
  3AC:  		SetConst  *Var0  00000001
  3BC:  		SetConst  *Var1  00340115
  3CC:  		ExecWait  8029A76C
				Call      GetActorHP  	( .Actor:Self *Var1 )
				Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  3D8:  		Call  UseBattleCamPreset    ( 00000002 )
  3E8:  		ExecWait  $Script_8021BA70
  3F4:  	Case  ==  .Event:ShockDeath % 26
  400:  		Call  80269470 ( )
  40C:  		SetConst  *Var0  00000001
  41C:  		SetConst  *Var1  00340115
  42C:  		ExecWait  8029A76C
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
				If *Var2 > *Var1
					Sub *Var2 *Var1
					Call     SetEnemyHP  	( .Actor:Self *Var2 )
					Set *Var4 *Var2
					Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
					Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
					Call GetActorHP  	( .Actor:Self *Var2 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
					Call  UseBattleCamPreset    ( 00000002 )
					ExecWait  $Script_8021BA70
					Call  EnableIdleScript  ( .Actor:Self 00000001 )
					Call  UseIdleAnimation  ( .Actor:Self .True )
					Return
				EndIf
  438:  		Thread
  440:  			Wait  30`
  44C:  			Call  UseBattleCamPreset    ( 00000002 )
  45C:  		EndThread
  464:  		SetConst  *Var0  00000001
  474:  		SetConst  *Var1  00340115
  484:  		ExecWait  DoDeath
  490:  		Return
  498:  	CaseOR  ==  00000017 % 17
  4A4:  	CaseOR  ==  .Event:Immune % 19
  4B0:  		SetConst  *Var0  00000001
  4C0:  		SetConst  *Var1  0034010C
  4D0:  		ExecWait  DoImmune
  4DC:  	EndCaseGroup
  4E4:  	Case  ==  .Event:Death % 20
  4F0:  		Call  GetBattlePhase    ( *Var0 )
  500:  		If  *Var0  ==  00000001
					Call      GetLastDamage ( .Actor:Self *Var2 )
					Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
					If *Var2 > *Var1
						Sub *Var2 *Var1
						Call     SetEnemyHP  	( .Actor:Self *Var2 )
						Set *Var4 *Var2
						Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
						Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
						Call GetActorHP  	( .Actor:Self *Var2 )
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
  510:  				SetConst  *Var0  00000001
  520:  				SetConst  *Var1  00340115
  530:  				ExecWait  DoNormalHit
						Call  EnableIdleScript  ( .Actor:Self 00000001 )
						Call  UseIdleAnimation  ( .Actor:Self .True )
						Return
					Else
						Call SetActorVar   ( .Actor:Self 00000001 00000000 )
					EndIf
  510:  			SetConst  *Var0  00000001
  520:  			SetConst  *Var1  00340115
  530:  			ExecWait  DoNormalHit
  53C:  			Wait  10`
  548:  			SetConst  *Var0  00000001
  558:  			SetConst  *Var1  00340115
  568:  			ExecWait  DoDeath
  574:  		Else
					Call      GetLastDamage ( .Actor:Self *Var2 )
					Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
					If *Var2 > *Var1
						Sub *Var2 *Var1
						Call     SetEnemyHP  	( .Actor:Self *Var2 )
						Set *Var4 *Var2
						Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
						Call  PlayEffect    ( ~FX:Recover:HP *Var1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
						Call GetActorHP  	( .Actor:Self *Var2 )
						Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
  510:  				SetConst  *Var0  00000001
  520:  				SetConst  *Var1  00340115
  530:  				ExecWait  DoNormalHit
						Call  EnableIdleScript  ( .Actor:Self 00000001 )
						Call  UseIdleAnimation  ( .Actor:Self .True )
						Return
					Else
						Call SetActorVar   ( .Actor:Self 00000001 00000000 )
					EndIf
  57C:  			SetConst  *Var0  00000001
  58C:  			SetConst  *Var1  0034010E
  59C:  			ExecWait  DoNormalHit
  5A8:  			Wait  10`
  5B4:  			SetConst  *Var0  00000001
  5C4:  			SetConst  *Var1  0034010E
  5D4:  			ExecWait  DoDeath
  5E0:  		EndIf
  5E8:  		Return
  5F0:  	Case  ==  .Event:BeginFirstStrike % 38
  5FC:  		Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
  614:  		Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021B9B0 )
  62C:  		Call  SetAnimation      ( .Actor:Self 00000001 00340102 )
  644:  		Call  SetActorPos       ( .Actor:Self 00000014 00000000 00000000 )
  660:  		Call  HPBarToCurrent    ( .Actor:Self )
  670:  	Case  ==  .Event:EndFirstStrike % 35
  67C:  		ExecWait  $Script_8021BA70
  688:  		Call  HPBarToHome   ( .Actor:Self )
  698:  	Case  ==  .Event:RecoverStatus % 31
  6A4:  	Case  ==  .Event:ScareAway % 39
  6B0:  		Call  SetActorFlagBits      ( .Actor:Self 00000200 .True )
  6C8:  		Call  SetActorFlagBits      ( .Actor:Self 00000800 .False )
  6E0:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFE8 00000000 )
  6FC:  		SetConst  *Var0  00000001
  70C:  		SetConst  *Var1  00340102
  71C:  		SetConst  *Var2  00340115
  72C:  		ExecWait  DoScareAway
  738:  		Return
  740:  EndSwitch
  748:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  75C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  770:  Return
  778:  End
}

@ $Script_8021BC30
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   3C:  Switch  *Var0
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
				%HitCombo can bring them to 0 hp so I need special logic to handle it
				Call      GetActorHP  	( .Actor:Self *Var1 )
				If *Var1 == 0
					%Check previous damage
					Call      GetLastDamage ( .Actor:Self *Var2 )
					Call  	  GetActorVar   ( .Actor:Self 00000001 *Var3 )
					If *Var2 > *Var3
						Sub *Var2 *Var3
						Call SetEnemyHP  	( .Actor:Self *Var2 )
						Call SetActorVar   ( .Actor:Self 00000001 *Var2 )
					Else
						Call SetActorVar   ( .Actor:Self 00000001 00000000 )
					EndIf
				Else
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
				EndIf
   60:  		SetConst  *Var0  00000001
   70:  		SetConst  *Var1  00340115
   80:  		ExecWait  DoNormalHit
   8C:  	EndCaseGroup
   94:  	Case  ==  .Event:BurnHit % E
				Call      GetActorHP  	( .Actor:Self *Var1 )
				Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
   A0:  		SetConst  *Var0  00000001
   B0:  		SetConst  *Var1  00340117
   C0:  		SetConst  *Var2  00340118
   D0:  		ExecWait  DoBurnHit
   DC:  	Case  ==  .Event:BurnDeath % 24
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
				If *Var2 > *Var1
					Sub *Var2 *Var1
					Call     SetEnemyHP  	( .Actor:Self *Var2 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
					Call  EnableIdleScript  ( .Actor:Self 00000001 )
					Call  UseIdleAnimation  ( .Actor:Self .True )
   E8:  			SetConst  *Var0  00000001
   F8:  			SetConst  *Var1  00340117
  108:  			SetConst  *Var2  00340118
  118:  			ExecWait  DoBurnHit
					Return
				Else
					Call SetActorVar   ( .Actor:Self 00000001 00000000 )
				EndIf  
   E8:  		SetConst  *Var0  00000001
   F8:  		SetConst  *Var1  00340117
  108:  		SetConst  *Var2  00340118
  118:  		ExecWait  DoBurnHit
  124:  		SetConst  *Var0  00000001
  134:  		SetConst  *Var1  00340118
  144:  		ExecWait  DoDeath
  150:  		Return
  158:  	Case  ==  .Event:ShockHit % 2F
  164:  		Call  80269470 ( )
  170:  		SetConst  *Var0  00000001
  180:  		SetConst  *Var1  00340115
  190:  		ExecWait  DoShockHit
				Call      GetActorHP  	( .Actor:Self *Var1 )
				Call  	  SetActorVar   ( .Actor:Self 00000001 *Var1 )
  19C:  		Call  UseBattleCamPreset    ( 00000002 )
  1AC:  		ExecWait  $Script_8021BA70
  1B8:  	Case  ==  .Event:ShockDeath % 26
  1C4:  		Call  80269470 ( )
  1D0:  		SetConst  *Var0  00000001
  1E0:  		SetConst  *Var1  00340115
  1F0:  		ExecWait  DoShockHit
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
				If *Var2 > *Var1
					Sub 		*Var2 *Var1
					Call    	SetEnemyHP  	( .Actor:Self *Var2 )
					Call  		SetActorVar   ( .Actor:Self 00000001 *Var2 )
					Call  UseBattleCamPreset    ( 00000002 )
					ExecWait  $Script_8021BA70
					Call  		EnableIdleScript  ( .Actor:Self 00000001 )
					Call  		UseIdleAnimation  ( .Actor:Self .True )
					Return
				EndIf
  1FC:  		Thread
  204:  			Wait  30`
  210:  			Call  UseBattleCamPreset    ( 00000002 )
  220:  		EndThread
  228:  		SetConst  *Var0  00000001
  238:  		SetConst  *Var1  00340115
  248:  		ExecWait  DoDeath
  254:  		Return
  25C:  	CaseOR  ==  00000017 % 17
  268:  	CaseOR  ==  .Event:Immune % 19
  274:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  280:  		SetConst  *Var0  00000001
  290:  		SetConst  *Var1  00340102
  2A0:  		ExecWait  DoImmune
  2AC:  	EndCaseGroup
  2B4:  	Case  ==  .Event:Death % 20
				Call      GetLastDamage ( .Actor:Self *Var2 )
				Call  	  GetActorVar   ( .Actor:Self 00000001 *Var1 )
				If *Var2 > *Var1
					Sub *Var2 *Var1
					Call     SetEnemyHP  	( .Actor:Self *Var2 )
					Call  	  SetActorVar   ( .Actor:Self 00000001 *Var2 )
  2C0:  			SetConst  *Var0  00000001
  2D0:  			SetConst  *Var1  00340115
  2E0:  			ExecWait  DoNormalHit
					Call  EnableIdleScript  ( .Actor:Self 00000001 )
					Call  UseIdleAnimation  ( .Actor:Self .True )
					Return
				Else
					Call SetActorVar   ( .Actor:Self 00000001 00000000 )
				EndIf
  2C0:  		SetConst  *Var0  00000001
  2D0:  		SetConst  *Var1  00340115
  2E0:  		ExecWait  DoNormalHit
  2EC:  		Wait  10`
  2F8:  		SetConst  *Var0  00000001
  308:  		SetConst  *Var1  00340115
  318:  		ExecWait  DoDeath
  324:  		Return
  32C:  	Case  ==  .Event:RecoverStatus % 31
  338:  		SetConst  *Var0  00000001
  348:  		SetConst  *Var1  00340102
  358:  		ExecWait  DoRecover
  364:  	Case  ==  .Event:ScareAway % 39
  370:  		Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
  388:  		SetConst  *Var0  00000001
  398:  		SetConst  *Var1  00340102
  3A8:  		SetConst  *Var2  00340115
  3B8:  		ExecWait  DoScareAway
  3C4:  		Return
  3CC:  	Case  ==  .Event:BeginAirLift % 3A
  3D8:  		SetConst  *Var0  00000001
  3E8:  		SetConst  *Var1  00340102
  3F8:  		ExecWait  DoAirLift
  404:  	Case  ==  .Event:BlowAway % 16
  410:  		SetConst  *Var0  00000001
  420:  		SetConst  *Var1  00340115
  430:  		ExecWait  DoBlowAway
  43C:  		Return
  444:  EndSwitch
  44C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  460:  Call  UseIdleAnimation  ( .Actor:Self .True )
  474:  Return
  47C:  End
}



#import newenemy/Boo.bpat

#new:Formation $Formation_04
{
	$Boo 00000000 0000000A 00000000 00000000 00000000 00000000
	$Boo 00000001 00000009 00000000 00000000 00000000 00000000
	$Boo 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_05
{
	$Boo 00000000 0000000A 00000000 00000000 00000000 00000000
	$Boo 00000005 00000009 00000000 00000000 00000000 00000000
	$Boo 0000000A 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_06
{
	$Boo 00000000 0000000A 00000000 00000000 00000000 00000000
	$Boo 00000005 00000009 00000000 00000000 00000000 00000000
	$Swoopula 0000000E 00000008 00000000 00000000 00000000 00000000
}



@ $FormationTable
{
	$SJIS_8022347C 00000002 $Formation_00 $Stage_80220714 00000000
	$SJIS_80223470 00000003 $Formation_01 $Stage_80220714 00000000
	$SJIS_8022345C 00000002 $Formation_02 $Stage_80220714 00000000
	$SJIS_80223448 00000003 $Formation_03 $Stage_80220714 00000000
	$SJIS_80223448 00000003 $Formation_04 $Stage_80220714 00000000
	$SJIS_80223448 00000003 $Formation_05 $Stage_80220714 00000000
	$SJIS_80223448 00000003 $Formation_06 $Stage_80220714 00000000
	00000000 00000000 00000000 00000000 00000000
}