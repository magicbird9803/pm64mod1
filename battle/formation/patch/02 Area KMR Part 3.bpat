%Lets make the first fight a bit harder by making his jump attack hit more

@ $JrTroopa1
{
% stats
[MaxHP]         8`b 
}

@ $Script_TakeTurn_802234A4
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     AddActorVar 	( .Actor:Self 00000000 00000001 )
   40:  Call     GetActorHP  	( .Actor:Self *Var[0] )
   54:  Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
   68:  Sub  *Var[1]  *Var[0] 
		%3 -> 4, == is now <= (since theres already some extra code preventing him from saying it twice)
   78:  If  *Var[0]  <=  00000004 
   88:  	Call     GetActorVar 	( .Actor:Self 00000005 *Var[0] )
   A0:  	If  *Var[0]  ==  00000000 
   B0:  		Call     SetActorVar 	( .Actor:Self 00000005 00000001 )
   C8:  		ExecWait $Script_80222B30 
   D4:  		Call     MoveBattleCamOver 	( 00000014 )
   E4:  		Wait     00000014 
   F0:  		Call     UseIdleAnimation 	( .Actor:Self .False )
  104:  		Call     EnableIdleScript 	( .Actor:Self 00000000 )
  118:  		Call     ActorSpeak  	( 000B00B1 .Actor:Self 00000001 00210016 00210003 ) % Grrrr!! I'm just getting warmed up!
  138:  	EndIf
  140:  EndIf
  148:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  15C:  Call     SetGoalToTarget 	( .Actor:Self )
  16C:  Call     UseBattleCamPreset 	( 0000003F )
  17C:  Call     BattleCamTargetActor ( .Actor:Self )
  18C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  1A4:  Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
  1BC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  1D0:  Call     SetGoalToTarget 	( .Actor:Self )
  1E0:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
  1FC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  210:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  228:  Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  240:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  25C:  Wait     00000001 
  268:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  284:  Wait     00000005 
  290:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  2AC:  Call     SetAnimation 	( .Actor:Self 00000001 0021000E )
  2C4:  Call     SetActorSounds ( FFFFFF81 00000002 000020E2 00000000 )
  2E0:  Call     GetActorVar 	( .Actor:Self 00000004 *Var[1] )
  2F8:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 *Var[1] 00000010 )
  31C:  Switch  *Var[0] 
  328:  	Case  ==  00000006 
  334:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  350:  		Add  *Var[0]  00000028 
  360:  		Set  *Var[1]  00000000 
  370:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  384:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3A0:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  3C0:  		Add  *Var[0]  0000001E 
  3D0:  		Call     8026F6EC ( FFFFFF81 )
  3E0:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  41C:  		Add  *Var[0]  00000014 
  42C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  448:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  468:  		Sub  *Var[0]  0000000A 
  478:  		Call     JumpToGoal  	( .Actor:Self 00000004 00000000 00000001 00000000 )
  498:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  4B0:  		Wait     00000008 
  4BC:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  4D4:  		Call     UseBattleCamPreset 	( 00000002 )
  4E4:  		Call     SetGoalToHome 	( .Actor:Self )
  4F4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  508:  		Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
  520:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  538:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  550:  		Return
  558:  EndSwitch
  560:  Call     SetGoalToTarget 	( .Actor:Self )
  570:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
  584:  Thread 																					%copied the code to make him jump twice (?) but star rod hates white space so i can't separate the code
  58C:  	Wait     00000003 
  598:  	Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
  5B0:  	Wait     00000005 
  5BC:  	Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
  5D4:  EndThread
  5DC:  Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  5FC:  Wait     00000002 
  608:  Call     GetActorVar 	( .Actor:Self 00000004 *Var[1] )
  620:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 *Var[1] 00000020 )
		Call     GetActorHP  	( .Actor:Self *Var[3] ) %to make it slightly easier, he only double-attacks when hes at 4 or below
		If (*Var[3] <= 4)
			Thread
				Wait     00000003 
				Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
				Wait     00000005 
				Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
			EndThread
			Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
			Wait     00000002 
			Call     GetActorVar 	( .Actor:Self 00000004 *Var[1] )
			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 *Var[1] 00000020 )
		EndIf
  648:  Switch  *Var[0] 
  654:  	CaseOR  ==  00000000 
  660:  	CaseOR  ==  00000002 
  66C:  		Call     UseBattleCamPreset 	( 00000002 )
  67C:  		Call     8026F6EC ( FFFFFF81 )
  68C:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6A8:  		Add  *Var[0]  00000028 
  6B8:  		Set  *Var[1]  00000000 
  6C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  6DC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6F8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  718:  		Add  *Var[0]  0000001E 
  728:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  744:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  764:  		Add  *Var[0]  00000014 
  774:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  790:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  7B0:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  7C8:  		Wait     0000000A 
  7D4:  		Call     SetGoalToHome 	( .Actor:Self )
  7E4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  7F8:  		Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
  810:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  828:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  840:  	EndCaseGroup
  848:  EndSwitch
  850:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  864:  Call     UseIdleAnimation 	( .Actor:Self .True )
  878:  Return
  880:  End
}

%@ $Script_NextTurn_80223D2C  %theres random errors that break stuff, so i have to override various lines to fix it
%[25C]  Wait	00000000 %was EndIf (apparently this one doesnt have a matching if)
%[430]  		If  *Var[0]  <=  00000002 %fix the power up thing
%[5C4]				Call	 SetActorVar 	( .Actor:Self 00000004 00000004 ) %more power means more power 2 -> 4

%Ok i give up, time to override the entire script
@ $Script_NextTurn_80223D2C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetBattlePhase ( *Var[0] )
   38:  Switch  *Var[0] 
   44:  	Case  ==  .Phase:PlayerBegin
   50:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   68:  		If  *Var[0]  ==  00000000 
   78:  			Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
   90:  			Wait     0000000F 
   9C:  			Call     802535B4 ( 00000000 )
   AC:  			Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
   C4:  			Thread
   CC:  				Set  *Var[1]  00000000 
   DC:  				Wait     00000008 
   E8:  				Loop     00000005 
   F4:  					Wait     00000001 
  100:  					Sub  *Var[1]  00000024 
  110:  					Call     SetActorYaw 	( .Actor:Player *Var[1] )
  124:  				EndLoop
  12C:  			EndThread
  134:  			Call     SetAnimation 	( .Actor:Self 00000001 0021002B )
  14C:  			Call     ActorSpeak  	( 000B00AF .Actor:Partner 00000000 009D0008 009D0001 ) % Mario, this is Jr. Troopa. He's the boss of the ne ...
  16C:  			Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  184:  			Call     SetAnimation 	( .Actor:Player 00000000 00010029 )
  19C:  			Wait     0000000A 
  1A8:  			Thread
  1B0:  				Set  *Var[1]  000000B4 
  1C0:  				Wait     00000004 
  1CC:  				Loop     00000005 
  1D8:  					Wait     00000001 
  1E4:  					Add  *Var[1]  00000024 
  1F4:  					Call     SetActorYaw 	( .Actor:Player *Var[1] )
  208:  				EndLoop
  210:  			EndThread
  218:  			Wait     0000000A 
  224:  			Call     802535B4 ( 00000001 )
  234:  			Call     UseBattleCamPreset 	( 00000002 )
  244:  			Call     MoveBattleCamOver 	( 00000004 )
  254:  		EndIf
  %25C:  	EndIf  <- unmatched endif
  264:  Case  ==  .Phase:EnemyBegin
  270:  	Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
  288:  	If  *Var[0]  ==  00000001 
  298:  		Call     SetActorVar 	( .Actor:Self 00000002 00000002 )
  2B0:  		ExecWait $Script_80222C08 
  2BC:  		Call     UseIdleAnimation 	( .Actor:Player .False )
  2D0:  		Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  2E8:  		Thread
  2F0:  			Set  *Var[1]  00000000 
  300:  			Loop     00000005 
  30C:  				Wait     00000001 
  318:  				Sub  *Var[1]  00000024 
  328:  				Call     SetActorYaw 	( .Actor:Player *Var[1] )
  33C:  			EndLoop
  344:  		EndThread
  34C:  		Call     UseIdleAnimation 	( .Actor:Partner .False )
  360:  		Call     ActorSpeak  	( 000B00B0 .Actor:Partner 00000000 009D0008 009D0001 ) % Oh, excellent! Good move! Go on!!
  380:  		Call     UseIdleAnimation 	( .Actor:Partner .True )
  394:  		Call     SetAnimation 	( .Actor:Player 00000000 00010032 )
  3AC:  		Wait     00000014 
  3B8:  		Call     SetActorYaw 	( .Actor:Player 00000000 )
  3CC:  		Wait     00000004 
  3D8:  		Call     UseIdleAnimation 	( .Actor:Player .True )
  3EC:  	EndIf
  3F4:  	Call     GetActorVar 	( .Actor:Self 00000003 *Var[0] )
  40C:  	If  *Var[0]  ==  00000000 
  41C:  		Call     GetActorHP  	( .Actor:Self *Var[0] )
  430:  		If  *Var[0]  <=  00000002 %was 00000001
  440:  			Call     SetActorVar 	( .Actor:Self 00000003 00000001 )
  458:  			Call     UseIdleAnimation 	( .Actor:Partner .False )
  46C:  			Call     ActorSpeak  	( 000B00B2 .Actor:Partner 00000000 009D0008 009D0001 ) % Mario, you've almost got him! Keep it up! Go on!
  48C:  			Call     UseIdleAnimation 	( .Actor:Partner .True )
  4A0:  			ExecWait $Script_80222B30 
  4AC:  			Call     ActorSpeak  	( 000B00B3 .Actor:Self 00000001 00210016 00210003 ) % All right, you asked for it! Say hello to Jr. Troo ...
  4CC:  			Call     PlaySoundAtActor 	( .Actor:Self 000020B9 )
  4E0:  			Call     SetAnimation 	( .Actor:Self 00000001 0021000B )
  4F8:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  514:  			Add  *Var[1]  00000010 
  524:  			Call     PlayEffect  	( ~FX:GatherEnergyPink *Var[0] *Var[1] *Var[2] 00000001 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  568:  			Call     PlayEffect  	( 00000013 00000001 *Var[0] *Var[1] *Var[2] 00000001 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5AC:  			Wait     0000001E 
  5B8:  			Wait     00000014 
  5C4:  			Call     SetActorVar 	( .Actor:Self 00000004 00000003 ) %more power, 2 -> 3 (it was 4, but was changed to make greed stone possible)
  5DC:  			Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  5F4:  			Wait     00000014 
  600:  		EndIf
  608:  	EndIf
  610:  EndSwitch
  618:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  62C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  640:  Return
  648:  End
}

@ $Script_80222C78
{
    0:  Set   *VarA  *Var0
   10:  Call  8027D32C      ( FFFFFF81 )
   20:  Call  UseIdleAnimation  ( .Actor:Self .False )
   34:  Call  SetAnimation  ( .Actor:Self *VarA *Var1 )
   4C:  Wait  10`
   58:  Call  80269E80      ( *Var5 )
   68:  Switch  *Var5
   74:  	CaseOR  ==  0000000A
   80:  	CaseOR  ==  0000000E
   8C:  	CaseOR  ==  0000000C
   98:  	CaseOR  ==  00000010
   A4:  	CaseOR  ==  0000000B
   B0:  	CaseOR  ==  0000000F
   BC:  	CaseOR  ==  0000000D
   C8:  	CaseOR  ==  00000011
   D4:  	CaseOR  ==  00000002
   E0:  	EndCaseGroup
   E8:  	Default
   F0:  		Set   *Var2  00000000
  100:  		Loop  00000018
  10C:  			Call  SetActorYaw   ( .Actor:Self *Var2 )
  120:  			Add   *Var2  0000001E
  130:  			Wait  1`
  13C:  		EndLoop
  144:  		Call  SetActorYaw   ( .Actor:Self 00000000 )
  158:  EndSwitch
  160:  Label  0
  16C:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  188:  Add   *Var1  0000000A
  198:  Add   *Var2  0000000A
  1A8:  Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1EC:  Call  PlaySound     ( 000003E5 )
  1FC:  Call  DropStarPoints    ( .Actor:Self )
  20C:  Call  SetActorYaw   ( .Actor:Self 00000000 )
  220:  Call  UseBattleCamPreset    ( 0000000E )
  230:  Call  SetBattleCamZoom  ( 00000104 )
  240:  Call  SetBattleCamOffsetZ   ( 0000000F )
  250:  Call  BattleCamTargetActor  ( .Actor:Self )
  260:  Call  MoveBattleCamOver ( 0000001E )
  270:  Call  PlaySoundAtActor  ( .Actor:Self 000020E5 )
  284:  Call  SetAnimation  ( .Actor:Self *VarA 00210027 )
  29C:  Wait  12`
  2A8:  Call  SetAnimation  ( .Actor:Self *VarA 00210014 )
  2C0:  Call  SetIdleAnimations ( .Actor:Self *VarA $IdleAnimations_80222C6C )
  2D8:  Wait  30`
  2E4:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  2F8:  Call  UseBattleCamPreset    ( 00000002 )
  308:  Wait  15`
  314:  Call  UseIdleAnimation  ( .Actor:Player .False )
  328:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  340:  Call  SetActorYaw   ( .Actor:Player 0000001E )
  354:  Wait  1`
  360:  Call  SetActorYaw   ( .Actor:Player 0000003C )
  374:  Wait  1`
  380:  Call  SetActorYaw   ( .Actor:Player 0000005A )
  394:  Wait  1`
  3A0:  Call  SetActorYaw   ( .Actor:Player 00000078 )
  3B4:  Wait  1`
  3C0:  Call  SetActorYaw   ( .Actor:Player 00000096 )
  3D4:  Wait  1`
  3E0:  Call  SetActorYaw   ( .Actor:Player 000000B4 )
  3F4:  Wait  5`
		Call  FindKeyItem ( .Item:BadgeStone *VarF )
		If *VarF != FFFFFFFF
  400:  	Call  ActorSpeak    ( $NoStarPoints .Actor:Partner 00000000 009D0008 009D0001 ) % Mario, that was wonderful fighting. You got Star P ...
		Else
  400:  	Call  ActorSpeak    ( 000B00B4 .Actor:Partner 00000000 009D0008 009D0001 ) % Mario, that was wonderful fighting. You got Star P ...
		EndIf
  420:  Call  SetActorYaw   ( .Actor:Player 00000096 )
  434:  Wait  1`
  440:  Call  SetActorYaw   ( .Actor:Player 00000078 )
  454:  Wait  1`
  460:  Call  SetActorYaw   ( .Actor:Player 0000005A )
  474:  Wait  1`
  480:  Call  SetActorYaw   ( .Actor:Player 0000003C )
  494:  Wait  1`
  4A0:  Call  SetActorYaw   ( .Actor:Player 0000001E )
  4B4:  Wait  1`
  4C0:  Call  SetActorYaw   ( .Actor:Player 00000000 )
  4D4:  Wait  5`
  4E0:  Call  SetActorFlagBits  ( .Actor:Self 00400000 .True )
  4F8:  Return
  500:  End
}

#new:String $NoStarPoints
{
	[Style Right]
	Mario,[BR]
	[Pause 10]that was wonderful fighting. You[BR]
	got [Color 0x20]Star Points[Color 0x0A]![BR]
	[Wait][Next]
	Uh... At least you're supposed[BR]
	get Star Points for defeating[BR]
	enemies...[BR]
	[Wait][Next]
	Maybe there's [Color:25]something that's[BR]
	stopping you from getting them[Color:0A].[BR]
	[Wait][Next]
	Oh well. I'm sure you'll find[BR]
	your own way through everything[BR]
	You're Mario![Wait][End]
}


@ $SpikedGoomba %buff his health by 1
{
[MaxHP]		3`b
}

@ $Script_TakeTurn_8021B19C %spiked goomba damage is now 3
{
[9AC]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 )
}

@ $ParagoombaA
{
[MaxHP]		2`b
}

@ $DefenseTable_8021F75C
{
.Element:Throw	FFFFFFFF
}

@ $ParagoombaB
{
[MaxHP]		2`b
}

@ $DefenseTable_80222A2C
{
.Element:Throw	FFFFFFFF
}

%Now its time to buff jr troopa 2
@ $JrTroopa2
{
[MaxHP]        18`b %15 -> 18
}

		%ok time to add stuff
		
		%Old AI
		%first, choose attack
		%Dash attack = 30%
		%Double jump = 40%
		%Strong jump = 30%
		
		%New AI
		%to reduce rng, he will no longer to the same move twice in a row
		%each move has a 1/3 chance
		%if he chooses the same move as last time, choose the next move in the cycle

		%newer AI
		%No more rng
@ $Script_Init_80224A94
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80225314 )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_80224B24 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_80224B58 )
   3C:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_80225B4C )
   50:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   68:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 )
		Call     SetActorVar 	( .Actor:Self 00000002 00000003 )
   80:  Return
   88:  End
}

@ $Script_TakeTurn_80225314 %He chooses between strong jump, double jump, and dash
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:OpenShell )
   3C:  Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
   54:  Wait     00000014 
   60:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   74:  Call     SetGoalToTarget 	( .Actor:Self )
   84:  Call     UseBattleCamPreset 	( 0000003F )
   94:  Call     BattleCamTargetActor ( .Actor:Self )
   A4:  Call     MoveBattleCamOver 	( 00000014 )
   B4:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   CC:  Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
   E4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
   F8:  Call     SetGoalToTarget 	( .Actor:Self )
  108:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
  124:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  138:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  150:  Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  168:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  184:  Wait     00000001 
  190:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  1AC:  Wait     00000005 
  1B8:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
		Call	 GetActorVar ( .Actor:Self 00000002 *Var[F] )
		Switch *VarF
			Case == 0`
				Set *Var3 1`
			Case == 1`
				Set *Var3 2`
			Case == 2`
				Set *Var3 0`
		EndSwitch
		/%
		Call	 RandInt ( 2 *Var[0] ) %0,1,2
		If (*Var[0] == 0)
			Set *Var[3] 0
			If *Var[3] == *Var[F]
				Set *Var[3] 1
			EndIf
		Else
			If (*Var[0] == 1)
				Set *Var[3] 1
				If *Var[3] == *Var[F]
					Set *Var[3] 2
				EndIf
			Else
				Set *Var[3] 2
				If *Var[3] == *Var[F]
					Set *Var[3] 0
				EndIf
			EndIf
		EndIf
		%/
		Call	 SetActorVar ( .Actor:Self 00000002 *Var[3] )
		%
		Switch ( *Var[3] )
			Case == 00000000 %strong jump
				Call     SetAnimation 	( .Actor:Self 00000001 0021000E )
				Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
				Switch  *Var[A] 
					CaseOR  ==  00000005 
					CaseOR  ==  00000006 
						Call     SetGoalToTarget 	( .Actor:Self )
						Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
						Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
						Thread
							Wait     00000008 
							Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
						EndThread
					Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
					Set  *Var[1]  00000000 
					Add  *Var[2]  00000005 
					Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
					If  *Var[A]  ==  00000005 
						Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
					EndIf
					Wait     00000002 
					Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Sub  *Var[0]  00000014 
					Set  *Var[1]  00000000 
					Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
					Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
					Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
					Wait     0000000A 
					Call     UseBattleCamPreset 	( 00000002 )
					Call     MoveBattleCamOver 	( 00000019 )
					Call     SetActorYaw 	( .Actor:Self 000000B4 )
					Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
					Call     SetAnimation 	( .Actor:Self 00000001 0021000B )
					Call     RunToGoal   	( .Actor:Self 00000000 .False )
					Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
					Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
					Call     SetActorYaw 	( .Actor:Self 00000000 )
					ExecWait $Script_80224964 
					Call     UseIdleAnimation 	( .Actor:Self .True )
					Return
					EndCaseGroup
				EndSwitch
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
				Thread
					Wait     00000003 
					Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
					Wait     00000005 
					Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
				EndThread
				Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
				Wait     00000002 
				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 ) %2 -> 4
			Case == 00000001 %double jump
				Call     SetAnimation 	( .Actor:Self 00000001 0021000E )
				Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
				Switch  *Var[A] 
					CaseOR  ==  00000005 
					CaseOR  ==  00000006 
						Call     SetGoalToTarget 	( .Actor:Self )
						Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
						Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
						Thread
							Wait     00000008 
							Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
						EndThread
					Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
					Set  *Var[1]  00000000 
					Add  *Var[2]  00000005 
					Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
					If  *Var[A]  ==  00000005 
						Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
					EndIf
					Wait     00000002 
					Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Sub  *Var[0]  00000014 
					Set  *Var[1]  00000000 
					Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
					Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
					Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
					Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
					Wait     0000000A 
					Call     UseBattleCamPreset 	( 00000002 )
					Call     MoveBattleCamOver 	( 00000019 )
					Call     SetActorYaw 	( .Actor:Self 000000B4 )
					Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
					Call     SetGoalToHome 	( .Actor:Self )
					Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
					Call     SetAnimation 	( .Actor:Self 00000001 0021000B )
					Call     RunToGoal   	( .Actor:Self 00000000 .False )
					Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
					Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
					Call     SetActorYaw 	( .Actor:Self 00000000 )
					ExecWait $Script_80224964 
					Call     UseIdleAnimation 	( .Actor:Self .True )
					Return
					EndCaseGroup
				EndSwitch
				Set *Var[4] 00000002
				Loop 2
					Call     SetAnimation 	( .Actor:Self 00000001 0021000E ) %the upwards animation
					Call     SetGoalToTarget 	( .Actor:Self )
					Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
					Thread
						Wait     00000003 
						Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
						Wait     00000005 
						Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
					EndThread
					Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
					Wait     00000002 
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 *Var[4] 00000020 ) %2 -> 2,3
					Add		*Var[4]  00000001 %this makes the second jump deal 3 instead of 2
				EndLoop
			Case == 00000002 %dash attack
				Call     SetAnimation 	( .Actor:Self 00000001 0021000C )
				Wait	 00000006 %telegraph attack
				Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] ) %dash speed is 14
				%Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  				%Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
				Call     SetTargetActor ( .Actor:Self .Actor:Player )
   				Call     SetGoalToTarget 	( .Actor:Self )
				Call     RunToGoal   	( .Actor:Self 00000000 .False ) %time to go!
				Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 ) %did we hit?
				Set *Var[B] 00000001 %stores a temp flag to see if partner can be hit
				Switch  *Var[A] 
   					Case  ==  00000005 %oh no i missed, so don't hit
						Call	 AddGoalPos ( .Actor:Self FFFFFF60 00000000 00000000)
						Call     SetAnimation 	( .Actor:Self 00000001 00210012 )
						Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 ) %i think this causes the lucky text
						Set *Var[B] 00000000
   					Case  ==  00000006 %mario is invisible, but the partner might not be
						Set *Var[B] 00000001
					Default
						Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %2 attack
				EndSwitch
				If *Var[B] == 00000001 %can hit partner
					Call     SetTargetActor ( .Actor:Self .Actor:Partner )
					Call     SetGoalToTarget 	( .Actor:Self )
					Call     RunToGoal   	( .Actor:Self 00000000 .False ) %time to go!
					Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 ) %did we hit?
					Switch  *Var[A] 
						Case  ==  00000006 %partner is invisible too, don't attack
							Set *Var[B] 00000001
						Default
							Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000001 00000020 ) %1 attack
					EndSwitch
				EndIf
				% Thread
					% Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
  					% Switch  *Var[A] 
   						% Case  ==  00000005 
   							% Wait     00000014 %makes him miss?
   							% Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )%Set *Var[B] 00000000
   							% Return
   						% Case  ==  00000006 %Set *Var[B] 00000001
   							% Return
   					% EndSwitch
					% Label    00000000 
					% Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  					% Call     GetActorPos 	( .Actor:Player *Var[3] *Var[4] *Var[5] )
   					% If  *Var[0]  >  *Var[3] 
   						% Wait     00000001 
   						% Goto     00000000 
   					% EndIf
   					% Call     SetTargetActor ( .Actor:Self .Actor:Player )
   					% Call     SetGoalToTarget 	( .Actor:Self )
					% Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 ) %2 attack
					% Call     SetTargetActor ( .Actor:Self .Actor:Partner )
					% Call     EnemyTestTarget ( .Actor:Self *Var[0] 08000000 00000000 00000000 00000010 ) %now time to verify if partner can be hit
					% If (*Var[0] == 00000006)
						% Set *Var[A] 00000000
					% EndIf
					% If 	*Var[A] == 1							%if partner should be attacked
						% Label 00000001 %time to attack, start the loop from above
						% Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
						% Call     GetActorPos 	( .Actor:Partner *Var[3] *Var[4] *Var[5] )
						% If  *Var[0]  >  *Var[3] 
							% Wait     00000001 
							% Goto     00000001 
						% EndIf
						% Call     SetTargetActor ( .Actor:Self .Actor:Partner )
						% Call     SetGoalToTarget 	( .Actor:Self )
						% Call	 AddGoalPos (.Actor:Self FFFFFF60 00000000 00000000)
						% Wait	 00000004 %give you a small window for blocking
						% Call     SetGoalToTarget 	( .Actor:Self )
						% Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000001 00000020 ) %only 1 here
					% EndIf
				% EndThread
				Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		EndSwitch %end attacks, time to go home
		%star rod pls
  604:  Switch  *Var[0] 
  610:  	Default
  618:  		Call     UseBattleCamPreset 	( 00000002 )
  628:  		Call     8026F6EC ( FFFFFF81 )
  638:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  654:  		Add  *Var[0]  00000028 
  664:  		Set  *Var[1]  00000000 
  674:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  688:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6A4:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  6C4:  		Add  *Var[0]  0000001E 
  6D4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6F0:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  710:  		Add  *Var[0]  00000014 
  720:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  73C:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  75C:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  774:  		Wait     0000000A 
  780:  		Call     SetGoalToHome 	( .Actor:Self )
  790:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  7A4:  		Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
  7BC:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  7D4:  		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
  7EC:  		ExecWait $Script_80224964 
  7F8:  EndSwitch
  800:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  814:  Call     UseIdleAnimation 	( .Actor:Self .True )
  828:  Return
  830:  End
}

@ $StatusTable_80225E60
{
.Status:Normal    100`
.Status:Default   100`
.Status:Sleep      50`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      60` %50 -> 60
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   50`
.Status:Shrink     50` %80 -> 50
.Status:Stop       80`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}
  
@ $DefenseTable_80225E54
{
	.Element:Normal 00000001
	.Element:Throw 00000000
	.Element:End
}

  
@ $JrTroopa3
{
[PowerBounce]  3`b
[MaxHP]        30`b %40 -> 30 (health nerf, offsets the increased damage) 
}

@ $Script_TakeTurn_80226F58
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     UseBattleCamPreset 	( 0000003F )
   5C:  Call     BattleCamTargetActor ( .Actor:Self )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
   B0:  Call     SetGoalToTarget 	( .Actor:Self )
   C0:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   DC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   F0:  Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:Linear )
  10C:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000005 00000010 )
  130:  Switch  *Var[A] 
  13C:  	CaseOR  ==  00000006 
  148:  	CaseOR  ==  00000005 
  154:  		Wait     0000000A 
  160:  		Call     UseBattleCamPreset 	( 00000042 )
  170:  		Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  188:  		Call     BattleCamTargetActor ( .Actor:Self )
  198:  		Call     SetActorSounds ( FFFFFF81 00000002 000020E0 00000000 )
  1B4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  1DC:  		Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
  1F4:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  210:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  22C:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  24C:  		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  268:  		Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
  27C:  		Call     SetGoalToTarget 	( .Actor:Self )
  28C:  		Sub  *Var[0]  00000050 
  29C:  		Set  *Var[1]  00000014 
  2AC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2DC:  		Call     SetAnimation 	( .Actor:Self 00000001 00250006 )
  2F4:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  310:  		If  *Var[A]  ==  00000005 
  320:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  344:  		EndIf
  34C:  		Wait     0000000A 
  358:  		Call     UseBattleCamPreset 	( 00000002 )
  368:  		Call     MoveBattleCamOver 	( 00000014 )
  378:  		Call     8026F6EC ( FFFFFF81 )
  388:  		Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
  3A0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  3B4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3D0:  		Call     SetGoalToHome 	( .Actor:Self )
  3E0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  3F4:  		Call     FlyToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
  410:  		Call     SetAnimation 	( .Actor:Self 00000001 00250002 )
  428:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  440:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  454:  		Return
  45C:  	EndCaseGroup
  464:  	Default
  46C:  			Wait     0000000A 
				Loop 2
					Call     SetTargetActor ( .Actor:Self .Actor:Player )
					Call     SetGoalToTarget 	( .Actor:Self )
  478:  			Call     UseBattleCamPreset 	( 00000042 )
  488:  			Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  4A0:  			Call     BattleCamTargetActor ( .Actor:Self )
  4B0:  			Call     SetActorSounds ( FFFFFF81 00000002 000020E0 00000000 )
  4CC:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  4E0:  			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  4F4:  			Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
  50C:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  528:  			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  544:  			Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  564:  			Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  580:  			Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
  594:  			Call     SetGoalToTarget 	( .Actor:Self )
  5A4:  			Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  5B8:  			Call     SetAnimation 	( .Actor:Self 00000001 00250006 )
  5D0:  			Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
					Wait     00000002 
					Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000004 00000020 )
					%Call     UseBattleCamPreset 	( 00000002 )
					Call     SetGoalToTarget 	( .Actor:Self )
					Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
					Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
					Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
					Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
					Wait     00000002
				EndLoop
  5EC:  EndSwitch
  % 5F4:  Wait     00000002 
  % 600:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  628:  Set  *Var[F]  *Var[0] 
  638:  Switch  *Var[F] 
  644:  	CaseOR  ==  00000000 
  650:  	CaseOR  ==  00000002 
  65C:  	CaseOR  ==  0000000A 
  668:  		Call     UseBattleCamPreset 	( 00000002 )
  678:  		Call     SetGoalToTarget 	( .Actor:Self )
  688:  		Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
  6A4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  6B8:  		Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
  6D0:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  6EC:  		Wait     0000000A 
  6F8:  		Call     8026F6EC ( FFFFFF81 )
  708:  		Call     YieldTurn   	( )
  714:  		Call     SetAnimation 	( .Actor:Self 00000001 00250005 )
  72C:  		Call     SetGoalToHome 	( .Actor:Self )
  73C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  750:  		Call     FlyToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
  76C:  		Call     SetAnimation 	( .Actor:Self 00000001 00250002 )
  784:  	EndCaseGroup
  78C:  EndSwitch
  794:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7A8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  7BC:  Return
  7C4:  End
}



@ $DefenseTable_80227F5C
{
	.Element:Normal 00000001
	.Element:Throw 00000000
	.Element:End
}

@ $Script_TakeTurn_8022936C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     UseBattleCamPreset 	( 0000003F )
   5C:  Call     BattleCamTargetActor ( .Actor:Self )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
   B0:  Call     SetGoalToTarget 	( .Actor:Self )
   C0:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   DC:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   F0:  Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:Linear )
  10C:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000006 00000010 )
  130:  Switch  *Var[A] 
  13C:  	CaseOR  ==  .HitResult:Miss % 6
  148:  	CaseOR  ==  .HitResult:Lucky % 5
  154:  		Wait     0000000A 
  160:  		Call     UseBattleCamPreset 	( 00000042 )
  170:  		Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  188:  		Call     BattleCamTargetActor ( .Actor:Self )
  198:  		Call     SetActorSounds ( FFFFFF81 00000002 000020E0 00000000 )
  1B4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  1DC:  		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
  1F4:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  210:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  22C:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  24C:  		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  268:  		Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
  27C:  		Call     SetGoalToTarget 	( .Actor:Self )
  28C:  		Sub  *Var[0]  00000050 
  29C:  		Set  *Var[1]  00000014 
  2AC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2DC:  		Call     SetAnimation 	( .Actor:Self 00000001 00230008 )
  2F4:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  310:  		If  *Var[A]  ==  00000005 
  320:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  344:  		EndIf
  34C:  		Wait     0000000A 
  358:  		Call     UseBattleCamPreset 	( 00000002 )
  368:  		Call     MoveBattleCamOver 	( 00000014 )
  378:  		Call     8026F6EC ( FFFFFF81 )
  388:  		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
  3A0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  3B4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3D0:  		Call     SetGoalToHome 	( .Actor:Self )
  3E0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] ) %8 -> 14
  3F4:  		Call     FlyToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
  410:  		Call     SetAnimation 	( .Actor:Self 00000001 00230003 )
  428:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  440:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  454:  		Return
  45C:  	EndCaseGroup
  464:  	Default
  46C:  		Wait     0000000A 
  478:  		Call     UseBattleCamPreset 	( 00000042 )
  488:  		Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  4A0:  		Call     BattleCamTargetActor ( .Actor:Self )
  4B0:  		Call     SetActorSounds ( FFFFFF81 00000002 000020E0 00000000 )
  4CC:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  4E0:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  4F4:  		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
  50C:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  528:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  544:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  564:  		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
  580:  		Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
  594:  		Call     SetGoalToTarget 	( .Actor:Self )
  5A4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] ) %8 -> 14
  5B8:  		Call     SetAnimation 	( .Actor:Self 00000001 00230008 )
  5D0:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  5EC:  EndSwitch
  5F4:  Wait     00000002 
  600:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000040 )
		Wait     00000004 
		Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] ) %4 -> 6
		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
		%Wait     0000000A 
		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] ) %5 -> 8
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
		Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] ) %8 -> 14
		Call     SetAnimation 	( .Actor:Self 00000001 00230008 )
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000040 )
		Wait     00000004 
		Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] ) %4 -> 6
		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
		%Wait     0000000A 
		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] ) %5 -> 8
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
		Call     SetActorSounds ( FFFFFF81 00000001 00000000 00000000 )
		Call     PlaySoundAtActor 	( .Actor:Self 000002C1 )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] ) %8 -> 14
		Call     SetAnimation 	( .Actor:Self 00000001 00230008 )
		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000007 00000020 )
		Call	 GetActorHP     ( .Actor:Self *Var[0] )
		Sub *Var[0] 3
		If *Var[0] < 1
			Set *Var[0] 1
		EndIf
		Call     SetEnemyHP  	( .Actor:Self *Var[0] )
		/%
  628:  Set  *Var[F]  *Var[0] 
  638:  Switch  *Var[F] 
  644:  	CaseOR  ==  00000000 
  650:  	CaseOR  ==  00000002 
  65C:  	CaseOR  ==  0000000A 
		%/
  668:  		Call     UseBattleCamPreset 	( 00000002 )
  678:  		Call     SetGoalToTarget 	( .Actor:Self )
  688:  		Call     AddGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
  6A4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  6B8:  		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
  6D0:  		Call     FlyToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
  6EC:  		Wait     0000000A 
  6F8:  		Call     8026F6EC ( FFFFFF81 )
  708:  		Call     YieldTurn   	( )
  714:  		Call     SetAnimation 	( .Actor:Self 00000001 00230007 )
  72C:  		Call     SetGoalToHome 	( .Actor:Self )
  73C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  750:  		Call     FlyToGoal  	( .Actor:Self 00000000 00000001 .Easing:Linear )
  76C:  		Call     SetAnimation 	( .Actor:Self 00000001 00230003 )
		/%
  784:  	EndCaseGroup
  78C:  EndSwitch
		%/
  794:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7A8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  7BC:  Return
  7C4:  End
}

@ $Script_NextTurn_80229B38
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000A
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000000
   78:  			Call  SetActorVar       ( .Actor:Self 00000000 00000001 )
   90:  			Wait  15`
   9C:  			Call  UseBattleCamPreset    ( 0000000E )
   AC:  			Call  BattleCamTargetActor  ( .Actor:Self )
   BC:  			Call  SetBattleCamOffsetZ   ( 00000023 )
   CC:  			Call  MoveBattleCamOver ( 0000001E )
   DC:  			Wait  20`
   E8:  			Call  ActorSpeak        ( 000700B8 .Actor:Self 00000002 00210005 00210005 ) % Wheeze wheeze wheeze... Here it comes! You... you' ...
  108:  			Wait  10`
  114:  			Call  SetActorFlagBits  ( .Actor:Self 00001000 .True )
  12C:  			Call  8026D940  ( FFFFFF81 FFFFFFEC 00000028 )
  144:  			Call  8027D2D8  ( FFFFFF81 )
  154:  			Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  170:  			Set   *Var0  00000073
  180:  			Set   *Var1  00000096
  190:  			Call  $Function_802189DC    ( *Var0 *Var1 *VarA )
  1A8:  			Wait  10`
  1B4:  			Call  GetEnemyMaxHP     ( .Actor:Self *Var0 )
					Call  GetEnemyMaxHP     ( .Actor:Self *VarB )
					Div *VarB 2`
  1C8:  			Label  0
  1D4:  			Sub   *Var0  00000001
  1E4:  			Call  SetEnemyHP        ( .Actor:Self *Var0 )
  1F8:  			Wait  1`
  204:  			If  *Var0  >  *VarB		%= half
  214:  				Goto  0
  220:  			EndIf
  228:  			Call  SetAnimation  ( .Actor:Self 00000002 00210013 )
  240:  			Wait  15`
  24C:  			Loop  00000002
  258:  				Call  SetActorFlagBits  ( .Actor:Self 00001000 .False )
  270:  				Wait  15`
  27C:  				Call  SetActorFlagBits  ( .Actor:Self 00001000 .True )
  294:  				Wait  15`
  2A0:  			EndLoop
  2A8:  			Call  ActorSpeak    ( 000700B9 .Actor:Self 00000002 00210013 00210013 ) % Gasp! Oh, no!! All that swimming! My HP is almost  ...
  2C8:  			Call  SetActorFlagBits  ( .Actor:Self 00001000 .False )
  2E0:  			Call  $Function_80218AA4    ( *VarA )
  2F0:  			Call  8027D32C      ( FFFFFF81 )
  300:  			Call  8026D940      ( FFFFFF81 00000000 00000000 )
  318:  			Call  SetAnimation  ( .Actor:Self 00000002 00210005 )
  330:  			Wait  25`
  33C:  			Call  ActorSpeak    ( 000700BA .Actor:Self 00000002 00210016 00210003 ) % Well, I'll make up for my low HP by using my new s ...
  35C:  			Wait  10`
  368:  			ExecWait  $Script_802281B4
  374:  			Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  390:  			Call  SetPartFlagBits   ( .Actor:Self 00000001 00000001 .False )
  3AC:  			Wait  20`
  3B8:  			Call  SetGoalToHome ( .Actor:Self )
  3C8:  			Call  AddGoalPos    ( .Actor:Self 00000028 00000050 00000000 )
  3E4:  			Call  FlyToGoal     ( .Actor:Self 0000001E 00000000 .Easing:Linear )
  400:  			Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  41C:  			Call  ForceHomePos  ( .Actor:Self *Var0 *Var1 *Var2 )
  438:  			Call  HPBarToHome   ( .Actor:Self )
  448:  			Wait  10`
  454:  			Call  ActorSpeak    ( 000700BB .Actor:Self 00000001 0023000F 00230003 ) % I know all of your fighting patterns now, Mario. S ...
  474:  			Wait  10`
  480:  			ExecWait  $Script_80228574
  48C:  		EndIf
  494:  	Case  ==  0000000C
  4A0:  EndSwitch
  4A8:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  4BC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  4D0:  Return
  4D8:  End
}


@ $JrTroopa5
{
[PowerBounce]  3`b
}

@ $Script_TakeTurn_8022B4F0
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     SetGoalToTarget 	( .Actor:Self )
   4C:  Call     SetAnimation 	( .Actor:Self 00000001 00240006 )
   64:  Wait     00000008 
   70:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast1 )
   84:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   98:  If  *Var[0]  !&  00080000 
   A8:  	Set  *Var[3]  00000000 
   B8:  	Set  *Var[4]  00000024 
   C8:  	SetF  *Var[5]  *Fixed[2.0] %1 -> 2
   D8:  Else
   E0:  	Set  *Var[3]  00000000 
   F0:  	Set  *Var[4]  0000000E 
  100:  	SetF  *Var[5]  *Fixed[0.8] %0.4 -> 0.8
  110:  EndIf
  118:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  134:  Add  *Var[0]  *Var[3] 
  144:  Add  *Var[1]  *Var[4] 
  154:  Call     PlayEffect  	( ~FX:GatherEnergyPink *Var[0] *Var[1] *Var[2] *Var[5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  198:  Wait     0000001E 
  1A4:  Call     SetAnimation 	( .Actor:Self 00000001 00240007 )
  1BC:  Call     UseBattleCamPreset 	( 00000002 )
  1CC:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000001 00000010 )
  1F0:  Switch  *Var[A] 
  1FC:  	CaseOR  ==  .HitResult:Miss % 6
  208:  	CaseOR  ==  .HitResult:Lucky % 5
  214:  		Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast2 )
  228:  		Call     GetActorPos 	( .Actor:Player *Var[3] *Var[4] *Var[5] )
  244:  		Sub  *Var[3]  00000078 
  254:  		Add  *Var[4]  00000014 
  264:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  278:  		If  *Var[0]  !&  00080000 
  288:  			Set  *Var[6]  FFFFFFF8 
  298:  			Set  *Var[7]  00000014 
  2A8:  			SetF  *Var[8]  *Fixed[2.0] %1 -> 2?
  2B8:  		Else
  2C0:  			Set  *Var[6]  FFFFFFFD 
  2D0:  			Set  *Var[7]  00000008 
  2E0:  			SetF  *Var[8]  *Fixed[0.8] %0.4 -> 0.8?
  2F0:  		EndIf
  2F8:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  314:  		Add  *Var[0]  *Var[6] 
  324:  		Add  *Var[1]  *Var[7] 
  334:  		Call     PlayEffect  	( ~FX:ShapeSpell:Projectile *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] 0000001E 00000000 00000000 00000000 00000000 00000000 )
  378:  		Wait     00000023 
  384:  		If  *Var[A]  ==  00000005 
  394:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  3B8:  		EndIf
				%Add in attack decreases to signal what's happening to mario here
				%Jr troopa interferes with my normal message system so I'll give you a little message here to tell you what's happening
				Thread
					Call	8026BF48		( 00000001 )
					Call	BoostAttack		( .Actor:Self FFFFFFFF )
					Call	8026BF48		( 00000000 )
				EndThread
  3C0:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3D4:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3E8:  		Return
  3F0:  	EndCaseGroup
  3F8:  EndSwitch
  400:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:SpellCast2 )
  414:  Call     GetActorPos 	( .Actor:Player *Var[3] *Var[4] *Var[5] )
  430:  Add  *Var[4]  00000014 
  440:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  454:  If  *Var[0]  !&  00080000 
  464:  	Set  *Var[6]  FFFFFFF8 
  474:  	Set  *Var[7]  00000014 
  484:  	SetF  *Var[8]  *Fixed[2.0] %1 -> 2 
  494:  Else
  49C:  	Set  *Var[6]  FFFFFFFD 
  4AC:  	Set  *Var[7]  00000008 
  4BC:  	SetF  *Var[8]  *Fixed[0.8] %0.4 -> 0.8
  4CC:  EndIf
  4D4:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4F0:  Add  *Var[0]  *Var[6] 
  500:  Add  *Var[1]  *Var[7] 
  510:  Call     PlayEffect  	( ~FX:ShapeSpell:Projectile *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] 0000000F 00000000 00000000 00000000 00000000 00000000 )
  554:  Wait     0000000F 
  560:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000010 00000000 00000000 0000000F 00000020 ) %15 damage lol
  588:  Switch  *Var[0] 
  594:  	Case  ==  00000000 
  5A0:  		Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
  5B8:  		If  *Var[0]  ==  00000000 
  5C8:  			Call     GetLastDamage 	( .Actor:Player *Var[1] )
  5DC:  			If  *Var[1]  !=  00000000 
  5EC:  				Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
  604:  			EndIf
  60C:  		EndIf
  614:  EndSwitch  
		Wait 10`		%let you see how much damage he does
		%Add in attack decreases to signal what's happening to mario here
		%Jr troopa interferes with my normal message system so I'll give you a little message here to tell you what's happening
		Thread
			Call	8026BF48		( 00000001 )
			Call	BoostAttack		( .Actor:Self FFFFFFFF )
			Call	8026BF48		( 00000000 )
		EndThread
  61C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  630:  Call     UseIdleAnimation 	( .Actor:Self .True )
  644:  Return
  64C:  End
}

@ $Script_NextTurn_8022BB44
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000C
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000001
   78:  			Call  GetStatusFlags    ( .Actor:Self *Var1 )
   8C:  			If  *Var1  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
   9C:  				Call  SetActorVar   ( .Actor:Self 00000000 00000002 )
   B4:  				Call  GetActorVar   ( .Actor:Self 00000003 *Var0 )
   CC:  				If  *Var0  ==  00000000
   DC:  					ExecWait  $Script_8022ABA8
   E8:  					Wait  20`
   F4:  				EndIf
   FC:  				Call  ActorSpeak    ( 001200DD .Actor:Self 00000001 0024000E 00240003 ) % Mario! You like magic tricks? You won't like this  ...
  11C:  				Call  SetAnimation  ( .Actor:Self 00000001 00240002 )
  134:  				ExecWait  $Script_8022AC40
  140:  				Wait  20`
  14C:  			EndIf
  154:  		Else
  15C:  			Wait  20`
  168:  		EndIf
  170:  		Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
  188:  		Return
  190:  	Case  ==  0000000B
  19C:  		Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  1B4:  		If  *Var0  ==  00000001
  1C4:  			Call  SetActorVar   ( .Actor:Self 00000001 00000002 )
  1DC:  			ExecWait  $Script_8022ABA8
  1E8:  			Wait  20`
  1F4:  			Call  ActorSpeak    ( $AttackDownTutorial .Actor:Self 00000001 0024000E 00240003 ) % Ha ha ha ha!! That felt fantastic! I just keep on  ...
  214:  			Call  SetAnimation  ( .Actor:Self 00000001 00240002 )
  22C:  			ExecWait  $Script_8022AC40
  238:  			Wait  10`
  244:  		EndIf
  24C:  		Return
  254:  	Case  ==  0000000A
  260:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
  278:  		If  *Var0  ==  00000000
  288:  			Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
  2A0:  			Wait  15`
  2AC:  			ExecWait  $Script_8022ABA8
  2B8:  			Wait  10`
  2C4:  			Call  ActorSpeak    ( 001200DB .Actor:Self 00000002 0021001A 0021001B ) % Oh, I've been busy, Mario! I learned cooool techni ...
  2E4:  			Wait  8`
  2F0:  			ExecWait  $Script_8022A880
  2FC:  			Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  318:  			Call  SetPartFlagBits   ( .Actor:Self 00000001 00000001 .False )
  334:  			Wait  15`
  340:  			Call  ActorSpeak    ( 001200DC .Actor:Self 00000001 0024000E 00240003 ) % Look at that piece of work! I've been taking a lit ...
  360:  			Call  SetAnimation  ( .Actor:Self 00000001 00240002 )
  378:  			Wait  10`
  384:  			ExecWait  $Script_8022AC40
  390:  		EndIf
  398:  EndSwitch
  3A0:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  3B4:  Call  UseIdleAnimation  ( .Actor:Self .True )
  3C8:  Return
  3D0:  End
}

#new:String $AttackDownTutorial
{
	[Style Right]
	What's going on? Why is[BR]
	my attack going down?[BR]
	[Wait][Next]
	I better beat you fast before[BR]
	my [COLOR:20]attack drops too low[COLOR:0A]![BR]
	[Wait][End]
}



%Jr Troopa 6
%Hp is nerfed all the way to 1!
%...but he starts the battle with a hustle drink that gives him a bunch of turns
%He's immune to zaptap to prevent cheesing the infinite attack
%His attacks do 6+ damage to prevent you from having enough base defense to just sit there and do nothing
%big jump does 8
%double jump does 6 x 2
%dash does 6 (3 to partner, doesn't matter)
%punch does 9 x 2

@ $JrTroopa6
{
[MaxHP]        1`b 
}

@ $Script_NextTurn_8023147C
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetBattlePhase ( *Var[0] )
   38:  Switch  *Var[0] 
   44:  	Case  ==  .Phase:PlayerBegin % A
   50:  		Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   68:  		If  *Var[0]  !&  00000001 
   78:  			ConstOR  *Var[0] 00000001 
   88:  			Call     SetActorVar 	( .Actor:Self 00000002 *Var[0] )
   A0:  			Call     UseBattleCamPreset 	( 0000000E )
   B0:  			Call     BattleCamTargetActor ( .Actor:Self )
   C0:  			Call     MoveBattleCamOver 	( 00000014 )
   D0:  			Call     ActorSpeak  	( 0013005D .Actor:Self 00000001 0021001A 0021001A ) % Here it comes, Mario!! This is the final fight!!!  ...
					ExecWait $Script_HustleDrink
					Call     ActorSpeak  	( $InfiniteTurns .Actor:Self 00000001 0021001A 0021001A ) % Here it comes, Mario!! This is the final fight!!!  ...
%   F0:  			Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
					ExecWait $Script_InfiniteTurns
  108:  		EndIf
  110:  	Case  ==  .Phase:EnemyBegin % C
  11C:  	Case  ==  .Phase:EnemyEnd % B
  128:  	Case  ==  .Phase:PlayerBegin % A
  134:  EndSwitch
  13C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  150:  Call     UseIdleAnimation 	( .Actor:Self .True )
  164:  Return
  16C:  End
}
  
#string $InfiniteTurns
{
[STYLE:Right]See that? I just drank[BR]
a Hustle Drink![BR]
[Wait][NEXT]That means I can take[BR]
as many turns as I want[BR]
and you can't do anything[BR]
about it![BR]
[Wait][END]
}
 
#new:Script $Script_HustleDrink
{
	SetConst *Var[A] 00000091 %hustle drink
	ExecWait $Script_802A13D0
	Call	UseBattleCamPreset 	( 00000002 )
	Call	MoveBattleCamOver 	( 00000014 )
	Call     PlaySoundAtActor 	( .Actor:Self 00000369 )
	Call     SetAnimation 	( .Actor:Self 00000001 0021001D )
	Thread
		Loop     00000002 
			Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
			Wait     00000001 
			Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[1.0] *Fixed[1.0] )
			Wait     00000001 
			Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9501953] *Fixed[1.0] )
			Wait     00000001 
			Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.9003906] *Fixed[1.0] )
			Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.3505859] *Fixed[0.85058594] *Fixed[1.0] )
    		Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.3808594] *Fixed[0.80078125] *Fixed[1.0] )
    		Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.4003906] *Fixed[0.80078125] *Fixed[1.0] )
    		Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.85058594] *Fixed[1.0] )
    		Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9003906] *Fixed[1.0] )
    		Wait     00000001 
    		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.9501953] *Fixed[1.0] )
    		Wait     00000001 
    	EndLoop
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[1.0] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9501953] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.9003906] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.3505859] *Fixed[0.85058594] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.3808594] *Fixed[0.80078125] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.4003906] *Fixed[0.80078125] *Fixed[1.0] )
    	Wait     00000001 
    	Call     PlaySoundAtActor 	( .Actor:Self 0000208E )
    	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.3007812] *Fixed[1.0] )
		Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[0.9501953] *Fixed[1.1005859] *Fixed[1.0] )
    	Wait     00000001 
    	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    	Wait     00000001 
    EndThread
	Call	 GetActorPos	( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Loop     0000000A 
    	Call     PlaySoundAtActor 	( .Actor:Self 00000369 )
    	Call     PlayEffect  	( ~FX:Steam:TinyOutward *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
    	Call     PlayEffect  	( ~FX:Steam:SmallOutward *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Wait     00000004 
	EndLoop
	Wait     0000000A 
	%Call	$Function_802A1270 ( )
	Return
	End
}


/%
#new:Function  $Function_802A1270
	ADDIU     SP, SP, FFD8
	SW        S0, 18 (SP)
	DADDU     S0, A0, R0
	SW        S1, 1C (SP)
	LIA       S1, 800B22D8
	BEQ       A1, R0, .o24
	SW        RA, 20 (SP)
	SW        R0, 70 (S0)
    .o24
	LW        V1, 70 (S0)
	BEQ       V1, R0, .o40
	ADDIU     V0, R0, 1
	BEQ       V1, V0, .o74
	DADDU     V0, R0, R0
	BEQ       R0, R0, .o14C
	NOP
    .o40
	ADDIU     A0, R0, 2033
	SW        R0, 74 (S0)
	JAL       80149CB4
	SW        R0, 78 (S0)
	DADDU     A0, R0, R0
	LIA       A1, $Function_802A123C
	JAL       8012323C
	SH        R0, 1C (S1)
	SAW       V0, $End[0]
	ADDIU     V0, R0, 1
	SW        V0, 70 (S0)
    .o74
	LHU       V0, 0 (S1)
	ORI       V0, V0, 8
	SH        V0, 0 (S1)
	LWC1      F0, 74 (S0)
	CVT.S.W   F0, F0
	MFC1      A1, F0
	MTC1      R0, F0
	LIF       F2, 1.0
	MFC1      A2, F0
	ADDIU     A0, S1, 194
	SWC1      F2, 10 (SP)
	JAL       80067B20
	DADDU     A3, A2, R0
	LW        V0, 78 (S0)
	LIO       AT, 40C90FD0
	MTC1      AT, F0
	ADDIU     V0, V0, 5A
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F0
	NOP
	LIF       F0, 360.0
	JAL       8002A16C
	DIV.S     F12, F12, F0
	LIF       F3, 1.875
	MTC1      R0, F2
	CVT.D.S   F0, F0
	SUB.D     F2, F2, F0
	LAD       F0, $DizzyDial_ConstDouble
	MUL.D     F2, F2, F0
	NOP
	LW        V0, 78 (S0)
	ADDIU     V0, V0, 1
	ADD.D     F2, F2, F2
	SW        V0, 78 (S0)
	SLTI      V0, V0, 5B
	TRUNC.W.D F4, F2
	SWC1      F4, 74 (S0)
	BNEL      V0, R0, .o14C
	DADDU     V0, R0, R0
	LAW       A0, $End[0]
	LHU       V0, 0 (S1)
	SH        R0, 1C (S1)
	ANDI      V0, V0, FFF7
	JAL       801235C0
	SH        V0, 0 (S1)
	ADDIU     V0, R0, 2
    .o14C
	LW        RA, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	JR        RA
ADDIU SP, SP, 28

#new:ConstDouble $DizzyDial_ConstDouble
360.000000d
%/

#new:Script $Script_802A13D0
{
	Call     GetActorPos 		( .Actor:Enemy0 *Var[0] *Var[1] *Var[2] )
	Call     PlaySoundAtActor 	( .Actor:Enemy0 0000208D )
	Wait     00000004
	Add      *Var[1] 0000002D
	Set      *Var[3] *Var[1]
	Add      *Var[3] 0000000C
	Call     PlayEffect  	( 00000033 00000001 *Var[0] *Var[3] *Var[2] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call     MakeItemEntity ( *Var[A] *Var[0] *Var[1] *Var[2] 00000001 00000000 )
	Set      *Var[A] *Var[0]
	Wait     0000001F
	Call     RemoveItemEntity ( *Var[A] )
	Return
	End
}

#new:Script $Script_InfiniteTurns %do infinite attacks
{
	Call	 RandInt ( 12` *Var[E] )
	Label 0
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
	Add *Var[0] 1
	Call	 SetActorVar 	( .Actor:Self 00000000 *Var[0] )
	%choose attack
	%first 5 are either big jump, double jump, or dash
	%second 5 are that + punch
	Set *Var[F] *Var[0]
	If *Var[0] < 5
		Add *Var[F] *Var[E]
		Mod *Var[F] 3
		Switch *Var[F]
			Case == 00000000
				ExecWait $Script_InfiBigJump %8 damage
			Case == 00000001
				ExecWait $Script_InfiDoubleJump %6 and 6
			Case == 00000002
				ExecWait $Script_InfiDash %6 / 3
		EndSwitch
	Else
		Add *Var[F] *Var[E]
		Mod *Var[F] 4
		Switch *Var[F]
			Case == 00000000
				ExecWait $Script_InfiBigJump
			Case == 00000001
				ExecWait $Script_InfiDash
			Case == 00000002
				ExecWait $Script_InfiDoubleJump
			Case == 00000003
				ExecWait $Script_InfiPunch %9 and 9
		EndSwitch
	EndIf
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
	If *Var[0] < A
		Wait 8`
		Goto 0
	EndIf
	Call     SetAnimation 	( .Actor:Self 00000001 00210015 )
	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Oof )	%sprite 1?
Return
End
}

#new:Script $Script_InfiBigJump %copied from jrtroopa2
{
		Call     UseIdleAnimation 	( .Actor:Self .False )
		Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     UseBattleCamPreset 	( 0000003F )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 00000014 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] ) %speedy boi
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
		Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000E )
		Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000002 00000010 )
		Switch  *Var[A] 
			CaseOR  ==  00000005 
			CaseOR  ==  00000006 
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.0] ) %2 -> 4
				Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
				Thread
					Wait     00000008 
					Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
				EndThread
				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
				Set  *Var[1]  00000000 
				Add  *Var[2]  00000005 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 ) %F -> A
				If  *Var[A]  ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Wait     00000002 
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Sub  *Var[0]  00000014 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     UseBattleCamPreset 	( 00000002 )
				Call     MoveBattleCamOver 	( 00000019 )
				Call     SetActorYaw 	( .Actor:Self 000000B4 )
				Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] ) %8 -> 16
				Call     SetAnimation 	( .Actor:Self 00000001 0021000B )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
				Call     SetActorYaw 	( .Actor:Self 00000000 )
				%ExecWait $Script_80224964 
				Call     UseIdleAnimation 	( .Actor:Self .True )
				Return
			EndCaseGroup
		EndSwitch
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[4.0] ) %2 -> 4
		Thread
			Wait     00000003 
			Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
			Wait     00000005 
			Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
		EndThread
		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 ) %F -> A
		Wait     00000002 
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000005 00000020 ) %5 damage
		Switch  *Var[0] 
			Default
				Call     UseBattleCamPreset 	( 00000002 )
				Call     8026F6EC ( FFFFFF81 )
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[0]  00000028 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Add  *Var[0]  0000001E 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
				Add  *Var[0]  00000014 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
				Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				%ExecWait $Script_80224964 
		EndSwitch
		Call     UseIdleAnimation 	( .Actor:Self .True )
		Call     EnableIdleScript 	( .Actor:Self 00000001 )
		Return
		End
}

#new:Script $Script_InfiDoubleJump %copied from infi big jump
{
		Call     UseIdleAnimation 	( .Actor:Self .False )
		Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     UseBattleCamPreset 	( 0000003F )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 00000014 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %speedy boi
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
		Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000E )
		Call     EnemyTestTarget ( .Actor:Self *Var[A] 10000000 00000000 00000002 00000010 )
		Switch  *Var[A] 
			CaseOR  ==  00000005 
			CaseOR  ==  00000006 
				Call     SetGoalToTarget 	( .Actor:Self )
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[6.0] ) %2 -> 6
				Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
				Thread
					Wait     00000008 
					Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
				EndThread
				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
				Set  *Var[1]  00000000 
				Add  *Var[2]  00000005 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 ) %F -> 6
				If  *Var[A]  ==  00000005 
					Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
				EndIf
				Wait     00000002 
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Sub  *Var[0]  00000014 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     UseBattleCamPreset 	( 00000002 )
				Call     MoveBattleCamOver 	( 00000019 )
				Call     SetActorYaw 	( .Actor:Self 000000B4 )
				Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] ) %8 -> 16
				Call     SetAnimation 	( .Actor:Self 00000001 0021000B )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
				Call     SetActorYaw 	( .Actor:Self 00000000 )
				%ExecWait $Script_80224964 
				Call     UseIdleAnimation 	( .Actor:Self .True )
				Return
			EndCaseGroup
		EndSwitch
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[6.0] ) %2 -> 6
		Loop 2
			Thread
				Wait     00000003 
				Call     SetAnimation 	( .Actor:Self 00000001 0021000F )
				Wait     00000005 
				Call     SetAnimation 	( .Actor:Self 00000001 00210010 )
			EndThread
			Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 ) %F -> 6
			Wait     00000002 
			Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000004 00000020 ) %5 damage
		EndLoop
		Switch  *Var[0] 
			Default
				Call     UseBattleCamPreset 	( 00000002 )
				Call     8026F6EC ( FFFFFF81 )
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[0]  00000028 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Add  *Var[0]  0000001E 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
				Add  *Var[0]  00000014 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
				Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				%ExecWait $Script_80224964 
		EndSwitch
		Call     UseIdleAnimation 	( .Actor:Self .True )
		Call     EnableIdleScript 	( .Actor:Self 00000001 )
		Return
		End
}

#new:Script $Script_InfiDash
{
		Call     UseIdleAnimation 	( .Actor:Self .False )
		Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     UseBattleCamPreset 	( 0000003F )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 00000014 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %speedy boi
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
		Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000C )
		Wait	 00000008 %telegraph attack
		Call     SetActorSpeed 	( .Actor:Self *Fixed[30.0] ) %you need fast reflexes
		%Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  		%Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
   		Call     SetGoalToTarget 	( .Actor:Self )
		Call     RunToGoal   	( .Actor:Self 00000000 .False ) %time to go!
		Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 ) %did we hit?
		Set *Var[B] 00000001 %stores a temp flag to see if partner can be hit
		Switch  *Var[A] 
   			Case  ==  00000005 %oh no i missed, so don't hit
				Call	 AddGoalPos ( .Actor:Self FFFFFF60 00000000 00000000)
				Call     SetAnimation 	( .Actor:Self 00000001 00210012 )
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 ) %i think this causes the lucky text
				Set *Var[B] 00000000
   			Case  ==  00000006 %mario is invisible, but the partner might not be
				Set *Var[B] 00000001
			Default
				Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000003 00000020 ) %6 attack
		EndSwitch
		If *Var[B] == 00000001 %can hit partner
			Call     SetTargetActor ( .Actor:Self .Actor:Partner )
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     RunToGoal   	( .Actor:Self 00000000 .False ) %time to go!
			Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 ) %did we hit?
			Switch  *Var[A] 
				Case  ==  00000006 %partner is invisible too, don't attack
					Set *Var[B] 00000001
				Default
					Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000001 00000020 ) %3 attack
			EndSwitch
		EndIf
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Switch  *Var[0] 
			Default
				Call     UseBattleCamPreset 	( 00000002 )
				Call     8026F6EC ( FFFFFF81 )
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[0]  00000028 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Add  *Var[0]  0000001E 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
				Add  *Var[0]  00000014 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
				Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				%ExecWait $Script_80224964 
		EndSwitch
		Call     UseIdleAnimation 	( .Actor:Self .True )
		Call     EnableIdleScript 	( .Actor:Self 00000001 )
		Return
		End
}

#new:Script $Script_InfiPunch %modified infi-dash
{
		Call     UseIdleAnimation 	( .Actor:Self .False )
		Call     EnableIdleScript 	( .Actor:Self 00000000 )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     UseBattleCamPreset 	( 0000003F )
		Call     BattleCamTargetActor ( .Actor:Self )
		Call     MoveBattleCamOver 	( 00000014 )
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[20.0] ) %speedy boi
		Call     SetGoalToTarget 	( .Actor:Self )
		Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
		Call     SetActorSpeed 	( .Actor:Self *Fixed[15.0] )
		Call     RunToGoal   	( .Actor:Self 00000000 .False )
		Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
		Wait	 00000008 %telegraph attack
		Call     SetActorSpeed 	( .Actor:Self *Fixed[30.0] ) %you need fast reflexes
		%Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  		%Call     SetGoalPos 	( .Actor:Self FFFFFF60 *Var[1] *Var[2] )
		Call     SetTargetActor ( .Actor:Self .Actor:Player )
   		Call     SetGoalToTarget 	( .Actor:Self )
		Call     RunToGoal   	( .Actor:Self 00000000 .False ) %time to go!
		Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 ) %did we hit?
		Thread 
			Call     SetAnimation 	( .Actor:Self 00000001 0021002B ) %punch time
		EndThread
		Switch  *Var[A] 
   			Case  ==  00000005 %oh no i missed, so don't hit
   			Case  ==  00000006 
				Set *Var[0] 0 %?
			Default
				Wait 5` %these timings should make sense
				Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000006 00000020 ) %9 attack
				Wait 9`
				Call	EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000006 00000020 ) %9 attack
		EndSwitch
		Call     SetAnimation 	( .Actor:Self 00000001 0021000A )
		Switch  *Var[0] 
			Default
				Call     UseBattleCamPreset 	( 00000002 )
				Call     8026F6EC ( FFFFFF81 )
				Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Add  *Var[0]  00000028 
				Set  *Var[1]  00000000 
				Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
				Add  *Var[0]  0000001E 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
				Add  *Var[0]  00000014 
				Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
				Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				Wait     0000000A 
				Call     SetGoalToHome 	( .Actor:Self )
				Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
				Call     SetAnimation 	( .Actor:Self 00000001 00210009 )
				Call     RunToGoal   	( .Actor:Self 00000000 .False )
				Call     SetAnimation 	( .Actor:Self 00000001 00210003 )
				%ExecWait $Script_80224964 
		EndSwitch
		Call     UseIdleAnimation 	( .Actor:Self .True )
		Call     EnableIdleScript 	( .Actor:Self 00000001 )
		Return
		End
}

#new:IdleAnimations $IdleAnimations_Oof
{
.Status:Normal    00210015
.Status:Sleep     00210015
.Status:Stone     00210015
.Status:Stop      00210015
.Status:Paralyze  00210015
.Status:Dizzy     00210015
.Status:End
}

@ $StatusTable_8022C43C
{
.Status:Normal    100`
.Status:Default   100`
.Status:Sleep     100` %lmao
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear        0`
.Status:Static      0`
.Status:Paralyze   40`
.Status:Shrink     60`
.Status:Stop       60`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      6`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -2`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -2`
.Status:End
}

%if you get to this point you just win
@ $Script_TakeTurn_8022D920
{
	Call     SetAnimation 	( .Actor:Self 00000001 00210015 )
	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Oof )	%sprite 1?
	Wait	 00000008
	Return
	End
}