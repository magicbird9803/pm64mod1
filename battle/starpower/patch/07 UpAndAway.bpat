%Check up and away value
/%
original 

$Function_802A1628
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  JAL       ~Func:get_actor
   18:  LW        A0, 148 (S1)
   1C:  JAL       ~Func:get_actor
   20:  LH        A0, 428 (V0)
   24:  COPY      S0, V0
   28:  SW        R0, 84 (S1)		%var0 = 0 (fail value)
   2C:  LW        V1, 0 (S0)	
   30:  ANDI      V0, V1, 4000		%check flag 4000
   34:  BNE       V0, R0, .o90		%skip if true
   38:  LI        V0, 2
   3C:  LUI       V0, 40			%check flag 400000
   40:  AND       V0, V1, V0	
   44:  BNE       V0, R0, .o90
   48:  LI        V0, 2
   4C:  ANDI      V0, V1, 2000		%check flag 2000
   50:  BNE       V0, R0, .o90
   54:  LI        V0, 2
   58:  LW        V0, 8 (S0)		%get actor data struct
   5C:  LBU       V0, 1C (V0)		%find up and away value
   60:  BEQ       V0, R0, .o90		%if up and away value = 0, do not check
   64:  LI        V0, 2
   68:  JAL       ~Func:rand_int	%0 to 100
   6C:  LI        A0, 64
   70:  LW        V1, 8 (S0)
   74:  LBU       V1, 1C (V1)
   78:  SLT       V1, V1, V0		%(value) < (0 to 100)
   7C:  BNE       V1, R0, .o90
   80:  LI        V0, 2
   84:  LI        V0, 1
   88:  SW        V0, 84 (S1)		%var0 = 1 (success value)
   8C:  LI        V0, 2
        .o90
   90:  LW        RA, 18 (SP)
   94:  LW        S1, 14 (SP)
   98:  LW        S0, 10 (SP)
   9C:  JR        RA
   A0:  ADDIU     SP, SP, 20
}
%/

%instead, just output the up and away value (or 0 if invalid for some reason)
@ $Function_802A1628
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  JAL       ~Func:get_actor
   18:  LW        A0, 148 (S1)
   1C:  JAL       ~Func:get_actor
   20:  LH        A0, 428 (V0)
   24:  COPY      S0, V0
   28:  SW        R0, 84 (S1)
   2C:  LW        V1, 0 (S0)
   30:  ANDI      V0, V1, 4000
   34:  BNE       V0, R0, .o90
   38:  LI        V0, 2
   3C:  LUI       V0, 40
   40:  AND       V0, V1, V0
   44:  BNE       V0, R0, .o90
   48:  LI        V0, 2
   4C:  ANDI      V0, V1, 2000
   50:  BNE       V0, R0, .o90
   54:  LI        V0, 2
   58:  LW        V0, 8 (S0)
   5C:  LBU       V0, 1C (V0)
   60:  BEQ       V0, R0, .o90
   64:  LI        V0, 2
   70:  LW        V1, 8 (S0)
   74:  LBU       V1, 1C (V1)
   88:  SW        V1, 84 (S1)
   8C:  LI        V0, 2
        .o90
   90:  LW        RA, 18 (SP)
   94:  LW        S1, 14 (SP)
   98:  LW        S0, 10 (SP)
   9C:  JR        RA
   A0:  ADDIU     SP, SP, 20
}

#new:Function $Function_CheckStellarNova
{
PUSH	S1, A1, A2, T0, RA
COPY	S1, A0
%get
LAB		A0, $StellarNovaBoolean
%reset
SAB		R0, $StellarNovaBoolean
COPY	A2, A0
COPY	A0, S1
JAL		~Func:set_variable
LW		A1, 0 (S0) %get argument
NOP
POP		S1, A1, A2, T0, RA
JR		RA
ADDIU	V0, R0, 2 	
}

@ $Script_UsePower
{
    0:  ExecWait  $Script_802A16D0
		If *GameByte[00A] == 5
			Call $ShowCustomMessage	( 002F002A 0000005A )
			Call     UseBattleCamPreset 	( 00000002 )
			ExecWait  $Script_802A245C
			Return
		EndIf
    C:  SetConst  *Var0  001F0001
   1C:  ExecWait  $Script_802A1E00
   28:  Call  SetNpcAnimation   ( 00000064 001F0002 )
   3C:  Call  UseBattleCamPreset    ( 00000002 )
   4C:  Wait  20`
   58:  Call  802D7CF8  ( 00000000 00000000 00000000 00000140 000000F0 00000080 0000000A )
   80:  Call  $Function_802A1518 ( )
   8C:  Call  PlaySound ( 00000247 )
   9C:  Call  PlayEffect        ( ~FX:EnergyShockwave 00000000 00000014 00000000 *Fixed[1.0] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
   E0:  Wait  30`
   EC:  Thread
   F4:  	Call  PlayEffect    ( ~FX:ShimmerWave 00000000 00000032 00000000 0000012C 00000064 0000000A 00000028 00000000 00000000 00000000 00000000 00000000 )
  138:  EndThread
  140:  Call  PlayEffect    ( ~FX:EnergyShockwave 00000000 00000014 00000000 *Fixed[1.0] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  184:  Wait  75`
  190:  Call  802D7CF8      ( 00000000 00000000 00000000 00000140 000000F0 00000000 0000000A )
		Set *VarC 50`
  1B8:  Call  InitTargetIterator ( )
  1C4:  Label  0
  1D0:  Call  SetGoalToTarget   ( .Actor:Self )
  1E0:  Call  $Function_802A1628 ( )				%Check up and away
		%convert var0 to result value
		%first, add to counter
		Add *VarC *Var0
		%check if at or above 100 (if so, subtract by 100 and result is true)
		Call	$Function_CheckStellarNova ( *VarB )
		If *VarB == 1`
			If *Var0 > 0`
				Set *Var0 1`
			Else
				Set *Var0 0`
			EndIf
		Else
			If *VarC > 99`
				Sub *VarC 100`
				Set *Var0 1`
			Else
				Set *Var0 0`
			EndIf
		EndIf
		%
  1EC:  Set   *Flag[00]  .False
  1FC:  Call  ItemCheckHit  ( *Var1 ~Flags:DamageType:0 00000000 00000000 00000000 )
  21C:  If  *Var1  ==  .HitResult:Miss % 6
  22C:  	Set   *Var0  00000000
  23C:  	Set   *Flag[00]  .True
  24C:  EndIf
  254:  Switch  *Var0				%success?
  260:  	Case  >  00000000
  26C:  		Call  GetOwnerTarget    ( *Var0 *Var1 )
  280:  		Call  DispatchEvent ( *Var0 .Event:UpAndAway )
  294:  		Call  SetActorRotationOffset    ( *Var0 00000000 0000000A 00000000 )
  2B0:  		Thread
  2B8:  			Call  GetOwnerTarget        ( *VarB *Var1 )
  2CC:  			Wait  10`
  2D8:  			Call  CreateVirtualEntity   ( *VarA 80283EE8 )				%make a star? (wow this is actually kinda weird code)
  2EC:  			Call  GetActorPos   ( *VarB *Var0 *Var1 *Var2 )
  308:  			Set   *VarD  *Var0
  318:  			Set   *VarE  *Var1
  328:  			Set   *VarF  *Var2
  338:  			Call  SetVirtualEntityPosition  ( *VarA *Var0 *Var1 *Var2 )
  354:  			SetF  *Var0  *Fixed[0.2]
  364:  			Call  SetVirtualEntityScale ( *VarA *Var0 *Var0 *Var0 )
  380:  			Loop  00000004
  38C:  				AddF  *Var0  *Fixed[0.2]
  39C:  				Call  SetVirtualEntityScale ( *VarA *Var0 *Var0 *Var0 )
  3B8:  				Wait  1`
  3C4:  			EndLoop
  3CC:  			Set   *Var0  00000000
  3DC:  			Loop  00000005
  3E8:  				Add   *Var0  00000048
  3F8:  				Call  SetVirtualEntityRotation  ( *VarA 00000000 *Var0 00000000 )
  414:  				Wait  1`
  420:  			EndLoop
  428:  			Call  PlaySound ( 00002052 )
  438:  			Set   *Var0  *VarD
  448:  			Set   *Var1  *VarE
  458:  			Set   *Var2  *VarF
  468:  			Set   *Var3  00000000
  478:  			Loop  00000032
  484:  				Call  SetVirtualEntityPosition  ( *VarA *Var0 *Var1 *Var2 )
  4A0:  				Call  SetVirtualEntityRotation  ( *VarA 00000000 *Var3 00000000 )
  4BC:  				Add   *Var1  00000006
  4CC:  				Add   *Var3  0000002D
  4DC:  				Wait  1`
  4E8:  			EndLoop
  4F0:  		EndThread
  4F8:  		Thread
  500:  			Call  PlaySound ( 00002071 )
  510:  			Call  GetOwnerTarget    ( *VarA *Var1 )
  524:  			Call  SetActorFlagBits  ( *VarA 00000004 .True )
  53C:  			SetF  *Var0  *Fixed[1.0]
  54C:  			Loop  00000012
  558:  				SubF  *Var0  *Fixed[0.05]
  568:  				Call  SetActorScale ( *VarA *Var0 *Var0 *Var0 )
  584:  				Wait  1`
  590:  			EndLoop
  598:  			Call  SetActorPos   ( *VarA 00000000 FFFFFC18 00000000 )
  5B4:  			Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  5D0:  			Loop  0000000A
  5DC:  				Call  PlayEffect    ( ~FX:Sparkles:Random *Var0 *Var1 *Var2 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  620:  				Add   *Var1  0000001E
  630:  				Wait  5`
  63C:  			EndLoop
  644:  			Call  SetBattleFlagBits ( 01000000 .True )
  658:  			Call  RemoveActor       ( *VarA )
  668:  		EndThread
  670:  	Default
  678:  		If  *Flag[00]  ==  .False
  688:  			Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:0 0000FFFF 00000000 00000000 00000820 )		%dink
  6AC:  		EndIf
  6B4:  EndSwitch
  6BC:  Wait  5`
  6C8:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  6DC:  If  *Var0  !=  FFFFFFFF
  6EC:  	Goto  0
  6F8:  EndIf
  700:  Wait  70`
  70C:  Call  $Function_802A15B4 ( )
  718:  ExecWait  $Script_802A200C
  724:  Call  80276EFC ( )
  730:  ExecWait  $Script_802A245C
  73C:  Return
  744:  End
}