@ $Script_UseItem
{
    0:  Set  *Var[E]  *Var[1] 
   10:  Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
   28:  Set  *Var[A]  *Var[1] 
   38:  Call     $Function_802A15A0 ( *Var[A] )
   48:  Call     InitTargetIterator 	( )
   54:  Call     GetOwnerTarget ( *Var[0] *Var[1] ) %owner is Mario
   68:  If  *Var[0]  ==  00000100 %target partner
   78:  	ExecWait $Script_802A1BEC 
   84:  	Return
   8C:  EndIf
   94:  Set  *Var[1]  *Var[E] 
   A4:  ExecWait $Script_802A1630 
   B0:  If  *Var[D]  ==  00000000 
   C0:  	ExecWait $Script_802A1AFC 
   CC:  Else
   D4:  	ExecWait $Script_802A1B74 
   E0:  EndIf
   E8:  If  *Var[F]  ==  00000001 
   F8:  	Call     SetAnimation 	( .Actor:Player 00000000 0001001D )
  110:  EndIf
		Call	 $Function_TransferToTurnCounts ( )
		Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
		%globals script for all the food stuff
		%because I finally ran out of space
		ExecWait $Script_SpecialFood
		%
		Call	 $Function_BoostTurnCounts ( )		
		If *VarF == 1`
			Call	 $Function_SetArbitraryByte ( 00000000 $ItemCostReductionData[2] )
			Goto 1
		EndIf
		Call	 $Function_GetArbitraryByte ( *VarF $ItemCostReductionData[3] )
		If *VarF == 1`
			Call	 $Function_SetArbitraryByte ( 00000000 $ItemCostReductionData[3] )
			Goto 2
		EndIf
		Call	 $Function_GetArbitraryByte ( *VarF $ItemCostReductionData[2] )
		Switch *VarF
			Case == 2`
				Add *VarB *VarB
				Add *VarC *VarC
			Case == 1`
				Set *VarF *VarB
				Div *VarF 2`
				Add *VarB *VarF
				Set *VarF *VarC
				Div *VarF 2`
				Add *VarC *VarF
			Default
		EndSwitch		
		Call	 $Function_GetArbitraryByte ( *VarF $ItemCostReductionData[2] )			%oops, get this early for below
		Call	 $Function_SetArbitraryByte ( 00000000 $ItemCostReductionData[2] )
		If *VarB > 100`
			Set *VarB 100`
		EndIf
		If *VarC > 100`
			Set *VarC 100`
		EndIf
		Label 2
  118:  If  *Var[B]  >  00000000 
  128:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  144:  	Add  *Var[0]  00000000 
  154:  	Add  *Var[1]  00000023 
  164:  	Call     $Function_802A1378 ( *Var[0] *Var[1] *Var[2] *Var[B] )
  180:  EndIf
  188:  If  *Var[B]  <  00000000 
  198:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  1B4:  	Add  *Var[0]  00000000 
  1C4:  	Add  *Var[1]  00000023 
  1D4:  	Call     $Function_802A1378 ( *Var[0] *Var[1] *Var[2] *Var[B] )
  1F0:  EndIf
  1F8:  If  *Var[C]  >  00000000 
  208:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  224:  	Add  *Var[0]  00000014 
  234:  	Add  *Var[1]  00000019 
  244:  	Call     $Function_802A1438 ( *Var[0] *Var[1] *Var[2] *Var[C] )
  260:  EndIf
  268:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  284:  Add  *Var[1]  00000019 
  294:  Call     802D7520 ( *Var[0] *Var[1] *Var[2] *Var[B] )			%some fx
  2B0:  If  *Var[B]  !=  00000000 
  2C0:  	Call     $Function_HPHeal ( *VarB ) %$Function_802A14F8 ( *Var[B] )		%Hp
  2D0:  EndIf
  2D8:  If  *Var[C]  !=  00000000 
  2E8:  	Call     $Function_FPHeal ( *VarC ) %$Function_802A154C ( *Var[C] )		%Fp
  2F8:  EndIf
		Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
		Call	 $Function_GetArbitraryByte ( *VarF $ItemCostReductionData[2] )
		Call	 $Function_GetCurseState ( *Var7 )
		Switch *Var[1]
			%Have to delay the status stuff to not interrupt this script too early?
			Case == 7	%Big mistake
				%Take damage
				If *VarF == 2`
					If *Var7 == 0`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020664 FFFFFFF0 00000020 )			%Make this unblockable 
					Else
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020664 00000000 00000020 )			%Make this unblockable 
					EndIf
				Else
					If *Var7 == 0`
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020464 FFFFFFF0 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020364 FFFFFFF0 00000020 )			%Make this unblockable 
						EndIf
					Else
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020464 00000000 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020364 00000000 00000020 )			%Make this unblockable 
						EndIf
					EndIf
				EndIf
			Case == .Item:BooLeaf
				If *VarF == 2`
					%hardcode yay
					Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
					Add   *Var5 00000210
					Set *Var6 4
					Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
					Add *Var5 1
					Set *Var6 3
					Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211					
					If *Var7 == 0`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040364 FFFFFFF0 00000020 )			%Make this unblockable 			
					Else
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040364 00000000 00000020 )			%Make this unblockable 			
					EndIf
				Else
					If *VarF == 1`
						%hardcode yay
						Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
						Add   *Var5 00000210
						Set *Var6 4
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
						Add *Var5 1
						Set *Var6 2
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211					
						If *Var7 == 0`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 FFFFFFF0 00000020 )			%Make this unblockable 			
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 00000000 00000020 )			%Make this unblockable 			
						EndIf
					Else
						%hardcode yay
						Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
						Add   *Var5 00000210
						Set *Var6 4
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
						Add *Var5 1
						Set *Var6 2
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211					
						If *Var7 == 0`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 FFFFFFF0 00000020 )			%Make this unblockable 			
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 00000000 00000020 )			%Make this unblockable 			
						EndIf
					EndIf
				EndIf
			%Case == .Item:BakingCleanser
			%	%Take damage
			%	Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80020964 FFFFFFF0 00000020 )			%Make this unblockable 				
			Case == .Item:BombJuice
				If *VarF == 2`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 00000000 00000008 00000020 )			%Make this unblockable 
				Else
					If *VarF == 1`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 00000000 00000006 00000020 )			%Make this unblockable 
					Else
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 00000000 00000004 00000020 )			%Make this unblockable 
					EndIf
				EndIf
			Case == .Item:MiniSoda
				%Take damage
				If *VarF == 2`
					%for some stupid reason I have to hard code it
					Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
					Add   *Var5 00000210
					Set *Var6 A
					Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
					Add *Var5 1
					Set *Var6 4
					Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211
					If *Var7 == 0`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080464 FFFFFFF0 00000020 )			%Make this unblockable 
					Else
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080464 00000000 00000020 )			%Make this unblockable 
					EndIf
				Else
					If *VarF == 1`
						Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
						Add   *Var5 00000210
						Set *Var6 A
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
						Add *Var5 1
						Set *Var6 3
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211
						If *Var7 == 0`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080364 FFFFFFF0 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080364 00000000 00000020 )			%Make this unblockable 
						EndIf
					Else
						Call  $Function_GetArbitraryWord ( *Var5 800DC148 )	%800DC070 + D8
						Add   *Var5 00000210
						Set *Var6 A
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 210
						Add *Var5 1
						Set *Var6 2
						Call  $Function_SetArbitraryByte ( *Var6 *Var5 )		%player pointer + 211
						If *Var7 == 0`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080264 FFFFFFF0 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80080264 00000000 00000020 )			%Make this unblockable 
						EndIf
					EndIf
				EndIf
			Case == AF
				If *Var7 == 0`
					%Take damage
					If *VarF == 2`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004464 FFFFFFF0 00000020 )			%Make this unblockable 
					Else
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004364 FFFFFFF0 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004264 FFFFFFF0 00000020 )			%Make this unblockable 
						EndIf
					EndIf
				Else
					%Take damage
					If *VarF == 2`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004464 00000000 00000020 )			%Make this unblockable 
					Else
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004364 00000000 00000020 )			%Make this unblockable 
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80004264 00000000 00000020 )			%Make this unblockable 
						EndIf
					EndIf
				EndIf
			Case == CB
				If *Var7 == 0`
					%Take damage
					If *VarF == 2`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010264 FFFFFFF0 00000020 )			%Make this unblockable 				
					Else
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 FFFFFFF0 00000020 )			%Make this unblockable 				
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 FFFFFFF0 00000020 )			%Make this unblockable 				
						EndIf
					EndIf
				Else
					%Take damage
					If *VarF == 2`
						Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010264 00000000 00000020 )			%Make this unblockable 				
					Else
						If *VarF == 1`
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 00000000 00000020 )			%Make this unblockable 				
						Else
							Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 00000000 00000020 )			%Make this unblockable 				
						EndIf
					EndIf
				EndIf
			CaseOR == 00000089
			CaseOR == 00000099
				Call     GetActorPos 	( .Actor:Player *Var5 *Var6 *Var7 )
				Add *Var6 10`
				Call	 $Function_DebuffEffectGold ( )
				Call $Function_ResetStatus ( )
			EndCaseGroup
		EndSwitch
		If *Var7 == 0`
			Switch *FoodByteAux
				Case == 0`
				Case == 1`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80200164 FFFFFFF0 00000020 )			%Make this unblockable 
				Case == 2`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 FFFFFFF0 00000020 )			%Make this unblockable 
				Case == 3`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 FFFFFFF0 00000020 )			%Make this unblockable 			
			EndSwitch
		Else
			Switch *FoodByteAux
				Case == 0`
				Case == 1`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80200164 00000000 00000020 )			%Make this unblockable 
				Case == 2`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80010164 00000000 00000020 )			%Make this unblockable 
				Case == 3`
					Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 12000200 00000000 80040264 00000000 00000020 )			%Make this unblockable 			
			EndSwitch
		EndIf
		Label 1
  300:  If  *Var[F]  ==  00000000 
  310:  	Wait     0000000A 
  31C:  	Call     SetAnimation 	( .Actor:Player 00000000 00010032 )
  334:  	Wait     0000001E 
  340:  Else
  348:  	Wait     0000001E 
  354:  EndIf
  35C:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  378:  Call     802D75D8 ( *Var[0] *Var[1] *Var[2] *Var[B] )
  394:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  3AC:  Wait     00000014 
  3B8:  ExecWait $Script_802A1A60 
  3C4:  Return
  3CC:  End
}

#new:Function $Function_TransferToTurnCounts
{
	%A hacky way of making it easy to see if they have been modified is to temporarily store an impossible value in them
	%Store value = 0x10 * turncount (you can never get turncount of 16)
	PUSH	RA, A0, A1, A2	
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	LI		A2, $TurnCountList
	%
	LB		A1, 224 (A0) %str dur	
	SLL		A1, A1, 4				%Shift by 4 bits is *0x10
	SB		A1, 224 (A0) %str dur	
	SB		A1, 0 (A2)
	%
	LB		A1, 226 (A0) %def dur	
	SLL		A1, A1, 4				%Shift by 4 bits is *0x10
	SB		A1, 226 (A0) %str dur	
	SB		A1, 1 (A2)
	%
	LAB		A1, $ItemCostReductionData[1]		%turns
	SLL		A1, A1, 4				%Shift by 4 bits is *0x10
	SAB		A1, $ItemCostReductionData[1]		%turns
	SB		A1, 2 (A2)	
	POP		RA, A0, A1, A2
	JR		RA
	ORI 	V0, R0, 2
}

%Boost turn counts of atk, def and saver when they are not equal
#new:Function $Function_BoostTurnCounts
{
	%Undo the weird thing I did above and boost
	PUSH	RA, A0, A1, A2, A3, T0
	%Setup
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	LAB		A3, $ItemCostReductionData[2]
	%
	LBU		A1, 224 (A0) %str dur	
	SLTI	T0, A1, 10
	BNE		T0, R0, .tryboost		%Below 16
	NOP
	SRL		A1, A1, 4				%Shift by 4 bits is /0x10
	SB		A1, 224 (A0) %str dur	
	BEQ		R0, R0, .dodefense
	NOP
	.tryboost
	BEQ		A3, R0, .dodefense
	NOP
	COPY	A2,	A1		%turncount
	COPY	T0, R0		
	SUB		T0, T0, A3
	ADDI	T0, T0, 2	%2 - (1 or 2)
	SRLV	A2, A2, T0
	ADD		A1, A2, A1
	SB		A1, 224 (A0) %str dur		
	%
	.dodefense
	LBU		A1, 226 (A0) %str dur	
	SLTI	T0, A1, 10
	BNE		T0, R0, .tryboost2		%Below 16
	NOP
	SRL		A1, A1, 4				%Shift by 4 bits is /0x10
	SB		A1, 226 (A0) %str dur	
	BEQ		R0, R0, .dosaver
	NOP
	.tryboost2
	BEQ		A3, R0, .dosaver
	NOP
	COPY	A2,	A1		%turncount
	COPY	T0, R0		
	SUB		T0, T0, A3
	ADDI	T0, T0, 2	%2 - (1 or 2)
	SRLV	A2, A2, T0
	ADD		A1, A2, A1
	SB		A1, 226 (A0) %str dur		
	.dosaver
	%
	/%
	LI		A0, $ItemCostReductionData[1]
	LAB		A1, 0 (A0)		%turns
	SLL		A1, A1, 4				%Shift by 4 bits is *0x10
	SAB		A1, 0 (A0)		%turns
	SB		A1, 2 (A2)	
	%/
	LI		A0, $ItemCostReductionData[1]
	LBU		A1, 0 (A0) %str dur	
	SLTI	T0, A1, 10
	BNE		T0, R0, .tryboost3		%Below 16
	NOP
	SRL		A1, A1, 4				%Shift by 4 bits is /0x10
	SB		A1, 0 (A0) %str dur	
	BEQ		R0, R0, .end
	NOP
	.tryboost3
	BEQ		A3, R0, .end
	NOP
	COPY	A2,	A1		%turncount
	COPY	T0, R0		
	SUB		T0, T0, A3
	ADDI	T0, T0, 2	%2 - (1 or 2)
	SRLV	A2, A2, T0
	ADD		A1, A2, A1
	SB		A1, 0 (A0) %str dur		
	.end
	%
	POP		RA, A0, A1, A2, A3, T0
	JR		RA
	ORI		V0, R0, 2
}



#new:Function $Function_StarEffect
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S2, 20 (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S1
   34:  JAL       ~Func:get_variable
   38:  COPY      S2, V0
   3C:  COPY      A0, S1
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  MTC1      S2, F2
   50:  NOP
   54:  CVT.S.W   F2, F2
   58:  MFC1      A1, F2
   5C:  MTC1      S0, F2
   60:  NOP
   64:  CVT.S.W   F2, F2
   68:  MFC1      A2, F2
   6C:  MTC1      V0, F2
   70:  NOP
   74:  CVT.S.W   F2, F2
   78:  LIF       F0, 40.0
   80:  MFC1      A3, F2
   84:  CLEAR     A0
   88:  JAL       8006FEF0
   8C:  SWC1      F0, 10 (SP)
   90:  LW        RA, 24 (SP)
   94:  LW        S2, 20 (SP)
   98:  LW        S1, 1C (SP)
   9C:  LW        S0, 18 (SP)
   A0:  LI        V0, 2
   A4:  JR        RA
   A8:  ADDIU     SP, SP, 28
}

#new:Function $Function_ResetStatus %set debuff turns to 0, set attack boost and defense boost to 0 (note that the partner buff moves work separately to them)
{
	PUSH	RA, A0, A1, S0
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	COPY 	S0, A0
	%SB		R0, 210 (A0) %debuff id
	%SB		R0, 211 (A0) %debuff turns
   14:  LB			V0, 210 (S0)
   18:  BEQ			V0, R0, .o30
   1C:  NOP
   20:  LH			A0, 436 (S0)
   24:  SB			R0, 211 (S0)
   28:  JAL			80047898
   2C:  SB			R0, 210 (S0)
   .o30									%this part clears the anim stuff and status 0D - was missing before
    30:  LB			V0, 216 (S0)
   34:  BEQ			V0, R0, .o0DClear
   38:  NOP
   3C:  LW			V0, 440 (S0)
   40:  SB			R0, 217 (S0)
   44:  SB			R0, 216 (S0)
   48:  LW			V0, C (V0)
   4C:  SW			R0, 3C (V0)
	.o0DClear
   30:  LB			V0, 212 (S0)
   34:  BEQ			V0, R0, .o4C
   38:  NOP
   3C:  LH			A0, 436 (S0)
   40:  SB			R0, 213 (S0)
   44:  JAL			800479A0
   48:  SB			R0, 212 (S0)
        .o4C
   4C:  LB			V0, 214 (S0)
   50:  BEQ			V0, R0, .o60
   54:  NOP
   58:  SB			R0, 215 (S0)
   5C:  SB			R0, 214 (S0)
        .o60
   60:  LB			V0, 218 (S0)
   64:  BEQ			V0, R0, .o74
   68:  NOP
   6C:  SB			R0, 219 (S0)
   70:  SB			R0, 218 (S0)
        .o74
	SB		R0, 221 (A0)
	SB		R0, 222 (A0)
	POP		RA, A0, A1, S0
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_DualityShake
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	LB		A1, 223 (A0) %str
	SUB		A1, R0, A1
	SB		A1, 223 (A0) %str
	LB		A1, 225 (A0) %str
	SUB		A1, R0, A1
	SB		A1, 225 (A0) %str
	LI		A0, $ItemCostReductionData
	LB		A1, 0 (A0)
	SUB		A1, R0, A1
	SB		A1, 0 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_DualityShakeNull
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	SB		R0, 223 (A0) %str
	SB		R0, 225 (A0) %str
	LI		A0, $ItemCostReductionData
	SB		R0, 0 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

/%
#new:Function $Function_SetThreeAtk
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFE
	SB		A1, 223 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetThreeDef
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFE
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetKoopaLeaf
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 2
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetKoopaTea
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetKoopasta
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFC
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 1
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetGoomnut
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetNuttyCake
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	ADDIU	A1, R0, 4
	SB		A1, 224 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetIcedPotato
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFB
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 2
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetLemonCandy
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetLimeCandy
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetHoneyCandy
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetFrozenFries
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, 0003
	SB		A1, 223 (A0) %chill str
	ADDI	A1, R0, FFFB
	SB		A1, 225 (A0) %defdown str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %chill dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetPotatoSalad
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, 0001
	SB		A1, 223 (A0) %chill str
	ADDI	A1, R0, FFFD
	SB		A1, 225 (A0) %defdown str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %chill dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}


#new:Function $Function_SetAtkDef
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFE
	SB		A1, 223 (A0) %chill str
	SB		A1, 225 (A0) %defdown str
	ADDIU	A1, R0, 2
	SB		A1, 224 (A0) %chill dur
	SB		A1, 226 (A0) %defdown dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetDarkLeaf
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetDarkShroom
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFD
	SB		A1, 223 (A0) %str
	ADDI	A1, R0, 0003
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 224 (A0) %dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}
%/

#new:Function $Function_SetDarkCake
{
	PUSH	RA, A0, A1, A2, A3
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFE
	SB		A1, 223 (A0) %str
	SB		A1, 225 (A0) %str
	%Get turns
	LI		A2, 8010F520
	LB		A3, 0 (A2)
	SH		R0, 0 (A2)	
	%ADDIU	A1, R0, 3
	COPY	A1, A3
	SB		A1, 224 (A0) %dur
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1, A2, A3
	JR		RA
	ORI 	V0, R0, 2
}

/%
#new:Function $Function_SetRedBerry
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 223 (A0) %str
	ADDIU	A1, R0, 4
	SB		A1, 224 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetBlueBerry
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFF
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 4
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}
%/

#new:Function $Function_ElectrifyMario
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        S0, 10 (SP)
    C:  LAW       S0, 800DC148
   14:  LI        A1, B
   18:  SW        RA, 14 (SP)
   %1C:  LW        A2, 84 (V0)
		ORI 	  A2, R0, 2
   20:  JAL       ~Func:inflict_status
   24:  COPY      A0, S0
   28:  SB        R0, 21C (S0)
   2C:  LW        RA, 14 (SP)
   30:  LW        S0, 10 (SP)
   34:  LI        V0, 2
   38:  JR        RA
   3C:  ADDIU     SP, SP, 18
}

#new:Function $Function_ElectrifyMario1
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        S0, 10 (SP)
    C:  LAW       S0, 800DC148
   14:  LI        A1, B
   18:  SW        RA, 14 (SP)
   %1C:  LW        A2, 84 (V0)
		ORI 	  A2, R0, 3
   20:  JAL       ~Func:inflict_status
   24:  COPY      A0, S0
   28:  SB        R0, 21C (S0)
   2C:  LW        RA, 14 (SP)
   30:  LW        S0, 10 (SP)
   34:  LI        V0, 2
   38:  JR        RA
   3C:  ADDIU     SP, SP, 18
}

#new:Function $Function_ElectrifyMario2
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        S0, 10 (SP)
    C:  LAW       S0, 800DC148
   14:  LI        A1, B
   18:  SW        RA, 14 (SP)
   %1C:  LW        A2, 84 (V0)
		ORI 	  A2, R0, 4
   20:  JAL       ~Func:inflict_status
   24:  COPY      A0, S0
   28:  SB        R0, 21C (S0)
   2C:  LW        RA, 14 (SP)
   30:  LW        S0, 10 (SP)
   34:  LI        V0, 2
   38:  JR        RA
   3C:  ADDIU     SP, SP, 18
}

#new:Function $Function_SetBubbleBerry
{
    0:  ADDIU     SP, SP, FFE0
    4:  COPY      V0, A0
    8:  SW        S0, 10 (SP)
    C:  LAW       S0, 800DC148
		%
		ADDI	A1, R0, 0002
		SB		A1, 223 (S0) %str
		SB		A1, 225 (S0) %str
		ADDIU	A1, R0, 3
		SB		A1, 224 (S0) %dur
		SB		A1, 226 (S0) %dur
		%
   14:  LI        A1, E
   18:  SW        RA, 18 (SP)
   1C:  SW        S1, 14 (SP)
   %20:  LW        A2, 84 (V0)
		ORI		  A2, R0, 1
   24:  LW        S1, 1F4 (S0)
   28:  JAL       ~Func:inflict_status
   2C:  COPY      A0, S0
   30:  SB        R0, 21C (S0)
   34:  LW        V1, 0 (S1)
   38:  ORI       V1, V1, 100
   3C:  SW        V1, 0 (S1)
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  LI        V0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:Function $Function_SetBubbleBerry2
{
    0:  ADDIU     SP, SP, FFE0
    4:  COPY      V0, A0
    8:  SW        S0, 10 (SP)
    C:  LAW       S0, 800DC148
		%
		ADDI	A1, R0, 0002
		SB		A1, 223 (S0) %str
		SB		A1, 225 (S0) %str
		ADDIU	A1, R0, 3
		SB		A1, 224 (S0) %dur
		SB		A1, 226 (S0) %dur
		%
   14:  LI        A1, E
   18:  SW        RA, 18 (SP)
   1C:  SW        S1, 14 (SP)
   %20:  LW        A2, 84 (V0)
		ORI		  A2, R0, 2
   24:  LW        S1, 1F4 (S0)
   28:  JAL       ~Func:inflict_status
   2C:  COPY      A0, S0
   30:  SB        R0, 21C (S0)
   34:  LW        V1, 0 (S1)
   38:  ORI       V1, V1, 100
   3C:  SW        V1, 0 (S1)
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  LI        V0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

#new:Function $EnableAutoBlock2
{
	LAB 	V0, $BattlePerks[2]
	ADDIU 	V0, V0, 2
	SAB 	V0, $BattlePerks[2]
	JR RA
	ADDIU	V0, R0, 2
}

/%
#new:Function $Function_SetBlandMeal
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 2
	SB		A1, 0 (A0)
	LI 		A1, 2
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetYummyMeal
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 2
	SB		A1, 0 (A0)
	LI 		A1, 3
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetDeluxeFeast
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 2
	SB		A1, 0 (A0)
	LI 		A1, 4
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetSpecialShake
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 3
	SB		A1, 0 (A0)
	LI 		A1, 3
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetBigCookie
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 5
	SB		A1, 0 (A0)
	LI 		A1, 2
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}


#new:Function $Function_SetShroomSteak
{
	PUSH	RA, A0, A1
	LI		A0, $ItemCostReductionData
	LI 		A1, 2
	SB		A1, 0 (A0)
	LI 		A1, 3
	SB		A1, 1 (A0)
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}

#new:Function $Function_SetSalt
{
	PUSH	RA, A0, A1
	LIO		A0, 800DC070
	LW		A0, D8 (A0) %where player actor struct is
	ADDI	A1, R0, FFFD
	SB		A1, 225 (A0) %str
	ADDIU	A1, R0, 3
	SB		A1, 226 (A0) %dur
	POP		RA, A0, A1
	JR		RA
	ORI 	V0, R0, 2
}
%/


#new:Function $Function_SetChill %( strength, turncount )
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = 1
%V0 = 2
LIO		A0, 800DC070
LW		A0, D8 (A0) %where player actor struct is
COPY	A1, S0
SB		A1, 223 (A0) %str
COPY	A1, V0
SB		A1, 224 (A0) %dur
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#new:Function $Function_SetDefdown %( strength, turncount )
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = 1
%V0 = 2
LIO		A0, 800DC070
LW		A0, D8 (A0) %where player actor struct is
COPY	A1, S0
SB		A1, 225 (A0) %str
COPY	A1, V0
SB		A1, 226 (A0) %dur
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#new:Function $Function_SetSaver %( strength, turncount )
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = 1
%V0 = 2
LI		A0, $ItemCostReductionData
COPY	A1, S0
SB		A1, 0 (A0)		%amount
COPY	A1, V0
SB		A1, 1 (A0)		%count
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}


%set var5, var6, var7 to correct position
%DC, CC, BC
#new:Function $Function_DebuffEffectCoco
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, DC 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, CC
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, BC
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%orange
%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectOrange
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, 90
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 33
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}


%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectGold
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, DD
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 2E
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%FF, FF, FF
#new:Function $Function_DebuffEffectWhite
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, FF
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}
/%
%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectLightYellow
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, B1
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, 70 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectLightBlue
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, B1 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, B1
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, FF
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectLightRed
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, B1
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, B1
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectLightPurple
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, E3 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, B1
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, FF
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%FF, DD, 2E
#new:Function $Function_DebuffEffectLightGreen
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, B1 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, B1
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%set var5, var6, var7 to correct position
%AE, FF, 02
#new:Function $Function_DebuffEffectLime
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, AE 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 02
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 70
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, FF 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, FF 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}


%set var5, var6, var7 to correct position
#new:Function $Function_DebuffEffectBlue
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 50
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, 90 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

#new:Function $Function_DebuffEffectDarkBlue
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 30
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, 60 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

#new:Function $Function_DebuffEffectBlack
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 00
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, 40 
   74:  SB        V0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}
%/

%use var0, var1, var2 for color
%var5, var6, var7 for positions
#new:Function $Function_DebuffEffectUnified
{
		PUSH	  RA, S0, S1, S2
    4:  COPY      V0, A0
		LW		  S0, 84 (V0)
		LW		  S1, 88 (V0)
		LW		  S2, 8C (V0)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		COPY	  V1, S0
		%ADDIU     V1, R0, 00 
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		COPY	  V1, S1
		%ADDIU     V1, R0, 00
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		COPY	  A0, S2
		%ADDIU     A0, R0, 00
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 00
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		ADDIU     V1, R0, 00 
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
		ADDIU     V0, R0, 40 
   74:  SB        V0, 3D (V1)						%color byte 6?
   7C:  ADDIU     V0, R0, 2   						%return 2
		POP		  RA, S0, S1, S2
   80:  JR        RA
		NOP
}