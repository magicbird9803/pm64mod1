% Script File: Move_DizzyStomp.bscr
% Decoded from: 748DD0 to 74AD90 (Move_DizzyStomp)
% Frigid Stomp
%	chill out effect
%	(but only -1 atk for 3 turns instead of -3 for 3 turns)

#new:Function $Function_CheckChill %chill out fails against targets with certain flags
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S2, 18 (SP)
    8:  COPY		S2, A0
    C:  SW			RA, 1C (SP)
   10:  SW			S1, 14 (SP)
   14:  SW			S0, 10 (SP)
   18:  JAL			~Func:get_actor		%get mario
   1C:  LW			A0, 148 (S2)
   20:  COPY		S0, V0
   24:  JAL			~Func:get_actor		%get target
   28:  LH			A0, 428 (S0)
   2C:  COPY		S1, V0
   30:  LB			A1, 426 (S0)
   34:  JAL			~Func:get_actor_part	%get part of target
   38:  COPY		A0, S1
   3C:  SW			R0, 84 (S2)
		%Ensure that chill out is not already enabled
		LB			T0, 224 (S1)	%duration
		SLTI		T0, T0, 1
		BEQ			T0, R0, .oA0
		NOP
   40:  LW			S1, 0 (S1)		%Actor flags
   44:  COPY		V1, V0			%Part pointer
   48:  ANDI		V0, S1, 4000 	%check flag 4000 (target only)
   4C:  BNE			V0, R0, .oA0
   50:  ADDIU		V0, R0, 2
   54:  LUI			V0, 40			%check flag 400000 (not targettable)
   58:  AND			V0, S1, V0
   5C:  BNE			V0, R0, .oA0
   60:  ADDIU		V0, R0, 2
   64:  ANDI		V0, S1, 2000	%check flag 2000 (???)
   68:  BNE			V0, R0, .oA0
   6C:  ADDIU		V0, R0, 2
   70:  LW			V1, 7C (V1)		%Part event flags
   74:  LUI			V0, 4			%check flag 40000 (normal star rod)
   78:  AND			V0, V1, V0
   7C:  BNE			V0, R0, .oA0
   80:  ADDIU		V0, R0, 2
   84:  LUI			V0, 8			%check flag 80000 (final star rod)
   88:  AND			V0, V1, V0
   8C:  BNE			V0, R0, .oA0
   90:  ADDIU		V0, R0, 2
   94:  ADDIU		V0, R0, 1
   98:  SW			V0, 84 (S2)		%Store 1 into Var0 (used by checker functions later)
   9C:  ADDIU		V0, R0, 2
        .oA0
		ADDIU		V0, R0, 2
   A0:  LW			RA, 1C (SP)
   A4:  LW			S2, 18 (SP)
   A8:  LW			S1, 14 (SP)
   AC:  LW			S0, 10 (SP)
   B0:  JR			RA
   B4:  ADDIU		SP, SP, 20
}

#new:Function $Function_ChillTarget
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			RA, 1C (SP)
    8:  SW			S0, 18 (SP)
    C:  JAL			~Func:get_actor
   10:  LW			A0, 148 (A0)
   14:  COPY		S0, V0
   18:  JAL			~Func:get_actor
   1C:  LH			A0, 428 (S0)
   20:  LB			A1, 426 (S0)
   24:  COPY		S0, V0
   28:  JAL			~Func:get_actor_part
   2C:  COPY		A0, S0
   30:  LW			V1, 0 (S0)
   34:  COPY		A0, V0
   38:  ANDI		V0, V1, 4000 %star rod flag
   3C:  BNE			V0, R0, .o1E4
   40:  ADDIU		V0, R0, 2
   44:  LUI			V0, 40
   48:  AND			V0, V1, V0
   4C:  BEQ			V0, R0, .o5C
   50:  ANDI		V0, V1, 2000
   54:  BEQ			R0, R0, .o1E4
   58:  ADDIU		V0, R0, 2
        .o5C
   5C:  BNE			V0, R0, .o1E4
   60:  ADDIU		V0, R0, 2
   64:  LW			V1, 7C (A0)
   68:  LUI			V0, 4
   6C:  AND			V0, V1, V0
   70:  BNE			V0, R0, .o1E4
   74:  ADDIU		V0, R0, 2
   78:  LUI			V0, 8
   7C:  AND			V0, V1, V0
   80:  BNE			V0, R0, .o1E4
   84:  ADDIU		V0, R0, 2
   88:  COPY		A0, S0
   8C:  CLEAR		A1
   90:  ADDIU		A2, R0, A
   94:  ADDIU		V0, R0, 3		%duration?
   98:  SB			V0, 224 (S0)
   9C:  ADDIU		V0, R0, 2		%attack reduction
   %A0:  JAL			802788F8						bad
   A4:  SB			V0, 223 (S0)
   A8:  LH			V0, 150 (S0)
   AC:  LWC1		F0, 144 (S0)
   B0:  LW			V1, 0 (S0)
   B4:  MTC1		V0, F2
   B8:  NOP
   BC:  CVT.S.W		F2, F2
   C0:  LBU			V0, 190 (S0)
   C4:  ADD.S		F0, F0, F2
   C8:  SRL			V0, V0, 1
   CC:  MTC1		V0, F2
   D0:  NOP
   D4:  CVT.S.W		F2, F2
   D8:  ANDI		V0, V1, 800
   DC:  BEQ			V0, R0, .o114
   E0:  ADD.S		F4, F0, F2
   E4:  LH			V0, 152 (S0)
   E8:  LWC1		F0, 148 (S0)
   EC:  MTC1		V0, F2
   F0:  NOP
   F4:  CVT.S.W		F2, F2
   F8:  LBU			V0, 191 (S0)
   FC:  ADD.S		F0, F0, F2
  100:  MTC1		V0, F2
  104:  NOP
  108:  CVT.S.W		F2, F2
  10C:  BEQ			R0, R0, .o180
  110:  SUB.S		F0, F0, F2
        .o114
  114:  ANDI		V0, V1, 8000
  118:  BNE			V0, R0, .o150
  11C:  NOP
  120:  LH			V0, 152 (S0)
  124:  LWC1		F0, 148 (S0)
  128:  MTC1		V0, F2
  12C:  NOP
  130:  CVT.S.W		F2, F2
  134:  LBU			V0, 191 (S0)
  138:  ADD.S		F0, F0, F2
  13C:  MTC1		V0, F2
  140:  NOP
  144:  CVT.S.W		F2, F2
  148:  BEQ			R0, R0, .o180
  14C:  ADD.S		F0, F2, F0
        .o150
  150:  LH			V0, 152 (S0)
  154:  LWC1		F2, 148 (S0)
  158:  MTC1		V0, F0
  15C:  NOP
  160:  CVT.S.W		F0, F0
  164:  LBU			V0, 191 (S0)
  168:  ADD.S		F2, F2, F0
  16C:  SLL			V0, V0, 1
  170:  MTC1		V0, F0
  174:  NOP
  178:  CVT.S.W		F0, F0
  17C:  ADD.S		F0, F2, F0
        .o180
  180:  LH			V0, 154 (S0)
  184:  MFC1		A2, F0
  188:  LWC1		F0, 14C (S0)
  18C:  MTC1		V0, F2
  190:  NOP
  194:  CVT.S.W		F2, F2
  198:  ADD.S		F0, F0, F2
  19C:  LIF			F2, 5.0
  1A4:  ADDIU		A0, R0, 4		%damage icon (5 -> 3)		3 is -1, 4 is -2?, 5 is -3?
  1A8:  ADD.S		F0, F0, F2
  1AC:  MFC1		A1, F4
  1B0:  LIF			F4, 1.0
  1B8:  MFC1		A3, F0
  1BC:  ADDIU		V0, R0, 3C
  1C0:  SW			V0, 14 (SP)
  1C4:  JAL			800718D0
  1C8:  SWC1		F4, 10 (SP)
  1CC:  JAL			~Func:sfx_play_sound
  1D0:  ADDIU		A0, R0, 2106
  1D4:  ADDIU		V0, R0, 2
  1D8:  ADDIU		V1, R0, 1
  1DC:  SAW			V1, $End[0]
        .o1E4
  1E4:  LW			RA, 1C (SP)
  1E8:  LW			S0, 18 (SP)
  1EC:  JR			RA
  1F0:  ADDIU		SP, SP, 20
}

%uses 3 vars for positions
#new:Function $Function_ChillWaveEffect
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S2, 20 (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S1
   34:  JAL       ~Func:get_variable
   38:  COPY      S2, V0
   3C:  COPY      A0, S1
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  LW        V1, AC (S1)
   50:  BNE       V1, R0, .o90
   54:  CLEAR     A0
   58:  MTC1      S2, F0
   5C:  NOP
   60:  CVT.S.W   F0, F0
   64:  MFC1      A1, F0
   68:  MTC1      S0, F0
   6C:  NOP
   70:  CVT.S.W   F0, F0
   74:  MFC1      A2, F0
   78:  MTC1      V0, F0
   7C:  NOP
   80:  CVT.S.W   F0, F0
   84:  MFC1      A3, F0
   88:  BEQ       R0, R0, .oC0
   8C:  LI        A0, 1
        .o90
   90:  MTC1      S2, F0
   94:  NOP
   98:  CVT.S.W   F0, F0
   9C:  MFC1      A1, F0
   A0:  MTC1      S0, F0
   A4:  NOP
   A8:  CVT.S.W   F0, F0
   AC:  MFC1      A2, F0
   B0:  MTC1      V0, F0
   B4:  NOP
   B8:  CVT.S.W   F0, F0
   BC:  MFC1      A3, F0
        .oC0
   C0:  JAL       80070B50
   C4:  SW        R0, 10 (SP)
		LW			V1, C (V0)
		ADDIU		A1, R0, 00			%R
		SB			A1, 50 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%G
		SB			A1, 51 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B
		SB			A1, 52 (V1)
		LW			A0, C (V0)
		ADDIU		V1, R0, D0			%R 2
		SB			V1, 53 (A0)
		LW			A0, C (V0)
		ADDIU		V1, R0, FF			%G 2
		SB			V1, 54 (A0)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B 2
		SB			A1, 55 (V1)		
   C8:  LW        RA, 24 (SP)
   CC:  LW        S2, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}

@ $Script_UseMove0
{
    0:  Call     802694A4 ( 00000001 )
   10:  Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
   28:  Switch  *Var[1] 
   34:  	Case  ==  00000000 
   40:  		ExecWait $Script_FJump_Normal 
   4C:  	Case  ==  00000001 
   58:  		ExecWait $Script_FJump_Super 
   64:  	Case  ==  00000002 
   70:  		ExecWait $Script_FJump_Ultra 
   7C:  EndSwitch
   84:  Return
   8C:  End
}

#new:Script $Script_FJump_Normal
{
    0:  ExecWait $Script_802A2184 
    C:  Call     PlayerTestEnemy 	( *Var[0] 00000080 00000000 00000000 00000001 00000000 )
   30:  If  *Var[0]  ==  00000006 
   40:  	ExecWait $Script_802A1FEC 
   4C:  	Return
   54:  EndIf
   %5C:  ExecWait $Script_802A26B4 
   68:  Wait     00000001 
   74:  Call     80276EB4 ( *Var[0] )
   84:  Switch  *Var[0] 
   90:  	Case  >  00000000 
   9C:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
				Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000004 00000070 )
				Wait 1`
				Call     $Function_CheckChill ( ) %0 = immune to chill out
				If  *Var[0]  ==  00000001 
					Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
					Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
					Call     $Function_ChillTarget ( )
				EndIf
   DC:  	Default
   E4:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
  100:  		Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000003 00000030 )
  124:  EndSwitch
  12C:  Switch  *Var[0] 
  138:  	Case  >  00000000 
  144:  		ExecWait $Script_802A15D8 
  150:  	Default
  158:  		ExecWait $Script_802A17C4 
  164:  EndSwitch
  16C:  Return
  174:  End
}

#new:Script $Script_FJump_Super
{
    0:  ExecWait $Script_802A2184 
    C:  Call     PlayerTestEnemy 	( *Var[0] 00000080 00000000 00000000 00000001 00000000 )
   30:  If  *Var[0]  ==  00000006 
   40:  	ExecWait $Script_802A1FEC 
   4C:  	Return
   54:  EndIf
   %5C:  ExecWait $Script_802A26B4 
   68:  Wait     00000001 
   74:  Call     80276EB4 ( *Var[0] )
   84:  Switch  *Var[0] 
   90:  	Case  >  00000000 
   9C:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
				Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000006 00000070 )
				Wait 1`
				Call     $Function_CheckChill ( ) %0 = immune to chill out
				If  *Var[0]  ==  00000001 
					Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
					Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
					Call     $Function_ChillTarget ( )
				EndIf
   DC:  	Default
   E4:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
  100:  		Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000005 00000030 )
  124:  EndSwitch
  12C:  Switch  *Var[0] 
  138:  	Case  >  00000000 
  144:  		ExecWait $Script_802A15D8 
  150:  	Default
  158:  		ExecWait $Script_802A17C4 
  164:  EndSwitch
  16C:  Return
  174:  End
}

#new:Script $Script_FJump_Ultra
{
    0:  ExecWait $Script_802A2184 
    C:  Call     PlayerTestEnemy 	( *Var[0] 00000080 00000000 00000000 00000001 00000000 )
   30:  If  *Var[0]  ==  00000006 
   40:  	ExecWait $Script_802A1FEC 
   4C:  	Return
   54:  EndIf
   %5C:  ExecWait $Script_802A26B4 
   68:  Wait     00000001 
   74:  Call     80276EB4 ( *Var[0] )
   84:  Switch  *Var[0] 
   90:  	Case  >  00000000 
   9C:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
				Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000008 00000070 )
				Wait 1`
				Call     $Function_CheckChill ( ) %0 = immune to chill out
				If  *Var[0]  ==  00000001 
					Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
					Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
					Call     $Function_ChillTarget ( )
				EndIf
   DC:  	Default
   E4:  		Call     SetActorSounds ( 00000000 00000003 0000015A 00000000 )
  100:  		Call     PlayerDamageEnemy 	( *Var[0] 00000088 0000FFFF 00000000 00000007 00000030 )
  124:  EndSwitch
  12C:  Switch  *Var[0] 
  138:  	Case  >  00000000 
  144:  		ExecWait $Script_802A15D8 
  150:  	Default
  158:  		ExecWait $Script_802A17C4 
  164:  EndSwitch
  16C:  Return
  174:  End
}

%PADDING: 802A2FB8 to 802A2FC0 (0074AD88 to 0074AD90)
%00000000 00000000 

