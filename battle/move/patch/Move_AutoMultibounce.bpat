%Super Bounce
%Power bounce but stronger
%Same damage as power bounce because you can squeeze more bounces out of it
%You can bounce infinitely, but you need good timing to actually get more than normal amount of jumps out of this

%lets just get rid of most of the vanilla stuff
%#delete $Function_802A1000
#delete $???_802A10F0
#delete $Script_802A1130
#delete $Script_802A11AC
#delete $Script_802A1320
#delete $Script_802A1408
#delete $Script_802A14F0
#delete $Script_802A15D8
#delete $Script_802A17C4
#delete $Script_802A19B0
#delete $Script_802A1B9C
#delete $Script_802A1D88
#delete $Script_802A1FEC
#delete $Script_802A2184
#delete $Script_802A2230
#delete $Script_802A2384


%As it turns out, there really are shared functions between power bounce and automultibounce

@ $Function_802A1000
{
    0:  ADDIU     SP, SP, FFD8
    4:  LA        V1, 800DC070
    C:  SW        RA, 20 (SP)
   10:  SW        S1, 1C (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        V0, D8 (V1)
   1C:  COPY      S0, A0
   20:  LWC1      F2, 1C (V0)
   24:  LWC1      F12, 144 (V0)
   28:  LWC1      F14, 148 (V0)
   2C:  LWC1      F4, 14C (V0)
   30:  LWC1      F6, 18 (V0)
   34:  LWC1      F0, 20 (V0)
   38:  MFC1      A2, F4
   3C:  MFC1      A3, F6
   40:  COPY      S1, V1
   44:  SWC1      F2, 10 (SP)
   48:  JAL       ~Func:dist3D
   4C:  SWC1      F0, 14 (SP)
   50:  LIF       F2, 15.0
   58:  NOP
   5C:  MUL.S     F0, F0, F2
   60:  NOP
   64:  LIF       F2, 100.0
   6C:  NOP
   70:  DIV.S     F0, F0, F2
   74:  TRUNC.W.S F8, F0
   78:  MFC1      V0, F8
   7C:  NOP
   80:  SW        V0, 84 (S0)
   84:  SLTI      V0, V0, 15
   88:  BNE       V0, R0, .o94
   8C:  LI        V0, 14
   90:  SW        V0, 84 (S0)
        .o94
   94:  LB        V0, 83 (S1)
   98:  BEQ       V0, R0, .oB8
   9C:  NOP
   A0:  LW        V0, 84 (S0)
   A4:  SLTI      V0, V0, 6
   A8:  BEQ       V0, R0, .oCC
   AC:  LI        V0, 6
   B0:  BEQ       R0, R0, .oCC
   B4:  SW        V0, 84 (S0)
        .oB8
   B8:  LW        V0, 84 (S0)
   BC:  SLTI      V0, V0, C
   C0:  BEQ       V0, R0, .oCC
   C4:  LI        V0, C
   C8:  SW        V0, 84 (S0)
        .oCC
   CC:  LW        RA, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}

%Super Bounce has no limit!
%So I'll just remove the cap (or just make it 99 bounces)
#new:Function $Function_GetHitChance
{
 0:  ADDIU     SP, SP, FFE0
 4:  SW        S2, 18 (SP)
 8:  DADDU     S2, A0, R0
 C:  SW        RA, 1C (SP)
10:  SW        S1, 14 (SP)
14:  SW        S0, 10 (SP)
18:  JAL       80269D6C %~Func:get_actor
1C:  LW        A0, 148 (S2)
20:  JAL       80269D6C %~Func:get_actor
24:  LH        A0, 428 (V0)
28:  ADDIU     V1, R0, 63
2C:  SW        V1, 84 (S2)
30:  LW        V0, 8 (V0)
34:  LBU       S1, 1E (V0)  % load enemy PB param (cap mult, in vanilla)
38:  JAL       800E9D48		%???
3C:  DADDU     A0, R0, R0
40:  ADDIU     V1, R0, 63    % load desired global max cap
44:  SUB       V1, S1, V1   % if enemy cap is less than global max, don't change
%48:  BLEZ      V1, .DoNotChangeCap
%4C:  NOP
50:  ADDIU     S1, R0, 63    % else, set to global max cap
     .DoNotChangeCap
54:  LIA       S0, $IntTable_StartingJumpCount
5C:  LW        V1, 0 (S0)   % load current jump counter (1 initially)
60:  ADDIU     V1, V1, 1    % add one to jump counter
64:  SLT       V0, V1, S1   % if jump counter < max, don't cap
68:  BNEL      V0, R0, .DoNotCap
6C:  NOP
70:  ADDIU     V1, R0, 1    % else, set jump counter to 1 for next time just in case
%74:  SW        R0, 84 (S2)  % and set jumps before cap to 0
	ORI			V1, R0, 2	%Perpetually set the jumps before cap amount to a value above 0
	SW			V1, 84 (S2)
     .DoNotCap
78:  SW        V1, 0 (S0)   % store new jump count
7C:  LW        RA, 1C (SP)
80:  LW        S2, 18 (SP)
84:  LW        S1, 14 (SP)
88:  LW        S0, 10 (SP)
8C:  ADDIU     V0, R0, 2
90:  JR        RA
94:  ADDIU     SP, SP, 20
}

%More useful function than one above that uses SetVariable
#new:Function $GetHitValue
{
PUSH	RA, S0, S1, S2
DADDU	S0, A0, R0
%Find owner (Mario)
JAL       80269D6C %~Func:get_actor
LW        A0, 148 (S0)
%Find target
JAL       80269D6C %~Func:get_actor
LH        A0, 428 (V0)
LBU       S1, 1E (V0)  % load enemy PB param (cap mult, in vanilla)
%
ADDI	A2, S1, 0
LW		V0, C (S0)
JAL		~Func:set_variable
LW		A1, 0 (S0)
POP		RA, S0, S1, S2
JR		RA
ADDIU	V0, R0, 2
}

#new:IntTable $IntTable_StartingJumpCount
{
00000001
}

#new:Function $Function_InitializeHitCounter
{
    0:  SAW       R0, $End[0]
    8:  JR        RA
    C:  LI        V0, 2
}

#new:Function $Function_IncrementHitCounter
{
    0:  LA        V1, $End[0]
    8:  LW        V0, 0 (V1)
    C:  ADDIU     V0, V0, 1
   10:  SW        V0, 0 (V1)
   14:  JR        RA
   18:  LI        V0, 2
}

#new:Function $Function_StoreHitCountRecord
{
    0:  LA        A1, 8010F290
    8:  LA        A0, $End[0]
   10:  LHU       V0, 2A0 (A1)
   14:  LW        V1, 0 (A0)
   18:  SLT       V0, V0, V1
   1C:  BEQ       V0, R0, .o2C
   20:  NOP
   24:  LHU       V0, 2 (A0)
   28:  SH        V0, 2A0 (A1)
        .o2C
   2C:  JR        RA
   30:  LI        V0, 2
}


#new:Script $Script_802A1240
{
    0:  Call  SetAnimation  ( .Actor:Player 00000000 00010006 )
   18:  Loop  00000005
   24:  	Call  CheckButtonPress  ( ~Flags:Buttons:A *Var0 )
   38:  	If  *Var0  ==  .True
   48:  		BreakLoop
   50:  	EndIf
   58:  	Wait  1`
   64:  EndLoop
   6C:  Return
   74:  End
}

#new:Script $Script_802A12BC
{
    0:  Call  SetGoalToFirstTarget  ( .Actor:Self )
   10:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   2C:  Sub   *Var0  00000028
   3C:  Call  InitTargetIterator ( )
   48:  Call  SetGoalToTarget   ( .Actor:Player )
   58:  Call  GetGoalPos        ( .Actor:Player *Var3 *Var4 *Var5 )
   74:  Sub   *Var3  *Fixed[70.0]
   84:  If  *Var0  <  *Var3
   94:  	Set   *Var3  *Var0
   A4:  EndIf
   AC:  Call  SetGoalPos    ( .Actor:Player *Var3 *Var4 *Var5 )
   C8:  Call  UseBattleCamPreset        ( 0000001A )
   D8:  Call  SetActorSpeed ( .Actor:Player *Fixed[5.0] )
   EC:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
  104:  Call  CancelablePlayerRunToGoal ( 00000000 *Var0 )
  118:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  130:  Call  SetGoalToTarget   ( .Actor:Player )
  140:  ExecWait  $Script_802A1240
  14C:  Call  SetAnimation  ( .Actor:Player 00000000 00010006 )
  164:  Return
  16C:  End
}

#new:Script $Script_802A1430
{
    0:  Call  SetGoalToTarget   ( .Actor:Player )
   10:  Call  GetGoalPos        ( .Actor:Player *Var6 *Var7 *Var8 )
   2C:  Call  GetActorPos       ( .Actor:Player *Var7 *Var8 *Var9 )
   48:  If  *Var6  >  *Var7
   58:  	Sub   *Var6  *Var7
   68:  Else
   70:  	Sub   *Var7  *Var6
   80:  	Set   *Var6  *Var7
   90:  EndIf
   98:  Sub   *Var6  00000014
   A8:  DivF  *Var6  *Fixed[10.588867]
   B8:  AddF  *Var6  0000000F
   C8:  Set   *VarA  *Var6
   D8:  Return
   E0:  End
}

#new:Script $Script_802A16E8
{
    0:  Call  80276EFC ( )
    C:  Call  SetBattleFlagBits ( 00000100 .False )
   20:  Call  UseBattleCamPreset    ( 00000003 )
   30:  Call  802693F0 ( )
   3C:  Call  SetGoalToHome ( .Actor:Player )
   4C:  Call  GetGoalPos    ( .Actor:Player *Var0 *Var1 *Var2 )
   68:  Add   *Var0  00000028
   78:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00010009 )
   98:  Call  SetActorJumpGravity   ( .Actor:Player *Fixed[1.3] )
   AC:  Call  SetGoalPos    ( .Actor:Player *Var0 *Var1 *Var2 )
   C8:  Call  $Function_802A1000 ( )
   D4:  Call  80273444      ( *Var0 00000000 00000000 )
   EC:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  104:  Wait  1`
  110:  Call  AddGoalPos    ( .Actor:Player FFFFFFEC 00000000 00000000 )
  12C:  Call  80273444      ( 00000006 00000000 00000002 )
  144:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  15C:  Wait  5`
  168:  Call  EnablePlayerBlur  ( FFFFFFFF )
  178:  Call  SetGoalToHome ( .Actor:Player )
  188:  Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
  19C:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
  1B4:  Call  PlayerRunToGoal   ( 00000000 )
  1C4:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  1DC:  Return
  1E4:  End
}

#new:Script $Script_802A1AC0
{
    0:  Call  80276EFC ( )
    C:  Call  SetBattleFlagBits ( 00000100 .False )
   20:  Call  UseBattleCamPreset    ( 0000001D )
   30:  Call  802693F0 ( )
   3C:  Call  GetActorPos   ( .Actor:Player *Var0 *Var1 *Var2 )
   58:  Sub   *Var0  00000028
   68:  Set   *Var1  00000000
   78:  Call  SetGoalPos    ( .Actor:Player *Var0 *Var1 *Var2 )
   94:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00010009 )
   B4:  Call  SetActorJumpGravity   ( .Actor:Player *Fixed[1.0] )
   C8:  Call  $Function_802A1000 ( )
   D4:  Call  80273444      ( *Var0 00000000 00000000 )
   EC:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  104:  Wait  1`
  110:  Call  AddGoalPos    ( .Actor:Player FFFFFFEC 00000000 00000000 )
  12C:  Call  80273444      ( 00000006 00000000 00000002 )
  144:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  15C:  Wait  2`
  168:  Call  EnablePlayerBlur  ( FFFFFFFF )
  178:  Call  SetGoalToHome ( .Actor:Player )
  188:  Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
  19C:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
  1B4:  Call  PlayerRunToGoal   ( 00000000 )
  1C4:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  1DC:  Return
  1E4:  End
}

%Miss jump
#new:Script $Script_802A20FC
{
    0:  Call  SetJumpAnimations ( .Actor:Player 00000000 00000000 00000000 0001000C )
   20:  Call  PlayerLandJump ( )
   2C:  Call  SetAnimation      ( .Actor:Player 00000000 0001000C )
   44:  Wait  2`
   50:  ChildThread
   58:  	Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[1.0] )
   74:  EndChildThread
   7C:  Call  PlaySoundAtActor  ( .Actor:Player 00000162 )
   90:  Call  SetAnimation      ( .Actor:Player 00000000 00010030 )
   A8:  Wait  10`
   B4:  Call  SetAnimation      ( .Actor:Player 00000000 00010031 )
   CC:  Wait  20`
   D8:  Call  SetBattleFlagBits ( 00000100 .False )
   EC:  Call  UseBattleCamPreset    ( 00000003 )
   FC:  Call  802693F0 ( )
  108:  Call  EnablePlayerBlur  ( FFFFFFFF )
  118:  Call  80276EFC ( )
  124:  Call  SetGoalToHome     ( .Actor:Player )
  134:  Call  SetActorSpeed     ( .Actor:Player *Fixed[8.0] )
  148:  Call  SetAnimation      ( .Actor:Player 00000000 00010005 )
  160:  Call  PlayerRunToGoal   ( 00000000 )
  170:  Call  SetAnimation      ( .Actor:Player 00000000 00010002 )
  188:  Return
  190:  End
}

#new:Unknown $???_802A2710
{
	00000007 00000006 00000005 00000004 00000003 00000002 00000001 00000000
}

#new:Unknown $???_802A2730
{
	000000C8
}

@ $Script_UseMove0
{
		Call 	$Function_SetArbitraryWord ( 00000001 $IsPowerOrMegaBounce )
    0:  Set  *Flag[0A]  00000000 
   10:  Call     802694A4 ( 00000001 )
   20:  Call     $Function_InitializeHitCounter ( )
   2C:  Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
   44:  Switch  *Var[1] 
   50:  	Case  ==  00000000 
   5C:  		Set  *Var[C]  00000002 % added + 1 
   6C:  		ExecWait  $Script_802A26A8
   78:  	Case  ==  00000001 
   84:  		Set  *Var[C]  00000003 % added + 1 
   94:  		ExecWait  $Script_802A2EC0
   A0:  	Case  ==  00000002 
   AC:  		Set  *Var[C]  00000004 % added + 1
   BC:  		ExecWait  $Script_802A372C
   C8:  EndSwitch
		Call     $Function_StoreHitCountRecord ( )
   DC:  Return
   E4:  End
}

%Need to choose our variables carefully
%This uses a lot of variables

@ $Script_802A26A8
{
    0:  Call  LoadActionCommand ( .ActionCommand:Jump )
   10:  Call  802A9000 ( )
   1C:  Call  8026919C  ( $???_802A2710 )
   2C:  ExecWait  $Script_802A12BC
   38:  ExecWait  $Script_802A1430
   44:  Call  802A9120  ( *VarA 00000001 )
   58:  Call  UseBattleCamPreset    ( 00000022 )
   68:  Call  SetGoalToTarget   ( .Actor:Player )
   78:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00030000 )
   98:  Call  80274A18  ( *VarA 00000000 )																	%Jump?
   AC:  Call  PlayerTestEnemy   ( *Var0 ~Flags:DamageType:Jump 00000000 00000000 00000001 00000000 )		%it only makes sense to test when you are about to finish jump, so jump function must be above this point
   D0:  If  *Var0  ==  .HitResult:Miss % 6
   E0:  	ExecWait  $Script_802A20FC
   EC:  	Return
   F4:  EndIf
   FC:  Wait  1`
  108:  Call  DidActionSucceed  ( *Var0 )
  118:  Switch  *Var0
  124:  	Case  >  .False
  130:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  14C:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000050 )
  170:  	Default
  178:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  194:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000030 )
  1B8:  EndSwitch
  1C0:  Switch  *Var0
  1CC:  	CaseOR  ==  .HitResult:Hit % 0
  1D8:  	CaseOR  ==  00000002 % 2
  1E4:  		ExecWait  $Script_802A1AC0
  1F0:  		Return
  1F8:  	EndCaseGroup
  200:  	CaseOR  ==  00000001 % 1
  20C:  	CaseOR  ==  00000003 % 3
  218:  	EndCaseGroup
  220:  EndSwitch
  228:  ChildThread
  230:  	Call  UseBattleCamPreset    ( 0000001B )
  240:  	Wait  5`
  24C:  	Call  SetGoalToTarget       ( .Actor:Player )
  25C:  	Call  UseBattleCamPreset    ( 00000023 )
  26C:  EndChildThread
  274:  Call  80269524  ( *VarE )
  284:  Call  $Function_IncrementHitCounter ( )
  290:  Set   *VarD  00000000
  2A0:  Set   *VarF  00000000
  2B0:  Set   *Flag[00]  .False
		Call  $GetHitValue ( *Var9 )	%Load in enemy hit value for reference
		If *Var9 > 3
			Set   *VarE  00000002	%Counter
		Else
			Set   *VarE  00000001	%Counter
		EndIf
		Set   *VarB  00000000	%Timer helper value
		%Start of infinite hits
  2C0:  Label  A
  2CC:  ChildThread
  2D4:  	Call  UseBattleCamPreset    ( 0000001B )
  2E4:  	Wait  5`
  2F0:  	Call  SetGoalToTarget       ( .Actor:Player )
  300:  	Call  UseBattleCamPreset    ( 00000023 )
  310:  EndChildThread
  318:  Call  CloseActionCommandInfo ( )
  324:  Call  8026919C  ( $???_802A2710 )
  334:  Call  LoadActionCommand ( .ActionCommand:Jump )
  344:  Call  802A9000 ( )
		%Action command value needs to be set up too :P
  350:  Set   *VarA  00000018
		Set *VarA 		00000016
		If *Var9 > 3
			Mul *VarA 		2
		Else
			%Nothing
		EndIf
		Div *VarA 		*VarE
		Add *VarA 		00000002		%Hopefully 2 frame jumps don't crash
  360:  Switch  *VarF
  36C:  	Case  ==  00000000
  378:  		Call  802A9120  ( *VarA 00000001 )
  38C:  	Case  ==  00000001
  398:  		Call  802A9120  ( *VarA 00000002 )
  3AC:  	Case  ==  00000002
  3B8:  		Call  802A9120  ( *VarA 00000003 )
  3CC:  	Case  ==  00000003
  3D8:  		Call  802A9120  ( *VarA 00000004 )
  3EC:  	Default
  3F4:  		Call  802A9120  ( *VarA 00000005 )
  408:  EndSwitch
  410:  Sub   *VarD  00000001			%each hit, varD goes down by 1
  420:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 0001000C )
  440:  Call  SetGoalToTarget   ( .Actor:Player )
  450:  If  *VarF  ==  00000000
			Set *VarB 		00000016
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000002
  460:  	Call  80274A18  ( *VarB 00000003 ) %18
  474:  Else
			Set *VarB 		00000016
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000002
  47C:  	Call  80274A18  ( *VarB 00000004 ) %18
  490:  EndIf
  498:  Call  SetCommandAutoSuccess ( *Var1 )
  4A8:  If  *Var1  ==  00000001
  4B8:  	If  *VarF  >=  00000003
  4C8:  		Set   *Flag[00]  .True
  4D8:  	EndIf
  4E0:  EndIf
  4E8:  Call  $Function_GetHitChance ( )
  4F4:  If  *VarF  >=  *Var0
  504:  	Set   *Flag[00]  .True
  514:  EndIf
  51C:  Wait  1`
  528:  Call  DidActionSucceed  ( *Var0 )
  538:  Switch  *Var0
  544:  	Case  >  .False
  550:  		If  *Flag[00]  ==  .False
  560:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  57C:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000040 )		%Var D = decrement counter, Var C = damage
  5A4:  		Else
  5AC:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  5C8:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 000000E0 )
  5F0:  		EndIf
  5F8:  	Default
  600:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  61C:  		Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000020 )
  644:  EndSwitch
  64C:  Switch  *VarF
  658:  	Case  ==  00000000
  664:  		Call  PlaySoundAtActor  ( .Actor:Player 00000235 )
  678:  	Case  ==  00000001
  684:  		Call  PlaySoundAtActor  ( .Actor:Player 00000236 )
  698:  	Case  ==  00000002
  6A4:  		Call  PlaySoundAtActor  ( .Actor:Player 00000237 )
  6B8:  	Case  ==  00000003
  6C4:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  6D8:  	Default
  6E0:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  6F4:  EndSwitch
  6FC:  Call  80269550  ( *VarE )
  70C:  Switch  *Var0
  718:  	CaseOR  ==  .HitResult:Hit % 0
  724:  	CaseOR  ==  00000002 % 2
  730:  		If  *Flag[00]  ==  .True
  740:  			ExecWait  $Script_802A16E8
  74C:  			Return
  754:  		EndIf
  75C:  		ExecWait  $Script_802A1AC0
  768:  		Return
  770:  	EndCaseGroup
  778:  	CaseOR  ==  00000001 % 1
  784:  	CaseOR  ==  00000003 % 3
  790:  		If  *Flag[00]  ==  .True
  7A0:  			ExecWait  $Script_802A16E8
  7AC:  			Return
  7B4:  		EndIf
  7BC:  	EndCaseGroup
  7C4:  EndSwitch
  7CC:  Add   *VarF  00000001
  7DC:  Call  $Function_IncrementHitCounter ( )
		Add   *VarE  00000001
  7E8:  Goto  A
  7F4:  Return
  7FC:  End
}

@ $Script_802A2EC0
{
    0:  Call  LoadActionCommand ( .ActionCommand:Jump )
   10:  Call  802A9000 ( )
   1C:  Call  8026919C  ( $???_802A2710 )
   2C:  ExecWait  $Script_802A12BC
   38:  ExecWait  $Script_802A1430
   44:  Call  802A9120  ( *VarA 00000001 )
   58:  Call  UseBattleCamPreset    ( 00000022 )
   68:  Call  SetGoalToTarget   ( .Actor:Player )
   78:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00030000 )
   98:  Call  80274A18  ( *VarA 00000000 )
   AC:  Call  PlayerTestEnemy   ( *Var0 ~Flags:DamageType:Jump 00000000 00000000 00000001 00000000 )
   D0:  If  *Var0  ==  .HitResult:Miss % 6
   E0:  	ExecWait  $Script_802A20FC
   EC:  	Return
   F4:  EndIf
   FC:  Wait  1`
  108:  Call  DidActionSucceed  ( *Var0 )
  118:  Switch  *Var0
  124:  	Case  >  .False
  130:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015B 00000000 )
  14C:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000050 )
  170:  	Default
  178:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015B 00000000 )
  194:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000030 )
  1B8:  EndSwitch
  1C0:  Switch  *Var0
  1CC:  	CaseOR  ==  .HitResult:Hit % 0
  1D8:  	CaseOR  ==  00000002 % 2
  1E4:  		ExecWait  $Script_802A1AC0
  1F0:  		Return
  1F8:  	EndCaseGroup
  200:  	CaseOR  ==  00000001 % 1
  20C:  	CaseOR  ==  00000003 % 3
  218:  	EndCaseGroup
  220:  EndSwitch
  228:  Call  80269524  ( *VarE )
  238:  Call  $Function_IncrementHitCounter ( )
  244:  Set   *VarD  00000000
  254:  Set   *VarF  00000000
  264:  Set   *Flag[00]  .False
		Call  $GetHitValue ( *Var9 )	%Load in enemy hit value for reference
		If *Var9 > 3
			Set   *VarE  00000002	%Counter
		Else
			Set   *VarE  00000001	%Counter
		EndIf
		Set   *VarB  00000000	%Timer helper value
		%Start of infinite hits
  274:  Label  A
  280:  ChildThread
  288:  	Call  UseBattleCamPreset    ( 0000001B )
  298:  	Wait  5`
  2A4:  	Call  SetGoalToTarget       ( .Actor:Player )
  2B4:  	Call  UseBattleCamPreset    ( 00000023 )
  2C4:  EndChildThread
  2CC:  Call  CloseActionCommandInfo ( )
  2D8:  Call  8026919C  ( $???_802A2710 )
  2E8:  Call  LoadActionCommand ( .ActionCommand:Jump )
  2F8:  Call  802A9000 ( )
  304:  Set   *VarA  00000025
		Set *VarA 		00000010
		If *Var9 > 3
			Mul *VarA 		2
		Else
			%Nothing
		EndIf
		Div *VarA 		*VarE
		Add *VarA 		00000015
  314:  Switch  *VarF
  320:  	Case  ==  00000000
  32C:  		Call  802A9120  ( *VarA 00000001 )
  340:  	Case  ==  00000001
  34C:  		Call  802A9120  ( *VarA 00000002 )
  360:  	Case  ==  00000002
  36C:  		Call  802A9120  ( *VarA 00000003 )
  380:  	Case  ==  00000003
  38C:  		Call  802A9120  ( *VarA 00000004 )
  3A0:  	Default
  3A8:  		Call  802A9120  ( *VarA 00000005 )
  3BC:  EndSwitch
  3C4:  Sub   *VarD  00000001
  3D4:  Call  SetGoalToTarget   ( .Actor:Player )
  3E4:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 0001000A 0001000B )
  404:  Call  EnablePlayerBlur  ( 00000001 )
  414:  If  *VarF  ==  00000000
			%Super jump uses two separate functions, I'll try setting the first one
			Set *VarB 		00000010
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000004
  424:  	Call  802752AC  ( *VarB 00000003 )	%14
  438:  	Wait  7`
  444:  	Call  802752AC  ( 00000003 00000006 )
  458:  Else
			%Super jump uses two separate functions, I'll try setting the first one
			Set *VarB 		00000010
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000004
  460:  	Call  802752AC  ( *VarB 00000004 )
  474:  	Wait  7`
  480:  	Call  802752AC  ( 00000003 00000005 )
  494:  EndIf
  49C:  Call  EnablePlayerBlur      ( 00000000 )
  4AC:  Call  SetCommandAutoSuccess ( *Var1 )
  4BC:  If  *Var1  ==  00000001
  4CC:  	If  *VarF  >  00000003
  4DC:  		Set   *Flag[00]  .True
  4EC:  	EndIf
  4F4:  EndIf
  4FC:  Call  $Function_GetHitChance ( )
  508:  If  *VarF  >  *Var0
  518:  	Set   *Flag[00]  .True
  528:  EndIf
  530:  Wait  1`
  53C:  Call  DidActionSucceed  ( *Var0 )
  54C:  Switch  *Var0
  558:  	Case  >  .False
  564:  		If  *Flag[00]  ==  .False
  574:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015B 00000000 )
  590:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000040 )
  5B8:  		Else
  5C0:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015B 00000000 )
  5DC:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 000000E0 )
  604:  		EndIf
  60C:  	Default
  614:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015B 00000000 )
  630:  		Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000020 )
  658:  EndSwitch
  660:  Switch  *VarF
  66C:  	Case  ==  00000000
  678:  		Call  PlaySoundAtActor  ( .Actor:Player 00000235 )
  68C:  	Case  ==  00000001
  698:  		Call  PlaySoundAtActor  ( .Actor:Player 00000236 )
  6AC:  	Case  ==  00000002
  6B8:  		Call  PlaySoundAtActor  ( .Actor:Player 00000237 )
  6CC:  	Case  ==  00000003
  6D8:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  6EC:  	Default
  6F4:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  708:  EndSwitch
  710:  Call  80269550  ( *VarE )
  720:  Switch  *Var0
  72C:  	CaseOR  ==  .HitResult:Hit % 0
  738:  	CaseOR  ==  00000002 % 2
  744:  		If  *Flag[00]  ==  .True
  754:  			ExecWait  $Script_802A16E8
  760:  			Return
  768:  		EndIf
  770:  		ExecWait  $Script_802A1AC0
  77C:  		Return
  784:  	EndCaseGroup
  78C:  	CaseOR  ==  00000001 % 1
  798:  	CaseOR  ==  00000003 % 3
  7A4:  		If  *Flag[00]  ==  .True
  7B4:  			ExecWait  $Script_802A16E8
  7C0:  			Return
  7C8:  		EndIf
  7D0:  	EndCaseGroup
  7D8:  EndSwitch
  7E0:  Add   *VarF  00000001
  7F0:  Call  $Function_IncrementHitCounter ( )
		Add   *VarE  00000001
  7FC:  Goto  A
  808:  Return
  810:  End
}

@ $Script_802A372C
{
    0:  Call  LoadActionCommand ( .ActionCommand:Jump )
   10:  Call  802A9000 ( )
   1C:  Call  8026919C  ( $???_802A2710 )
   2C:  ExecWait  $Script_802A12BC
   38:  ExecWait  $Script_802A1430
   44:  Call  802A9120  ( *VarA 00000001 )
   58:  Call  UseBattleCamPreset    ( 00000022 )
   68:  Call  SetGoalToTarget   ( .Actor:Player )
   78:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00030000 )
   98:  Call  80274A18  ( *VarA 00000000 )
   AC:  Call  PlayerTestEnemy   ( *Var0 ~Flags:DamageType:Jump 00000000 00000000 00000001 00000000 )
   D0:  If  *Var0  ==  .HitResult:Miss % 6
   E0:  	ExecWait  $Script_802A20FC
   EC:  	Return
   F4:  EndIf
   FC:  Wait  1`
  108:  Call  DidActionSucceed  ( *Var0 )
  118:  Switch  *Var0
  124:  	Case  >  .False
  130:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015C 00000000 )
  14C:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000050 )
  170:  	Default
  178:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015C 00000000 )
  194:  		Call  PlayerDamageEnemy ( *Var0 00100080 00000000 00000000 *VarC 00000030 )
  1B8:  EndSwitch
  1C0:  Switch  *Var0
  1CC:  	CaseOR  ==  .HitResult:Hit % 0
  1D8:  	CaseOR  ==  00000002 % 2
  1E4:  		ExecWait  $Script_802A1AC0
  1F0:  		Return
  1F8:  	EndCaseGroup
  200:  	CaseOR  ==  00000001 % 1
  20C:  	CaseOR  ==  00000003 % 3
  218:  	EndCaseGroup
  220:  EndSwitch
  228:  Call  80269524  ( *VarE )
  238:  Call  $Function_IncrementHitCounter ( )
  244:  Set   *VarD  00000000
  254:  Set   *VarF  00000000
  264:  Set   *Flag[00]  .False
		Call  $GetHitValue ( *Var9 )	%Load in enemy hit value for reference
		If *Var9 > 3
			Set   *VarE  00000002	%Counter
		Else
			Set   *VarE  00000001	%Counter
		EndIf
		Set   *VarB  00000000	%Timer helper value
		%Start of infinite hits
  274:  Label  A
  280:  ChildThread
  288:  	Call  UseBattleCamPreset    ( 0000001C )
  298:  	Wait  5`
  2A4:  	Call  SetGoalToTarget       ( .Actor:Player )
  2B4:  	Call  UseBattleCamPreset    ( 00000023 )
  2C4:  EndChildThread
  2CC:  Call  CloseActionCommandInfo ( )
  2D8:  Call  8026919C  ( $???_802A2710 )
  2E8:  Call  LoadActionCommand ( .ActionCommand:Jump )
  2F8:  Call  802A9000 ( )
  304:  Set   *VarA  00000019
		Set *VarA 		00000017
		If *Var9 > 3
			Mul *VarA 		2
		Else
			%Nothing
		EndIf
		Div *VarA 		*VarE
		Add *VarA 		00000002
  314:  Switch  *VarF
  320:  	Case  ==  00000000
  32C:  		Call  802A9120  ( *VarA 00000001 )
  340:  	Case  ==  00000001
  34C:  		Call  802A9120  ( *VarA 00000002 )
  360:  	Case  ==  00000002
  36C:  		Call  802A9120  ( *VarA 00000003 )
  380:  	Case  ==  00000003
  38C:  		Call  802A9120  ( *VarA 00000004 )
  3A0:  	Default
  3A8:  		Call  802A9120  ( *VarA 00000005 )
  3BC:  EndSwitch
  3C4:  Sub   *VarD  00000001
  3D4:  Call  SetGoalToTarget   ( .Actor:Player )
  3E4:  Call  EnablePlayerBlur  ( 00000001 )
  3F4:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010007 0001000C )
  414:  If  *VarF  ==  00000000
			Set *VarB 		00000017
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000002
  424:  	Call  80275F00  ( *VarB 00000002 )	%19
  438:  Else
			Set *VarB 		00000017
			If *Var9 > 3
				Mul *VarB 		2
			Else
				%Nothing
			EndIf
			Div *VarB *VarE
			Add *VarB 		00000002
  440:  	Call  80275F00  ( *VarB 00000004 )	%19
  454:  EndIf
  45C:  Call  EnablePlayerBlur      ( 00000000 )
  46C:  Call  SetCommandAutoSuccess ( *Var1 )
  47C:  If  *Var1  ==  00000001
  48C:  	If  *VarF  >  00000003
  49C:  		Set   *Flag[00]  .True
  4AC:  	EndIf
  4B4:  EndIf
  4BC:  Call  $Function_GetHitChance ( )
  4C8:  If  *VarF  >  *Var0
  4D8:  	Set   *Flag[00]  .True
  4E8:  EndIf
  4F0:  Wait  1`
  4FC:  Call  DidActionSucceed  ( *Var0 )
  50C:  Switch  *Var0
  518:  	Case  >  .False
  524:  		If  *Flag[00]  ==  .False
  534:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015C 00000000 )
  550:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000040 )
  578:  		Else
  580:  			Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015C 00000000 )
  59C:  			Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 000000E0 )
  5C4:  		EndIf
  5CC:  	Default
  5D4:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015C 00000000 )
  5F0:  		Call  PlayerPowerBounceEnemy    ( *Var0 00100080 00000000 00000000 *VarC *VarD 00000020 )
  618:  EndSwitch
  620:  Switch  *VarF
  62C:  	Case  ==  00000000
  638:  		Call  PlaySoundAtActor  ( .Actor:Player 00000235 )
  64C:  	Case  ==  00000001
  658:  		Call  PlaySoundAtActor  ( .Actor:Player 00000236 )
  66C:  	Case  ==  00000002
  678:  		Call  PlaySoundAtActor  ( .Actor:Player 00000237 )
  68C:  	Case  ==  00000003
  698:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  6AC:  	Default
  6B4:  		Call  PlaySoundAtActor  ( .Actor:Player 00000238 )
  6C8:  EndSwitch
  6D0:  Call  80269550  ( *VarE )
  6E0:  Switch  *Var0
  6EC:  	CaseOR  ==  .HitResult:Hit % 0
  6F8:  	CaseOR  ==  00000002 % 2
  704:  		If  *Flag[00]  ==  .True
  714:  			ExecWait  $Script_802A16E8
  720:  			Return
  728:  		EndIf
  730:  		ExecWait  $Script_802A1AC0
  73C:  		Return
  744:  	EndCaseGroup
  74C:  	CaseOR  ==  00000001 % 1
  758:  	CaseOR  ==  00000003 % 3
  764:  		If  *Flag[00]  ==  .True
  774:  			ExecWait  $Script_802A16E8
  780:  			Return
  788:  		EndIf
  790:  	EndCaseGroup
  798:  EndSwitch
  7A0:  Add   *VarF  00000001
  7B0:  Call  $Function_IncrementHitCounter ( )
		Add   *VarE  00000001
  7BC:  Goto  A
  7C8:  Return
  7D0:  End
}