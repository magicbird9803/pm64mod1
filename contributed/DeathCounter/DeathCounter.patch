
/%
    Stores a death counter in a pair of global bytes and
    provides functions for easy retrieval.
%/

% set this value to change which global byte pair the death counter is saved to
% this number should be divisible by two!
#define .DeathCounterBytesStart 4

% use this function to get the death count in asm
#export:Function $get_death_count
{
    LI      V0, 800DBD70
    ADDIU   V0, V0, .DeathCounterBytesStart
    JR      RA
    LHU     V0, 0 (V0)
}

% use this function to get the death count in scripts:
% Call $GetDeathCount ( *Var0 )
#export:Function $GetDeathCount % ( out scriptvar )
{
    PUSH    RA
    LW      V0, C (A0)
    LW      A1, 0 (V0)
    LI      V0, 800DBD70
    ADDIU   V0, V0, .DeathCounterBytesStart
    JAL     ~Func:set_variable
    LHU     A2, 0 (V0)
    LI      V0, 2 % DONE for script API call
    JPOP    RA
}

#reserve 4000 $DeathIOBuffer

#export:Function $IncrementDeathCounter
{
    PUSH    RA, S0, S1, S2
    #DEF    S0, *Buffer
    #DEF    S1, *Status
    #DEF    S2, *SaveSlot
    
    LA      V0, 8007419C % game_status
    LW      *Status, 0 (V0)
    LBU     *SaveSlot, 166 (*Status)
    JAL     ~Func:fio_fetch_saved_file_info
    COPY    A0, *SaveSlot
    LA      *Buffer, $DeathIOBuffer
    COPY    A1, *Buffer
    SLL     A0, *SaveSlot, 3
    LTW     A0, A0 (8009BA30)
    JAL     ~Func:fio_read_flash
    LI      A2, 4000
    
    LA      A1, 800745D0 % default filename string
    JAL     ~Func:strcmp
    COPY    A0, *Buffer
    
    BNE     V0, R0, .Done
    NOP     % failed
    
    % update death counter
	ADDIU	V1, *Buffer, .DeathCounterBytesStart
    LHU     V0, 10B0 (V1) % game bytes start at offset 10B0
    ADDIU   V0, V0, 1
    SH      V0, 10B0 (V1)

    % increment saveID
    LW      V0, 168 (*Status)
    ADDIU   V0, V0, 1
    SW      V0, 3C (*Buffer)
    
    SW      *SaveSlot, 38 (*Buffer) % save slot
    #UNDEF  S2
    
    % recalculate checksums
    SW      R0, 30 (*Buffer)
    LI      V0, FFFF
    SW      V0, 34 (*Buffer)
    JAL     ~Func:fio_calc_file_checksum
    COPY    A0, *Buffer
    SW      V0, 30 (*Buffer)
    NOR     V0, R0, V0
    SW      V0, 34 (*Buffer)

    % save updated file
    LA      S2, 8009BA80
    LW      A0, 0 (S2)
    JAL     ~Func:fio_erase_flash
    NOP
    LW      A0, 0 (S2)
    COPY    A1, *Buffer
    JAL     ~Func:fio_write_flash
    LI      A2, 4000

    .Done
    #UNDEF  All
    LI      V0, 2 % DONE for script API call
    JPOP    RA, S0, S1, S2
}