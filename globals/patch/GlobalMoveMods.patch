%this file has most of the code for changing badges and a lot of other stuff that modify dealing damage


%Berserker only: mario can pierce defense (by ignoring it)

%1A0224 --> 80271944
%#new:Function $Function_calc_player_damage_enemy
%  604:  JAL       ~Func:get_defense
%  608:  COPY      A0, S3

@Hook 1A0828
{
	PUSH	A0, A1
	LAB		A0, 800DBE00
	LI		A1, 12`
	BEQ		A0, A1 .skip
	NOP
	LI		A1, 15`
	BEQ		A0, A1 .skip
	NOP
	.normal
	POP		A0, A1
	JAL     802662BC %~Func:get_defense
	COPY    A0, S3	
	J		80271F50
	NOP
	.skip
	POP		A0, A1
	J		80271F50
	ORI		V0, R0, 0`
}



%de-sus-ify body slam

%need to add a weight check

@Hook 1AD5D8
{
	PUSH	  A0, A1, A2, S3
	BEQ       V0, R0, .yesjump
	LI        V0, A
	%what needs to be done here? load pointer (8 + S3) then load 1D + (pointer) to get spin smash level
	LAB		  A0, 8010F2BD
	LW		  A1, 8 (S3)
	LB	      A1, 1D (A1)
	ADDI 	  A0, A0, 1
	BLT		  A0, A1, .yesjump
	NOP
	.nojump
	POP		  A0, A1, A2, S3
	J	 	  8027ED00
	LI        V0, A
	.yesjump
	POP		  A0, A1, A2, S3
	J		  8027ED18
	LI        V0, A
}

/%
% 001ACC08 --> 8027E328
#new:Function $Function_calc_partner_damage_enemy

  9D0:  BEQ       V0, R0, .o9F0		%what needs to be done here? load pointer (8 + S3) then load 1D + (pointer) to get spin smash level
  9D4:  LI        V0, A
%/




@Function 1A5BFC %remove cloud 9 ability to negate damage
{
ADDIU	V0, R0, 0
}

%the cloud nine turns address: 800DC070 + A4

%the damage reduction is in DamageModifiers.patch


%Change happy badges to work without RNG
%normally, there is a 50% chance to trigger (?)
%Therefore, I will make happy badges trigger every other turn

%Each set of badges (happy heart, crazy heart, happy flower) are controlled by a separate randomizer

%Crazy heart
@Function 174E3C
{
LAB		V0, 800DBD7B	%global turn count
ANDI	V0, V0, 1		%becomes 0 if even, 1 if odd
}

%Happy heart
@Function 174E60
{
LAB		V0, 800DBD7B	%global turn count
ANDI	V0, V0, 1		%becomes 0 if even, 1 if odd
}

%Happy flower
@Function 174E80
{
LAB		V0, 800DBD7B	%global turn count
ANDI	V0, V0, 1		%becomes 0 if even, 1 if odd
}

%overwritten: (LAB is 2 instructions)
%	JAL		800299FC 	%GetRandom
%	ADDIU	A0, R0, 64
%	SLTI	V0, V0, 32

%Crazy flower stuff

@Hook 174E9C
{
	PUSH	  A0, V0
	JAL		  $HasGreedStone
	NOP
	BEQ		  V0, R0, .normalend
	NOP
	JAL		  $IsBadgeEquipped
	LI		  A0, .Item:PityFlower
	BEQ		  A0, R0, .normalend
	NOP	
	.modifiedend
	POP		  A0, V0
	COPY      S4, V0
	ADDI	  S4, S4, 3`
	J		  802465C4
	ADDU      V0, S5, S2
	.normalend
	POP		  A0, V0
	COPY      S4, V0
	J		  802465C4
	ADDU      V0, S5, S2
}

%the game has some precondition where it checks the happy badges before trying to do happy stuff
%Hooked over:
/%
   BC:  BEQ       V0, R0, .o184
   C0:  LI        V0, 5
%/

%8024650C
@Hook 174DEC
{
	PUSH	  A0, V0
	JAL		  $HasGreedStone
	NOP
	BEQ		  V0, R0, .checkbranchnormally
	NOP
	JAL		  $IsBadgeEquipped
	LI		  A0, .Item:PityFlower
	BEQ		  A0, R0, .checkbranchnormally
	NOP	
	BEQ		  R0, R0, .nobranch
	NOP
	.checkbranchnormally
	POP	 	  A0, V0
	BEQ       V0, R0, .dobranch
	LI        V0, 5	
	.nobranch2
	J		  80246514
	NOP
	.nobranch
	POP	 	  A0, V0
	J		  80246514
	NOP
	.dobranch
	J		  802465D4
	NOP
}


%Berserker (blocking check)
%Removes RNG (so berserker mario has guaranteed blocking now)
%It's probably balanced since using berserker is still a net negative even if what you're fighting has really difficult block timing
%	^	Against normal enemies, it could be viable, but the RNG and lack of special moves can offset the damage boost
@Function 1A6294
{
	ADDIU V0, R0, 1
}


%Chill out observations
%Lines that check chill out strength (This is what determines when the arrow is first displayed?)
%	AP + 223
%	Continuously (*Changing chill out strength will immediately show an arrow)
%80256D60
%8026F3FC		<-- Called during other enemy turns (*so this does not directly control arrow)
%	(When checking attack power)
%80277890 	
%	(initialize strength)
%802656A0	


% player pointer 80746250


%80744264

%Lines that check chill out duration
%	AP + 224
%	Start/End of enemy turns
%8024283C	
%80242840	(unsigned!)
%		Note that there is some code that subtracts the value and then destroys the arrow when the values become 0
%		Also, chill out strength is reset to 0 when duration becomes 0
%	(When checking attack power)
%80277884 	
%	(initialize duration)
%8026569C	


%Clear out some more space
%The two values after chill out values appear unused (They take some uninitialized values which is evidence that they are really unused)
%Also, 209 + AP is unused
@Hook 193F7C %8026569C
{
SB	R0, 19B (S1) %Sleep hit count (In order to fix a sleep bug I have to allow one hit)
SB	R0, 209 (S1) %Status inflict count
SB	R0, 223 (S1) %chillout strength
SB	R0, 224 (S1) %chillout duration
SB	R0, 225 (S1) %defdown strength
J	802656A4
SB	R0, 226 (S1) %defdown duration
}

@Hook 1A0848 %80271F68
{
PUSH	S0, S1, S2
LB 		V0, 222 (S3)
LB		S0, 226 (S3) %defdown duration
BEQ		S0, R0, .no
ORI		S0, R0, 0
LB		S0, 225 (S3) %defdown strength
.no
SLT		S2, S5, R0	 %S5 < R0 => do not force defense = 0
BNE		S2, R0, .defhigh
SUBU 	S5, S5, S0	 %Subtract by defdown strength (or 0 if defdown duration is 0)
BGT		S5, R0, .defhigh	%if defense < 0, force it to be 0
NOP
ORI		S5, R0, 0	 %force defense to be at least 0 (if defense was not already negative)
.defhigh
POP		S0, S1, S2
J 		80271F70
ADDU 	S5, S5, V0
}

@Hook 1AD290 %8027E9B0
{
PUSH	S5, S6, S2
LB 		V0, 222 (S3)
LB		S5, 226 (S3) %defdown duration
BEQ		S5, R0, .no
ORI		S5, R0, 0
LB		S5, 225 (S3) %defdown strength
.no
SLT		S2, S0, R0	 %S0 < R0 => do not force defense = 0
BNE		S2, R0, .defhigh
SUBU 	S0, S0, S5	 %Subtract by defdown strength (or 0 if defdown duration is 0)
BGT		S0, R0, .defhigh
NOP
ORI		S0, R0, 0	 %force defense to be at least 0	(if not already negative)
.defhigh
POP		S5, S6, S2
J 		8027E9B8
ADDU 	S0, S0, V0
}

%As it turns out, there are no items that do not ignore defense
%Therefore I'm not programming def down for items (as it would always be skipped over)
%If you really want to, you could locate the piece of code that reads from 222 + actor pointer and copy the above code
%	^	Don't follow this advice, items wouldn't read from there anyway


%Reduce defdown
@Hook 17111C %8024283C
{
	LB		V0, 226 (V1)
	ADDI	V0, V0, FFFF 	%there is no SUBI instruction :P
	SLT		A0, R0, V0
	BNE		A0, R0, .gt
	NOP
	ORI		V0, R0, 0		%Reset to 0
	SB		R0, 225 (V1) 	%defdown strength
	.gt
	SB		V0, 226 (V1) 	%defdown duration
	LB		V0, 224 (V1)
	J 		80242844
	LBU		A0, 224 (V1)
}


%Init mario chill / defdown
@Hook 192F98 %802646B8
{
	SB		R0, 209 (S1) %Status inflict count
	SB		R0, 225 (S0)
	SB		R0, 226 (S0)
	SB		R0, 223 (S0)
	J 		802646C0
	SB		R0, 224 (S0)
}

%init partner chill / defdown
@Hook 193704 %80264E24
{
	SB		R0, 209 (S1) %Status inflict count
	SB		R0, 225 (S1)
	SB		R0, 226 (S1)
	SB		R0, 223 (S1)
	J 		80264E2C
	SB		R0, 224 (S1)
}

%hard to change this stuff because of all the branches everywhere
%Calculating defdown in damagetarget
%80277810
%BNEZ	V0, 80277854 	%this leads to yet another hook in NewGamePlus.patch
@Hook 1A60F0
{
	%Check branch
	PUSH	S0, S1, S2
	BNE 	V0, R0, .dobranch
	NOP
	BEQ		R0, R0, .nobranch
	NOP
	.dobranch
	POP		S0, S1, S2
	J		80277854
	NOP
	.nobranch
	LB		S0, 226 (S3)	%Defdown dur
	BEQ		S0, R0, .nodur
	ORI		S1, R0, 0
	LB		S1, 225 (S3)	%Defdown str	
	.nodur	
	LB		V0, 222 (S3)
	SUB		V0, V0, S1
	POP		S0, S1, S2
	J 		80277818
	NOP
}

%8026F3DC
%Checks value and sets flags if you have atk up / def up etc
%Unclear purpose

%80277818
%LB		V0, 222 (S3)
%rewritten above
@Function 1A60F8
{
	NOP
}




%Partner feeling fine
@Hook 194AB8 %802661D8
{
	PUSH	A0
	JAL		$IsBadgeEquipped
	LI		A0, .Item:FeelingFine
	BNE		A0, R0, .modified
	NOP
	.normal
	POP		A0
	SLTI	V0, V0, A
	J		802661E0
	SB		V1, 216 (S0)
	.modified
	POP		A0
	J		802661F0
	NOP
}


%Remove M HP Drain and HP Drain in danger mode
%(that combination is pretty much unbalancable since any attack would either do nothing or kill mario outright)

%removed it instead when you have greed stone

%Un-removed it in case you have 5 mhp or less (! possible with chet rippo)

@Hook 1A0974 %hp drain check
{
PUSH 	T0, RA
ADDU	S0, S0, V0 %hooked over (This handles player attack boosts)
PUSH	V0
JAL		$HasGreedStone
NOP
COPY	T0, V0
POP		V0
BNE		T0, R0, .nodanger
NOP
LIO 	T0, 8010F293 %max hp
LB		T0,	0 (T0)
SLTI	T0, T0, 6
BNE		T0, R0, .danger
ORI		V0, R0, 0
.nodanger
JAL		802672AC
ADDIU	A1, R0, 9
.danger
POP 	T0, RA
J 		8027209C
NOP
}

@Hook 1A09D0 %hooked over was the check for mhp drain
{
PUSH 	T0, RA
PUSH	V0
JAL		$HasGreedStone
NOP
COPY	T0, V0
POP		V0
BNE		T0, R0, .nodanger
NOP
LIO 	T0, 8010F293 %max hp
LB		T0,	0 (T0)
SLTI	T0, T0, 6
BNE		T0, R0, .danger
ORI		V0, R0, 0
.nodanger
JAL		802672AC
ADDIU	A1, R0, 24
.danger
POP 	T0, RA
J 		802720F8
NOP
}


@Function 1A0998
%fix bug with HP drain and negative damage
{
    NOP
    NOP
}

@Function 1A09F4
%Mega HP Drain too
{
    NOP
    NOP
}


%Second nerf: Using Flower Health will make hp drains half as effective

/%
%step 1: temporarily increase hp drain limit to 10 hp (Divide by 2 later)
@Hook 1A09B8
{
	LW			A0, 18 (SP)					 %load this before the stack pointer moves
	SW			V0, 4 (A1)					 %quickly store this before it changes
	PUSH		A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL			802672AC
	ADDIU		A1, R0, 11				 	 %Chill out (now Flower Health)
	BEQ			V0, R0, .normal
	NOP
	.fhealth
	SLTI		V1, V1, B
	BNE			V1, R0, .end
	ADDIU		V0, R0, 5	
	SB			V0, 89 (S4)		
	BEQ			R0, R0, .end
	NOP
	.normal
	SLTI		V1, V1, 6
	BNE			V1, R0, .end
	ADDIU		V0, R0, 5	
	SB			V0, 89 (S4)	
	.end
	POP			A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	J 			802720EC					 %After the branch
	NOP
}
%/
%Hooked over:
%SLTI		V1, V1, 6
%BNEZ		V1, 802720EC

%skipped over:
%SW			V0, 4 (A1)
%*branch skips over these 2
%ADDIU		V0, R0, 5
%SB			V0, 89 (S4)

%*branch destination (not skipped)
%LW			A0, 18 (SP)

%the other one has basically the same code hooked over
/%
@Hook 1A0A14
{
	LW			A0, 18 (SP)					 %load this before the stack pointer moves
	SW			V0, 4 (A1)					 %quickly store this before it changes
	PUSH		A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL			802672AC
	ADDIU		A1, R0, 11				 	 %Chill out (now Flower Health)
	BEQ			V0, R0, .normal
	NOP
	.fhealth
	SLTI		V1, V1, B
	BNE			V1, R0, .end
	ADDIU		V0, R0, A	
	SB			V0, 89 (S4)		
	BEQ			R0, R0, .end
	NOP
	.normal
	SLTI		V1, V1, 6
	BNE			V1, R0, .end
	ADDIU		V0, R0, 5	
	SB			V0, 89 (S4)	
	.end
	POP			A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	J 			80272148					 %After the branch
	NOP
}
%/



%step 2: divide by 2 before using

/%
%80246554
@Hook 174E34
{
	PUSH		A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL			800E9D48
	ADDIU		A0, R0, 11				 	 %Chill out (now Flower Health)
	.normal
	LB			S5, 89 (S3)
	SB			R0, 89 (S3)					 %Reset value to 0
	BEQ			V0, R0, .end
	NOP
	SRA			S5, S5, 1
	.end
	POP			A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	J		8024655C
	NOP
}

%80246620
@Hook 174F00
{
	PUSH		A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL			800E9D48
	ADDIU		A0, R0, 11				 	 %Chill out (now Flower Health)
	.normal
	LB			V1, 89 (S3)
	BEQ			V0, R0, .end
	NOP
	SRA			V1, V1, 1
	.end
	POP			A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...	
	J		80246628
	LW		V0, AC (A0)		%Hooked over
}
%/

%Alternative nerf: HP drain now restores FP if you have greed stone

% 001902C8 --> 802619E8
%#new:Function $Function_802619E8
%   C0:  LA        A0, 80108AD4				%hp drain
%also C4


%need to preserve some of the stack
%24 + SP
@Hook 190388
{
	/%
	%$HasGreedStone
	ADDI	SP, SP, -100
	PUSH	V0, RA
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .yes
	NOP
	.normal
	LA      A0, 80108AD4
	BEQ		R0, R0, .end
	NOP
	.yes
	LA      A0, $IconScript_FPDrainText
	.end
	POP		V0, RA
	ADDI	SP, SP, 100
	J		80261AB0
	NOP
	%/
	
	%write this to not use stack at all???
	LIO		AT, 8010F2A6
	LBU		AT, 0 (AT)
	BNE		AT, R0, .yes
	NOP
	.normal
	LA      A0, 80108AD4
	BEQ		R0, R0, .end
	NOP
	.yes
	LA      A0, $IconScript_FPDrainText
	.end
	J		80261AB0
	NOP	
}

/%
% 001902C8 --> 802619E8
#new:Function $Function_802619E8
{
    0:  ADDIU     SP, SP, FFC0
    4:  SW        S2, 38 (SP)
    8:  COPY      S2, A0
    C:  SW        RA, 3C (SP)
   10:  SW        S1, 34 (SP)
   14:  SW        S0, 30 (SP)
   18:  LW        S0, C (S2)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S2
   34:  JAL       ~Func:get_variable
   38:  COPY      S1, V0
   3C:  COPY      A0, S2
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  MTC1      S1, F0
   50:  NOP
   54:  CVT.S.W   F0, F0
   58:  MFC1      A1, F0
   5C:  MTC1      S0, F0
   60:  NOP
   64:  CVT.S.W   F0, F0
   68:  MFC1      A2, F0
   6C:  MTC1      V0, F0
   70:  NOP
   74:  CVT.S.W   F0, F0
   78:  LAW       A0, 80077410
   80:  MFC1      A3, F0
   84:  ADDIU     V1, SP, 20
   88:  SW        V1, 10 (SP)
   8C:  ADDIU     V1, SP, 24
   90:  SW        V1, 14 (SP)
   94:  ADDIU     V1, SP, 28
   98:  JAL       ~Func:get_screen_coords
   9C:  SW        V1, 18 (SP)
   A0:  LW        V0, 20 (SP)
   A4:  ADDIU     V0, V0, 1E
   A8:  SW        V0, 20 (SP)
   AC:  LW        V0, 24 (SP)
   B0:  LW        V1, AC (S2)		%load from varA?
   B4:  ADDIU     V0, V0, FFED
   B8:  BLEZ      V1, .oF8
   BC:  SW        V0, 24 (SP)
   C0:  LA        A0, 80108AD4					%HP Drain! (hook here)
   C8:  JAL       ~Func:create_hud_element
   CC:  NOP
   D0:  LW        A1, 20 (SP)
   D4:  LW        A2, 24 (SP)
   D8:  COPY      A0, V0
   DC:  SAW       A0, 8029FBAC
   E4:  JAL       ~Func:set_hud_element_render_pos
   E8:  NOP
   EC:  LW        V0, 24 (SP)
   F0:  ADDIU     V0, V0, 9
   F4:  SW        V0, 24 (SP)
        .oF8
   F8:  LW        V0, B0 (S2)		%varB
   FC:  BGTZ      V0, .o110
  100:  NOP
  104:  LW        V0, B4 (S2)		%varC?
  108:  BLEZ      V0, .o13C
  10C:  NOP
        .o110
  110:  LA        A0, 80108AAC
  118:  JAL       ~Func:create_hud_element
  11C:  NOP
  120:  LW        A1, 20 (SP)
  124:  LW        A2, 24 (SP)
  128:  COPY      A0, V0
  12C:  SAW       A0, 8029FBA8
  134:  JAL       ~Func:set_hud_element_render_pos
  138:  NOP
        .o13C
  13C:  LW        RA, 3C (SP)
  140:  LW        S2, 38 (SP)
  144:  LW        S1, 34 (SP)
  148:  LW        S0, 30 (SP)
  14C:  LI        V0, 2
  150:  JR        RA
  154:  ADDIU     SP, SP, 40
}
%/



%also need to check the free hud element script
/%
% 00190420 --> 80261B40
#new:Function $Function_80261B40
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        RA, 14 (SP)
   10:  LW        V0, AC (S0)
   14:  BLEZ      V0, .o2C				
   18:  NOP
   1C:  LAW       A0, 8029FBAC
   24:  JAL       ~Func:free_hud_element	%HP drain!
   28:  NOP
        .o2C
   2C:  LW        V0, B0 (S0)
   30:  BGTZ      V0, .o44
   34:  NOP
   38:  LW        V0, B4 (S0)
   3C:  BLEZ      V0, .o54
   40:  NOP
        .o44
   44:  LAW       A0, 8029FBA8
   4C:  JAL       ~Func:free_hud_element	%Happy!
   50:  NOP
        .o54
   54:  LW        RA, 14 (SP)
   58:  LW        S0, 10 (SP)
   5C:  LI        V0, 2
   60:  JR        RA
   64:  ADDIU     SP, SP, 18
}
%/

#new:Data $Icon_FPDrain
{ ~RasterFile:CI-4:FPDrain.png }

#new:Data $Palette_FPDrain
{ ~PaletteFile:CI-4:FPDrain.png }

#new:Data $IconScript_FPDrainText {
	00000008 
	00000013 00000028 00000010
	00000004 
	00000002 0000003C $Icon_FPDrain $Palette_FPDrain
	00000003 
	00000000
}

@Data 1B7644
{
	00000046 00000001 $Script_PlayerHappy_Modified
	00000002 00000000
	00000001 00000000
}

#new:Script:Battle $Script_PlayerHappy_Modified
{
    0:  Call  UseIdleAnimation    ( .Actor:Player .False )
   14:  Call  8024E6B4        ( 00000002 )
   24:  Call  SetAnimation    ( .Actor:Player 00000000 00010032 )
   3C:  Call  GetActorPos     ( .Actor:Player *Var0 *Var1 *Var2 )
   58:  Call  802619E8        ( *Var0 *Var1 *Var2 )					%create hp drain / happy effect
   70:  Add   *Var0  00000000
   80:  Add   *Var1  00000023
		%hp drain?
		Call	 $Function_HasGreedStone ( *VarF )
		If *VarF == 0`
   90:  	Set   *Var3  *VarA		%hp?
		Else
   90: 	 	Add   *VarC  *VarA		%fp recovery += a
			/%
			%crazy flower?
			%no need for this, I made it so that 1 crazy flower counts as 3 happy flowers
			Call 	$Function_CheckBadge ( .Item:PityFlower *VarE )
			If *VarE == 1`
				Add *VarC 3`
			EndIf
			%/
		EndIf
   A0:  Add   *Var3  *VarB		%whoops need to reorder this over here
   B0:  If  *Var3  >  00000000
   C0:  	Call  FXRecoverHP ( *Var0 *Var1 *Var2 *Var3 )
   DC:  EndIf
   E4:  Call  GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  100:  Add   *Var0  00000014
  110:  Add   *Var1  00000019
  120:  If  *VarC  >  00000000
  130:  	Call  FXRecoverFP ( *Var0 *Var1 *Var2 *VarC )
  14C:  EndIf
  154:  Set   *Var3  *VarA
  164:  Add   *Var3  *VarB
  174:  Call  GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  190:  Add   *Var1  00000019
  1A0:  Call  802D7520  ( *Var0 *Var1 *Var2 *Var3 )
  1BC:  Wait  10`
		Call	 $Function_HasGreedStone ( *VarF )
		If *VarF == 0`
  1C8:  	Set   *Var0  *VarA
  1D8:  	If  *Var0  >  00000000
  1E8:  		Loop  *Var0
  1F4:  			Call  IncrementPlayerHP ( )
  200:  			Wait  1`
  20C:  		EndLoop
  214:  	EndIf
		Else
  1C8:  	Set   *Var0  *VarA
			%do not recover fp yet
		EndIf
  21C:  Set   *Var0  *VarB
  22C:  If  *Var0  >  00000000
  23C:  	Loop  *Var0
  248:  		Call  IncrementPlayerHP ( )
  254:  		Wait  1`
  260:  	EndLoop
  268:  EndIf
  270:  Set   *Var0  *VarC
  280:  If  *Var0  >  00000000
  290:  	Loop  *Var0
  29C:  		Call  IncrementPlayerFP ( )
  2A8:  		Wait  1`
  2B4:  	EndLoop
  2BC:  EndIf
  2C4:  Wait  30`
  2D0:  Call  SetAnimation        ( .Actor:Self 00000000 00010002 )
		%hp drain?
		Call	 $Function_HasGreedStone ( *VarF )
		If *VarF != 0`
			Sub   *VarC  *VarA
		EndIf
  2E8:  Call  80261B40 ( )
  2F4:  Call  UseIdleAnimation    ( .Actor:Player .True )
  308:  Return
  310:  End
}

/%
% 001B7644 --> 80288D64
$Script_PlayerHappy
{
    0:  Call  $Function_UseIdleAnimation    ( .Actor:Player .False )
   14:  Call  $Function_8024E6B4        ( 00000002 )
   24:  Call  $Function_SetAnimation    ( .Actor:Player 00000000 00010032 )
   3C:  Call  $Function_GetActorPos     ( .Actor:Player *Var0 *Var1 *Var2 )
   58:  Call  $Function_802619E8        ( *Var0 *Var1 *Var2 )					%create hp drain effect
   70:  Add   *Var0  00000000
   80:  Add   *Var1  00000023
   90:  Set   *Var3  *VarA
   A0:  Add   *Var3  *VarB
   B0:  If  *Var3  >  00000000
   C0:  	Call  $Function_FXRecoverHP ( *Var0 *Var1 *Var2 *Var3 )
   DC:  EndIf
   E4:  Call  $Function_GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  100:  Add   *Var0  00000014
  110:  Add   *Var1  00000019
  120:  If  *VarC  >  00000000
  130:  	Call  $Function_FXRecoverFP ( *Var0 *Var1 *Var2 *VarC )
  14C:  EndIf
  154:  Set   *Var3  *VarA
  164:  Add   *Var3  *VarB
  174:  Call  $Function_GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  190:  Add   *Var1  00000019
  1A0:  Call  802D7520  ( *Var0 *Var1 *Var2 *Var3 )
  1BC:  Wait  10`
  1C8:  Set   *Var0  *VarA
  1D8:  If  *Var0  >  00000000
  1E8:  	Loop  *Var0
  1F4:  		Call  $Function_IncrementPlayerHP ( )
  200:  		Wait  1`
  20C:  	EndLoop
  214:  EndIf
  21C:  Set   *Var0  *VarB
  22C:  If  *Var0  >  00000000
  23C:  	Loop  *Var0
  248:  		Call  $Function_IncrementPlayerHP ( )
  254:  		Wait  1`
  260:  	EndLoop
  268:  EndIf
  270:  Set   *Var0  *VarC
  280:  If  *Var0  >  00000000
  290:  	Loop  *Var0
  29C:  		Call  $Function_IncrementPlayerFP ( )
  2A8:  		Wait  1`
  2B4:  	EndLoop
  2BC:  EndIf
  2C4:  Wait  30`
  2D0:  Call  $Function_SetAnimation        ( .Actor:Self 00000000 00010002 )
  2E8:  Call  $Function_80261B40 ( )
  2F4:  Call  $Function_UseIdleAnimation    ( .Actor:Player .True )
  308:  Return
  310:  End
}
%/



%Money Money -> Easy Flee (sometimes)

%part 1: add a cool new hud element

#new:Data $Icon_EasyFlee
{ ~RasterFile:CI-4:EasyFlee.png }

#new:Data $Palette_EasyFlee
{ ~PaletteFile:CI-4:EasyFlee.png }

#new:Data $IconScript_EasyFlee {
	00000008 
	00000013 00000020 00000020
	00000004 
	00000002 0000003C $Icon_EasyFlee $Palette_EasyFlee
	00000003 
	00000000
}

%41A718 --> 802A5988
% 218C:  LA        T1, $???_802AB488

%ability 0x10
@Hook 	41C8A4	
{
	PUSH	V0, A0, A1
	JAL		$HasGreedStone
	NOP
	BEQ		V0, R0, .normal
	NOP
	JAL 	$IsBadgeEquipped
	ORI		A0, R0, .Item:MoneyMoney	
	BEQ		A0, R0, .normal
	NOP
	POP		V0, A0, A1
	LA      T1, $EasyFleeData
	J		802A7B1C
	NOP
	.normal
	POP		V0, A0, A1
	LA      T1, 802AB488
	J		802A7B1C
	NOP
}

% 00420218 --> 802AB488
#new:Unknown $EasyFleeData
{
	$IconScript_EasyFlee 80292188
}


@Data 1B519C
{
	00000046 00000001 $Script_RunawayModified
	00000002 00000000
	00000001 00000000
}

%$Function_HasGreedStone ( *VarA )
%$Function_CheckBadge ( .Item:MoneyMoney *VarB )

#new:Script:Battle $Script_RunawayModified
{
    0:  Call  UseIdleAnimation        ( .Actor:Player .False )
		Call  $Function_HasGreedStone ( *VarA )
		Call  $Function_CheckBadge ( .Item:MoneyMoney *VarB )
		If *VarA == 1`
			If *VarB == 1`
				Call  $Function_FPHeal ( FFFFFFFE )
				Call  SetAnimation        ( .Actor:Player 00000000 00050000 )
				Call  SetActorYaw ( .Actor:Player 000000B4 )
				Call  80260DB8 ( )
				Call  PlaySoundAtActor    ( .Actor:Player 0000015E )
				Call  SetGoalPos      ( .Actor:Player FFFFFF10 00000000 0000000A )
				Call  SetActorSpeed   ( .Actor:Player *Fixed[16.0] )
				Call  PlayerRunToGoal ( 00000000 )
				Wait  5`
				Call  UseIdleAnimation    ( .Actor:Player .True )
				Return
			EndIf
		EndIf
   14:  Call  GetActionCommandMode    ( *Var2 )
   24:  If  *Var2  ==  00000000
   34:  	ExecWait  80286228
   40:  	Call  UseIdleAnimation    ( .Actor:Player .True )
   54:  	Return
   5C:  EndIf
   64:  Call  802694A4    ( 00000001 )
   74:  Call  GetActorVar ( .Actor:Self 00000000 *Var0 )
   8C:  Call  LoadActionCommand   ( .ActionCommand:Flee )
   9C:  Call  802A9000  ( *Var0 )
   AC:  Call  SetupMashMeter      ( 00000001 00000064 00000000 00000000 00000000 00000000 )
   D0:  Call  80260E38 ( )
   DC:  Call  SetAnimation        ( .Actor:Player 00000000 00050000 )
   F4:  Call  PlaySoundAtActor    ( .Actor:Player 0000015D )
  108:  Call  SetActorYaw ( .Actor:Player 0000001E )
  11C:  Wait  1`
  128:  Call  SetActorYaw ( .Actor:Player 0000003C )
  13C:  Wait  1`
  148:  Call  SetActorYaw ( .Actor:Player 0000005A )
  15C:  Wait  1`
  168:  Call  SetActorYaw ( .Actor:Player 00000078 )
  17C:  Wait  1`
  188:  Call  SetActorYaw ( .Actor:Player 00000096 )
  19C:  Wait  1`
  1A8:  Call  SetActorYaw ( .Actor:Player 000000B4 )
  1BC:  Wait  5`
  1C8:  Call  802A92A0  ( 00000000 0000003C 00000003 )
  1E0:  Call  80260E5C ( )
  1EC:  Wait  5`
  1F8:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  214:  Wait  2`
  220:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  23C:  Wait  5`
  248:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  264:  Wait  2`
  270:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  28C:  Wait  2`
  298:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  2B4:  Wait  5`
  2C0:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  2DC:  Wait  2`
  2E8:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  304:  Wait  5`
  310:  Call  AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  32C:  Wait  15`
  338:  Wait  30`
  344:  Call  GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  360:  Call  SetActorJumpGravity ( .Actor:Player *Fixed[1.8] )
  374:  Call  SetJumpAnimations   ( .Actor:Player 00000000 00010007 00010008 00010009 )
  394:  Call  SetGoalPos  ( .Actor:Player *Var0 *Var1 *Var2 )
  3B0:  Call  80273444    ( 00000008 00000000 00000000 )
  3C8:  Call  GetActionSuccess    ( *Var0 )
  3D8:  Call  80260DD8 ( )
  3E4:  If  *Var0  ==  00000001
  3F4:  	Call  80260DB8 ( )
  400:  	Call  PlaySoundAtActor    ( .Actor:Player 0000015E )
  414:  	Call  SetGoalPos      ( .Actor:Player FFFFFF10 00000000 0000000A )
  430:  	Call  SetActorSpeed   ( .Actor:Player *Fixed[16.0] )
  444:  	Call  PlayerRunToGoal ( 00000000 )
  454:  	Wait  5`
  460:  Else
  468:  	ChildThread
  470:  		Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[1.0] )
  48C:  	EndChildThread
  494:  	Call  SetAnimation    ( .Actor:Player 00000000 00030001 )
  4AC:  	Call  PlaySoundAtActor    ( .Actor:Player 00000162 )
  4C0:  	Call  SetGoalPos      ( .Actor:Player FFFFFF9C 00000000 0000000A )
  4DC:  	Call  SetActorSpeed   ( .Actor:Player *Fixed[10.0] )
  4F0:  	Call  PlayerRunToGoal ( 00000000 )
  500:  	Set   *Var3  00000006
  510:  	Call  GetActorPos     ( .Actor:Player *Var0 *Var1 *Var2 )
  52C:  	ChildThread
  534:  		Loop  00000002
  540:  			Call  GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  55C:  			Call  PlayEffect    ( ~FX:Steam:SmallOutward *Var0 *Var1 *Var2 *Fixed[1.0] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5A0:  			Wait  5`
  5AC:  		EndLoop
  5B4:  	EndChildThread
  5BC:  	Loop  0000000A
  5C8:  		Sub   *Var0  *Var3
  5D8:  		Sub   *Var3  00000001
  5E8:  		If  *Var3  <  00000001
  5F8:  			Set   *Var3  00000001
  608:  		EndIf
  610:  		Call  SetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  62C:  		Wait  1`
  638:  	EndLoop
  640:  	Wait  15`
  64C:  	Call  PlaySoundAtActor    ( .Actor:Player 00000172 )
  660:  	Call  SetAnimation        ( .Actor:Player 00000000 00010030 )
  678:  	Wait  20`
  684:  	Call  SetAnimation        ( .Actor:Player 00000000 00010031 )
  69C:  	ChildThread
  6A4:  		Wait  7`
  6B0:  		Loop  00000002
  6BC:  			Call  GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  6D8:  			Sub   *Var0  00000008
  6E8:  			Add   *Var1  0000000E
  6F8:  			Add   *Var2  00000005
  708:  			Call  PlayEffect    ( ~FX:Steam:TinyPuff *Var0 *Var1 *Var2 *Fixed[1.0] *Fixed[1.0] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  74C:  			Wait  5`
  758:  		EndLoop
  760:  	EndChildThread
  768:  	Wait  5`
  774:  	Call  UseBattleCamPreset  ( 00000002 )
  784:  	Wait  10`
  790:  EndIf
  798:  Call  UseIdleAnimation    ( .Actor:Player .True )
  7AC:  Return
  7B4:  End	
}

/%
% 001B519C --> 802868BC
#new:Script $Script_RunAwayStart
{
    0:  Call  $Function_UseIdleAnimation        ( .Actor:Player .False )
   14:  Call  $Function_GetActionCommandMode    ( *Var2 )
   24:  If  *Var2  ==  00000000
   34:  	ExecWait  $Script_80286228
   40:  	Call  $Function_UseIdleAnimation    ( .Actor:Player .True )
   54:  	Return
   5C:  EndIf
   64:  Call  $Function_802694A4    ( 00000001 )
   74:  Call  $Function_GetActorVar ( .Actor:Self 00000000 *Var0 )
   8C:  Call  $Function_LoadActionCommand   ( .ActionCommand:Flee )
   9C:  Call  802A9000  ( *Var0 )
   AC:  Call  $Function_SetupMashMeter      ( 00000001 00000064 00000000 00000000 00000000 00000000 )
   D0:  Call  $Function_80260E38 ( )
   DC:  Call  $Function_SetAnimation        ( .Actor:Player 00000000 00050000 )
   F4:  Call  $Function_PlaySoundAtActor    ( .Actor:Player 0000015D )
  108:  Call  $Function_SetActorYaw ( .Actor:Player 0000001E )
  11C:  Wait  1`
  128:  Call  $Function_SetActorYaw ( .Actor:Player 0000003C )
  13C:  Wait  1`
  148:  Call  $Function_SetActorYaw ( .Actor:Player 0000005A )
  15C:  Wait  1`
  168:  Call  $Function_SetActorYaw ( .Actor:Player 00000078 )
  17C:  Wait  1`
  188:  Call  $Function_SetActorYaw ( .Actor:Player 00000096 )
  19C:  Wait  1`
  1A8:  Call  $Function_SetActorYaw ( .Actor:Player 000000B4 )
  1BC:  Wait  5`
  1C8:  Call  802A92A0  ( 00000000 0000003C 00000003 )
  1E0:  Call  $Function_80260E5C ( )
  1EC:  Wait  5`
  1F8:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  214:  Wait  2`
  220:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  23C:  Wait  5`
  248:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  264:  Wait  2`
  270:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  28C:  Wait  2`
  298:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  2B4:  Wait  5`
  2C0:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  2DC:  Wait  2`
  2E8:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  304:  Wait  5`
  310:  Call  $Function_AddActorPos ( .Actor:Player 00000002 00000000 00000000 )
  32C:  Wait  15`
  338:  Wait  30`
  344:  Call  $Function_GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  360:  Call  $Function_SetActorJumpGravity ( .Actor:Player *Fixed[1.8] )
  374:  Call  $Function_SetJumpAnimations   ( .Actor:Player 00000000 00010007 00010008 00010009 )
  394:  Call  $Function_SetGoalPos  ( .Actor:Player *Var0 *Var1 *Var2 )
  3B0:  Call  $Function_80273444    ( 00000008 00000000 00000000 )
  3C8:  Call  $Function_GetActionSuccess    ( *Var0 )
  3D8:  Call  $Function_80260DD8 ( )
  3E4:  If  *Var0  ==  00000001
  3F4:  	Call  $Function_80260DB8 ( )
  400:  	Call  $Function_PlaySoundAtActor    ( .Actor:Player 0000015E )
  414:  	Call  $Function_SetGoalPos      ( .Actor:Player FFFFFF10 00000000 0000000A )
  430:  	Call  $Function_SetActorSpeed   ( .Actor:Player *Fixed[16.0] )
  444:  	Call  $Function_PlayerRunToGoal ( 00000000 )
  454:  	Wait  5`
  460:  Else
  468:  	ChildThread
  470:  		Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[1.0] )
  48C:  	EndChildThread
  494:  	Call  $Function_SetAnimation    ( .Actor:Player 00000000 00030001 )
  4AC:  	Call  $Function_PlaySoundAtActor    ( .Actor:Player 00000162 )
  4C0:  	Call  $Function_SetGoalPos      ( .Actor:Player FFFFFF9C 00000000 0000000A )
  4DC:  	Call  $Function_SetActorSpeed   ( .Actor:Player *Fixed[10.0] )
  4F0:  	Call  $Function_PlayerRunToGoal ( 00000000 )
  500:  	Set   *Var3  00000006
  510:  	Call  $Function_GetActorPos     ( .Actor:Player *Var0 *Var1 *Var2 )
  52C:  	ChildThread
  534:  		Loop  00000002
  540:  			Call  $Function_GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  55C:  			Call  PlayEffect    ( ~FX:Steam:SmallOutward *Var0 *Var1 *Var2 *Fixed[1.0] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5A0:  			Wait  5`
  5AC:  		EndLoop
  5B4:  	EndChildThread
  5BC:  	Loop  0000000A
  5C8:  		Sub   *Var0  *Var3
  5D8:  		Sub   *Var3  00000001
  5E8:  		If  *Var3  <  00000001
  5F8:  			Set   *Var3  00000001
  608:  		EndIf
  610:  		Call  $Function_SetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  62C:  		Wait  1`
  638:  	EndLoop
  640:  	Wait  15`
  64C:  	Call  $Function_PlaySoundAtActor    ( .Actor:Player 00000172 )
  660:  	Call  $Function_SetAnimation        ( .Actor:Player 00000000 00010030 )
  678:  	Wait  20`
  684:  	Call  $Function_SetAnimation        ( .Actor:Player 00000000 00010031 )
  69C:  	ChildThread
  6A4:  		Wait  7`
  6B0:  		Loop  00000002
  6BC:  			Call  $Function_GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
  6D8:  			Sub   *Var0  00000008
  6E8:  			Add   *Var1  0000000E
  6F8:  			Add   *Var2  00000005
  708:  			Call  PlayEffect    ( ~FX:Steam:TinyPuff *Var0 *Var1 *Var2 *Fixed[1.0] *Fixed[1.0] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  74C:  			Wait  5`
  758:  		EndLoop
  760:  	EndChildThread
  768:  	Wait  5`
  774:  	Call  $Function_UseBattleCamPreset  ( 00000002 )
  784:  	Wait  10`
  790:  EndIf
  798:  Call  $Function_UseIdleAnimation    ( .Actor:Player .True )
  7AC:  Return
  7B4:  End
}
%/



%Refund -> Item Finder (sometimes)
%Base item chance read at 800483A4
%
%800483BC

%23680 --> 80048280
%spawn drops

@Hook 237BC
{
	PUSH	RA, A0, A1, T0, T1, S2
	JAL		800299FC
	ADDIU	A0, R0, 64
	%
	%item finder check
	%
	COPY	S2, V0
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:Refund
	BEQ		A0, R0, .normal
	NOP
	JAL		$HasGreedStone
	NOP
	BEQ		V0, R0, .normal
	COPY	V0, S2
	SLL		S1, S1, 2			%Multiply by 4?
	.normal
	BEQ		S1, R0, .zero		%hardcode this check to fail when droprate is 0 (prevent the 1/101 mushroom drop)		(actually, its a 1/10 mushroom drop because ~NoItems is broken)
	NOP
	SLT		V0, V0, S1
	BEQ		R0, R0, .end
	NOP
	.zero
	COPY	V0, R0
	.end
	POP		RA, A0, A1, T0, T1, S2
	J		800483C8
	NOP
}



%Lucky Day -> Head Start
%Gives you 2 turns at the start of battle
%(this is done by setting the mario turns address to 2 at the start of battle)

/%
@Function 1A5C88
{
ORI	V0, R0, 0 %negate lucky day damage avoidance
}
%/

%how about instead we check a special value for debug infinite luck?
@Hook 1A5C88
{
PUSH	RA, A0
LAB		A0, 800DBDA2
ANDI 	A0, A0, 10	 %Flag 10
COPY	V0, A0
POP		RA, A0
J		802773B0
NOP					 %ORI	V0, R0, 0 
}

@Function 1A5C98
{
ORI	V0, R0, 0 %this is less than 20%
}



%hooked over: setting hustle drink var to 0
%so now we'll set it to 2 but only if you have the badge on
%ability id: 23 hex (35 dec)
@Hook 16FDA0 %802414C0
{
%Check for head start badge
PUSH 	A0, A1, S0, V0, V1, RA
%Anti hustle token init
SAW		R0, $AntiHustleToken
JAL     ~Func:is_ability_active %800E9D48
ORI		A0, R0, 23 
BEQ		V0, R0, .nope
SB		R0, 8B (S4)
ORI		V1, R0, 2
SB		V1, 8B (S4) %set turn count to 2  %S4 contains the start of battle data at this point
ORI		V1, R0, 1
SAW		V1, $AntiHustleToken
.nope
%Add a check for file code 13
LAB		A0, 800DBE00
LI		V1, 13`
BNE		A0, V1, .nocode13
NOP
ORI		V1, R0, 2
SB		V1, 8B (S4) %set turn count to 2  %S4 contains the start of battle data at this point
ORI		V1, R0, 1
SAW		V1, $AntiHustleToken
.nocode13
JAL		$GetCurseState
NOP
%Check AutoBlock
JAL     $IsBadgeEquipped
ORI		A0, R0, FC %formerly payoff
%
ORI		V0, R0, 1
BNE		A0, R0, .yes
NOP
ORI		V0, R0, 0
.yes
SAB 	V0, $BattlePerks[2]
%While we're here, also revert tattles to normal
JAL		$PopTattles
NOP
JAL		$PopNames
NOP
%also reset flower power value (Failsafe 2)
SAB		R0, $FlowerPowerBool
SAW		R0, $FreebieCounter
%Also reset outta sight cost
LAW		V1, $OuttaSightAddress
ORI		V0, R0, 3
SB		V0, 0 (V1)
%Reset hustle spell counter
SAB		R0, $HustleSpellCounter
%Reset air lift boolean too
SAW		R0, $AirLiftBool
%Saver init
LI		A0, $ItemCostReductionData
SB		R0, 0 (A0)		%str
SB		R0, 1 (A0)		%count
SB		R0, 2 (A0)		%yoshi cookie
SB		R0, 3 (A0)		%???? extra value used for yoshi cookies
%Add a check for file code 14
LAB		A0, 800DBE00
LI		V1, 14`
BNE		A0, V1, .nocode14
NOP
LI		A0, 2
SAB		A0, $ItemCostReductionData[2]
LI		A0, 0
SAB		A0, $ItemCostReductionData[3]
.nocode14
%eternal init
LI 		A0, $EternalCostIncreases
SB		R0, 0 (A0)
%Miracle init
LI		A0, $MiracleJellyData
SB		R0, 0 (A0)		%turns
SB		R0, 1 (A0)		%use count
%Coin move use init
SAW		R0, $Data_TurnsSinceUsedCoins
POP 	A0, A1, S0, V0, V1, RA
J		802414C8
SB		R0, 93 (S4)
%look in NewGamePlus.patch for the stuff that makes Super Curse actually work
}

%A0 = input value to multiply
%V0 = output
#export:Function $CurseMultiply
{
PUSH	RA, A0, A1, A2, T0
%just in case (probably unneccessary)
JAL		$GetCurseState
NOP
LAB		A2, $CurseFlags
%1 = x1.5	= x1.5
%2 = x2		= x2
%3 = x3		= x1.5 x2 or x3
%4 = x4.5	= x1.5 x3
%5 = x6		= x2 x3
%6 = x9  	= x1.5 x2 x3
ORI		V0, A0, 0
%Equals 0: go to end without multiplying
BEQ		A2, R0, .end
NOP
%2,3,5,6 (Not 1 or 4): multiply by 2
.ultra
LI		T0, 1
BEQ		T0, A2, .mega
NOP
LI		T0, 4
BEQ		T0, A2, .mega
NOP
ADD		A0, A0, A0
.mega
%4,5,6: multiply by 3
SLTI	A1, A2, 4
BNE		A1, R0, .super
NOP
ADD		T0, A0, R0
ADD		A0, A0, A0
ADD		A0, A0, T0
%Calculate super last to avoid rounding errors
%Not 2 or 5: multiply by 1.5
.super
LI		T0, 2
BEQ		T0, A2, .end
NOP
LI		T0, 5
BEQ		T0, A2, .end
NOP
ADD		T0, A0, R0
SRL		T0, T0, 1
ADD		A0, T0, A0
.end
COPY	V0, A0
POP		RA, A0, A1, A2, T0
JR		RA
NOP
}

#export:Function $GetCurseState
{
PUSH	RA, S0, A0, A1, A2, A3, T0, T1, T2, T3, V1
%actually recalculate the curse state
JAL 	$IsBadgeEquipped
ORI		A0, R0, EA			%mega curse!
DADDU	S0, A0, R0
DADDU	S0, A0, S0
DADDU	S0, A0, S0
JAL 	$IsBadgeEquipped
ORI		A0, R0, 120			%ultra curse
DADDU	S0, A0, S0
DADDU	S0, A0, S0
JAL 	$IsBadgeEquipped
ORI		A0, R0, 12A			%super curse
DADDU	S0, A0, S0
%enforce hardcoding
LAB		A0, 800DBE00
LI		A1, 4`
BEQ		A0, A1 .hardcode
LI		A2, 2`
LI		A1, 5`
BEQ		A0, A1 .hardcode
LI		A2, 3`
LI		A1, 8`
BEQ		A0, A1 .hardcode
LI		A2, 3`
LI		A1, 9`
BEQ		A0, A1 .hardcode
LI		A2, 4`
BEQ		R0, R0, .nohardcoding
NOP
.hardcode
BGT		S0, A2, .nohardcoding
NOP
COPY	S0, A2
.nohardcoding
SAB		S0, $CurseFlags %super curse flag
%
POP		RA, S0, A0, A1, A2, A3, T0, T1, T2, T3, V1
LAB		V0, $CurseFlags
JR		RA
NOP
}

#export:Function $Function_GetCurseState
{
PUSH	RA
%just in case (probably unneccessary)
JAL		$GetCurseState
NOP
LAB		A2, $CurseFlags
%Impose maximum of 3 here (make it so that you don't get stuff for getting past 3x and I don't want to rewrite the other curse stuff)
LI		V0, 3
BLT		A2, V0, .found
NOP
LI		A2, 3
.found
LW		V0, C (A0)
JAL		~Func:set_variable
LW		A1, 0 (V0)
POP		RA
JR		RA
ADDIU	V0, R0, 2
}

%#export $CurseMultiply
%#export $GetCurseState
%#export $Function_GetCurseState



%Bump Attack -> Super Curse ("Ultra Curse")
%doubles incoming damage, enemy hp, and star point gain
@Function 1C9A0
{
ORI	V0, R0, 0 %negate bump attack bumping
}

%negate the side effect of stopping first strikes from 0 SP enemies
%now you'll get to experience the joys of doubled first strikes :D
@Function 1BC78
{
ORI	V0, R0, 0
}

%Double SP
@Hook 1AB310
{
PUSH	T0, T1, T2, T3, A0
COPY	A0, S3					%Copy amount of SP to add
PUSH	V0						%bad code but :P
JAL		$CurseMultiply
NOP
COPY	S3, V0
POP		V0
%enforce cap V0 == 100
LI		T0, 100`
BLT		S3, T0, .belowcap
NOP
COPY	S3, T0
.belowcap
ADD		V0, V0, S3 				%Add SP 
POP		T0, T1, T2, T3, A0
.nope
J 		8027CA38
SB		V0, 79 (S4) %store star points gained
}



%Pretty Lucky -> Star Gift
%double SP regen

@Function 1A5C28
{
ORI	V0, R0, 0 %negate lucky day damage avoidance
}

@Hook 1726E8
{
PUSH 	RA, S0, S1, A0 %idk, but if we don't then things break
ADDIU	S0, V0, 0 %move V0 to S0 temporarily
JAL     $IsBadgeEquipped %~Func:is_ability_active %800E9D48
ORI		A0, R0, F1 %pretty lucky
SAB		R0, 8010EFAF %^ the normal ability checker function is too messy to use here (changes a lot of registers around and causes problems)
BEQ		A0, R0 .no
ADDIU	V0, S0, 0
ORI 	S1, R0, 1
SAB		S1, 8010EFAF
ADDIU	V0, V0, 20		
.no
ADDIU	V0, V0, 20		%normal SP gain (*each bar is 256 units, you get 32 units per turn, so you get one per 8 turns, or one per 4 turns if doubled)
POP		RA, S0, S1, A0
J		80243E10
SW		V1, 0 (S0) %hooked over
}


%First Attack -> (increases first attack damage)
/%
@Function 1C938	%80041538
{
ORI	V0, R0, 0 %negate first attack instakilling
}
%/
%	^ inside function
% 0001C764 --> 80041364

%^ Replace this with special code for allowing the magic blast to kill weak enemies


#export:Data $HustleSpellCounter
{
	00000000
}


#export:Data $MagicBlastBool
{
	00000000
}

@Hook 1C938
{
	%Hard code this to fail when in the pit / temple
	LAB		V0, 800740AB	%Area byte		<-- not *GB_WorldLocation (that is 800DBD70 + 1A9 / 800DBF19) (also, the locations in this byte are completely different from the world location byte)
	LI		AT, 1D
	BEQ		V0, AT, .end
	ORI		V0, R0, 0
	LAB		V0, 800740AB	%Area byte		<-- not *GB_WorldLocation (that is 800DBD70 + 1A9 / 800DBF19) (also, the locations in this byte are completely different from the world location byte)
	LI		AT, 1E
	BEQ		V0, AT, .end
	ORI		V0, R0, 0
	JAL		$GetCurseState
	NOP
	BNE		V0, R0, .end
	ORI		V0, R0, 0
	LAW 	V0, $MagicBlastBool
	.end
	J		80041540
	NOP
}


%the actual effect is in the move bpats
%increases jump/hammer first strike power by (1/2/3) depending on boot/hammer level



%Fix partner first strike targetting anomalies

%176A70 --> 80248190
%   A4:  BEQ       R0, R0, .oE4			%If invalid partner, skip this whole block (Could this be the source of the weirdness)
%   A8:  NOP
@Hook 176B14
{
	PUSH	S0, S1
	LI		S0, 800DC070
	ORI		S1, R0, 3`
	SW		S1, 184 (S0)
	POP		S0, S1
	J		80248274
	NOP
}



%Close Call -> Danger Saver
%-1 FP cost while in danger

%current problem: the logic for if you can use partner moves still checks against the old costs
%ex. you can't use a 5 fp partner move when you have 5 fp left
%	^ probably fixed?

%Re use this for dizzy damage avoidance
/%
@Function 1A5C50
{
ORI	V0, R0, 0 %negate close call damage avoidance
}
%/

%flower saver is hex 	18 hex
%flower fanatic is hex 	26 hex
%close call ability id: 21 hex (33 dec)

%Also...
%Flower health 			11 hex
%Perfect saver			28 hex
%Flower burst 			2E hex

%executed right after hammer/jump specific code
%it should execute once per move?
%text color + text cost reduction (displaying the lower number)
@Hook 41B6F0 %copy the flower fanatic code
{
PUSH	 RA
%Eternal cost increases
LI 		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LW		V1, 0 (S1)	
LB		V0, 0 (A0)						%strength
SUBU	V1, V1, V0
ADDIU	V0, R0, C 												%color: 1 = ffanatic, 1+ = fsaver		(now color 1D)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
.noEternal
%Check mega saver before danger saver
LIO		A0, 8010F290
LB		A0, 2 (A0)
SLTI	A0, A0, 2`
BEQ		A0, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI 	V0, R0, 1
LW		V1, 0 (S1)	
ADDU	V1, V1, V0	
ADDU	V1, V1, V0	
ADDU	V1, V1, V0
ADDIU	V0, R0, B 											%color: 1 = ffanatic, 1+ = fsaver		(now color 41)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		A0, 8010F290
LB		A0, 2 (A0)
SLTI	A0, A0, 6`
BEQ		A0, R0, .noDS
NOP
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
BEQ		V0, R0 .noDS
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
LW		V1, 0 (S1)	
ADDU	V1, V1, V0
ADDIU	V0, R0, 3 											%color: 1 = ffanatic, 1+ = fsaver		(now color 2E)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
.noDS
LIO		A0, 8010F290
LB		AT, 3 (A0)
LB		A0, 2 (A0)
SLT		V0, A0, AT
BNE		V0, R0, .noPS
NOP
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
BEQ		V0, R0 .noPS
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
LW 		V1, 0 (S1)
ADDU	V1, V1, V0
ADDIU	V0, R0, 4 											%color: 1 = ffanatic, 1+ = fsaver		(now color 14)		
SW		V1, 0 (S1)
%SW		V0, 0 (S2)										breaks string id?
SW		V0, 0 (S5)
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
ADDIU	V0, R0, E 											%	color: 1 = ffanatic, 1+ = fsaver		(now color 12)
SW		V0, 0 (S5)
BEQ		R0, R0, .noFB
NOP
.noFC
JAL		$HasGreedStone
NOP
BNE		V0, R0, .noFH
NOP
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0 .noFH
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
LW		V1, 0 (S1)	
ADDU	V1, V1, V0
ADDIU	V0, R0, 5 											%	color: 1 = ffanatic, 1+ = fsaver		(now color 12)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
%BEQ	R0, R0, .noFB
%NOP
.noFH
%flower burst
%Double check FH though
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BNE		V0, R0, .checkHP
NOP
.checkFP
LIO		A0, 8010F290
LB		AT, 5 (A0)
LB		A0, 6 (A0)
SLT		V0, AT, A0
BNE		V0, R0 .noFB
NOP
BEQ 	R0, R0, .checkFB
NOP
.checkHP
LIO		A0, 8010F290
LB		AT, 2 (A0)
LB		A0, 3 (A0)
SLT		V0, AT, A0
BNE		V0, R0 .noFB
NOP
.checkFB
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
BEQ		V0, R0 .noFB
DADDU	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
LW		V1, 0 (S1)	
ADDU	V1, V1, V0	%flower burst is *3
ADDU	V1, V1, V0
ADDU	V1, V1, V0
ADDIU	V0, R0, 6 												%color: 1 = ffanatic, 1+ = fsaver		(now color 44)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
BEQ		R0, R0, .noFB
NOP
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
LW		V1, 0 (S1)	
ADDU	V1, V1, V0
ADDIU	V0, R0, A 												%color: 1 = ffanatic, 1+ = fsaver		(now color 45)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LW		V1, 0 (S1)	
LB		V0, 0 (A0)						%strength
ADDU	V1, V1, V0
ADDIU	V0, R0, C 												%color: 1 = ffanatic, 1+ = fsaver		(now color 1D)
SW		V1, 0 (S1)
SW		V0, 0 (S5)
.noItem
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC2
NOP
%this code is dumb but if it works it works
%I can't find the actual cost text, but I can just mess up the number so it works right
%Look at S2 + 11 for cost byte
PUSH	T0, T1, T2
LB		T2, 11 (S2)
%Calculate visual cost (((S2 + 11) - (cost reductions) * multiplier))
LW		A1, 0 (S1)
%costs above 0 can't go below 1
BLT		A1, T2, .costok
SUB		T2, T2, A1
LI		T2, 1
.costok	
%check multiplier
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	T2, T2, A0
.nogreedstone
%Now multiply by 5
%ehh
SLL		T0, T2, 2		%*4
COPY	T1, T2
ADD		T2, T0, T1
%Calculate subtraction amount (((S2 + 11) - (cost reductions) * multiplier) - (S2 + 11))
LB		A0, 11 (S2)
SUB		T2, T2, A0
SUB		V1, R0, T2
SW		V1, 0 (S1)
POP		T0, T1, T2
.noFC2
%
POP 	RA
LBU		V0, 20E (S6) %hooked over
J 		802A6968
ADDIU	S3, S3, 1 %hooked over
}

%Flower coins multiplication A
%na I'll do it above



%Adding new colors
%Problem: Fp text does not use the same system

%Look around 802AD3E0 for colors
%	^	colors of number text

%The normal system
%0 = black (color 0A)
%1 = light blue (color 37)
%neither 0 nor 1 = blue (color 38)

%802A309C = loading the value for determining the color of the FP text
%802A30E8 = loading the value for determining the color of the POW text

%The game loads in different pointers for the different colors (????)



%where are the fp costs stored in memory?
%Around 802AD320 in a list

%Another table around 802AD440 that stores the thing just after FP cost



%reference icon script
/%
#new:Data $IconScript_Heart {
    08 % op_08
    05 03 % SetSize -- 32x32px
    0E 0000B000 % ScaleUniform (fixed point)
    04 % Loop
    02 3C $HeartCI4 $HeartCI4Palette % SetCI
    03 % Restart
    00 % End
}

compare with above
	08
	13	10 08
	04
	02	3C [image pointer] [palette pointer]
	03
	01
%/

%Add new HP text

%Pretty straightforward
%just load a different pointer instead of the regular FP text pointer

#new:Data $Icon_HPText
{ ~RasterFile:CI-4:HPText.png }

#new:Data $Palette_HPText
{ ~PaletteFile:CI-4:HPText.png }

#new:Data $Palette_HPTextDark
{ ~PaletteFile:CI-4:HPTextdark.png }


#new:Data $IconScript_HPText {
	00000008 
	00000013 00000010 00000008
	00000004 
	00000002 0000003C $Icon_HPText $Palette_HPText
	00000003 
	00000000
}

#new:Data $IconScript_HPTextDark {
	00000008 
	00000013 00000010 00000008
	00000004 
	00000002 0000003C $Icon_HPText $Palette_HPTextDark
	00000003 
	00000000
}



%Coins
%You pay coins
%Track this for greed stone + flower coins
%used to be Data_CoinMoveCount
#export:Data $Data_TurnsSinceUsedCoins
{
	00000000
}

%costs start 10x fp cost
%each time it doubles
%How many times can you use moves?
%1 fp = 10 * 128 (2^7) 		(7 times)
%2 fp = 20 * 64 (2^6)		(6 times)
%3 fp = 30 * 64 (2^6)		(6 times)
%4 fp = 40 * 32 (2^5)		(5 times)
%5 fp = 					(4 times)
%6 fp =						(4 times)
%7 fp = 					(3 times)
%...
%13 fp =					(2 times)
%...
%25 fp = 					(1 time)

#new:Data $Icon_CoinText
{ ~RasterFile:CI-4:CoinText.png }

#new:Data $Palette_CoinText
{ ~PaletteFile:CI-4:CoinText.png }

#new:Data $Palette_CoinTextDark
{ ~PaletteFile:CI-4:CoinTextdark.png }


#new:Data $IconScript_CoinText {
	00000008 
	00000013 00000010 00000008
	00000004 
	00000002 0000003C $Icon_CoinText $Palette_CoinText
	00000003 
	00000000
}

#new:Data $IconScript_CoinTextDark {
	00000008 
	00000013 00000010 00000008
	00000004 
	00000002 0000003C $Icon_CoinText $Palette_CoinTextDark
	00000003 
	00000000
}



%Palette format
%around 800FC2E0
%Uses RGBA format (0-31) (5 bits per color, but alpha gets 1 bit)

%Probably something the GPU uses and so breakpoints can't find what uses this

%Black FP text palette
%(only some of the non-black colors are used)
%FFFE 2949 6B59 8C61 A527 BDED D6B3 0001
%0001 0001 0001 0001 0001 0001 0001 0001

@Hook 417E2C
{
	%Check if Flower Health is active, if so, skip to 802A311C and load the pointer into A0
	PUSH	A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL		800E9D48
	ADDIU 	A0, R0, 11
	BEQ		V0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	SLTI	V0, V0, 1			%1 -> 0, 0 -> 1
	.noFH
	POP		A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	PUSH	A0
	JAL		$IsBadgeEquipped
	LI		A0, .Item:FlowerCoins
	BNE		A0, R0, .cointext
	NOP
	POP		A0
	BNE		V0, R0, .hptext
	NOP
	LW		V0, 0 (S4)
	PUSH	V1
	SLTI	V1, V0, 3
	BNE		V1, R0, .hookedover		%if V1 >= 3, set color to 0
	NOP
	ORI		V0, R0, 0
	.hookedover
	POP		V1	
	BEQ		V0, R0, .dobranch
	NOP
	J		802A30A4
	NOP
	.dobranch
	J		802A30B8
	NOP
	.hptext
	LI		A0, $IconScript_HPText
	J		802A311C
	NOP	
	.cointext
	POP		A0
	LI		A0, $IconScript_CoinText
	J		802A311C
	NOP	
}

%Grayed out text
%418A28 --> 802A3C98
%  438:  LA        A1, 801076BC
@Hook 418E60
{
	%Check if Flower Health is active, if so, skip to 802A311C and load the pointer into A0
	PUSH	A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	JAL		800E9D48
	ADDIU 	A0, R0, 11
	BEQ		V0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	SLTI	V0, V0, 1			%1 -> 0, 0 -> 1
	.noFH	
	POP		A0, A1, A2, T0, T1, T2, T3, RA	 %no clue which internal values the function uses so...
	%
	PUSH	A0
	JAL		$IsBadgeEquipped
	LI		A0, .Item:FlowerCoins
	BNE		A0, R0, .cointext
	NOP
	POP		A0
	BEQ		V0, R0, .normalend
	NOP
	LA        A1, $IconScript_HPTextDark
	J 		802A40D8
	RESERVED	
	.normalend
	LA        A1, 801076BC
	J 		802A40D8
	RESERVED
	.cointext
	POP		A0
	LA        A1, $IconScript_CoinTextDark
	J 		802A40D8
	RESERVED
}



%Value read at 802A308C = value used to check whether to load "FP" or "POW" (but moves you can't use are checked separately)
%	Note that manually setting this will change what the text is but it also causes some text misalignment
%	It will also crash when exiting the menu (probably trying to unload the wrong thing)

%	Note that the text color is also separate

%417A14 --> 802A2C84
%(a function responsible for finding the color/sprite of the FP and POW text)

%802A2C84 + 408
%417A14 + 408
@Hook 417E1C
{
	PUSH	A0, RA
	LUI		V0, 802B
	LW		V0, D4A0 (V0)
	BEQ		V0, R0, .end
	NOP	
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP
	BEQ		V0, R0, .noSC
	NOP
	BEQ		A0, R0, .noSC
	NOP
	POP		A0, RA
	LUI		V0, 802B
	LW		V0, D4A0 (V0)		%re-get this value properly
	LA		A0, $IconScript_CoinText
	J		802A30C0		%Jump ahead a bit more to avoid getting a new pointer
	NOP	
	.noSC
	LUI		V0, 802B
	LW		V0, D4A0 (V0)		%re-get this value properly
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	BEQ		A0, R0, .end
	ORI		V0, R0, 1				%POW text
	POP		A0, RA
	J		802A30B8		%Jump ahead to avoid running the code that replaces FP text with HP text 
	NOP
	.end
	POP		A0, RA
	J	    802A3094
	NOP
}

%hooked over
%	LUI		V0, 802B
%	LW		V0, D4A0 (V0)		

%value == 0 is "FP"
%otherwise it is "POW"

%The other ones loading that value (for loading when you can't use the move
%802A4078		<-- does change what is displayed but causes misalignment again ):
%802A3F70		<-- loading 0 does not seem to do much


%Gray pow text = address 80107778
%	^ never found where this is actually used

%it is here?
% 00418A28 --> 802A3C98
%494:  LA        A1, 8010776C

@Hook 418EBC
{
	PUSH	A0, V0, RA
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP
	BEQ		V0, R0, .noSC
	NOP
	BEQ		A0, R0, .noSC
	NOP
	LA		A1, $IconScript_CoinTextDark
	BEQ		R0, R0, .end
	NOP
	.noSC
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	LA      A1, 8010776C			%Gray pow text
	BEQ		A0, R0, .end
	NOP
	LA      A1, 801076BC			%Gray FP text
	.end
	POP		A0, V0, RA
	J		802A4130
	NOP
}




#export:Data $StellarNovaBoolean
{
	00000000
}

#export:Data $DarkBeamBoolean
{
	00000000
}




%Fix which thing blinks
/%


% Origin: HINT
% 00418A28 --> 802A3C98
#new:Function $Function_802A3C98
%/

/%
  364:  JAL       ~Func:status_menu_stop_blinking_sp
  368:  NOP

  378:  JAL       ~Func:status_menu_start_blinking_sp_bars
  37C:  NOP
%/

@Hook 418D8C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	JAL     ~Func:status_menu_stop_blinking_sp
	NOP
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A4004
	NOP
}

@Hook 418DA0
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, S1, RA
	COPY	S1, A0
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_start_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_start_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	COPY	A0, S1
	JAL     ~Func:status_menu_start_blinking_sp_bars
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, S1, RA	
	J		802A4018
	NOP
}

%also...
/%
% 00417A14 --> 802A2C84
#new:Function $Function_802A2C84
  C18:  JAL       ~Func:status_menu_stop_blinking_sp
  C1C:  NOP

  C48:  JAL       ~Func:status_menu_stop_blinking_sp
  C4C:  NOP

  CC8:  JAL       ~Func:status_menu_stop_blinking_sp
  CCC:  NOP
%/

@Hook 41862C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	JAL     ~Func:status_menu_stop_blinking_sp
	NOP
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A38A4
	NOP
}

@Hook 41865C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	JAL     ~Func:status_menu_stop_blinking_sp
	NOP
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A38D4
	NOP
}

@Hook 4186DC
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	JAL     ~Func:status_menu_stop_blinking_sp
	NOP
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A3954
	NOP
}

%also also...
/%
% 00418A28 --> 802A3C98
#new:Function $Function_802A3C98
  70C:  JAL       ~Func:status_menu_stop_blinking_sp
  710:  NOP
%/

@Hook 419134
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%stellar coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP	
	AND		V0, V0, A0
	BEQ		V0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:StellarFlowers
	BEQ		A0, R0, .noSF
	NOP
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noSF
	JAL     ~Func:status_menu_stop_blinking_sp
	NOP
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A43AC
	NOP
}



%Regular moves
/%
  314:  JAL       ~Func:status_menu_stop_blinking_fp
  318:  NOP
  
  324:  JAL       ~Func:status_menu_start_blinking_fp
  328:  NOP
%/

@Hook 418D3C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP		
	JAL     ~Func:status_menu_stop_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A3FB4
	NOP
}

@Hook 418D4C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_start_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP		
	JAL     ~Func:status_menu_start_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_start_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A3FC4
	NOP
}

%also...
/%
% 00417A14 --> 802A2C84
#new:Function $Function_802A2C84
  C08:  JAL       ~Func:status_menu_stop_blinking_fp
  C0C:  NOP

  C38:  JAL       ~Func:status_menu_stop_blinking_fp
  C3C:  NOP
    
  CB8:  JAL       ~Func:status_menu_stop_blinking_fp
  CBC:  NOP
%/

@Hook 41861C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP	
	JAL     ~Func:status_menu_stop_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A3894
	NOP
}

@Hook 41864C
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP		
	JAL     ~Func:status_menu_stop_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A38C4
	NOP
}

@Hook 4186CC
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP		
	JAL     ~Func:status_menu_stop_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A3944
	NOP
}

%also also...
/%
% 00418A28 --> 802A3C98
#new:Function $Function_802A3C98
  6FC:  JAL       ~Func:status_menu_stop_blinking_fp
  700:  NOP
%/

@Hook 419124
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%flower coins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerCoins
	BEQ		A0, R0, .nocoins
	NOP
	JAL     ~Func:status_menu_stop_blinking_coins
	NOP
	BEQ		R0, R0, .end
	NOP
	.nocoins
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	BEQ		A0, R0, .noFH
	NOP
	JAL		$HasGreedStone
	NOP	
	BNE		V0, R0, .noFH
	NOP		
	JAL     ~Func:status_menu_stop_blinking_hp
	NOP
	BEQ		R0, R0, .end
	NOP
	.noFH
	JAL     ~Func:status_menu_stop_blinking_fp
	NOP	
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA	
	J		802A439C
	NOP
}



%802A5988, 41A718 : btl_state_update_player_menu

%Place where SE is read from to determine if move can be used
%802A6518			<-- read once per move, modifying this to say "0" will work
%				*Having negative SE does not stop you from using 0 SE moves unless you have a high negative SE
%					Having negative SE will implicitly add 255/256 to your SE when calculating if you can use a move (w h y?)
%					star beam seems to require 0 SP while focus seems to be always usable
%				*Normal SE regen will reset negative SE back to 0
%802A65CC	(later) <-- read once, unclear purpose

%802A6518
%802A5988 + B90
%41A718 + B90

%this is wonky code but it just works
@Hook 41B2A8
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%Check stellar nova first
	LAB		T3, $StellarNovaBoolean
	%
	ORI		T4, R0, 0	
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	PUSH	V0
	JAL		$HasGreedStone
	NOP
	COPY	T4, V0
	POP 	V0
	BEQ		T4, R0, .noSC
	ORI		T4, R0, 0
	BEQ		A0, R0, .noSC
	NOP	
	ORI		T4, R0, 1				%color E
	.noSC	
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	BEQ		A0, R0, .postSFcheck
	ORI		T0, R0, 0	
	ORI		T0, R0, 1
	.postSFcheck
	JAL		$IsBadgeEquipped		%Stellar burst
	ORI		A0, R0, 127
	BEQ		A0, R0, .postSBcheck
	ORI		T1, R0, 0	
	LH		V0, 290 (S5)			%load star power	
	LB		V1, 28E (S5)			%load max star power
	SLL		V1, V1, 8
	ADDI	V1, V1, FFFF
	SLT		T1, V1, V0				%(max star power - 1) < star power is only true when you are at max SP
	.postSBcheck
	JAL		$IsBadgeEquipped		%Dark saver
	ORI		A0, R0, 142
	BEQ		A0, R0, .postDScheck
	ORI		T2, R0, 0	
	ORI		T2, R0, 1
	.postDScheck
	BNE		T4, R0, .useCoins
	NOP
	BEQ		T0, R0, .useSP
	NOP
	BEQ		R0, R0, .useFP
	NOP
	.useCoins
	%modify SP (now Coins) costs in V1
	LH		V0, C (S5)			%load star power
	LB		V1, 11 (S2)				%load cost?	
	ORI		T1, V1, 0
	ORI		T4, V1, 0	
	SLL		T1, T1, 4		%*1024 / 64
	SLL		T4, T4, 3		%*512 / 64
	%SLL		V1, V1, 6	%*64 / 64 (actually shift by 6 later)
	ADD		V1, V1, T1		%
	ADD		V1, V1, T4		%multiply V0 by 1600 	(V0 * (1024 + 512 + 64))
	%multiply by 2 if dark saver
	SLLV	V1, V1, T2	
	%multiply by 2 if stellar nova
	SLLV	V1, V1, T3
	%
	LAW		T1, $Data_TurnsSinceUsedCoins
	SUB		T1, R0, T1
	ADDI	T1, T1, 7`		%2 ^ 6 = 64
	BLT		T1, R0, .nomult	%not sure if SLLV works with negative values
	NOP
	SLLV	V1, V1, T1
	.nomult
	%
	SLT		V0, V0, V1
	BEQ		R0, R0, .end
	NOP
	.useFP
	LB		V0, 5 (S5)			%load star power
	LB		V1, 11 (S2)				%load cost?
	%multiply cost by 5
	ORI		T1, V1, 0
	SLL		V1, V1, 2
	%ADD	V1, V1, T1
	%multiply by 2 if dark saver
	SLLV	V1, V1, T2
	%multiply by 2 if stellar nova
	SLLV	V1, V1, T3
	SLT		V0, V0, V1					%check if current power < cost	
	BEQ		R0, R0, .end
	NOP
	.useSP
	LH		V0, 290 (S5)			%load star power
	BLTZL	V0, .postbranch			%branches by 2 lines if star energy <= 0	
	ADDIU	V0, V0, FF				%add 255 for some reason (prevents the later calculation from rounding to -1??)
	.postbranch
	LB		V1, 11 (S2)				%load cost?
	%multiply by 2 if dark saver
	SLLV	V1, V1, T2	
	%multiply by 2 if stellar nova
	SLLV	V1, V1, T3	
	%subtract 1 if stellar burst (not if cost would become 0 or below)
	SLTI	A0, V0, 2
	BNE		A0, R0, .subtractcosts
	NOP
	SUB		V1, V1, T1
	.subtractcosts
	SRA	V0, V0, 8					%shift by 8 to get real star power
	SLT	V0, V0, V1					%check if current power < cost
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA
	J		802A6530
	NOP
}

%hooked over (both the SP load and the cost load are right next to each other)
%LH		V0, 290 (S5)
%BLTZL	V0, 802A6524	%branches by 2 lines	
%ADDIU	V0, V0, FF
%LB		V1, 11 (S2)
%SRA	V0, V0, 8
%SLT	V0, V0, V1

/%
	.normal
	LH		V0, 290 (S5)			%load star power
	BLTZL	V0, .postbranch			%branches by 2 lines if star energy <= 0	
	ADDIU	V0, V0, FF				%add 255 for some reason (prevents the later calculation from rounding to -1??)
	.postbranch
	LB		V1, 11 (S2)				%load cost?
	SRA	V0, V0, 8					%shift by 8 to get real star power
	SLT	V0, V0, V1					%check if current power < cost
%/


%the logic for this
%stellar flowers ignores stellar burst
%stellar burst applies after dark saver




%Place where SE costs are read from
%802A6524	(overwritten above)
%802A73D0	(used for visual number?)
%802A65D8?  (does not read the top stuff?)

%802A73D0
%802A5988 + 1A48
%41A718 + 1A48
@Hook 41C160
{
	PUSH	A0, A1, A2, T0, T1, T2, T3, T4, RA
	%Check stellar nova first
	LAB		T3, $StellarNovaBoolean
	%
	ORI		T4, R0, 0	
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	PUSH	V0
	JAL		$HasGreedStone
	NOP
	COPY	T4, V0
	POP 	V0
	BEQ		T4, R0, .noSC
	ORI		T4, R0, 0
	BEQ		A0, R0, .noSC
	NOP	
	ORI		T4, R0, 1				%color E
	.noSC	
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	BEQ		A0, R0, .postSFcheck
	ORI		T0, R0, 0	
	ORI		T0, R0, 1
	.postSFcheck
	JAL		$IsBadgeEquipped		%Stellar burst
	ORI		A0, R0, 127
	BEQ		A0, R0, .postSBcheck
	ORI		T1, R0, 0	
	LIO		A2, 8010F290
	LH		V0, 290 (A2)			%load star power	
	LB		A1, 28E (A2)			%load max star power
	SLL		A1, A1, 8
	ADDI	A1, A1, FFFF
	SLT		T1, A1, V0				%(max star power - 1) < star power is only true when you are at max SP
	.postSBcheck
	JAL		$IsBadgeEquipped		%Dark saver
	ORI		A0, R0, 142
	BEQ		A0, R0, .postDScheck
	ORI		T2, R0, 0	
	ORI		T2, R0, 1
	.postDScheck
	BNE		T4, R0, .useCoins
	NOP
	BEQ		T0, R0, .useSP
	NOP
	BEQ		R0, R0, .useFP
	NOP
	.useCoins
	LB		V0, 11 (S2)				%load cost?
	%modify SP (now Coins) costs in V0	
	ORI		T1, V0, 0
	ORI		T4, V0, 0	
	SLL		T1, T1, 4		%need to shift by 10 to equal 1024
	SLL		T4, T4, 3		%*512
	ADD		V0, V0, T1		%
	ADD		V0, V0, T4		%multiply V0 by 1600 	(V0 * (1024 + 512 + 64))
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2	
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	%
	LAW		T1, $Data_TurnsSinceUsedCoins
	SUB		T1, R0, T1
	ADDI	T1, T1, 7`		%2 ^ 6 = 64
	BLT		T1, R0, .nomult	%not sure if SLLV works with negative values
	NOP
	SLLV	V0, V0, T1
	.nomult
	%
	BEQ		R0, R0, .end
	NOP
	.useFP
	LB		V0, 11 (S2)				%load cost?
	%multiply cost by 5
	ORI		T1, V0, 0
	SLL		V0, V0, 2
	%ADD	V0, V0, T1
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	BEQ		R0, R0, .end
	NOP
	.useSP
	LB		V0, 11 (S2)				%load cost?
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2	
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	%subtract 1 if stellar burst
	SLTI	A0, V0, 2
	BNE		A0, R0, .end
	NOP
	SUB		V0, V0, T1
	.end
	POP		A0, A1, A2, T0, T1, T2, T3, T4, RA
	J		802A73D8
	LUI		AT, 802B
}
%LB		V0, 11 (S2)
%LUI		AT, 802B

%Sidenote: Overwriting the value of T2 here with 0 or 1 (*basically the result of the above hook without pushing T2)
%			will cause all star moves except focus to be unusable with a "You can't select that" message




%Place where text color of SE text is set	(normally sets it to color 0)
%802A7440
%802A5988 + 1AB8
%41A718 + 1AB8
@Hook 41C1D0
{
	PUSH	RA, A0, T0, T1, T2, T3, V0	%lol
	%Check stellar nova first
	LAB		T3, $StellarNovaBoolean
	%
	BNE		T3, R0, .end
	ORI		T0, R0, D
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	JAL		$HasGreedStone
	NOP
	BEQ		V0, R0, .noSC
	NOP
	BEQ		A0, R0, .noSC
	NOP	
	ORI		T0, R0, E				%color E
	BEQ		R0, R0, .noSB
	NOP	
	.noSC
	ORI		T0, R0, 0
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	BEQ		A0, R0 .noSF
	NOP
	ORI		T0, R0, 8
	BEQ		R0, R0, .noSB
	NOP
	.noSF
	JAL		$IsBadgeEquipped		%Stellar burst
	ORI		A0, R0, 127
	BEQ		A0, R0 .noSB
	NOP
	LIO		T3, 8010F290
	LH		T1, 290 (T3)			%load star power	
	LB		T2, 28E (T3)			%load max star power
	SLL		T2, T2, 8
	BNE		T1, T2, .noSB
	NOP	
	ORI		T0, R0, 7
	BEQ		R0, R0, .noDS
	NOP
	.noSB
	JAL		$IsBadgeEquipped		%Dark saver
	ORI		A0, R0, 142
	BEQ		A0, R0 .noDS
	NOP
	ORI		T0, R0, 9	
	.noDS
	.end
	SW		T0, D3E0 (AT)	%hooked over (sets color)
	POP		RA, A0, T0, T1, T2, T3, V0
	J		802A7448
	LUI		AT, 802B	%hooked over
}


%Place where SE is loaded to subtract from it
/%
% 001AF230 --> 80280950
#new:Function $Function_LoadStarPowerScript
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  LA        A1, 800DC070
   14:  SW        RA, 18 (SP)
   18:  SW        S0, 10 (SP)
   1C:  LH        V1, 17C (A1)			%Get selected move
   20:  LA        A0, 8010F290
   28:  SLL       V0, V1, 2
   2C:  ADDU      V0, V0, V1
   30:  SLL       V0, V0, 2
   34:  LTB       V0, V0 (8008F071)		%Move table (Load SE cost)
   40:  LHU       V1, 290 (A0)
   44:  SLL       V0, V0, 8
   48:  SUBU      V1, V1, V0
   4C:  SH        V1, 290 (A0)
   50:  LH        S0, 17A (A1)			%get ???
   54:  LA        V0, $???_8029C7D0
   5C:  SLL       S0, S0, 4				%*= 16 (0x10)
   60:  ADDU      S0, S0, V0
   64:  LW        A0, 0 (S0)			%dma out start
   68:  LW        A1, 4 (S0)			%dma out end
   6C:  JAL       ~Func:dma_copy
   70:  LW        A2, 8 (S0)			%dma endpoint
   74:  LW        V1, C (S0)			%use power script
   78:  SW        V1, 84 (S1)
   7C:  LW        RA, 18 (SP)
   80:  LW        S1, 14 (SP)
   84:  LW        S0, 10 (SP)
   88:  LI        V0, 2
   8C:  JR        RA
   90:  ADDIU     SP, SP, 20
}
%/

%Have to recalculate the costs since they get loaded directly from the move table
@Hook 1AF270 %80280990
{
	PUSH	RA, A1, A2, A3, T0, T1, T2, T3, T4
	COPY 	A3, V1
	%Check stellar nova first
	LAB		T3, $StellarNovaBoolean
	%		
	ORI		T4, R0, 0	
	JAL		$IsBadgeEquipped
	ORI		A0, R0, .Item:FlowerHealth
	PUSH	V0
	JAL		$HasGreedStone
	NOP
	COPY	T4, V0
	POP 	V0
	BEQ		T4, R0, .noSC
	ORI		T4, R0, 0
	BEQ		A0, R0, .noSC
	NOP	
	ORI		T4, R0, 1				%color E
	.noSC	
	JAL		$IsBadgeEquipped		%Stellar flowers
	ORI		A0, R0, 14F
	BEQ		A0, R0, .postSFcheck
	ORI		T0, R0, 0	
	ORI		T0, R0, 1
	.postSFcheck
	JAL		$IsBadgeEquipped		%Stellar burst
	ORI		A0, R0, 127
	BEQ		A0, R0, .postSBcheck
	ORI		T1, R0, 0	
	%ORI	T1, R0, 1
	LIO		A0, 8010F290
	LH		A1, 290 (A0)			%load star power	
	LB		A2, 28E (A0)			%load max star power
	SLL		A2, A2, 8
	ADDI	A2, A2, FFFF
	SLT		T1, A2, A1				%(max star power - 1) < star power is only true when you are at max SP	
	.postSBcheck
	JAL		$IsBadgeEquipped		%Dark saver
	ORI		A0, R0, 142
	BEQ		A0, R0, .postDScheck
	ORI		T2, R0, 0	
	ORI		T2, R0, 1
	.postDScheck
	BNE		T4, R0, .useCoins
	NOP
	BEQ		T0, R0, .useSP
	NOP
	BEQ		R0, R0, .useFP
	NOP
	.useCoins
	%modify SP (now Coins) costs in V0
	ORI		T1, V0, 0
	ORI		T4, V0, 0	
	SLL		T1, T1, 4		%need to shift by 10 to equal 1024
	SLL		T4, T4, 3		%*512
	ADD		V0, V0, T1		%
	ADD		V0, V0, T4		%multiply V0 by 1600 	(V0 * (1024 + 512 + 64))
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2	
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	%
	LAW		T1, $Data_TurnsSinceUsedCoins
	SUB		T1, R0, T1
	ADDI	T1, T1, 7`		%2 ^ 6 = 64
	BLT		T1, R0, .nomult	%not sure if SLLV works with negative values
	NOP
	SLLV	V0, V0, T1
	.nomult
	%
	LIO		A0, 8010F290
	LH      V1, C (A0)				%Coins
	SUBU    V1, V1, V0
	SH      V1, C (A0)	
	SLTI	V0, V0, 1
	BNE		V0, R0, .end
	NOP
	LI		A0, 81
	BEQ		A3, A0, .end
	NOP
	SAW		R0, $Data_TurnsSinceUsedCoins				%Stellar coins	
	BEQ		R0, R0, .end
	NOP
	.useFP
	%modify SP (now FP) costs in V0
	ORI		T1, V0, 0
	SLL		V0, V0, 2
	%ADD	V0, V0, T1		%multiply V0 by 5 	(V0 * (4 + 1))
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2	
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	%
	LIO		A0, 8010F290
	LBU     V1, 5 (A0)
	SUBU    V1, V1, V0
	SB      V1, 5 (A0)		
	BEQ		R0, R0, .end
	NOP
	.useSP
	%modify SP costs in V0
	%
	%multiply by 2 if dark saver
	SLLV	V0, V0, T2	
	%multiply by 2 if stellar nova
	SLLV	V0, V0, T3
	%subtract 1 if stellar burst (but don't allow this if cost would be 0 or less)
	SLTI	A0, V0, 2
	BNE		A0, R0, .subtractcosts
	NOP
	SUB		V0, V0, T1	
	.subtractcosts
	LIO		A0, 8010F290
	LHU     V1, 290 (A0)
	SLL     V0, V0, 8
	SUBU    V1, V1, V0
	SH      V1, 290 (A0)		
	.end
	LIO		A0, 8010F290
	POP	RA, A1, A2, A3, T0, T1, T2, T3, T4
	J		802809A0 %skips ahead a bit more
	NOP
}


/%
	.normal
	LIO		  A0, 8010F290
	LHU       V1, 290 (A0)
	SLL       V0, V0, 8
	SUBU      V1, V1, V0
	SH        V1, 290 (A0)	
%/

%Values at 802AD3E0 = Determines color of number text for moves (both normal moves and star moves)


%802A4024 is right before determining main color
%Color codes are the same as in strings

%802A404C
%No: This version does not work because it also affects the star power text colors
/%
@Hook 418DDC
{
	PUSH	RA, V0, V1, A0, A1, A2
	LIO		A0, 8010F290
	LB		A0, 2 (A0)
	SLTI	A0, A0, 6`	
	BEQ		A0, R0, .noDS
	NOP
	PUSH	T0	%need to keep this from being overwritten
	JAL		800E9D48
	ADDIU 	A0, R0, 21
	POP		T0
	BEQ		V0, R0, .noDS
	NOP
	ADDIU	T0, R0, 2E					%2E
	.noDS
	LIO		A0, 8010F290
	LB		AT, 3 (A0)
	LB		A0, 2 (A0)
	SLT		V0, AT, A0
	BEQ		V0, R0, .noPS
	NOP
	PUSH	T0	%need to keep this from being overwritten
	JAL		800E9D48
	ADDIU 	A0, R0, 28
	POP		T0
	BEQ		V0, R0, .noPS
	NOP
	ADDIU	T0, R0, 36					%36
	.noPS
	PUSH	T0	%need to keep this from being overwritten
	JAL		800E9D48
	ADDIU 	A0, R0, 11
	POP		T0
	BEQ		V0, R0, .noFH
	NOP
	ADDIU	T0, R0, 12					%12
	BEQ		R0, R0, .noFB
	NOP
	.noFH
	PUSH	T0	%need to keep this from being overwritten
	JAL		800E9D48
	ADDIU 	A0, R0, 2E
	POP		T0
	BEQ		V0, R0, .noFB
	NOP
	ADDIU	T0, R0, 44					%44	
	.noFB
	POP		RA, V0, V1, A0, A1, A2
	LW		V0, 0 (S4)
	J 		802A4054
	SLL		V1, V0, 2
}
%Set T0 to color
%/
%Use value from V1 to set color properly
@Hook 418DDC
{
	PUSH	RA, V0, V1, A0, A1, A2
	ADDIU	A0, R0, 3
	BNE		V1, A0, .noDS				%Danger saver
	NOP
	ADDIU	T0, R0, 2E					%2E
	BEQ		R0, R0, .end
	NOP
	.noDS
	ADDIU	A0, R0, 4
	BNE		V1, A0, .noPS				%Perfect saver
	NOP
	ADDIU	T0, R0, 36					%36
	BEQ		R0, R0, .end
	NOP
	.noPS
	ADDIU	A0, R0, 5
	BNE		V1, A0, .noFH				%Flower Health
	NOP
	ADDIU	T0, R0, 12					%12
	BEQ		R0, R0, .end
	NOP
	.noFH
	ADDIU	A0, R0, 6
	BNE		V1, A0, .noFB				%Flower Burst
	NOP
	ADDIU	T0, R0, 44					%44
	BEQ		R0, R0, .end
	NOP
	.noFB
	ADDIU	A0, R0, 7
	BNE		V1, A0, .noSB				%Stellar Burst
	NOP
	ADDIU	T0, R0, 22					%22
	BEQ		R0, R0, .end
	NOP
	.noSB
	ADDIU	A0, R0, 8
	BNE		V1, A0, .noSF				%Stellar flowers
	NOP
	ADDIU	T0, R0, 13					%13
	BEQ		R0, R0, .end
	NOP
	.noSF
	ADDIU	A0, R0, 9
	BNE		V1, A0, .noban				%Increased costs (red with black outline)
	NOP
	ADDIU	T0, R0, 7					%7
	BEQ		R0, R0, .end
	NOP
	.noban
	ADDIU	A0, R0, A
	BNE		V1, A0, .nodark				%Gray surrounded by black
	NOP
	ADDIU	T0, R0, 17					%17
	BEQ		R0, R0, .end
	NOP
	.nodark
	ADDIU	A0, R0, B
	BNE		V1, A0, .nomegasaver		%Light red surrounded by white
	NOP
	ADDIU	T0, R0, 41					%41
	BEQ		R0, R0, .end
	NOP
	.nomegasaver
	ADDIU	A0, R0, C
	BNE		V1, A0, .noitemboost		%Pure yellow surrounding white
	NOP
	LAB		T0, $ItemCostReductionData
	LAB		A2, $EternalCostIncreases
	SUB		T0, T0, A2
	BLT		T0, R0, .yellowred
	NOP
	ADDIU	T0, R0, 1D					%1D
	BEQ		R0, R0, .end
	NOP
	.yellowred
	ADDIU	T0, R0, 3A					%3A
	BEQ		R0, R0, .end
	NOP
	.noitemboost	
	ADDIU	A0, R0, D
	BNE		V1, A0, .nostellarnova		%Purple outline surrounding white
	NOP
	ADDIU	T0, R0, 1E					%1E
	BEQ		R0, R0, .end
	NOP
	.nostellarnova
	ADDIU	A0, R0, E
	BNE		V1, A0, .noflowercoins		%orange-ish outline surrounding white
	NOP
	ADDIU	T0, R0, 3A					%39
	BEQ		R0, R0, .end
	NOP
	.noflowercoins
	.end
	POP		RA, V0, V1, A0, A1, A2
	LW		V0, 0 (S4)
	J 		802A4054
	SLL		V1, V0, 2
}


%partner menu stuff, executed once per move
%text color + text cost reduction?
@Hook 41D95C
{
PUSH	 RA
%Eternal cost increases
LI 		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LW		V1, 0 (S0)	
LB		V0, 0 (A0)						%strength
SUBU	V1, V1, V0
ADDIU	V0, R0, C 												%color: 1 = ffanatic, 1+ = fsaver		(now color 1D)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
.noEternal
%Check mega saver before danger saver
LIO		A0, 8010F290
LB		A0, 2 (A0)
SLTI	A0, A0, 2`
BEQ		A0, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
LW		V1, 0 (S0)	
ORI 	V0, R0, 1
ADDU	V1, V1, V0	
ADDU	V1, V1, V0	
ADDU	V1, V1, V0
ADDIU	V0, R0, B 											%color: 1 = ffanatic, 1+ = fsaver		(now color 41)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		V0, 8010F290
LB		V0, 2 (V0)
SLTI	V0, V0, 6`
BEQ		V0, R0, .noDS
NOP
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
BEQ		V0, R0 .noDS
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
LW 		V1, 0 (S0)
ADDU	V1, V1, V0
ADDIU	V0, R0, 3 											%color: 1 = ffanatic, 1+ = fsaver		(now color 2E)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
.noDS
LIO		V0, 8010F290
LB		A0, 3 (V0)
LB		V0, 2 (V0)
SLT		V0, V0, A0
BNE		V0, R0, .noPS
NOP
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
BEQ		V0, R0 .noPS
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
LW 		V1, 0 (S0)
ADDU	V1, V1, V0
ADDIU	V0, R0, 4 											%color: 1 = ffanatic, 1+ = fsaver		(now color 14)	
SW		V1, 0 (S0)
SW		V0, 0 (S2)
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
ADDIU	V0, R0, E 											%	color: 1 = ffanatic, 1+ = fsaver		(now color 12)
SW		V0, 0 (S2)
BEQ		R0, R0, .noFB
NOP
.noFC
JAL		$HasGreedStone
NOP
BNE		V0, R0, .noFH
NOP
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0 .noFH
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
LW 		V1, 0 (S0)
ADDU	V1, V1, V0
ADDIU	V0, R0, 5 											%	color: 1 = ffanatic, 1+ = fsaver		(now color 12)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
%BEQ	R0, R0, .noFB
%NOP
.noFH
%flower burst
%Double check FH though
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BNE		V0, R0, .checkHP
NOP
.checkFP
LIO		V0, 8010F290
LB		A0, 5 (V0)
LB		V0, 6 (V0)
SLT		V0, A0, V0
BNE		V0, R0, .noFB
NOP
BEQ 	R0, R0, .checkFB
NOP
.checkHP
LIO		V0, 8010F290
LB		A0, 2 (V0)
LB		V0, 3 (V0)
SLT		V0, A0, V0
BNE		V0, R0, .noFB
NOP
.checkFB
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
BEQ		V0, R0 .noFB
DADDU	A0, S3, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
LW		V1, 0 (S0)	
ADDU	V1, V1, V0	%flower burst is *3
ADDU	V1, V1, V0
ADDU	V1, V1, V0
ADDIU	V0, R0, 6 												%color: 1 = ffanatic, 1+ = fsaver		(now color 44)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
BEQ		R0, R0, .noFB
NOP
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
LW		V1, 0 (S0)	
ADDU	V1, V1, V0
ADDIU	V0, R0, A 												%color: 1 = ffanatic, 1+ = fsaver		(now color 45)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LW		V1, 0 (S0)	
LB		V0, 0 (A0)						%strength
ADDU	V1, V1, V0
ADDIU	V0, R0, C 												%color: 1 = ffanatic, 1+ = fsaver		(now color 1D)
SW		V1, 0 (S0)
SW		V0, 0 (S2)
.noItem
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC2
NOP
%this code is dumb but if it works it works
%I can't find the actual cost text, but I can just mess up the number so it works right
%Look at 802AD320 + (S1 * 4) - 4 for cost word (no easy access to move table here D:)
PUSH	T0, T1, T2
LI		T2, 802AD320
ADD		T2, S1, T2
ADD		T2, S1, T2
ADD		T2, S1, T2
ADD		T2, S1, T2
LW		T2, 0 (T2)
%Calculate visual cost (((S2 + 11) - (cost reductions) * multiplier))
LW		A1, 0 (S0)	
%costs above 0 can't go below 1
BLT		A1, T2, .costok
SUB		T2, T2, A1
LI		T2, 1
.costok
%check multiplier
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	T2, T2, A0
.nogreedstone
%Now multiply by 5
SLL		T0, T2, 2		%*4
COPY	T1, T2
ADD		T2, T0, T1
%Calculate subtraction amount (((S2 + 11) - (cost reductions) * multiplier) - (S2 + 11))
LI		A0, 802AD320
ADD		A0, S1, A0
ADD		A0, S1, A0
ADD		A0, S1, A0
ADD		A0, S1, A0
LW		A0, 0 (A0)
%LB		A0, 11 (S2)
SUB		T2, T2, A0
SUB		V1, R0, T2
SW		V1, 0 (S0)
POP		T0, T1, T2
.noFC2
%
POP 	RA
LBU	V0, 20E (S4) %hooked over
J 802A8BD4
ADDIU S1, S1, 1 %hooked over
}

%flower saver/ flower fanatic are both checked a lot of times

%jump menu, but also when switching to mario/ entering battle
%determining whether you can use move?
%Do not check flower health so that you can't reduce your HP below 1?
%	^ no, need to make sure the costs are perfectly accurate for later
@Hook 191EF0 %more checking
{
PUSH 	RA
SLL 	V0, V0, 1 %hooked over
SUBU 	S0, S0, V0 %hooked over
%DADDU  	A0, S5, R0
%JAL		802672AC	%weird ability checker code
%ADDIU 	A1, R0, 11
%SUBU 	S0, S0, V0
%Eternal cost increases
LI		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LB		A1, 0 (A0)						%strength
ADDU 	S0, S0, A1
.noEternal
.noFH
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 2`
BEQ		AT, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI		A0, R0, 3
SUBU 	S0, S0, A0
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 6`
BEQ		AT, R0, .noDS
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
SUBU 	S0, S0, V0 
.noDS
LIO		AT, 8010F290
LB		A0, 3 (AT)
LB		AT, 2 (AT)
SLT		AT, AT, A0
BNE		AT, R0, .noPS
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
SUBU 	S0, S0, V0 
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
BEQ		R0, R0, .noFB
NOP
.noFC
%if flower health is active, load different condition (2 vs 3)
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0, .checkFP
NOP		
.checkHP
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
ADDI	S0, S0, FFFF			%Flower health subtraction
LIO		AT, 8010F290
LB		A0, 2 (AT)
LB		AT, 3 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
BEQ		R0, R0, .checkFH
NOP
.checkFP
LIO		AT, 8010F290
LB		A0, 5 (AT)
LB		AT, 6 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
.checkFH
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
ADDIU	A0, V0, 0
ADD		A0, A0, V0
ADD		A0, A0, V0
DADDU	V0, A0, R0
SUBU 	S0, S0, V0 
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
SUBU 	S0, S0, V0 
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LB		V0, 0 (A0)						%strength
SUBU 	S0, S0, V0 
.noItem
%Second flower coins code block
%Multiply everything by 10
%Then use SLLV if greed stone
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsB
NOP
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	S0, S0, A0
.nogreedstone
%Now multiply by 5
%I can probably use T0 and T1 since there are some messy functions above
SLL		T0, S0, 2		%*4
COPY	T1, S0
ADD		S0, T0, T1
.noflowercoinsB
POP RA
J 80263618
NOP
}

%hammer menu, but also when switching to mario/ entering battle
%determining whether you can use move?
%Do not check flower health so that you can't reduce your HP below 1?
%	^ no, need to make sure the costs are perfectly accurate for later
@Hook 19211C
{
PUSH 	RA
SLL 	V0, V0, 1 %hooked over
SUBU 	S0, S0, V0 %hooked over
%DADDU  	A0, S5, R0
%JAL		802672AC	%weird ability checker code
%ADDIU 	A1, R0, 11
%SUBU 	S0, S0, V0
%Eternal cost increases
LI		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LB		A1, 0 (A0)						%strength
ADDU 	S0, S0, A1 
.noEternal
.noFH
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 2`
BEQ		AT, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI		A0, R0, 3
SUBU 	S0, S0, A0
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 6`
BEQ		AT, R0, .noDS
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
SUBU 	S0, S0, V0 
.noDS
LIO		AT, 8010F290
LB		A0, 3 (AT)
LB		AT, 2 (AT)
SLT		AT, AT, A0
BNE		AT, R0, .noPS
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
SUBU 	S0, S0, V0 
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
BEQ		R0, R0, .noFB
NOP
.noFC
%also make sure flower health is inactive
%if flower health is active, load different condition (2 vs 3)
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0, .checkFP
NOP		
.checkHP
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
ADDI	S0, S0, FFFF			%Flower health subtraction
LIO		AT, 8010F290
LB		A0, 2 (AT)
LB		AT, 3 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
BEQ		R0, R0, .checkFH
NOP
.checkFP
LIO		AT, 8010F290
LB		A0, 5 (AT)
LB		AT, 6 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
.checkFH
DADDU  	A0, S5, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
ADDIU	A0, V0, 0
ADD		A0, A0, V0
ADD		A0, A0, V0
DADDU	V0, A0, R0
SUBU 	S0, S0, V0 
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
SUBU 	S0, S0, V0 
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LB		V0, 0 (A0)						%strength
SUBU 	S0, S0, V0 
.noItem
%Second flower coins code block
%Multiply everything by 10
%Then use SLLV if greed stone
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsB
NOP
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	S0, S0, A0
.nogreedstone
%Now multiply by 5
%I can probably use T0 and T1 since there are some messy functions above
SLL		T0, S0, 2		%*4
COPY	T1, S0
ADD		S0, T0, T1
.noflowercoinsB
POP RA
J	80263844
NOP
}

%partner menu (executed when switching to partner)
%determining whether you can use move?
%Do not check flower health so that you can't reduce your HP below 1?
%	^ no, need to make sure the costs are perfectly accurate for later
@Hook 19231C
{
PUSH 	RA
SLL 	V0, V0, 1 %hooked over
SUBU 	S0, S0, V0 %hooked over
%DADDU  	A0, S5, R0
%JAL		802672AC	%weird ability checker code
%ADDIU 		A1, R0, 11
%SUBU 		S0, S0, V0
%Eternal cost increases
LI		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LB		A1, 0 (A0)						%strength
ADDU 	S0, S0, A1 
.noEternal
.noFH
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 2`
BEQ		AT, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI		A0, R0, 3
SUBU 	S0, S0, A0
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 6`
BEQ		AT, R0, .noDS
NOP
DADDU  	A0, S5, R0
JAL		800E9D48
ADDIU 	A0, R0, 21
%Use the other one because this one erroneously returns 0
%JAL		802672AC	%weird ability checker code
%ADDIU 	A1, R0, 21
SUBU 	S0, S0, V0 
.noDS
LIO		AT, 8010F290
LB		A0, 3 (AT)
LB		AT, 2 (AT)
SLT		AT, AT, A0
BNE		AT, R0, .noPS
NOP
DADDU  	A0, S5, R0
JAL		800E9D48
ADDIU 	A0, R0, 28
%JAL		802672AC	%weird ability checker code
%ADDIU 	A1, R0, 28
SUBU 	S0, S0, V0 
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
BEQ		R0, R0, .noFB
NOP
.noFC
%also make sure flower health is inactive
%if flower health is active, load different condition (2 vs 3)
DADDU  	A0, S5, R0
JAL		800E9D48
ADDIU 	A0, R0, 11
BEQ		V0, R0, .checkFP
NOP		
.checkHP
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
ADDI	S0, S0, FFFF			%Flower health subtraction
LIO		AT, 8010F290
LB		A0, 2 (AT)
LB		AT, 3 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
BEQ		R0, R0, .checkFH
NOP
.checkFP
LIO		AT, 8010F290
LB		A0, 5 (AT)
LB		AT, 6 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
.checkFH
DADDU  	A0, S5, R0
JAL		800E9D48
ADDIU 	A0, R0, 2E
%JAL		802672AC	%weird ability checker code
%ADDIU 	A1, R0, 2E
ADDIU	A0, V0, 0
ADD		A0, A0, V0
ADD		A0, A0, V0
DADDU	V0, A0, R0
SUBU 	S0, S0, V0 
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
SUBU 	S0, S0, V0 
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LB		V0, 0 (A0)						%strength
SUBU 	S0, S0, V0 
.noItem
%Second flower coins code block
%Multiply everything by 10
%Then use SLLV if greed stone
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsB
NOP
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	S0, S0, A0
.nogreedstone
%Now multiply by 5
%I can probably use T0 and T1 since there are some messy functions above
%no?
PUSH	T0, T1
SLL		T0, S0, 2		%*4
COPY	T1, S0
ADD		S0, T0, T1
POP		T0, T1
.noflowercoinsB
POP RA
J	80263A44
NOP
}

%Item menu? (uses normal cost)
%Need to find and add code (but it is hard)


%executed when preforming FP-costing moves
%decrementing the move cost from your fp? (this is actually right before that, see below for actual FP subtraction)
@Hook 19250C
{
PUSH 	RA
SLL 	V0, V0, 1 %hooked over
SUBU 	S0, S0, V0 %hooked over
%Eternal cost increases
LI		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LB		A1, 0 (A0)						%strength
ADDU 	S0, S0, A1 
.noEternal
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 2`
BEQ		AT, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI		A0, R0, 3
SUBU 	S0, S0, A0
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 6`
BEQ		AT, R0, .noDS
NOP
DADDU  	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
SUBU 	S0, S0, V0 
.noDS
LIO		AT, 8010F290
LB		A0, 3 (AT)
LB		AT, 2 (AT)
SLT		AT, AT, A0
BNE		AT, R0, .noPS
NOP
DADDU  	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
SUBU 	S0, S0, V0 
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
BEQ		R0, R0, .noFB
NOP
.noFC
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU  	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
SUBU 	S0, S0, V0
BNE		V0, R0, .checkHP
NOP
.noFH
.checkFP
LIO		AT, 8010F290
LB		A0, 5 (AT)
LB		AT, 6 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
BEQ		R0, R0, .checkFB
NOP
.checkHP
LIO		AT, 8010F290
LB		A0, 2 (AT)
LB		AT, 3 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
.checkFB
DADDU  	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
ADDIU	A0, V0, 0
ADD		A0, A0, V0
ADD		A0, A0, V0
DADDU	V0, A0, R0
SUBU 	S0, S0, V0 
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
SUBU 	S0, S0, V0 
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LB		V0, 0 (A0)						%strength
SUBU 	S0, S0, V0 
.noItem
%Second flower coins code block
%Multiply everything by 10
%Then use SLLV if greed stone
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsB
NOP
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	S0, S0, A0
.nogreedstone
%Now multiply by 5
%I can probably use T0 and T1 since there are some messy functions above
SLL		T0, S0, 2		%*4
COPY	T1, S0
ADD		S0, T0, T1
.noflowercoinsB
POP RA
J	80263C34
NOP
}



%Kaiden -> Perfect Rush
%Kaiden has no visible effect, so we don't need to hunt down and remove an effect

%Note that code hooked over is calculating Mario's attack power boost
%I've also put a bunch of other attack modifying code here just to reduce the number of hooks I need to use
@Hook 1A0968
{
LW		A0, 18 (SP) %we need to get a certain thing for A0
PUSH	RA, S1, S2, T0
DADDU	S1, A0, R0				%set S1
%Fix for power rush and mega rush: set 800DC109 to either 2 or 1 depending on rush state
%Fix 2: have to properly negate the values if they are illegal (power rush with higher than 5 hp)
%Fix 3: set flag 0800 0000 at 800DC074
%set A0 properly
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code (The "real" ability checker function is 800E9D48)
ADDIU	A1, R0, 1E	%it requires a specific value in A0 or else it crashes the game
BEQ		V0, R0, .endpowerrush
NOP
LAB		V0, 8010F292
SLTI	V0, V0, 6
BEQ		V0, R0, .checkillegalpower
NOP
LI		V0, 2
SAB		V0, 800DC109
LUI		V0, 0800
LAW		A0, 800DC074
OR		A0, A0, V0
SAW		A0, 800DC074
BEQ		R0, R0, .endpowerrush
NOP
.checkillegalpower
LAB		V0, 800DC109
LI		A0, 2
BNE		V0, A0 .endpowerrush
NOP
SAB		R0, 800DC109
.endpowerrush
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code (The "real" ability checker function is 800E9D48)
ADDIU	A1, R0, 14	%it requires a specific value in A0 or else it crashes the game
BEQ		V0, R0, .endmegarush
NOP
LAB		V0, 8010F292
SLTI	V0, V0, 2
BEQ		V0, R0, .checkillegalmega
NOP
LI		V0, 1
SAB		V0, 800DC109
LUI		V0, 0800
LAW		A0, 800DC074
OR		A0, A0, V0
SAW		A0, 800DC074
BEQ		R0, R0, .endmegarush
NOP
.checkillegalmega
LAB		V0, 800DC109
LI		A0, 1
BNE		V0, A0 .endmegarush
NOP
SAB		R0, 800DC109
.endmegarush
%Check Perfect Rush
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code (The "real" ability checker function is 800E9D48)
ADDIU	A1, R0, 32	%it requires a specific value in A0 or else it crashes the game
BEQ		V0, R0, .end1
NOP
LIO		V0,	8010F290
LB		T0, 2 (V0)
LB		V0, 3 (V0)
BNE		V0, T0, .end1
NOP
ADDIU	S0, S0, 2 	%increase damage
.end1
%Now check Flower Power
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code (The "real" ability checker function is 800E9D48)
ADDIU	A1, R0, 17	%it requires a specific value in A0 or else it crashes the game
BEQ		V0, R0, .end2
NOP
LAB		V0, $FlowerPowerBool
BNE		V0, R0, .yes
NOP
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheck
NOP
%with flower coins, check coins
LAH			V0, 8010F29C
LI			V1, 3E7
BNE			V0, V1, .end2
NOP
BEQ			R0, R0, .yes
NOP
.noFCCheck
%if FH is active, load different condition
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU	A0, S1, R0
JAL		802672AC
ADDIU	A1, R0, 11				 	 %Chill out (now Flower Health)
BNE		V0, R0, .checkHP
NOP
.checkFP
LAB		V0, 8010F295
LAB		V1, 8010F296
BEQ		V0, V1, .yes
NOP
BEQ		R0, R0, .end2
NOP
.checkHP
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
LAB		V0, 8010F292
LAB		V1, 8010F293
BEQ		V0, V1, .yes
NOP
BEQ		R0, R0, .end2
NOP
.yes
ADDIU	S0, S0, 2 	%increase damage
.end2
%Stellar power
%+1 attack
%Lose 0.375 star power
%if you can't pay, -1 attack instead of +1
JAL		$IsBadgeEquipped
ORI		A0, R0, .Item:StellarPower
BEQ		A0, R0, .end3
NOP
%try to subtract
LAH		A0, 8010F520	%Curr SE (half)
ORI		T0, R0, 60		%0.375 power
SUB		A0, A0, T0
%special case
BEQ		A0, R0, .no
ORI		S2, R0, 1
BGT		A0, R0, .no
ORI		S2, R0, 1
ORI		A0, R0, 0
ORI		S2, R0, 0
.no
SAH		A0, 8010F520
SLL		S2, S2, 1		%either 0 or 2
ADDI	S2, S2, FFFF	%either -1 or +1
ADD		S0, S0, S2
.end3
%Dark power
%+1 attack when below 1/4 SP
%-1 attack when above 1/2 SP
%(no effect when between)
JAL		$IsBadgeEquipped
ORI		A0, R0, .Item:DarkPower
BEQ		A0, R0, .end4
NOP
LAH		A0, 8010F520	%Curr SE (half)
SLL		A0, A0, 1
SLL		T0, A0, 1		%a0 = 2 * se, T0 = 4 * se
LAB		A1, 8010F51E	%max SE
SLL		A1, A1, 8
%check if we should reduce or increase
BGT		T0, A1, .abovequarter
NOP
%increase damage
ADDI	S0, S0, 1
BEQ		R0, R0, .end4
NOP
.abovequarter
%no!!!!!
%ADDI	S0, S0, FFFF				%undo the increase				(problem: this runs twice?)
BLT		A0, A1, .end4 				%neither reduce nor increase
NOP
%decrease damage instead!
ADDI	S0, S0, FFFF				%subtract 1 instead!
%Done
.end4
DADDU	A0, S1, R0
LB		S2, 224 (A0) %Check chill dur
BEQ		S2, R0, .nochill
ORI		V0, R0, 0
LB		V0, 223 (A0) %Check chill str
.nochill
LB		S1, 221 (A0) %Attack power
SUB		V0, S1, V0	%Now V0 = attack power - chill
POP		RA, S1, S2, T0
LW		A0, 18 (SP) %hooked over
J		80272090
NOP
}
%LW		A0, 18 (SP) %hooked over
%LB		V0, 221 (A0) %hooked over	(Attack power boost)



%Star power code stuff
%Loads star power cost at 8008F070 + ???
%8028099C = place where star power is stored

%802A6518 = place where SE is loaded to check if you can afford powers

%802A655C = other place SE is loaded (only once)



%Healthy Healthy -> Perfect Stand

%Remove healthy healthy effect
%80277D74
%Need this to fix stone cap stuff
/%
@Function 1A6654
{
ORI		V0, R0, 0
NOP					%just override the next line, just to be safe
}
%/

%Overwrite 8027792C
%but wait! this is in IncreaseMaxHealth.patch!
%Code moved: last stand now occurs after damage (Makes it less ultra OP)
@Function 1A620C
{
	LHU		V1, 1B8 (S3)	%hooked over (Load mario HP)
	ORI		V1, R0, 0	%Reset V1 to 0 (Ignore last stand code)
}

/%
@Hook 1A620C
{
PUSH	V0, S2, T0, T1, T2, T3
DADDU	A0, S3, R0
JAL		802672AC
ADDIU	A1, R0, 37
BEQ		V0, R0, .normalend
NOP
DADDU	A0, S3, R0
JAL		802672AC		%Check last stand too
ADDIU	A1, R0, 20
LHU		V1, 1B8 (S3)	%mario hp
BEQ		V0, R0, .good
NOP
ORI		A1, R0, 6
BLT		V1, A1 .normalend
NOP
.good
LHU		V1, 1B8 (S3)	%mario hp
LB		S2, 3 (T0)		%mario mhp
BNE		V1, S2, .normalend
NOP
SRA		S0, S0, 1		%Half value
.normalend
LHU		V1, 1B8 (S3)	%hooked over (Load mario HP)
POP		V0, S2, T0, T1, T2, T3
J	80277934
SLTI	V1, V1, 6		%Last stand trigger (if hp < 6) (hooked over)
}
%/


/%
%Spin Attack -> Perfect Saver
%Id 40 / 0x28
%802B60F0
%This function breaks spinning without using Speedy Spin
@Function E25E50
{
ORI		V0, R0, 0
SB		A1, 3 (S3)
}
%/

%try overriding a different one?
%802B60F8
@Function E25E58
{
ORI		V0, R0, 0
}


%8004070C
@Function 1BB0C
{
ORI		V0, R0, 0
NOP
}

%800415F0
@Function 1C9F0
{
ORI		V0, R0, 0
NOP
}

%See above for code



%search for ability checker
%800E9D48



%Chill Out (badge) -> Flower Health
%Id 17 / 0x11

%80040868
@Function 1BC68
{
ORI		V0, R0, 0
NOP
}

%80040A48
@Function 1BE48
{
ORI		V0, R0, 0
NOP
}

%80041E44
@Function 1D24C
{
ORI		V0, R0, 0
NOP
}

%802418AC
@Function 17018C
{
ORI		V0, R0, 0
NOP
}

%80263C3C (loading FP to reduce it, also used for partner moves)
@Hook 19251C
{
PUSH	RA, V1	%this is next to a return statement, so it's probably fine to mess with stuff
SAB		R0, $FlowerPowerBool
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 17
BEQ		V0, R0, .fhealth	%skip if no badge
NOP
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheck
NOP
%with flower coins, check coins
LH			V0, C (S2)
LI			V1, 3E7
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.noFCCheck
JAL		$HasGreedStone
NOP
BNE		V0, R0, .checkFP
NOP
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0, .checkFP	%with FH, load different condition
NOP
.checkHP
LBU		V0, 2 (S2)
LBU		V1, 3 (S2)
BNE		V0, V1, .fhealth
NOP
BEQ		R0, R0, .success
NOP
.checkFP
LBU		V0, 5 (S2)
LBU		V1, 6 (S2)
BNE		V0, V1, .fhealth
NOP
.success
ORI		V0, R0, 1
SAB		V0, $FlowerPowerBool
%now for flower health
.fhealth
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckB
NOP
%with flower coins, check coins
LH			V0, C (S2)
SUBU		V0, V0, S0
SH			V0, C (S2)
BEQ			S0, R0 .noFCCheckB			%for some reason, changing partner makes it go into this code block so I need this
NOP
SAW			R0, $Data_TurnsSinceUsedCoins
BEQ			R0, R0, .end
NOP
.noFCCheckB
%
JAL		$HasGreedStone
NOP
BNE		V0, R0, .original
NOP
DADDU	A0, S1, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
BEQ		V0, R0, .original
NOP
LBU		V0, 2 (S2)
SUBU	V0, V0, S0
SB		V0, 2 (S2)
BEQ		R0, R0, .end
NOP
.original
LBU		V0, 5 (S2)
SUBU	V0, V0, S0
SB		V0, 5 (S2)
.end
POP		RA, V1
J 		80263C44
NOP
}

%We need to override 3 lines of code, this one is rewritten above
%SB		V0, 5 (S2)
@Function 192524
{
NOP
}

%80263A94 (loading FP for partner)
@Hook 192374
{
PUSH 		RA, V1
DADDU  		A0, S5, R0
JAL			800E9D48	%the other one doesn't really work here ):
%JAL			802672AC	%weird ability checker code
ADDIU 		A0, R0, 11
BEQ			V0, R0, .noFH
NOP
JAL			$HasGreedStone
NOP	
SLTI		V0, V0, 1			%1 -> 0, 0 -> 1
.noFH
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckB
NOP
LH			V0, C (FP)
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.noFCCheckB
%
BEQ			V0, R0, .original
NOP
LB			V0, 2 (FP)
ADDI		V0, V0, FFFF									%Act like you have 1 hp less than you really do in order to prevent killing yourself
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.original
LB			V0, 5 (FP)
SLT			V0, V0, S0
.end
POP			RA, V1
J			80263A9C
NOP
}


%80263888 (loading FP for mario hammer) + switching to mario
@Hook 192168
{
PUSH 		RA, V1
%check flower power
SAB			R0, $FlowerPowerBool
DADDU		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 17
/%
BEQ			V0, R0, .fhealth
NOP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP	
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
%/
BEQ			V0, R0, .fhealth	%skip if no badge
NOP
DADDU		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckA
NOP
LHU			V0, C (S7)
LI			V1, 999`
BEQ			V0, V1, .success
NOP
BEQ			R0, R0, .fhealth
NOP
.noFCCheckA
JAL			$HasGreedStone
NOP
BNE			V0, R0, .checkFP
NOP
BEQ			V0, R0, .checkFP	%with FH, load different condition
NOP
.checkHP
LBU			V0, 2 (S7)
LBU			V1, 3 (S7)
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.checkFP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP
.success
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
.fhealth
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckB
NOP
%with flower coins, check coins
LH			V0, C (S7)
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.noFCCheckB
%
JAL			$HasGreedStone
NOP
BNE			V0, R0, .original
NOP
DADDU  		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
BEQ			V0, R0, .original
NOP
LB			V0, 2 (S7)
ADDI		V0, V0, FFFF									%Act like you have 1 hp less than you really do in order to prevent killing yourself
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.original
LB			V0, 5 (S7)
SLT			V0, V0, S0
.end
POP			RA, V1
J			80263890
NOP
}

%80263658 (loading FP for mario jump) + switching to mario
@Hook 191F38
{
PUSH 		RA, V1
%check flower power
SAB			R0, $FlowerPowerBool
DADDU		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 17
/%
BEQ			V0, R0, .fhealth
NOP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP	
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
%/
BEQ			V0, R0, .fhealth	%skip if no badge
NOP
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheck
NOP
%with flower coins, check coins
LH			V0, C (S7)
LI			V1, 3E7
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.noFCCheck
JAL			$HasGreedStone
NOP
BNE			V0, R0, .checkFP
NOP
DADDU		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
BEQ			V0, R0, .checkFP	%with FH, load different condition
NOP
.checkHP
LBU			V0, 2 (S7)
LBU			V1, 3 (S7)
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.checkFP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP
.success
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
.fhealth
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckB
NOP
%with flower coins, check coins
LH			V0, C (S7)
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.noFCCheckB
%
JAL			$HasGreedStone
NOP
BNE			V0, R0, .original
NOP
DADDU  		A0, S5, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
BEQ			V0, R0, .original
NOP
LB			V0, 2 (S7)
ADDI		V0, V0, FFFF									%Act like you have 1 hp less than you really do in order to prevent killing yourself
SLT			V0, V0, S0
BEQ			R0, R0, .end
NOP
.original
LB			V0, 5 (S7)
SLT			V0, V0, S0
.end
POP			RA, V1
J			80263660
NOP
}

%802A6428 (loading FP for double dip / triple dip)

@Hook 41B1B8 %1D4D08
{
PUSH 		RA, S0, A0, A1, A2, A3, T0, T1, T2, T3 %well it stopped throwing errors so its fine
%check flower power
SAB			R0, $FlowerPowerBool
DADDU		A0, S7, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 17
/%
BEQ			V0, R0, .fhealth
NOP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP	
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
%/
BEQ			V0, R0, .fhealth	%skip if no badge
NOP
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheck
NOP
%with flower coins, check coins
LHU			V0, C (S7)
LI			V1, 3E7
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.noFCCheck
JAL			$HasGreedStone
NOP
BNE			V0, R0, .checkFP
NOP
DADDU		A0, S7, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
BEQ			V0, R0, .checkFP	%with FH, load different condition
NOP
.checkHP
LBU			V0, 2 (S7)
LBU			V1, 3 (S7)
BNE			V0, V1, .fhealth
NOP
BEQ			R0, R0, .success
NOP
.checkFP
LBU			V0, 5 (S7)
LBU			V1, 6 (S7)
BNE			V0, V1, .fhealth
NOP
.success
ORI			V0, R0, 1
SAB			V0, $FlowerPowerBool
.fhealth
%
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFCCheckB
NOP
%with flower coins, check coins
LH			V0, C (S5)
LB			V1, 11 (S2)
BEQ			R0, R0, .foundcost
NOP
.noFCCheckB
%
JAL			$HasGreedStone
NOP
BNE			V0, R0, .original
NOP
DADDU  		A0, S7, R0
JAL			802672AC	%weird ability checker code
ADDIU 		A1, R0, 11
BEQ			V0, R0, .original
NOP
LB			V0, 2 (S5)										%load hp also
ADDI		V0, V0, FFFF									%Act like you have 1 hp less than you really do in order to prevent killing yourself
LB			V1, 11 (S2)
BEQ			R0, R0, .foundcost
NOP
.original
LB			V0, 5 (S5)
LB			V1, 11 (S2)
.foundcost
%V1 = cost of Double/Triple dip
%Now its time to copy all the ability code
%
COPY	S0, V1
%
%Eternal cost increases
LI		A0, $EternalCostIncreases
LB		A1, 0 (A0)						%strength
BEQ		A1, R0, .noEternal
NOP
LB		A1, 0 (A0)						%strength
ADDU 	S0, S0, A1 
.noEternal
%Actually check the other abilities
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 18
BEQ		V0, R0 .noFlowerSaver
NOP
SUBU 	S0, S0, V0
.noFlowerSaver
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 26
BEQ		V0, R0 .noFlowerFanatic
NOP
SUBU 	S0, S0, V0
SUBU 	S0, S0, V0
.noFlowerFanatic
%
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 2`
BEQ		AT, R0, .noMS
NOP
JAL		$IsBadgeEquipped		%Mega saver
ORI		A0, R0, 153
BEQ		A0, R0 .noMS
NOP
ORI		A0, R0, 3
SUBU 	S0, S0, A0
BEQ		R0, R0, .noDS
NOP
.noMS
LIO		AT, 8010F290
LB		AT, 2 (AT)
SLTI	AT, AT, 6`
BEQ		AT, R0, .noDS
NOP
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 21
SUBU 	S0, S0, V0 
.noDS
LIO		AT, 8010F290
LB		A0, 3 (AT)
LB		AT, 2 (AT)
SLT		AT, AT, A0
BNE		AT, R0, .noPS
NOP
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 28
SUBU 	S0, S0, V0 
.noPS
%if flower coins, skip the FH and FB code
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noFC
NOP
BEQ		R0, R0, .noFB
NOP
.noFC
JAL		$HasGreedStone
NOP
BNE		V0, R0, .noFH
NOP
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 11
SUBU 	S0, S0, V0					%Do not not do this
BNE		V0, R0, .checkHP2
NOP
.noFH
.checkFP2
LIO		AT, 8010F290
LB		A0, 5 (AT)
LB		AT, 6 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
BEQ		R0, R0, .checkFB
NOP
.checkHP2
LIO		AT, 8010F290
LB		A0, 2 (AT)
LB		AT, 3 (AT)
SLT		AT, A0, AT
BNE		AT, R0, .noFB
NOP
.checkFB
DADDU  	A0, S7, R0
JAL		802672AC	%weird ability checker code
ADDIU 	A1, R0, 2E
ADDIU	A0, V0, 0
ADD		A0, A0, V0
ADD		A0, A0, V0
DADDU	V0, A0, R0
SUBU 	S0, S0, V0 
.noFB
%dark saver
JAL		$IsBadgeEquipped		%Dark saver
ORI		A0, R0, 142
BEQ		A0, R0 .noDarkS
NOP
COPY	V0, A0
SUBU 	S0, S0, V0 
.noDarkS
%Item boosts (I think these should be last)
LI		A0, $ItemCostReductionData
LB		A1, 1 (A0)						%count
BEQ		A1, R0, .noItem
NOP
LB		V0, 0 (A0)						%strength
SUBU 	S0, S0, V0 
.noItem
%Enforce cost floor
SLTI	V0, S0, 1`
BEQ		V0, R0, .nofloor
NOP
LI		S0, 1`
.nofloor
%Second flower coins code block
%Multiply everything by 10
%Then use SLLV if greed stone
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsB
NOP
JAL		$HasGreedStone
NOP
BEQ		V0, R0, .nogreedstone
NOP
LAW		A0, $Data_TurnsSinceUsedCoins
SUB		A0, R0, A0
ADDI	A0, A0, 7`		%2 ^ 6 = 64
BLT		A0, R0, .nogreedstone	%not sure if SLLV works with negative values
NOP
SLLV	S0, S0, A0
.nogreedstone
%Now multiply by 5
%I can probably use T0 and T1 since there are some messy functions above
SLL		T0, S0, 2		%*4
COPY	T1, S0
ADD		S0, T0, T1
.noflowercoinsB
%Good
%wait!!! load HP or coins if needed
LB			V0, 5 (S5)
COPY		V1, S0
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerHealth
BEQ		A0, R0, .noflowerhealth
NOP
COPY	AT, V0
JAL		$HasGreedStone
NOP
BNE		V0, R0, .noflowerhealth
COPY	V0, AT
LB			V0, 2 (S5)
ADDI		V0, V0, FFFF									%Act like you have 1 hp less than you really do in order to prevent killing yourself
.noflowerhealth
JAL		$IsBadgeEquipped
LI		A0, .Item:FlowerCoins
BEQ		A0, R0, .noflowercoinsC
NOP
LH		V0, C (S5)
.noflowercoinsC
%
POP			RA, S0, A0, A1, A2, A3, T0, T1, T2, T3
J			802A6430
NOP
}


%See above for more code






%Runaway Pay -> Flower Power
% ID 23 or 0x17

@Function 1739F0
{
ORI		V0, R0, 0
NOP
}

%There may be more functions
%Probably not (double checked)

%Other programming is done in the kaiden hook above

%Used to determine if flower power should be active 
%Should also check if FP = max as an alternative to this token
#export:Data $FlowerPowerBool
{
00000000
}
%#export $FlowerPowerBool


%Payoff -> Auto Dodge
%forgot where this is
@Function 241B4
{
ORI		V0, R0, 0
NOP
}

%80048BB8
@Function 23FB8
{
ORI		V0, R0, 0
NOP
}


%Other programming is done on TurnScript.bpat



%Convert Slow Go to Haste Step
%the speed modifier applies to walking, running, and spinning speeds
%(though spinning speed is just running speed multiplied by some value)

%hooked over: a check for slow go

@Hook 7F76C %800E62BC
{
%8010F020, 8010F024 are the speed values used
PUSH RA, A0
JAL 800E9D48
ADDI A0, R0, B %slow go (now haste step)
POP RA, A0 
%actually, we want to reset the values when you don't have it on
%BEQ V0, R0, .end
%NOP
%executes when you do have the badge
PUSH	RA, A0, A1, T0, F0, F2
LIO A0, 800F7B70 %actual speed values (addresses)
LIO T0, 8010F020
LIF	F2, 1.15 %speed multiplier
LWC1 F0, 0 (A0)
BEQ V0, R0, .skipmult
NOP
MUL.S F0, F0, F2
.skipmult
SWC1 F0, 0 (T0)
LWC1 F0, 4 (A0)
BEQ V0, R0, .skipmult2
NOP
MUL.S F0, F0, F2
.skipmult2
SWC1 F0, 4 (T0)
POP	RA, A0, A1, T0, F0, F2
.end
J 800E62C4
ORI V0, R0, 0 %the code after this would have disabled running when slow go was equipped ( if V0 = 1 )
}

%Try this
@Function E238E8 %802B6208
{
NOP %disable a no-run check
ORI	V0, R0, 0
}

@Function E23B74 %802B6494
{
NOP %disable a no-run check
ORI	V0, R0, 0
}



@Function E238F0 %802B6210
{
NOP %disable a no-run check
}

@Function E23B7C %802B649C
{
NOP %disable a no-run check
}



%Make dizzy attack not useless anymore
/%
% 00190678 --> 80261D98
#new:Function $Function_80261D98
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       ~Func:get_actor
    C:  LW        A0, 148 (A0)
   10:  COPY      A0, V0
   14:  LI        A1, 4
   18:  CLEAR     A2
   1C:  JAL       ~Func:inflict_status_set_duration
   20:  LI        A3, 1
   24:  JAL       ~Func:btl_update_ko_status
   28:  NOP
   2C:  LW        RA, 10 (SP)
   30:  LI        V0, 2
   34:  JR        RA
   38:  ADDIU     SP, SP, 18
}
%/

@Function 190698
{
	LI        A3, 2
}