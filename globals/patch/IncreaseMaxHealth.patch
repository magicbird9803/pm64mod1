%copied from pro mode source
%modified by shadeblade

%lets you set enemy hp and max hp to whatever you want
%put this in any enemy script
%Don't use this to change player hp because that's stored differently

#export:Function $Function_SetAllHealth %( short ) 	%sets maxhp and currenthp of current enemy to the input value
{
PUSH RA, A0, A1, T0 
JAL		~Func:get_variable
LW		A1, 0 (S0) %get argument 1
ADD 	T0, V0, R0
LW 		A0, 148 (S1) %script owner id?
JAL		80269D6C %{Func:GetActor}
NOP
SH		T0, 1B8 (V0) %curr hp
SH		T0, 1BA (V0) %max hp
POP RA, A0, A1, T0
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetAllHealth_B %( short ) 	%sets maxhp and currenthp of current enemy to the input value
{
PUSH RA, A0, A1, S0
JAL		~Func:get_variable
LW		A1, 0 (S0) %get argument 1
ADD 	T0, V0, R0
LW 		A0, 148 (S1) %script owner id?
JAL		80269D6C %{Func:GetActor}
NOP
COPY	A0, T0
COPY	S0, V0
JAL		$CurseMultiply
NOP
COPY	T0, V0
COPY	V0, S0
SH		T0, 1B8 (V0) %curr hp
SH		T0, 1BA (V0) %max hp
POP RA, A0, A1, S0 %these values don't really matter
JR	RA
ADDIU	V0, R0, 2
}

%#export $Function_SetAllHealth
%#export $Function_SetAllHealth_B

%===============================
%Loading in the hp values
%===============================
%originals (Use a breakpoints at those addresses if you want to find where enemy health is)
%80265508	SB V0, 1B8 (S1)
%8026550C 	SB V0, 1B9 (S1)

%If you're modifying how enemy hp is loaded, comment this out or replace it
/%
@Function 193DE8
{
SH V0, 1B8 (S1)
SH V0, 1BA (S1)
}
%/

%current problem: making sure nothing is broken

% =================================
% draw more digits
% =================================

%802809FC = table of digits


%modify this code to allow for higher numbers
@Hook 16EA88 % [802401A8]
{
%do defense drawing
JAL		$DefenseDisplay
NOP
%Don't print any unneeded digits
% PUSH	A2
ADDIU	T0, R0, 2710
SUB		T1, S4, T0
BLTZ	T1, .lt10000 % <10k
NOP
%%ADD		T0, R0, R0
ADDIU	T2, R0, 1FD0 %our number is more than 10k, set up digit printing
.printloop10k	%loop over the digits until you find the right one
%increment digit
ADDIU	T0, T0, 2710
SUB		T1, S4, T0
BLTZ	T1, .PrintDigit10000s %print time
ADDI	T1, T1, 2710 %fix value
BEQ		R0, R0, .printloop10k
ADDIU 	T2, T2, 28
.lt10000
%this was checking for the digit 0, we don't need to check it since anything less than 10k would have an empty space there
% SUBI	T2, T2, 1FA8
% BEQ		T2, R0, .PrintDigit10000s
% ADDI	T2, T2, 1FA8
BEQ		R0, R0, .1000s
NOP
%=============================== we have the digit, time to print
%ADDIU	T0, R0, C8
.PrintDigit10000s
ADDIU	T0, R0, C8 %?
ADD		S4, T1, R0
LUI		V0, 6666
ORI		V0, V0, 6667
MULT	S4, V0			
SRA		V0, S4, 1F
MFHI	T0
SRA		V1, T0, 2
SUBU	S1, V1, V0
SLL		S2, S1, 2
ADDU	V0, S2, S1
SLL		V0, V0, 1
%SUBU	S4, S4, V0       %if not commented, everything but the ones digit and the ten thousands digit disappears
LUI		S0, 802A
LW		S0, EFBC (S0)
ADDIU	A1, R0, A
JAL		801449DC
DADDU	A0, S0, R0
SLL		V0, S4, 2  		 
LUI		T0, 8028
ADDIU	T0, T0, 9FC		
LUI		A1, 8029		 
OR		A1, A1, T2		 
JAL		801447FC
DADDU	A0, S0, R0
DADDU	A0, R0, R0
DADDU	A1, A0, R0
LHU		V0, 2 (S6)
DADDU	A2, A0, R0
ADDIU	V0, V0, 6		
ANDI	V0, V0, FFFF	
SW		V0, 10 (SP)
LHU		V0, 2 (S5)		
DADDU	A3, A0, R0
SW		S8, 18 (SP)		
SW		S8, 1C (SP)		
ADDIU	V0, V0, 2
ANDI	V0, V0, FFFF
JAL		80267A3C
SW		V0, 14 (SP)
DADDU	A0, S0, R0
LW		A1, 20 (SP)
LW		A2, 24 (SP)
ADDIU	A1, A1, FFF2	%position offset (was 4 in 10s digit, A in 1s digit)
JAL		80144984
ADDIU	A2, A2, 6
JAL		801447C4
DADDU	A0, S0, R0
ADDIU	T2, R0, 1FA8	%this number will be used to signal to print 0 
.1000s
ADDIU	T0, R0, 3E8
SUB		T1, S4, T0
BLTZ	T1, .lt1000 % <1000 (but we need to print 0 if needed)
NOP
%%ADD		T0, R0, R0
ADDIU	T2, R0, 1FD0 %our number is more than 1000, set up digit printing
.printloop1k	%loop over the digits until you find the right one
%increment digit
ADDIU	T0, T0, 3E8
SUB		T1, S4, T0
BLTZ	T1, .PrintDigit1000s %print time
ADDI	T1, T1, 3E8 %fix value
BEQ		R0, R0, .printloop1k
ADDIU 	T2, T2, 28
.lt1000
ADDIU	T0, R0, 1FA8
BEQ		T2, T0, .PrintDigit1000s %print a 0
NOP
BEQ		R0, R0, .100s
NOP
%=============================== we have the digit, time to print
%ADDIU	T0, R0, C8
.PrintDigit1000s
ADDIU	T0, R0, C8 %?
ADD		S4, T1, R0
LUI		V0, 6666
ORI		V0, V0, 6667
MULT	S4, V0			
SRA		V0, S4, 1F
MFHI	T0
SRA		V1, T0, 2
SUBU	S1, V1, V0
SLL		S2, S1, 2
ADDU	V0, S2, S1
SLL		V0, V0, 1
%SUBU	S4, S4, V0       %if not commented, everything but the ones digit and the thousands digit disappears
LUI		S0, 802A
LW		S0, EFBC (S0)
ADDIU	A1, R0, A
JAL		801449DC
DADDU	A0, S0, R0
SLL		V0, S4, 2  		 
LUI		T0, 8028
ADDIU	T0, T0, 9FC
LUI		A1, 8029		 
OR		A1, A1, T2		 
JAL		801447FC
DADDU	A0, S0, R0
DADDU	A0, R0, R0
DADDU	A1, A0, R0
LHU		V0, 2 (S6)
DADDU	A2, A0, R0
ADDIU	V0, V0, 6		
ANDI	V0, V0, FFFF	
SW		V0, 10 (SP)
LHU		V0, 2 (S5)		
DADDU	A3, A0, R0
SW		S8, 18 (SP)		
SW		S8, 1C (SP)		
ADDIU	V0, V0, 2
ANDI	V0, V0, FFFF
JAL		80267A3C
SW		V0, 14 (SP)
DADDU	A0, S0, R0
LW		A1, 20 (SP)
LW		A2, 24 (SP)
ADDIU	A1, A1, FFF8	%position offset (was 4 in 10s digit, A in 1s digit)
JAL		80144984
ADDIU	A2, A2, 6
JAL		801447C4
DADDU	A0, S0, R0
ADDIU	T2, R0, 1FA8	%this number will be used to signal to print a 0 in the hundreds place
%we can just seamlessly go into the code for 100s place
BGEZ	S4, .100s %problem: S4 will be set to some negative number if there was a 0 in the thousands place
NOP
ADDI	S4, S4, 3E8
.100s
ADDIU	T0, R0, 64
SUB		T1, S4, T0
BLTZ	T1, .lt100 % <100 (but we need to print 0 if needed)
NOP
%%ADD		T0, R0, R0
ADDIU	T2, R0, 1FD0 %our number is more than 100, set up digit printing
.printloop	%loop over the digits until you find the right one
%increment digit
ADDIU	T0, T0, 64
SUB		T1, S4, T0
BLTZ	T1, .PrintDigit100s %print time
ADDI	T1, T1, 64 %fix value
BEQ		R0, R0, .printloop
ADDIU 	T2, T2, 28
.lt100
BGEZ	T1, .t1fine
NOP
ADDI	T1, T1, 64 %prevent some crashes when hundreds place is 0 (the value is supposed to be equal to the tens place + ones place)
.t1fine	
ADDIU	T0, R0, 1FA8
BEQ		T2, T0, .PrintDigit100s
NOP
BEQ		R0, R0, .return
NOP
%=============================== we have the digit, time to print
%ADDIU	T0, R0, C8
.PrintDigit100s
ADDIU	T0, R0, C8 %?
ADD		S4, T1, R0
LUI		V0, 6666
ORI		V0, V0, 6667
MULT	S4, V0			%similar to the other digit's code
SRA		V0, S4, 1F
MFHI	T0
SRA		V1, T0, 2
SUBU	S1, V1, V0
SLL		S2, S1, 2
ADDU	V0, S2, S1
SLL		V0, V0, 1
SUBU	S4, S4, V0       %this causes problems when hundreds digit = 0
LUI		S0, 802A
LW		S0, EFBC (S0)
ADDIU	A1, R0, A
JAL		801449DC
DADDU	A0, S0, R0
SLL		V0, S4, 2  		 
LUI		T0, 8028
ADDIU	T0, T0, 9FC
LUI		A1, 8029		 
OR		A1, A1, T2		 
JAL		801447FC
DADDU	A0, S0, R0
DADDU	A0, R0, R0
DADDU	A1, A0, R0
LHU		V0, 2 (S6)
DADDU	A2, A0, R0
ADDIU	V0, V0, 6		
ANDI	V0, V0, FFFF	
SW		V0, 10 (SP)
LHU		V0, 2 (S5)		
DADDU	A3, A0, R0
SW		S8, 18 (SP)		
SW		S8, 1C (SP)		
ADDIU	V0, V0, 2
ANDI	V0, V0, FFFF
JAL		80267A3C
SW		V0, 14 (SP)
DADDU	A0, S0, R0
LW		A1, 20 (SP)
LW		A2, 24 (SP)
ADDIU	A1, A1, FFFE	
JAL		80144984
ADDIU	A2, A2, 6
JAL		801447C4
DADDU	A0, S0, R0
% POP		A2
J		802401D8		%address is for printing 10s digit (so that it can print 0 if needed)
NOP						
.Return
LUI		V0, 6666
ORI		V0, V0, 6667
% POP		A2
J		802401B0		%start of 2 digit printing
NOP
}


% =================================
% Fix health bar calculation
% =================================

% @Function 16E8FC % [8024001C]
% LBU		S4, 1B8 (S3)
% LBU		V1, 1B9 (S3)
@Function 16E8FC % [8024001C]
{
LHU		S4, 1B8 (S3)
LHU		V1, 1BA (S3)
}

% =================================
% Fix kill checks after taking damage
% =================================

@Function 180378 % [80251A98]
{
NOP
}

@Function 1A0CB8 % [802723D8]
{
NOP
}

@Function 1AD44C % [8027EB6C]
{
NOP
}

% =================================
% Fix others
% =================================

% @Function 180444 % [80251B64]
% LBU		V0, 1B8 (S3)

% @Function 1A0B7C % [8027229C]
% LBU		S0, 1B8 (S3)

% @Function 1A0C34 % [80272354]
% LBU		V0, 1B8 (S3)

% @Function 1A0E9C % [802725BC]
% LBU		V0, 1B8 (S3)

% @Function 1A63B0 % [80277AD0]
% LBU		V0, 1B8 (S3)

% @Function 1A6428 % [80277B48]
% LBU		V0, 1B8 (S3)

% @Function 1A6494 % [80277BB4]
% LBU		V0, 1B8 (S3)

% @Function 1AD3C4 % [8027EAE4]
% LBU		V0, 1B8 (S3)

% @Function 1AD574 % [8027EC94]
% LBU		V0, 1B8 (S3)


@Function 180444 % [80251B64]
{
LHU		V0, 1B8 (S3)
}

@Function 1A0B7C % [8027229C]
{
LHU		S0, 1B8 (S3)
}

@Function 1A0C34 % [80272354]
{
LHU		V0, 1B8 (S3)
}

@Function 1A0E9C % [802725BC]
{
LHU		V0, 1B8 (S3)
}

%@Function 1A5DDC
%LHU		V0, F292 (V0)

%load player hp?
%this doesn't override stuff right

@Function 1A5DE4 % [80277504]
{
SH		V0, 1B8 (S3)
ADDIU	V0, R0, 007F
SH		V0, 1B8 (S3)
}

/%
%Check last stand
@Function 1A620C % [8027792C]
{
LHU		V1, 1B8 (S3)
}
%/


%Please work
/%
@Data 1A5DE4
{
A66201B8 %SH V0, 1B8 (S0)
2402007F %ADDIU	V0, R0, 007F
A66201B8 %SH V0, 1B8 (S0)
}
%/

@Function 1A63B0 % [80277AD0]
{
LHU		V0, 1B8 (S3)
}

@Function 1A6424 % [80277B44]
{
SH		V0, 1B8 (S3)
LHU		V0, 1B8 (S3)
}

@Function 1A6434
{
SH		R0, 1B8 (S3)
}

% @Function 1A6460
% LHU		V0, 1B8 (S3)

@Hook 1A6460 %fix player hp underflow
{
LHU		V0, 1B8 (S3)
%SLL		V0, V0, 10 %16 dec
ANDI	AT, V0, 80 %determine if negative number using sign bit (but this might fail if you somehow take more than 128 damage)
%SRL		V0, V0, 10
BEQ		AT, R0, .ok
NOP
ADD		V0, R0, R0
.ok
LUI		AT, 8011 %hooked over, part of loading the hp address
J	80277B88
NOP
}

@Function 1A6494 % [80277BB4]
{
LHU		V0, 1B8 (S3)
}

@Function 1AD3C4 % [8027EAE4]
{
LHU		V0, 1B8 (S3)
}

@Function 1AD574 % [8027EC94]
{
LHU		V0, 1B8 (S3)
}




%note that this causes div by 0 if you reduce an enemy's hp to 256
%but div by 0 in mips is equivalent to div by 1 i think
%(but nothing else seems to happen)
@Function 19C050
{
NOP %this used to be a break. Hopefully allowing /0 doesn't break anything
}

%likewise (this is in jr troopas script i think)
@Function 19C194
{
NOP
}

%===============================
%Part of the damageenemy function?
%===============================
/%
@Function 1A0CAC
{
LHU	V0, 1B8 (S3)
SUBU V0, V0, S0
SH	V0, 1B8 (S3)
}
%/

@Function 1A0CB4
{
SH	V0, 1B8 (S3)
}

%prevents negative hp
@Function 1A0CC4
{
SH	R0, 1B8 (S3)
}

%===============================
%More damage-enemy functions
%===============================
/%
@Function 1AD440 %180E6C
{
LHU	V0, 1B8 (S3)
SUBU V0, V0, A0
SH	V0, 1B8 (S3)
}
%/

@Function 1AD448
{
SH	V0, 1B8 (S3)
}

% =================================
% HealActor			(func_80270CA4)
% =================================

% @Function 19F90C % [8027102C]
% LBU		V1, 1B9 (S0)

%this function reads and writes to enemy hp many times, ofc
@Function 19F908 % [80271028]
{
LHU		V0, 1B8 (S0)
LHU		V1, 1BA (S0)
ADDU	V0, V0, S3
SH		V0, 1B8 (S0)
}

@Function 19F924
{
LHU		V0, 1BA (S0)
}

@Function 19F92C
{
SH		V0, 1B8 (S0)
}

% =================================
% SetEnemyHP		(func_8027C5C8)
% =================================

% @Function 1AAF04	% [8027C624] change bit-shifting by 18 to ANDI mask	
% ANDI	S0, S0, 00FF	
% NOP
@Function 1AAF00	% [8027C620] change bit-shifting by 18 to ANDI mask	
{
SH		S0, 1B8 (A1)
ANDI	S0, S0, FFFF %will this work? (idk what this code does)	
NOP
LH		V0, 1BA (A1)
LHU		V1, 1BA (A1)
SLT		V0, V1, S0
}
%these function overrides are right next to eachother

@Function 1AAF1C
{
SH		V1, 1B8 (A1)
LHU		V0, 1B8 (A1)
LHU		A0, 1BA (A1)
}

%	consolidated this modification with stuff above
% @Function 1AAF14	% [8027C634] compare with unsigned max HP
% SLT		V0, V1, S0

% @Function 1AAF20	% [8027C640] load unsigned for HP bar calculation
% LBU		V0, 1B8 (A1)
% LBU		A0, 1B9 (A1)

%	also consolidated into above
% @Function 1AAF20	% [8027C640] load 2 byte val for HP bar calculation
% LHU		V0, 1B8 (A1)
% LHU		A0, 1BA (A1)


% =================================
% GetActorHP		(func_8027C6A0)
% =================================

% @Function 1AAFFC	% [8027C71C] load unsigned
% LBU		A2, 1B8 (A2)	
@Function 1AAFFC	% [8027C71C] load 2-byte
{
LHU		A2, 1B8 (A2)	
}

% =================================
% GetEnemyMaxHP		(func_8027C748)
% =================================

% @Function 1AB06C % [8027C78C] load unsigned
% LBU		A2, 1B9 (V0)
@Function 1AB06C % [8027C78C] load 2-byte
{
LHU		A2, 1BA (V0)
}

%fix chill out killing enemies with <256 hp
@Function 1A7024
{
SH	V0, 1B8 (S0) 
%FIX killing enemies with mult of 256 hp
SLL	V0, V0, 10
SRL V1, V0, 10
}

%fix hp underflow (from partner damage)
@Function 1AD458
{
SH	R0, 1B8 (S3)
}

%fix item damage
/%
@Function 18036C
{
LHU		V0, 1B8 (S3)
SUB		V0, V0, A0
SH		V0, 1B8 (S3)
}
%/

@Function 180374
{
SH		V0, 1B8 (S3)
}

/%
@Function 180384
{
SH		R0, 1B8 (S3)
}
%/

@Function 1A7018
{
LHU	V0, 1B8 (S0)
}

%obselete (see above)
/%
@Function 1A702C
{
%Original code: SRA    V1, V0, 24`
%since enemy hp is now unsigned, we need to fix this to also do unsigned
%fixes zap tap, volt shroom, and chill out crashes on enemies with 129 or more hp
SRL V1, V0, 18
}
%/

%Also loading player hp?
@Function 1A5B6C %hope this doesn't break even more things
{
SH		V0, 1B8 (S0)
ADDIU	V0, R0, 007F
SH		V0, 1B8 (S0)
}

