%copy even more stuff from master quest
%but I'll have to modify some of the stuff


#new:Data $WarpsValueTable
{
$ToadTownValues			$KoopaBrosFortressValues
$DryDryRuinsValues		$BoosMansionValues
$TubbasCastleValues 	$ToyBoxValues
$MtLavaLavaValues		$FlowerFieldsValues
$CrystalPalaceValues	$BowsersCastleValues
$PeachsCastleValues		00000000 %terminator for function
}

#new:Data $TravelTextPointers
{
$ToadTownText			$KoopaBrosFortressText
$DryDryRuinsText		$BoosMansionText
$TubbasCastleText		$ToyBoxText
$MtLavaLavaText			$FlowerFieldsText
$CrystalPalaceText		$BowsersCastleText
$PeachsCastleText		00000000 %terminator for function
}

#new:Data $DynamicallyGeneratedWarpValues
{
%slightly different from the above, this is generated
%based on what maps you have visited, so you cant warp to places you dont have on the map screen
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000 %terminator for function
}

#new:Data $DynamicallyGeneratedTextPointers
{
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000
00000000 00000000 %terminator for function
}

#new:Data $ToadTownText
{
FF0D0B0B FF0500F7 344F4144 F7344F57
4EFDFDFD
}

#new:Data $KoopaBrosFortressText
{
FF0D0B0B FF0500F7 2B4F4F50 41F72252
4F53F726 4F525452 455353FD
}

#new:Data $DryDryRuinsText
{
FF0D0B0B FF0500F7 245259F7 245259F7
3255494E 53FDFDFD
}

#new:Data $BoosMansionText
{
FF0D0B0B FF0500F7 224F4F07 53F72D41
4E53494F 4EFDFDFD
}

#new:Data $TubbasCastleText
{
FF0D0B0B FF0500F7 34554242 410753F7
23415354 4C45FDFD
}

#new:Data $ToyBoxText
{
FF0D0B0B FF0500F7 344F59F7 224F58FD
}

#new:Data $MtLavaLavaText
{
FF0D0B0B FF0500F7 2D540EF7 2C415641
2C415641 FDFDFDFD
}

#new:Data $FlowerFieldsText
{
FF0D0B0B FF0500F7 264C4F57 4552F726
49454C44 53FDFDFD
}

#new:Data $CrystalPalaceText
{
FF0D0B0B FF0500F7 23525953 54414CF7
30414C41 4345FDFD
}

#new:Data $BowsersCastleText
{
FF0D0B0B FF0500F7 224F5753 45520753
F7234153 544C45FD
}

#new:Data $PeachsCastleText
{
FF0D0B0B FF0500F7 30454143 480753F7
23415354 4C45FDFD
}

%last byte of each 4 byte is unused

#new:Data $ToadTownValues
{
01020000
}

#new:Data $KoopaBrosFortressValues
{
07000000
}

#new:Data $DryDryRuinsValues
{
0B000000
}

#new:Data $BoosMansionValues
{
0C0A0000
}

#new:Data $TubbasCastleValues
{
0F000000
}

#new:Data $ToyBoxValues
{
10020400
}

#new:Data $MtLavaLavaValues
{
12000000
}

#new:Data $FlowerFieldsValues
{
13000000
}

#new:Data $CrystalPalaceValues
{
15000000
}

#new:Data $BowsersCastleValues
{
16170300
}

#new:Data $PeachsCastleValues
{
17020000
}

#new:Data $ValueForTesting
{
00000000
}

#new:Data $CursorAnimation
{
00000000
}

#new:Data $YPosCursor
{
0000003A
}

#new:Data $AFlag
{
00000000
}

#new:Function $DrawMenuBox
{
ADDIU sp, sp, -68
%%%%%%%%%%%%%%%%%%%%
SW  R0, 0010 (SP)
SW  R0, 0020 (SP)
SW  R0, 0024 (SP)
SW  R0, 0028 (SP)
SW  R0, 002C (SP)
SW  R0, 0030 (SP)
SW  R0, 0034 (SP)
SW  R0, 0038 (SP)
SW  R0, 003C (SP)
SW  R0, 0040 (SP)
SW	R0, 004C (SP)
%%%%%%%%%%%%%%%%%%%%
SW a0, 0050 (sp)
SW a1, 0054 (sp)
SW a2, 0058 (sp)
SW a3, 005C (sp)
SW ra, 0060 (sp)
LIO a0, 00FF %opacity
SW a0, 001C (sp)
ORI a0, r0, 0080 %width of box
SW a0, 0014 (sp) %store width
%ORI a0, r0, 007C %length of box
LAW a0, $AmountOfPointersToLoad
ORI a1, r0, 000B
MULT a0, a1
MFLO a0
ADDIU a0, a0, 0005
SW a0, 0018 (sp) %store length
ORI a0, r0, 0000
ORI a1, r0, 0004 %style
ORI a2, r0, 000C %x pos
ORI a3, r0, 0035 %y pos
JAL ~Func:draw_box
NOP
LW a0, 0050 (sp)
LW a1, 0054 (sp)
LW a2, 0058 (sp)
LW a3, 005C (sp)
LW ra, 0060 (sp)
JR RA
ADDIU sp, sp, 68
}

#new:Function $DrawingMenuBoxCursor
{
ADDIU sp, sp, -68
%%%%%%%%%%%%%%%%%%%%
SW  R0, 0010 (SP)
SW  R0, 0020 (SP)
SW  R0, 0024 (SP)
SW  R0, 0028 (SP)
SW  R0, 002C (SP)
SW  R0, 0030 (SP)
SW  R0, 0034 (SP)
SW  R0, 0038 (SP)
SW  R0, 003C (SP)
SW  R0, 0040 (SP)
SW	R0, 004C (SP)
%%%%%%%%%%%%%%%%%%%%
SW a0, 0050 (sp)
SW a1, 0054 (sp)
SW a2, 0058 (sp)
SW a3, 005C (sp)
SW ra, 0060 (sp)
LIO a0, 00FF %opacity
SW a0, 001C (sp)
ORI a0, r0, 0070 %width of box
SW a0, 0014 (sp) %store width
ORI a0, r0, 000C %length of box
SW a0, 0018 (sp) %store length
ORI a0, r0, 0000
ORI a1, r0, 0010 %style
ORI a2, r0, 000C %x pos
%ORI a3, r0, 003A %y pos
LAW a3, $YPosCursor
JAL ~Func:draw_box
NOP
LW a0, 0050 (sp)
LW a1, 0054 (sp)
LW a2, 0058 (sp)
LW a3, 005C (sp)
LW ra, 0060 (sp)
JR RA
ADDIU sp, sp, 68
}

%Need to change this since I'm actually using gamebyte A for other stuff
#new:Function $FlagFlipper
{
PUSH t0, t1, ra
ORI t0, r0, 0060
LAB t1, 8010EFCA
BEQ t0, t1, .end
NOP
LAB t0, 800DBDA2 %GameByte[032]
ANDI T0, T0, 1	 %Flag 1
BEQ t0, r0, .end
NOP
LAB t0, 800740A2
ANDI t0, t0, 0001 %if 01, player is peach
BNE t0, r0, .end
NOP
LAB t0, 800DBD70 %if in epilogue
ORI t1, r0, 0060
BEQ t0, t1, .end
NOP
LAW t0, 8009A600
ORI t1, r0, 0005
BEQ t0, t1, .end
NOP
LAH t0, 80074036
ORI t1, r0, 0010 %r button
BNE t0, t1, .end
NOP
LAW t0, 800DBD64
ANDI t0, t0, 0400 %check if toad town has been visited (parasol wont work until toad town has been visited)
BEQ t0, r0, .end
NOP
.flagcheck
LAW t0, $AFlag
BEQ t0, r0, .flipto1
NOP
JAL $UnlockPlayerMovement
NOP
JAL $RemoveMarioInvisibilityToEnemies
NOP
SAW r0, $AFlag
.end
POP t0, t1, ra
JR ra
NOP
.flipto1
LAB t0, 8010EFCA
BNE t0, r0, .end
NOP
ORI t0, r0, 0001
SAW t0, $AFlag
JAL $LockPlayerMovement
NOP
JAL $GiveMarioInvisibiltyToEnemies
NOP
ORI t0, r0, 003A
SAW t0, $YPosCursor
BEQ r0, r0, .end
NOP
}

#new:Function $LockPlayerMovement
{
PUSH t0
ORI t0, r0, 0020
SAB t0, 8010EFCA
POP t0
JR RA
NOP
}

#new:Function $UnlockPlayerMovement
{
SAB r0, 8010EFCA
JR RA
NOP
}

#new:Function $GiveMarioInvisibiltyToEnemies
{
PUSH t0, ra
ORI t0, r0, 0009	%using bow?
SAW t0, 8010EBB0
POP t0, ra
JR RA
NOP
}


#new:Function $RemoveMarioInvisibilityToEnemies
{
SAW r0, 8010EBB0
JR RA
NOP
}

#new:Function $StoreNumberofPointersFromDynamicWarpMenu
{
PUSH t0, t1, v0, ra
ORI v0, r0, 0000
LIO t0, $DynamicallyGeneratedWarpValues
.loop
LW t1, 0000 (t0)
BEQ t1, r0, .end
NOP
ADDIU t0, t0, 0004
BEQ r0, r0, .loop
ADDIU v0, v0, 0001
.end
SAW v0, $AmountOfPointersToLoad
POP t0, t1, v0, ra
JR RA
NOP
}

#new:Data $AmountOfPointersToLoad
{
00000000
}

#export:Function $MainAnimation
{
PUSH t0, ra
JAL $FlagFlipper
NOP
LAW t0, $AFlag
BEQ t0, r0, .end
NOP
%Function to execute if flag is 1
JAL $ClearDynamicMenus
NOP
JAL $GenerateDynamicWarpMenu
NOP
JAL $StoreNumberofPointersFromDynamicWarpMenu
NOP
JAL $DrawMenuBox
NOP
JAL $DrawingMenuBoxCursor
NOP
JAL $PrintTravelMenu
NOP
JAL $MoveCursor
NOP
.end
POP t0, ra
JR RA
NOP
}

#new:Function $CalcCursorIntPos
{
PUSH t0, t1
LAW t0, $YPosCursor
ADDIU t1, t0, FFC6 % -3A because menu starts at this pos
ORI t2, r0, 0000
BEQ t1, r0, .end
NOP
ORI t1, r0, 003A
.loop
ADDIU t2, t2, 0001
ADDIU t1, t1, 000A
BEQ t1, t0, .end
NOP
BEQ r0, r0, .loop
NOP
.end
POP t0, t1
JR RA
NOP
}

#new:Function $MoveCursor
{
PUSH t0, t1, t2, s0, s1, ra
LAW t0, $CursorAnimation
BNE t0, r0, .inanimation
NOP
LAH t0, 80074036
ORI t1, r0, 0800 %dpad up
BEQ t0, t1, .dpadup
NOP
ORI t1, r0, 0400 %dpad down
BEQ t0, t1, .dpaddown
NOP
BEQ r0, r0, .end
NOP
.dpadup
LAW t0, $YPosCursor
ORI t1, r0, 003A %min value (y pos of highest text)
BEQ t0, t1, .end
NOP
ADDIU t0, t0, FFFB
SAW t0, $YPosCursor
ORI t0, r0, 0001
SAW t0, $CursorAnimation
BEQ r0, r0, .end
NOP
.dpaddown
ORI t0, r0, 000A
LAW t1, $AmountOfPointersToLoad
MULT t0, t1
MFLO t1
ADDIU t1, t1, 0030 %min value (y pos of lowest text) calculated here
LAW t0, $YPosCursor
%ORI t1, r0, 009E %min value (y pos of lowest text)
BEQ t0, t1, .end
NOP
ADDIU t0, t0, 0005
SAW t0, $YPosCursor
ORI t0, r0, 0002
SAW t0, $CursorAnimation
BEQ r0, r0, .end
NOP
.end
POP t0, t1, t2, s0, s1, ra
JR RA
NOP
.inanimation
LAW t2, $YPosCursor
ORI t1, r0, 0001
BEQ t0, t1, .is1 %moving down
NOP
ORI t1, r0, 0002
BEQ t0, t1, .is2
NOP
.is1
ADDIU t2, t2, FFFB
SAW t2, $YPosCursor
SAW r0, $CursorAnimation
BEQ r0, r0, .end
NOP
.is2
ADDIU t2, t2, 0005
SAW t2, $YPosCursor
SAW r0, $CursorAnimation
BEQ r0, r0, .end
NOP
}

#new:Function $PrintTravelMenu
{
PUSH a0, a1, a2, a3, v0, t0, t1, ra
LIO v0, $DynamicallyGeneratedTextPointers
ORI a2, r0, 0030
ORI t0, r0, 0000
ORI t1, r0, 0000
.loop
LW a0, 0000 (v0)
BEQ a0, r0, .end
NOP
ORI a1, r0, 000A
ADDIU a2, a2, 000A
SAW r0, 800AE51C
ADDIU sp, sp, -30
SW a0, 0018 (sp)
SW a1, 001C (sp)
SW a2, 0020 (sp)
SW a3, 0024 (sp)
SW v0, 0028 (sp)
SW t0, 0010 (sp)
SW t1, 0014 (sp)
JAL 801264EC
ORI a3, r0, 00FE
LW a0, 0018 (sp)
LW a1, 001C (sp)
LW a2, 0020 (sp)
LW a3, 0024 (sp)
LW v0, 0028 (sp)
LW t0, 0010 (sp)
LW t1, 0014 (sp)
ADDIU sp, sp, 30
ADDIU v0, v0, 0004
BEQ r0, r0, .loop
NOP
.end
POP a0, a1, a2, a3, v0, t0, t1, ra
JR RA
NOP
}

#new:Function $WarpFunction
{
PUSH t0, a0, a1, a2, ra
LIO t0, 8003617C %value to change room pointer to
SAH r0, 800A0944 %Room change state to 0
SAW t0, 80151708 %Room change pointer
JAL $ReturnIndexFromValueTable
NOP
SAH a0, 800740AA %Group address
SAH a1, 800740B0 %Room address
SAH a2, 800740B2 %Entrance address
POP t0, a0, a1, a2, ra
JR RA
NOP
}

#new:Function $ReturnIndexFromValueTable
{
PUSH t0, t1, t2, t3, v0, ra
JAL $CalcCursorIntPos
NOP
LIO t0, $DynamicallyGeneratedWarpValues
ORI t1, r0, 0004
MULT t2, t1
MFLO t2
ADD t3, t2, t0 %return address of where to point index to t3
LW t3, 0000 (t3)
LB a0, 0000 (t3)
LB a1, 0001 (t3)
LB a2, 0002 (t3)
POP t0, t1, t2, t3, v0, ra
JR RA
NOP
}

%so its Func:si_CreateScript
%($script, int priority, bool unknown, int groupid)


%star rod already has a hook there, so move this slightly and add some stuff hooked over
/%
@Hook 82768
{
JAL $MainAnimation
NOP
JAL $GlobalInRoom
NOP
%										master quest used this to set a byte used for refresh count
%JAL $SetGamebyte034_to_07
%NOP
LIO ra, 800E974C
LW	S5, 7C (SP)
J 800E92B0
LW	S4, 78 (SP)
}
%/

@Hook 7A398
{
PUSH t0, ra
LAW t0, $AFlag
BEQ t0, r0, .end
NOP
LUI s0, 0001
ORI s0, s0, 0021
.end
POP t0, ra
LWC1 F0, 0080 (S1)
SW S0, 00A4 (S1)
J 800E0EF0
NOP
}

@Hook 11554 %[80036154]
{
SAW r0, $AFlag
LUI	AT, 800A
J 8003615C
SH	R0, 0944 (AT)
}

@Hook 11608 %[80036208]
{
LUI v1, 800A
ADDIU	V1, V1, A650
SAW r0, $AFlag
J 80036210
NOP
}


/%
Bits used for map locations (on pause screen map)
800DBD68
1  - Flower Fields
2  - Cloudly Climb
3  - Shiver City
4  - Shiver Snowfield
5  - Starborn Valley
6  - Shiver Mountain
7  - Crystal Palace
8  - Star Way

9  - Star Haven
10 - Bowser's Castle
11 - Princess Peach's Castle
12 - Mario's House
13 - Unused?
14 - Unused?
15 - Unused?
16 - Unused?

17 - 32 Unused?

800DBD64
1 - 8 Unused

9  - Unused?
10 - Unused?
11 - Toad Town
12 - Princess Peach's Castle (Castle Grounds)
13 - Shooting Star Summit
14 - Toad Town Tunnels
15 - Goomba Village
16 - Goomba Road

17 - Pleasant Path
18 - Koopa Village
19 - Koopa Bros. Fortress
20 - Mt. Rugged
21 - Dry Dry Desert
22 - Dry Dry Outpost
23 - Dry Dry Ruins
24 - Forever Forest

25 - Boo's Mansion
26 - Gusty Gulch
27 - Tubba Blubba's Castle
28 - Windy Mill
29 - Shy Guy's Toy Box
30 - Jade Jungle
31 - Yoshi's Village
32 - Mt. Lavalava%/

/%
Map bits used read from by parasol
Pause Screen Map Bits
800DBD68
1  - Flower Fields % 8
7  - Crystal Palace % 9
10 - Bowser's Castle % 10
11 - Princess Peach's Castle % 11


800DBD64
11 - Toad Town %  1
19 - Koopa Bros. Fortress % 2
23 - Dry Dry Ruins % 3
25 - Boo's Mansion % 4
27 - Tubba Blubba's Castle % 5
29 - Shy Guy's Toy Box % 6
32 - Mt. Lavalava % 7 %/

#new:Data $ParasolIcon
{
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000003 33333333 30000000 55500000
00000333 33333333 33330005 55550000
00003334 9AAAAAAA 94333355 FB550000
00003349 AAAAAAAA AAA9435F B6550000
00003333 4AAAA999 99999456 65500000
00000033 39994888 88888885 55000000
00000003 34888EEE EEEEEE87 11000000
00000003 338EEEEE EEEEEE8D 71000000
00000000 2288EEEE EEEEEE8D D1100000
00000000 222288EE EEEEEE8D C1100000
00000000 0222228E EEEEEE8D C7110000
00000000 00002228 EEEEEE8D CD110000
00000000 00005522 8EEEEE8D CC110000
00000555 50055FB2 28EEEE8D CC110000
00005555 5555FB65 228EEE8D CC110000
000555FB 555FB655 228EE87C CC110000
00055FF6 55FB6550 0228E8DC CC110000
00056F65 5FB65500 022887DC CC110000
00056F66 BB655000 022227DC CC110000
00056BFB B6550000 00221117 CD110000
00055666 65500000 00000111 D7110000
00005555 55000000 00000011 71100000
00000555 50000000 00000001 11100000
00000000 00000000 00000001 11000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
}

#new:Data $ParasolPalette
{
294A5A43 19DB7107 C2154215 8421B445
6C2FE353 FD5DC5EF F70BD587 8E3FD673
7BDE8421 7BDF8421 9CE78421 A529A529
A529AD6B C631C631 C631B5AD BDEFC631
}

#new:Data $ParasolVertexList
{
FFF0FFF0 00000000 00000000 000000FF 
000FFFF0 00000000 04000000 000000FF 
000F000F 00000000 04000400 000000FF 
FFF0000F 00000000 00000400 000000FF
}

#new:Data $DisplayList_Parasol
{
E7000000 00000000 D7000002 FFFFFFFF FCFFFFFF FFFCF279 E3000C00 00080000 
E3000D01 00000000 E3000F00 00000000 E3001001 00000000 E3001201 00003000 
E3001402 00000C00 E3001001 00008000 FD100000 $ParasolPalette E8000000 00000000 
F5000100 07000000 E6000000 00000000 F0000000 0703C000 E7000000 00000000 
FD48000F $ParasolIcon F5480400 07000000 E6000000 00000000 F4000000 0703E07C 
E7000000 00000000 F5400400 00000000 F2000000 0007C07C D9FDFFFF 00000000 
D9DFFFFF 00000000 01004008 $ParasolVertexList 05000204 00000000 05000406 00000000 
E7000000 00000000 DF000000 00000000 
}

#new:Data $DLScript
{
00000004 0000000D 00000001 0000003C $DisplayList_Parasol 00000002 00000000
}

#new:Function $ButtonCheck
{
 PUSH v0, a0, a2, v1, ra
% ADDIU          SP, SP, -18
% SW             RA, 0010 (SP)
 LW             V0, 000C (A0)
 LUI            A2, 8007
 LW             A2, 4034 (A2)
 LW             V1, 0000 (V0)
 LW             A1, 0004 (V0)
 AND            A2, A2, V1
 JAL            802C8098
 SLTU           A2, R0, A2
% LW             RA, 0010 (SP)
% ADDIU          V0, R0, 0002
 POP v0, a0, a2, v1, ra
 JR             RA
 NOP
% ADDIU          SP, SP, 18
}

 #new:Function $CloseMenu
{
 SAW r0, $AFlag
 JR RA
 NOP
}

#new:Function $LoadMenuBool
{
PUSH a0, a1, a2, a3, v0, ra
LIO		A1, FE363C85 %Var F
LAW  	A2, $AFlag %value to set VarF to
JAL		~Func:set_variable
NOP
POP a0, a1, a2, a3, v0, ra
JR RA
NOP
}

%Get rid of the animation?
#new:Script:Map $ParasolActive
{
	Call     $ButtonCheck 	( 00000020 *Var[F] ) %L button
	If *Var[F] == 00000001
	/%
  		SetConst *Var[A]  000000D6 
  		Call     PlaySound    ( 000003FA )
  		Wait     00000003 
  		Call     CreateImageObj ( *Var[A] $DLScript ) %CreateImageObj
  		Call	 GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  		Add 	 *Var[0] FFFFFFFE
  		Add 	 *Var[1] 0000002E
  		Add      *Var[2] FFFFFFFD
  		Call     SetObjPosition ( *Var[A] *Var[0] *Var[1] *Var[2] ) %SetObjPosition
  		Set      *Var[0]  00000085 
  		Call     SetObjRotation ( *Var[A] 00000000 00000000 *Var[0] ) %SetObjRotation
  		Set 	 *Var[0] 00000000
  		Call 	 $CloseMenu ()
  		Call 	 SetPlayerAnimation ( 0008000D )
  		Loop     00000040
  	  	Call   DisablePlayerPhysics ( .True )
  	  	Call   DisablePlayerInput ( .True )
  			Call 	 GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  		%
  			Set 	 *Var[3] *Var[0]
  			Set 	 *Var[4] *Var[1]
  			Set 	 *Var[5] *Var[2]
  		%
  			Add 	 *Var[3] FFFFFFFE
  			Add 	 *Var[4] 0000002E
  			Add    *Var[5] FFFFFFFD
  		%
  			Call   SetObjPosition ( *Var[A] *Var[3] *Var[4] *Var[5] ) %SetObjPosition
  			Add 	 *Var[1] 00000002
  			Call 	 SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  			Wait 	 0000001
  		EndLoop
	%/
		Call   	 $Function_SetSaveBlockColorToDefault ( )
  		Call $WarpFunction ()
	EndIf
Return
End			%umm
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
}

#export:Function $GlobalInRoom
{
PUSH v1, a0, a1, a2, a3, ra
LAW   a0, $AFlag
BEQ a0, r0, .end
NOP
LIO 	   A0, $ParasolActive
ADDIU    A1, R0, 000A
DADDU    A2, R0, R0
JAL 	802C33E0 %Start Script
NOP
.end
POP v1, a0, a1, a2, a3, ra
JR RA
NOP
}

#new:Function $ClearDynamicMenus
{
PUSH s0, s1, v0, v1
LIO s0, $DynamicallyGeneratedWarpValues
LIO s1, $DynamicallyGeneratedTextPointers
ORI v0, r0, 000B
ORI v1, r0, 0001
.loop
SW r0, 0000 (s0)
SW r0, 0000 (s1)
ADDIU s0, s0, 0004
ADDIU s1, s1, 0004
ADDIU v1, v1, 0001 %counter, once it hits 11 (0x0B) exit
BEQ v0, v1, .exit
NOP
BEQ r0, r0, .loop
NOP
.exit
POP s0, s1, v0, v1
JR RA
NOP
}

#new:Data $ANDBitsTable1
{
%800DBD64
00000400 %Toad Town
00040000 %Koopa Bros Fortress
00400000 %Dry Dry Ruins
01000000 %Boo's Mansion
04000000 %Tubba Blubba's Castle
10000000 %Shy Guy's Tox Box
80000000 %Mt. Lavalava
00000000
}

#new:Data $ANDBitsTable2
{
%800DBD68
00000001 %Flower Fields
00000040 %Crystal Palace
00000200 %Bowser's Castle
00000400 %Peach's Castle (in the air)
00000000
}


#new:Function $GenerateDynamicWarpMenu
{
PUSH t0, t1, t2, t3, t4, s0, s1, s2, s3, s4, s5, s6
LIO s0, $WarpsValueTable
LIO s1, $TravelTextPointers
LIO s2, $DynamicallyGeneratedWarpValues
LIO s3, $DynamicallyGeneratedTextPointers
LIO s4, 800DBD64 %Map Flags address
LIO s5, $ANDBitsTable1
LIO s6, 80000000 %used to know when the end
%
.loop % i think
LW t0, 0000 (s4) %load first 4 bytes from map flags address
LW t4, 0000 (s5) %load value from AND table
BEQ t4, s6, .changeregisterS5 %if value loaded is 80000000 (end of ANDI table 1)
NOP
BEQ t4, r0, .end %if end of AND table, exit
NOP
.afterchangingS5
AND t1, t0, t4 %if bit is 1 in both t0, t4
BEQ t1, r0, .notactive
NOP
%
LW t2, 0000 (s0) %load pointer from $WarpsValueTable
LW t3, 0000 (s1) %load pointer from $TravelTextPointers
SW t2, 0000 (s2) %save pointer to $DynamicallyGeneratedWarpValues
SW t3, 0000 (s3) %save pointer to $DynamicallyGeneratedTextPointers
ADDIU s2, s2, 0004
%BEQ r0, r0, .loop
ADDIU s3, s3, 0004
.notactive
ADDIU s0, s0, 0004 %next pointer in WarpValuesTable
ADDIU s1, s1, 0004 %next pointer in TravelTextPointers
BEQ r0, r0, .loop
ADDIU s5, s5, 0004 %next pointer in ANDBitsTable1
.changeregisterS5
LIO s5, $ANDBitsTable2
ADDIU s5, s5, FFFC
BEQ r0, r0, .afterchangingS5
ADDIU s4, s4, 0004
.end
POP t0, t1, t2, t3, t4, s0, s1, s2, s3, s4, s5, s6
JR RA
NOP
}

%#export $MainAnimation
%#export $GlobalInRoom