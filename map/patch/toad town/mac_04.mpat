/%
$ShopInventory_80243C6C
.Item:StoneCap        0000001E 00240007 % Turns Mario to stone and makes him unable to move  ...
.Item:DizzyDial       0000000F 00240029 % If it works, dazes and paralyzes all enemies brief ...
.Item:ThunderRage     00000014 00240002 % Lightning that strikes all enemies. Attack Power:  ...
.Item:TastyTonic      00000005 0024000E % A very tasty tonic. Cures poisoning and shrinking.
.Item:VoltShroom      0000000A 00240008 % Electrifies Mario briefly and damages enemies who  ...
.Item:SuperShroom     00000014 0024000A % A truly super Mushroom. Restores 10 HP.
00000000 00000000 00000000
%/

@ $ShopInventory_80243C6C %+ change some stuff around
{
.Item:CakeMix         0000000F 00250020 % cake description
.Item:FrightJar      0000000A 0024002A % Makes a scary spirit appear and chase some enemies ...
%.Item:DizzyDial       0000000F 00240029 % If it works, dazes and paralyzes all enemies brief ...
.Item:ThunderBolt     00000014 00230003 % thunder bolt description
.Item:ShroomBunch     00000019 002F0205 % shroom bunch desc
.Item:VoltShroom      0000000A 00240008 % Electrifies Mario briefly and damages enemies who  ...
.Item:SuperShroom     00000014 0024000A % A truly super Mushroom. Restores 10 HP.
00000000 00000000 00000000
}

% store room: replaced Volt Shroom with Iced Potato, Dizzy Dial with Hustle Drink
@ $Script_MakeEntities[14C]
{
	Call     MakeItemEntity ( 000200AF ~Vec3d:Item8024F40C 00000011 *Flag_MAC_AE )
	Call 	MakeItemEntity 	( 00020091 ~Vec3d:Item8024F430 00000011 *Flag_MAC_AF )
}


%Chet rippo rework
%He can now raise and lower stats more freely (with star tokens)

%Modify conditions for appearing
%He can now lower fp and bp to 0
%Raising and lowering stats works differently now, so only prevent him from appearing if all 3 can't be changed
@ $Script_Init_802497B0
{
		%When should chet rippo not appear?
		%Stats can't be lowered AND no star tokens to raise stats
		Set *Var0 0
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					If *StarTokenCount <= 0`
						Set *Var0 1`
					EndIf
				EndIf
			EndIf
		EndIf		
   D0:  If  *Var0  ==  00000000
   E0:  	Call  SetNpcCollisionSize   ( .Npc:Self 00000026 00000034 )
   F8:  	Call  $Function_80241BB8    ( FFFFFFFF *Fixed[2.0] )
  10C:  	Call  SetNpcFlagBits        ( .Npc:Self 00010000 .True )
  124:  	Call  BindNpcInteract       ( .Npc:Self $Script_Interact_80249184 )
  138:  Else
  140:  	Call  RemoveNpc ( .Npc:Self )
  150:  EndIf
		Set *MapFlag[6] .False
  158:  Return
  160:  End
}

%can you get a +1, 0, -1 setup with original chet rippo
%Not possible
%3x - 3z = 2
%3y - 3z = 1
%Well you can't get those numbers with integers :(

%+3, 0, -3
%x - z = 2
%y - z = 1
%Solutions are
%[2,1,0] + [1,1,1] * C
%Checking
%	2 * [2,-1,-1] + 1 * [-1,2,-1]
%	[4,-2,-2] + [-1,2,-1]
%	[3,0,-3]

@ $Script_Interact_80249184
{
	If  *GF_MAC04_Met_ChetRippo  ==  .False
		Set   *Var0  $String_ChetRippoFirst
		Set   *GF_MAC04_Met_ChetRippo  .True
	Else
		If *MapFlag[6] == .True
			Set   *Var0  $String_ChetRippoStartShort
		Else
			Set   *Var0  $String_ChetRippoStart
		EndIf
	EndIf
	Call  $Function_80241C20 ( )		%Not sure what this does
	Call  SpeakToPlayer     ( 0000000D 00A60004 00A60001 00000000 *Var0 ) % variable string ID
	%Now open a Choice menu depending on what you can do
	Label InitialChoice
	%Determine what is possible
	If *StarTokenCount > 0`
		Set *Var0 0`
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					Set *Var0 1`
				EndIf
				If *Var3 == 16`
					Set *Var0 1`
				EndIf
				If *Var3 == 20`
					Set *Var0 1`
				EndIf
			EndIf
		EndIf			
		Call  ShowCoinCounter   ( .True )
		If *Var0 == 0`
			Call	ShowChoice	( $String_ChetRippoNormalOptions )
		Else
			Call	ShowChoice	( $String_ChetRippoNoLower )
		EndIf
	Else
		%if you have no star tokens you can never get into a state where you can't raise stats
		%(You can lower your stats below the starting values)
		Call	ShowChoice	( $String_ChetRippoNoRaise )
	EndIf
	Switch	*Var[0]
		Case  ==  0  % raise
			% flush Choice message with EndSpeech, don't know if this is the 'correct' way to do it
			Call  ShowCoinCounter   ( .False )
			Call	EndSpeech	( 0000000D 00A60004 00A60001 00000000 )
			Goto Raise
		Case  ==  1  % lower
			% flush Choice message with EndSpeech, don't know if this is the 'correct' way to do it
			Call  ShowCoinCounter   ( .False )
			Call	EndSpeech	( 0000000D 00A60004 00A60001 00000000 )
			Goto Lower
		Case  ==  2  % cancel
			Call	ContinueSpeech	( 0000000D 00A60004 00A60001 00000000 000600AA )
			Call  ShowCoinCounter   ( .False )
			Call  $Function_80241C40 ( )
			Return
	EndSwitch
	%now to your menu selection
	%
	%raising (costs star tokens and coins)
	Label Raise
	If *StarTokenCount <= 0`
		Set *Var0 0`
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					Set *Var0 1`
				EndIf
				If *Var3 == 16`
					Set *Var0 1`
				EndIf
				If *Var3 == 20`
					Set *Var0 1`
				EndIf			
			EndIf
		EndIf			
		If *Var0 == 1`
			%Uh oh, paradox
			Call	SpeakToPlayer	( 0000000D 00A60004 00A60001 00000000 $String_Paradox )
			Call  GetNpcPos     ( 0000000D *Var0 *Var1 *Var2 )
			Call  PlaySoundAtNpc    ( 0000000D 00002098 00000000 )
			Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000001 00000001 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call  SetNpcPos     ( 0000000D 00000000 FFFFFC18 00000000 )
			Call  $Function_80241C40 ( )
			Return
		EndIf
		Call	SpeakToPlayer	( 0000000D 00A60004 00A60001 00000000 $String_ChetRippoNoStarTokens )
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now check coins
	%
	Call  $Function_802419D0 ( )
	If  *Var0  <  00000009
		Call  SpeakToPlayer    ( 0000000D 00A60004 00A60001 00000000 $String_ChetRippoTooPoor ) % What are you trying to pull? You don't have 39 coi ...
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now the menu
	Call  $Function_80241B90 ( )
	Call  SetMessageValue   ( *Var0 00000000 )
	Call  SetMessageValue   ( *Var1 00000001 )
	Call  SetMessageValue   ( *Var2 00000002 )
	Call  SpeakToPlayer    ( 0000000D 00A60004 00A60001 00000000 $String_RaiseMenu ) % There you go! Good call! Here's your current statu ...
	Call  ShowChoice        ( 001E000B ) % H P F P B P
	If  *Var0  ==  00000003
		Call  ShowCoinCounter   ( .False )
		Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AD ) % Aw, man. You're backing out...? Oh, well. Your los ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Double check that it isn't banned
	Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
	Call  FindKeyItem ( .Item:GreedStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 0`
			%but Wait, check that max hp is 5 first
			If *Var6 >= 5`
				Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_GreedCurse )
				Call  $Function_80241C40 ( )
				Return
			EndIf
		EndIf
	EndIf
	Call  FindKeyItem ( .Item:BadgeStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 2`
			Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_BadgeCurse )
			Call  $Function_80241C40 ( )
			Return
		EndIf
	EndIf	
	Switch *Var0
		Case == 0`
			If *Var6 >= 50`
				Set *Var2 1`
			EndIf
			Set   *Var1  001D00D1
		Case == 1`
			Call  FindKeyItem ( .Item:GreedStone *VarF )
			If *VarF != FFFFFFFF
				If *Var7 >= 70`
					Set *Var2 1`
				EndIf		
			Else
				If *Var7 >= 50`
					Set *Var2 1`
				EndIf		
			EndIf
			Set   *Var1  001D00D2
		Case == 2`
			Call  FindKeyItem ( .Item:GreedStone *VarF )
			If *VarF != FFFFFFFF
				If *Var8 >= 42`
					Set *Var2 1`
				EndIf		
			Else
				If *Var8 >= 30`
					Set *Var2 1`
				EndIf		
			EndIf
			Set   *Var1  001D00D3
	EndSwitch
	Set *VarA *Var0
	If  *Var2  ==  00000001
		Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_CantUpgradeThat ) % Oh, too bad, man. That one can't be upgraded any m ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Pay stuff
	Call  AddCoin   ( FFFFFFF7 )
	Sub   *StarTokenCount 1`
	%get rid of star token if 0
	If *StarTokenCount <= 0`
		Call 	FindKeyItem ( .Item:StarToken *VarF )
		If *VarF != FFFFFFFF
			Call 	RemoveKeyItemAt ( *VarF )
		EndIf
	EndIf
	Call  SetMessageString  ( *Var1 00000000 )
	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_UpgradeStat ) % All Right. So you want to be upgraded. Here goes!
	Wait  10`
	Call  SetNpcAnimation   ( 0000000D 00A60005 )
	Wait  10`
	Call  PlaySoundAtNpc    ( 0000000D 0000024B 00000000 )
	Call  GetNpcPos ( 0000000D *Var6 *Var7 *Var8 )
	Add   *Var7  0000001A
	Call  PlayEffect        ( ~FX:ShimmerBurst:White *Var6 *Var7 *Var8 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call  SetNpcAnimation   ( 0000000D 00A60006 )
	Wait  80`
	Call  SetNpcAnimation   ( 0000000D 00A60001 )
	Switch *VarA
		Case == 0`
			Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
			If *Var6 == 1`
				Call $Function_AddMaxHP4 ( )
			Else
				Call $Function_AddMaxHP ( )
			EndIf
		Case == 1`
			Call $Function_AddMaxFP ( )
		Case == 2`
			Call $Function_AddMaxBP ( )		
	EndSwitch
	Call  SpeakToPlayer ( 0000000D 00A60004 00A60001 00000000 $String_UpgradeSuccess ) % variable string ID
	%Call	DisablePlayerInput	( .False )
	Call  $Function_80241C60 ( )
	Set *MapFlag[6] .True
	Return
	%
	%
	%lowering
	Label Lower
	Set *Var0 0`
	Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
	If *Var1 <= 1`
		If *Var2 <= 0`
			If *Var3 <= 0`
				Set *Var0 1`
			EndIf
			If *Var3 == 16`
				Set *Var0 1`
			EndIf
			If *Var3 == 20`
				Set *Var0 1`
			EndIf			
		EndIf
	EndIf			
	If *Var0 == 1`
		If *StarTokenCount <= 0`
			%Uh oh, paradox
			Call	SpeakToPlayer	( 0000000D 00A60004 00A60001 00000000 $String_Paradox )
			Call  GetNpcPos     ( 0000000D *Var0 *Var1 *Var2 )
			Call  PlaySoundAtNpc    ( 0000000D 00002098 00000000 )
			Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000001 00000001 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call  SetNpcPos     ( 0000000D 00000000 FFFFFC18 00000000 )
			Call  $Function_80241C40 ( )
			Return
		EndIf
		Call	SpeakToPlayer	( 0000000D 00A60004 00A60001 00000000 $String_ChetRippoNoLowerError )
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now the menu
	Call  $Function_80241B90 ( )
	Call  SetMessageValue   ( *Var0 00000000 )
	Call  SetMessageValue   ( *Var1 00000001 )
	Call  SetMessageValue   ( *Var2 00000002 )
	Call  SpeakToPlayer    ( 0000000D 00A60004 00A60001 00000000 $String_LowerMenu ) % There you go! Good call! Here's your current statu ...
	Call  ShowChoice        ( 001E000B ) % H P F P B P
	If  *Var0  ==  00000003
		Call  ShowCoinCounter   ( .False )
		Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AD ) % Aw, man. You're backing out...? Oh, well. Your los ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Double check that it isn't banned
	Call  FindKeyItem ( .Item:BadgeStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 2`
			Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_BadgeCurse )
			Call  $Function_80241C40 ( )
			Return
		EndIf
	EndIf	
	Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
	Switch *Var0
		Case == 0`
			If *Var6 <= 1`
				Set *Var2 1`
			EndIf
			Set   *Var1  001D00D1
		Case == 1`
			If *Var7 <= 0`
				Set *Var2 1`
			EndIf		
			Set   *Var1  001D00D2
		Case == 2`
			If *Var8 <= 0`
				Set *Var2 1`
			EndIf		
			Set   *Var1  001D00D3
	EndSwitch
	Set *VarA *Var0
	If  *Var2  ==  00000001
		Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_CantDowngradeThat ) % Oh, too bad, man. That one can't be upgraded any m ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Pay stuff
	Add   *StarTokenCount 1`
	%add star token if you have none
	If *StarTokenCount > 0`
		Call 	FindKeyItem ( .Item:StarToken *VarF )
		If *VarF == FFFFFFFF
			Call 	AddKeyItem ( .Item:StarToken )
		EndIf
	EndIf
	Call  SetMessageString  ( *Var1 00000000 )
	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 $String_DowngradeStat ) % All Right. So you want to be upgraded. Here goes!
	Wait  10`
	Call  SetNpcAnimation   ( 0000000D 00A60005 )
	Wait  10`
	Call  PlaySoundAtNpc    ( 0000000D 000003EF 00000000 )
	Call  GetNpcPos ( 0000000D *Var6 *Var7 *Var8 )
	Add   *Var7  0000001A
	Call  PlayEffect        ( ~FX:ShimmerBurst:Pink *Var6 *Var7 *Var8 00000001 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call  $Function_SetEffectPalette ( *VarF )
	Call  SetNpcAnimation   ( 0000000D 00A60006 )
	Wait  30`
	Call  SetNpcAnimation   ( 0000000D 00A60001 )
	Switch *VarA
		Case == 0`
			Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
			If *Var6 <= 5`
				Call $Function_SubMaxHP4 ( )
			Else
				Call $Function_SubMaxHP ( )
			EndIf
		Case == 1`
			Call $Function_SubMaxFP ( )
		Case == 2`
			Call $Function_SubMaxBP ( )		
	EndSwitch
	Call  $Function_EnforceStatMaximums ( )
	Call  $Function_802418AC    ( *Var6 )
	If  *Var6  ==  00000000
		Set   *Var7  $String_DowngradeSuccess
	Else
		Set   *Var7  $String_DowngradeSuccessBP
	EndIf
	Call  SpeakToPlayer ( 0000000D 00A60004 00A60001 00000000 *Var7 ) % variable string ID	
	%Call	DisablePlayerInput	( .False )
	Call  $Function_80241C60 ( )
	Set *MapFlag[6] .True
	Return
	Label End
	Return
	End
}

#new:Function $Function_SetEffectPalette
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  ADDIU        A0, R0, 00                %R
   1C:  SW            A0, 50 (V1)
   20:  LW            V1, C (V0)
        ADDIU        A0, R0, 00                %G
   24:  SW            A0, 54 (V1)
   28:  LW            V1, C (V0)
   2C:  ADDIU        A1, R0, 00                %B
   30:  SW            A1, 58 (V1)
   34:  LW            A0, C (V0)
   38:  ADDIU        V1, R0, FF                %A
   3C:  SW            V1, 5C (A0)
   40:  LW            A0, C (V0)
   54:  LW            RA, 10 (SP)
   58:  ADDIU        V0, R0, 2
   5C:  JR            RA
   60:  ADDIU        SP, SP, 18
}

#new:Function $Function_AddMaxHP4
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, 4
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, 4
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxHP4
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, FFFC
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, FFFC
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxHP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, 5
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, 5
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxFP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 6 (S0)
	ADDI	S1, S1, 5
	SB		S1, 6 (S0)
	LB		S1, 7 (S0)
	ADDI	S1, S1, 5
	SB		S1, 7 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxBP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 8 (S0)
	ADDI	S1, S1, 3
	SB		S1, 8 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxHP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxFP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 6 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 6 (S0)
	LB		S1, 7 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 7 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxBP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 8 (S0)
	ADDI	S1, S1, FFFD
	SB		S1, 8 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_EnforceStatMaximums
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 5 (S0)
	LB		S2, 6 (S0)
	BGT		S2, S1 .okfp
	NOP
	SB		S2, 5 (S0)
	.okfp	
	LB		S1, 2 (S0)
	LB		S2, 3 (S0)
	BGT		S2, S1 .okhp
	NOP
	SB		S2, 2 (S0)
	.okhp
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}


/%
%Old functions
#new:Function $Function_802418AC		%enforces hp, fp, bp limits
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        RA, 1C (SP)
   10:  SW        S2, 18 (SP)
   14:  SW        S1, 14 (SP)
   18:  LW        V0, C (S0)
   1C:  JAL       $Function_80241848		%Look at all your badges (compute remaining bp?)
   20:  LW        S2, 0 (V0)
   24:  LA        S1, 8010F290				%player pointer
   2C:  LB        V1, 8 (S1)				%BP
   30:  SLT       V1, V1, V0				%Check v0 versus v1
   34:  BNE       V1, R0, .o4C				%If max is less than current, skip to 4c
   38:  LI        V1, 3F					%v1 = 3f
   3C:  COPY      A0, S0					%some pointer
   40:  COPY      A1, S2					%some other value
   44:  BEQ       R0, R0, .o74
   48:  CLEAR     A2						%set the given var to 0
        .o4C
   4C:  ADDIU     V0, S1, 286				%??? (end of equipped badges)
        .o50
   50:  SH        R0, 0 (V0)				%remove equipped badges
   54:  ADDIU     V1, V1, FFFF				%
   58:  BGEZ      V1, .o50					%if v1 is greater than 0, go back to 50
   5C:  ADDIU     V0, V0, FFFE				%subtract 2 from v0 per iteration
   60:  JAL       ~Func:enforce_hpfp_limits
   64:  NOP
   68:  COPY      A0, S0
   6C:  COPY      A1, S2
   70:  LI        A2, 1
        .o74
   74:  JAL       ~Func:set_variable
   78:  NOP
   7C:  LI        V0, 2
   80:  LW        RA, 1C (SP)
   84:  LW        S2, 18 (SP)
   88:  LW        S1, 14 (SP)
   8C:  LW        S0, 10 (SP)
   90:  JR        RA
   94:  ADDIU     SP, SP, 20
}

#new:Function $Function_80241848		%calculates bp used
{
    0:  CLEAR     A2
    4:  COPY      A1, A2
    8:  LA        T0, 800878E0
   10:  LA        A3, 8008F060
   18:  LA        A0, 8010F290
        .o20
   20:  LH        V0, 208 (A0)		%equipped badge
   24:  BEQ       V0, R0, .o50
   28:  ADDIU     A1, A1, 1
   2C:  SLL       V0, V0, 5
   30:  ADDU      V0, V0, T0
   34:  LBU       V1, 1A (V0)
   38:  SLL       V0, V1, 2
   3C:  ADDU      V0, V0, V1
   40:  SLL       V0, V0, 2
   44:  ADDU      V0, V0, A3
   48:  LB        V0, 12 (V0)
   4C:  ADDU      A2, A2, V0
        .o50
   50:  SLTI      V0, A1, 40
   54:  BNE       V0, R0, .o20
   58:  ADDIU     A0, A0, 2
   5C:  JR        RA
   60:  COPY      V0, A2
}


#new:Function $Function_80241A64			%stat upgrader
{
    0:  CLEAR     T0
    4:  COPY      A3, T0
    8:  LA        A1, 8010F290
   10:  LW        V1, AC (A0)				%varA
   14:  LI        V0, 1
   18:  BEQ       V1, V0, .o58
   1C:  COPY      A2, T0
   20:  SLTI      V0, V1, 2
   24:  BEQ       V0, R0, .o3C
   28:  LI        V0, 2
   2C:  BEQL      V1, R0, .o4C
   30:  LI        A2, A
   34:  BEQ       R0, R0, .o70
   38:  NOP
        .o3C
   3C:  BEQL      V1, V0, .o68
   40:  LI        A2, FFFB
   44:  BEQ       R0, R0, .o70
   48:  NOP
        .o4C
   4C:  LI        A3, FFFB
   50:  BEQ       R0, R0, .o70
   54:  LI        T0, FFFD
        .o58
   58:  LI        A2, FFFB
   5C:  LI        A3, A
   60:  BEQ       R0, R0, .o70
   64:  LI        T0, FFFD
        .o68
   68:  COPY      A3, A2
   6C:  LI        T0, 6
        .o70
   70:  LBU       V1, 4 (A1)
   74:  LBU       V0, 3 (A1)
   78:  ADDU      V1, V1, A2
   7C:  ADDU      V0, V0, A2
   80:  SB        V0, 3 (A1)
   84:  SLL       V0, V0, 18
   88:  SRA       V0, V0, 18
   8C:  SLTI      V0, V0, 4C
   90:  BNE       V0, R0, .oA0
   94:  SB        V1, 4 (A1)
   98:  LI        V0, 4B
   9C:  SB        V0, 3 (A1)
        .oA0
   A0:  LB        V1, 2 (A1)
   A4:  LB        V0, 3 (A1)
   A8:  SLT       V0, V0, V1
   AC:  LBU       V1, 3 (A1)
   B0:  BNEL      V0, R0, .oB8
   B4:  SB        V1, 2 (A1)
        .oB8
   B8:  LBU       V1, 7 (A1)
   BC:  LBU       V0, 6 (A1)
   C0:  ADDU      V1, V1, A3
   C4:  ADDU      V0, V0, A3
   C8:  SB        V0, 6 (A1)
   CC:  SLL       V0, V0, 18
   D0:  SRA       V0, V0, 18
   D4:  SLTI      V0, V0, 4C
   D8:  BNE       V0, R0, .oE8
   DC:  SB        V1, 7 (A1)
   E0:  LI        V0, 4B
   E4:  SB        V0, 6 (A1)
        .oE8
   E8:  LB        V1, 5 (A1)
   EC:  LB        V0, 6 (A1)
   F0:  SLT       V0, V0, V1
   F4:  LBU       V1, 6 (A1)
   F8:  BNEL      V0, R0, .o100
   FC:  SB        V1, 5 (A1)
        .o100
  100:  LBU       V0, 8 (A1)
  104:  ADDU      V0, V0, T0
  108:  SB        V0, 8 (A1)
  10C:  SLL       V0, V0, 18
  110:  SRA       V0, V0, 18
  114:  SLTI      V0, V0, 1F
  118:  BNE       V0, R0, .o124
  11C:  LI        V0, 1E
  120:  SB        V0, 8 (A1)
        .o124
  124:  JR        RA
  128:  LI        V0, 2
}

%/


%Strings
#new:String $String_ChetRippoFirst
{
	[Style Right]
	Yo, little man.[BR]
	[Pause 5]Name's Chet Rippo.[BR]
	[Pause 10]Pleasure meeting you.[BR]
	[Wait][Next]
	Say, man, don't you want to[BR]
	upgrade your status?[BR]
	[Pause 10]Heh heh... [Pause 10]Yeah, I know you do.[BR]
	[Wait][Next]
	It's usually 90 coins, but for[BR]
	you and only you, I'll do it for[BR]
	just 9 coins.[BR]
	[Wait][Next]
	If you gimme 9 coins, I'll[BR]
	upgrade your HP, FP or BP.[BR]
	[Wait][Next]
	...Actually, I have to lower[BR]
	one of your stats first to raise[BR]
	another.[BR]
	[Pause 10]But it's still a good deal![BR]
	[Wait][Next]
	I'm not lying or cheating you.[BR]
	[Pause 10]Come on... You know you want it.[BR]
	[Yield][End]
}

#new:String $String_ChetRippoStart
{
	[Style Right]
	Yo, little man.[BR]
	[Pause 5]It's your old friend, Chet Rippo.[BR]
	[Pause 10]Good to see you again.[BR]
	[Wait][Next]
	Usually this costs 90 coins, but[BR]
	for you and only you, I'll do it[BR]
	for just 9 coins.[BR]
	[Wait][Next]
	If you gimme 9 coins, I'll[BR]
	upgrade your HP, FP, or BP.[BR]
	[Wait][Next]
	...Actually, I have to lower[BR]
	one of your stats first to raise[BR]
	another.[BR]
	[Pause 10]But it's still a good deal![BR]
	[Wait][Next]
	Trust ol' Chet Rippo... [Pause 5]Come on![BR]
	[Yield][End]
}

#new:String $String_ChetRippoStartShort
{
	[Style Right]
	Yo, little man.[BR]
	[Pause 5]It's your old friend, Chet Rippo.[BR]
	[Pause 10]Good to see you again.[BR]
	[Wait][Next]
	If you gimme 9 coins and a[BR]
	Star Token, I'll upgrade your[BR]
	HP, FP, or BP.[BR]
	[Wait][Next]
	Trust ol' Chet Rippo... [Pause 5]Come on![BR]
	[Yield][End]
}

#new:String $String_ChetRippoTooPoor
{
	[Style Right]
	What are you trying to pull?[BR]
	[Pause 10]You don't have 9 coins![BR]
	[Wait][Next]
	Too bad for you...[BR]
	[Pause 10]Try coming back when you have a[BR]
	few coins in your pocket.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNoLowerError
{
	[Style Right]
	Looks like your stats are[BR]
	already at the minimum.[BR]
	If I try to lower them even[BR]
	more you'll probably die.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNoStarTokens
{
	[Style Right]
	Ooh... Sorry, but I can't[BR]
	actually raise your stats without[BR]
	lowering one first.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNormalOptions
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (9 coins)[BR]
[Cursor:01][Option:01]Lower Stats (Free)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_ChetRippoNoRaise
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (X)[BR]
[Cursor:01][Option:01]Lower Stats (Free)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_ChetRippoNoLower
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (9 coins)[BR]
[Cursor:01][Option:01]Lower Stats (X)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_Paradox
{
	[Style Right]
	...Huh.[BR]
	It looks like, somehow, I can[BR]
	neither raise nor lower your[BR]
	stats. This is probably a bug.[BR]
	[Wait][NEXT]
	Well, I don't have a solution[BR]
	for that. Goodbye![BR]
	[Wait][End]
}

#new:String $String_RaiseMenu
{
	[Style Right]
	There you go! Good call![BR]
	[Wait][Next]
	Here's your current status.[BR]
	Maximum HP is "[Var 0],"[BR]
	FP is "[Var 1]," and BP is "[Var 2]."[BR]
	[Wait][Next]
	Choose the one you want to[BR]
	upgrade.[BR]
	[Yield][End]
}

#new:String $String_LowerMenu
{
	[Style Right]
	There you go! Good call![BR]
	[Wait][Next]
	Here's your current status.[BR]
	Maximum HP is "[Var 0],"[BR]
	FP is "[Var 1]," and BP is "[Var 2]."[BR]
	[Wait][Next]
	Choose the one you want to[BR]
	downgrade.[BR]
	[Yield][End]
}

#new:String $String_UpgradeStat
{
	[Next]
	All Right.[BR]
	So you want [Var 0] to [BR]
	be upgraded.[BR]
	[Pause 10]Here goes![Wait][End]
}

#new:String $String_DowngradeStat
{
	[Next]
	All Right.[BR]
	So you want [Var 0] to [BR]
	be downgraded.[BR]
	[Pause 10]Here goes![Wait][End]
}

#new:String $String_UpgradeSuccess
{
	[Style Right]
	All Right, now your [Var 0] [BR]
	have been upgraded.[BR]
	[Wait][Next]
	Heh heh... See ya![Wait][End]
}

#new:String $String_DowngradeSuccess
{
	[Style Right]
	All Right, now your [Var 0] [BR]
	have been downgraded.[BR]
	[Wait][Next]
	I turned that energy into a[BR]
	[Color:25]Star Token[Color:0A], which I can convert[BR]
	back into a stat increase.[BR]
	[Wait][Next]
	Heh heh... See ya![Wait][End]
}

#new:String $String_DowngradeSuccessBP
{
	[Style Right]
	All Right, now your [Var 0] [BR]
	have been downgraded.[BR]
	[Wait][Next]
	I turned that energy into a[BR]
	[Color:25]Star Token[Color:0A], which I can convert[BR]
	back into a stat increase.[BR]
	[Wait][Next]
	Oh, and the Badges you had on[BR]
	are now off. So don't forget to[BR]
	put them back on.[BR]
	[Wait][Next]
	Heh heh... See ya![Wait][End]
}

#new:String $String_CantUpgradeThat
{
	[Next]
	Oh, too bad, man.[BR]
	[Pause 10]That one can't be upgraded any[BR]
	more.[BR]
	[Wait][Next]
	It's a bummer, but there's[BR]
	nothing you can do.[BR]
	[Pause 10]See ya.[Wait][End]
}

#new:String $String_CantDowngradeThat
{
	[Next]
	Oh, too bad, man.[BR]
	[Pause 10]That one can't be downgraded any[BR]
	more.[BR]
	[Wait][Next]
	It's a bummer, but there's[BR]
	nothing you can do.[BR]
	[Pause 10]See ya.[Wait][End]
}

#new:String $String_GreedCurse
{
	[Next]
	...Huh. There's this [Color:26]weird force[Color:0A][BR]
	that's preventing me from[BR]
	upgrading your HP.[Wait][End]
}

#new:String $String_BadgeCurse
{
	[Next]
	...Huh. There's this [Color:25]weird force[Color:0A][BR]
	that's preventing me from[BR]
	modifying your BP.[Wait][End]
}




%we need to change his "can you upgrade this" function to account for the new limits
%nevermind, he doesn't even show up unless you have 10 hp

/%
%Greed stone starting stats 5 / 5 / 3
%Normal max (w 5 hp) 5 / 50 / 30 (lvl 19)
%New max 5 / 70 / 42 (lvl 27)
@ $Script_Interact_80249184
{
	0:  If  *GF_MAC04_Met_ChetRippo  ==  .False
   10:  	Set   *Var0  000600A8
   20:  	Set   *GF_MAC04_Met_ChetRippo  .True
   30:  Else
   38:  	Set   *Var0  000600A9
   48:  EndIf
   50:  Call  $Function_80241C20 ( )
   5C:  Call  SpeakToPlayer     ( 0000000D 00A60004 00A60001 00000000 *Var0 ) % variable string ID
   7C:  Call  ShowCoinCounter   ( .True )
   8C:  Call  ShowChoice        ( 001E000E ) % Yes No
   9C:  If  *Var0  !=  00000000
   AC:  	Call  ShowCoinCounter   ( .False )
   BC:  	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AA ) % Too bad... Your loss. Another time, maybe.
   DC:  	Call  $Function_80241C40 ( )
   E8:  	Return
   F0:  EndIf
   F8:  Call  $Function_802419D0 ( )
  104:  If  *Var0  <  00000027
  114:  	Call  ShowCoinCounter   ( .False )
  124:  	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AB ) % What are you trying to pull? You don't have 39 coi ...
  144:  	Call  $Function_80241C40 ( )
  150:  	Return
  158:  EndIf
  160:  Call  $Function_80241B90 ( )
  16C:  Call  SetMessageValue   ( *Var0 00000000 )
  180:  Call  SetMessageValue   ( *Var1 00000001 )
  194:  Call  SetMessageValue   ( *Var2 00000002 )
  1A8:  Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AC ) % There you go! Good call! Here's your current statu ...
  1C8:  Call  ShowChoice        ( 001E000B ) % H P F P B P
  1D8:  If  *Var0  ==  00000003
  1E8:  	Call  ShowCoinCounter   ( .False )
  1F8:  	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AD ) % Aw, man. You're backing out...? Oh, well. Your los ...
  218:  	Call  $Function_80241C40 ( )
  224:  	Return
  		Call     FindKeyItem 	( .Item:GreedStone *Var[6] ) %un-overridden name
		If ( *Var[6] != FFFFFFFF )
			Set *Var[6] 00000000 %convenience: -1 = no stone, 0 = yes stone
		EndIf
  22C:  EndIf
  234:  Set   *Var2  00000000
  244:  Call  $Function_802419E4    ( *Var3 *Var4 *Var5 )
  25C:  Switch  *Var0
  268:  	Case  ==  00000000
  274:  		If  *Var3  >  00000028
  284:  			Set   *Var2  00000001
  294:  		EndIf
  				If *Var[6] == 00000000 %no upgrading with greed stone
					Set *Var[2] 00000001
				EndIf
  29C:  		Set   *Var1  001D00D1
  2AC:  	Case  ==  00000001
  2B8:  		If  *Var4  >  00000028
					If *Var[6] == 00000000
						If *Var[4] > 0000003C %60 FP
  2C8:  					Set  *Var[2]  00000001
						EndIf
					Else
						Set  *Var[2]  00000001
					EndIf
  2D8:  		EndIf
  2E0:  		Set  *Var[1]  001D00D2 
  2F0:  	Case  ==  00000002 
  2FC:  		If  *Var[5]  >  00000018 
					If *Var[6] == 00000001
						If *Var[4] > 0000002A %42
  30C:  					Set  *Var[2]  00000001
						EndIf
					Else
						Set *Var[2] 00000001
					EndIf
  31C:  		EndIf
  324:  		Set  *Var[1]  001D00D3 
  334:  EndSwitch
  33C:  Set   *VarA  *Var0
  34C:  If  *Var2  ==  00000001
  35C:  	Call  ShowCoinCounter   ( .False )
  36C:  	Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600B1 ) % Oh, too bad, man. That one can't be upgraded any m ...
  38C:  	Call  $Function_80241C40 ( )
  398:  	Return
  3A0:  EndIf
  3A8:  Call  AddCoin   ( FFFFFFD9 )
  3B8:  Call  ShowCoinCounter   ( .False )
  3C8:  Call  SetMessageString  ( *Var1 00000000 )
  3DC:  Call  ContinueSpeech    ( 0000000D 00A60004 00A60001 00000000 000600AE ) % All Right. So you want to be upgraded. Here goes!
  3FC:  Wait  10`
  408:  Call  SetNpcAnimation   ( 0000000D 00A60005 )
  41C:  Wait  10`
  428:  Call  PlaySoundAtNpc    ( 0000000D 0000024B 00000000 )
  440:  Call  GetNpcPos ( 0000000D *Var6 *Var7 *Var8 )
  45C:  Add   *Var7  0000001A
  46C:  Call  PlayEffect        ( ~FX:ShimmerBurst:White *Var6 *Var7 *Var8 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4B0:  Call  SetNpcAnimation   ( 0000000D 00A60006 )
  4C4:  Wait  80`
  4D0:  Call  SetNpcAnimation   ( 0000000D 00A60001 )
  4E4:  Call  $Function_80241A64 ( )
  4F0:  Call  $Function_802418AC    ( *Var6 )		%Enforce hp, fp, bp limits, variable is set to 1 if badges got messed up
  500:  If  *Var6  ==  00000000
  510:  	Set   *Var7  000600AF
  520:  Else
  528:  	Set   *Var7  000600B0
  538:  EndIf
  540:  Call  SpeakToPlayer ( 0000000D 00A60004 00A60001 00000000 *Var7 ) % variable string ID
  560:  Wait  10`
  56C:  Call  GetNpcPos     ( 0000000D *Var0 *Var1 *Var2 )
  588:  Call  PlaySoundAtNpc    ( 0000000D 00002098 00000000 )
  5A0:  Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000001 00000001 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 )
  5E4:  Call  SetNpcPos     ( 0000000D 00000000 FFFFFC18 00000000 )
  600:  Set   *AreaFlag[032]  .True
  610:  Call  $Function_80241C60 ( )
  61C:  Return
  624:  End
}
  
%this changes the stats
%We need to make sure that hp doesn't go below 5.
@ $Function_80241A64
{
	0:  DADDU     T0, R0, R0
    4:  DADDU     A3, T0, R0
    8:  LIA       A1, 8010F290
   10:  LW        V1, AC (A0)
   14:  ADDIU     V0, R0, 1
   18:  BEQ       V1, V0, .o58
   1C:  DADDU     A2, T0, R0
   20:  SLTI      V0, V1, 2
   24:  BEQ       V0, R0, .o3C
   28:  ADDIU     V0, R0, 2
   2C:  BEQL      V1, R0, .o4C
   30:  ADDIU     A2, R0, A
   34:  BEQ       R0, R0, .o70
   38:  NOP
        .o3C
   3C:  BEQL      V1, V0, .o68
   40:  ADDIU     A2, R0, FFFB
   44:  BEQ       R0, R0, .o70
   48:  NOP
        .o4C
   4C:  ADDIU     A3, R0, FFFB
   50:  BEQ       R0, R0, .o70
   54:  ADDIU     T0, R0, FFFD
        .o58
   58:  ADDIU     A2, R0, FFFB
   5C:  ADDIU     A3, R0, A
   60:  BEQ       R0, R0, .o70
   64:  ADDIU     T0, R0, FFFD
        .o68
   68:  DADDU     A3, A2, R0
   6C:  ADDIU     T0, R0, 6
        .o70
   70:  LBU       V1, 4 (A1)
   74:  LBU       V0, 3 (A1)
   78:  ADDU      V1, V1, A2
   7C:  ADDU      V0, V0, A2
   80:  SB        V0, 3 (A1)
   84:  SLL       V0, V0, 18
   88:  SRA       V0, V0, 18
   8C:  SLTI      V0, V0, 4C
   90:  BNE       V0, R0, .oA0
   94:  SB        V1, 4 (A1)
   98:  ADDIU     V0, R0, 4B
   9C:  SB        V0, 3 (A1)
        .oA0
   A0:  LB        V1, 2 (A1)
   A4:  LB        V0, 3 (A1)
   A8:  SLT       V0, V0, V1
   AC:  LBU       V1, 3 (A1)
   B0:  BNEL      V0, R0, .oB8
   B4:  SB        V1, 2 (A1)
        .oB8
   B8:  LBU       V1, 7 (A1)
   BC:  LBU       V0, 6 (A1)
   C0:  ADDU      V1, V1, A3
   C4:  ADDU      V0, V0, A3
   C8:  SB        V0, 6 (A1)
   CC:  SLL       V0, V0, 18
   D0:  SRA       V0, V0, 18
   D4:  SLTI      V0, V0, 4C
   D8:  BNE       V0, R0, .oE8
   DC:  SB        V1, 7 (A1)
   E0:  ADDIU     V0, R0, 4B
   E4:  SB        V0, 6 (A1)
        .oE8
   E8:  LB        V1, 5 (A1)
   EC:  LB        V0, 6 (A1)
   F0:  SLT       V0, V0, V1
   F4:  LBU       V1, 6 (A1)
   F8:  BNEL      V0, R0, .o100
   FC:  SB        V1, 5 (A1)
        .o100
  100:  LBU       V0, 8 (A1)
  104:  ADDU      V0, V0, T0
  108:  SB        V0, 8 (A1)
  10C:  SLL       V0, V0, 18
  110:  SRA       V0, V0, 18
  114:  SLTI      V0, V0, 1F
  118:  BNE       V0, R0, .o124
  11C:  ADDIU     V0, R0, 1E
  120:  SB        V0, 8 (A1)
        .o124
  124:  JR        RA
  128:  ADDIU     V0, R0, 2
}
%/  

  
% ====================================================
% Chuck Quizmo will continue asking questions so long
% as another is available.
%
% The existing script is modified by adding two labels
% for flow control and new code to check for the next
% question after the player recieves a star piece.
% ====================================================

@ $Script_80245728
{
	0:  If  *GB_CompletedQuizzes  >  0000003F
   10:  	Set   *Var0  00000000
   20:  	Return
   28:  EndIf
   30:  Call  GetPlayerPos  ( *Array[1] *Array[2] *Array[3] )
   48:  Call  NpcFacePlayer ( .Npc:Self 00000010 )
   5C:  If  *GB_CompletedQuizzes  ==  0000003F
   6C:  	Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 0008000A ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   8C:  Else
   94:  	If  *GF_Met_ChuckQuizmo  ==  .True
   A4:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 00080009 ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   C4:  	Else
   CC:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 00080008 ) % Kaaaa-wiiiizzz! Chuck Quizmo's the name, and quizz ...
   EC:  		Set   *GF_Met_ChuckQuizmo  .True
   FC:  	EndIf
  104:  EndIf
  10C:  Call  ShowChoice    ( 001E000D ) % Yes No
  11C:  If  *Var0  ==  00000001
  12C:  	Call  ContinueSpeech    ( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
  14C:  	ExecWait  $Script_802440DC
  158:  	Set   *Var0  00000000
  168:  	Return
  170:  EndIf
  178:  Set   *GF_Quizmo_TakingQuiz  .True
  188:  Call  $Function_80240578 ( )
  194:  Call  $Function_8024088C ( )
  1A0:  Exec  $Script_8024418C
  1AC:  Call  DisablePartnerAI  ( 00000000 )
  1BC:  Call  SetNpcFlagBits    ( .Npc:Partner 00000200 .False )
  1D4:  Call  SetNpcFlagBits    ( 00000014 00000200 .False )
  1EC:  Call  SetNpcFlagBits    ( .Npc:Partner 00000148 .True )
  204:  Call  SetNpcFlagBits    ( 00000014 00000100 .True )
  21C:  Call  SetNpcAnimation   ( .Npc:Partner 00000106 )
  230:  Exec  $Script_802448B4 *Var1
  240:  Call  ContinueSpeech    ( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
  260:  Call  PlaySound ( 00000089 )
  270:  Loop
  27C:  	DoesScriptExist  *Var1 *Var0
  28C:  	If  *Var0  ==  00000000
  29C:  		BreakLoop
  2A4:  	EndIf
  2AC:  	Wait  1`
  2B8:  EndLoop
  2C0:  Call  $Function_80240BD0 ( )
  2CC:  Loop  00000005
  2D8:  	Call  GetPlayerPos  ( *Var0 *Var1 *Var2 )
  2F0:  	Add   *Var1  00000001
  300:  	Call  SetPlayerPos  ( *Var0 *Var1 *Var2 )
  318:  	Wait  2`
  324:  EndLoop
    	Label	0	% new label for multiple questions
  32C:  Set   *Var0  002C0000
  33C:  Add   *Var0  *GB_CompletedQuizzes
  34C:  Call  SpeakToPlayer ( .Npc:Self 00AF0005 00AF0006 00000000 *Var0 ) % variable string ID
  36C:  Call  SetPlayerAnimation    ( .PlayerAnim:Question )
  37C:  Set   *Var0  002D0000
  38C:  Add   *Var0  *GB_CompletedQuizzes
  39C:  Call  PlaySound     ( 0000008E )
  3AC:  Call  ShowChoice    ( *Var0 ) % variable string ID
  3BC:  Kill  *Var1
  3C8:  Call  StopSound     ( 0000008E )
  3D8:  Exec  $Script_80244928
  3E4:  Wait  15`
  3F0:  Call  PlaySound     ( 0000008D )
  400:  Call  $Function_80240ED0    ( *Var0 )
  410:  Set   *Array[4]  00000000
  %420:  Call  $Function_802414C4 ( )
  42C:  Wait  40`
  438:  Call  $Function_80240B4C ( )
  444:  Thread
  44C:  	Wait  110`
  458:  	Call  CloseChoice ( )
  464:  	Set   *Array[4]  00000000
  474:  EndThread
  47C:  If  *Var0  ==  00000001
  48C:  	Call  SetNpcAnimation   ( 00000014 00AF0007 )
  4A0:  	Set   *Array[4]  00000001
  4B0:  	Thread
  4B8:  		Call  $Function_80240E9C    ( 00000001 )
  4C8:  		Wait  6`
  4D4:  		Wait  6`
  4E0:  		Wait  6`
  4EC:  		Call  $Function_80240E9C    ( 00000002 )
  4FC:  	EndThread
  504:  	Thread
  50C:  		Call  PlaySound ( 0000021C )
  51C:  		Wait  6`
  528:  		Call  PlaySound ( 0000021C )
  538:  		Wait  6`
  544:  		Call  PlaySound ( 0000021C )
  554:  		Wait  6`
  560:  		Call  PlaySound ( 0000021C )
  570:  	EndThread
  578:  	Call  PlaySound ( 0000008A )
  588:  	Call  $Function_80240F68 ( )
  594:  	Thread
  59C:  		Wait  15`
  5A8:  		Call  GetPlayerPos  ( *Var0 *Var1 *Var2 )
  5C0:  		Add   *Var1  00000032
  5D0:  		Call  $Function_802410E0    ( 00000000 00000000 00000053 *Var0 *Var2 )
  5F0:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  634:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  678:  		Wait  15`
  684:  		Add   *Var1  FFFFFFFD
  694:  		Call  $Function_802410E0    ( 00000000 00000000 0000003A *Var0 *Var2 )
  6B4:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  6F8:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  73C:  		Wait  15`
  748:  		Add   *Var1  0000001E
  758:  		Call  $Function_802410E0    ( 00000000 00000000 0000005D *Var0 *Var2 )
  778:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  7BC:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  800:  		Wait  15`
  80C:  	EndThread
  814:  	Wait  20`
  820:  	Exec  $Script_802455C8 *Var1
  830:  	Add   *GB_CompletedQuizzes  00000001
  840:  	If  *GB_CompletedQuizzes  >  0000003F
  850:  		Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 00080010 ) % Correct!! Congratulations! This is my last prize!  ...
  870:  		Call  SetNpcAnimation   ( 00000014 00AF0006 )
  884:  		Loop
  890:  			DoesScriptExist  *Var1 *Var0
  8A0:  			If  *Var0  ==  00000000
  8B0:  				BreakLoop
  8B8:  			EndIf
  8C0:  			Wait  1`
  8CC:  		EndLoop
  8D4:  		Call  SetNpcAnimation   ( 00000014 00AF0005 )
  8E8:  		Set   *Var0  0000015C
  8F8:  		Set   *Var1  00000003
  908:  		ExecWait  $Script_80243FEC
  914:  		Call  AddStarPieces     ( 00000001 )
  924:  		Call  $Function_80240E9C    ( 0000000F )
  934:  		Call  $Function_80240F50 ( )
  940:  		Call  SetMessageValue   ( *GB_CompletedQuizzes 00000000 )
  954:  		Call  SpeakToPlayer     ( .Npc:Self 00AF0004 00AF0001 00000000 00080011 ) % You've managed to correctly answer all questions.  ...
  974:  	Else
  97C:  		Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000E ) % Correct! Congratulations! Here's your Star Piece!
  99C:  		Call  SetNpcAnimation   ( 00000014 00AF0006 )
  9B0:  		Loop
  9BC:  			DoesScriptExist  *Var1 *Var0
  9CC:  			If  *Var0  ==  00000000
  9DC:  				BreakLoop
  9E4:  			EndIf
  9EC:  			Wait  1`
  9F8:  		EndLoop
  A00:  		Call  SetNpcAnimation   ( 00000014 00AF0005 )
  A14:  		Set   *Var0  0000015C
  A24:  		Set   *Var1  00000001
  A34:  		ExecWait  $Script_80243FEC
  A40:  		Call  AddStarPieces     ( 00000001 )
  A50:  		Call  $Function_80240E9C    ( 0000000F )
  A60:  		Call  $Function_80240F50 ( )
  A6C:  		Call  SetMessageValue   ( *GB_CompletedQuizzes 00000000 )
  A80:  		If  *GB_CompletedQuizzes  ==  00000001
  A90:  			Call  SetMessageString  ( 8014C294 00000001 )
  AA4:  		Else
  AAC:  			Call  SetMessageString  ( 8014C290 00000001 )
  AC0:  		EndIf
  AC8:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 0008000F ) % You've correctly answered question so far. Good lu ...
			% ====================================================
			% new: multiple quizzes can be completed at a time
				Wait	10`
				Call	$Function_IsNextQuestionAvailable ( )
				If  *Var[0]  ==  00000000 
					Call     SpeakToPlayer	( .Npc:Self 00AF0004 00AF0001 00000000 0008004A ) % Looks like that's it for now ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     SpeakToPlayer		( .Npc:Self 00AF0004 00AF0001 00000000 00080049 ) % But we're not done yet ...
				Call     ShowChoice			( 001E000D ) % Yes No 
				If	*Var[0] ==  00000001 
					Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
				Thread
					Call     $Function_802410E0 ( *Array[1] *Array[3] 0000006C *Var[0] *Var[1] )
					SetF     *Var[2] *Array[1] 
					AddF     *Var[2] *Var[0] 
					SetF     *Var[3] *Array[3] 
					AddF     *Var[3] *Var[1] 
					Call     SetNpcAnimation 	( .Npc:Partner 00000102 )
					Call     NpcMoveTo   		( .Npc:Partner *Var[2] *Var[3] 00000028 )
					Call     SetNpcAnimation 	( .Npc:Partner 00000106 )
					Call     NpcFacePlayer 		( .Npc:Partner 00000000 )
				EndThread
				Call     $Function_802410E0 ( *Array[1] *Array[3] 00000053 *Var[0] *Var[1] )
				SetF     *Var[3] *Var[0] 
				SetF     *Var[4] *Var[1] 
				AddF     *Var[3] *Array[1]
				AddF     *Var[4] *Array[3]
				Call     PlayerMoveTo 	( *Var[3] *Var[4] 40` )
				Loop     00000005 
					Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Add      *Var[1] 00000001 
					Call     SetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Wait     00000002 
				EndLoop
				Goto	0
			%/new
			% ====================================================
  AE8:  	EndIf
  AF0:  	Set   *Var0  00000001
  B00:  Else
  B08:  	Call  SetNpcAnimation   ( 00000014 00AF0009 )
  B1C:  	Set   *Array[4]  00000002
  B2C:  	Call  PlaySound ( 0000021D )
  B3C:  	Call  PlaySound ( 0000008B )
  B4C:  	Exec  $Script_80245678 *Var1
  B5C:  	Call  GetPlayerPos      ( *Var2 *Var3 *Var4 )
  B74:  	Call  PlayEffect        ( ~FX:DeadLeaves:Gust1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  BB8:  	Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000D ) % Oops! Tough luck, pal! Wrong answer! Better luck n ...
  BD8:  	Call  SetNpcAnimation   ( 00000014 00AF000A )
  BEC:  	Loop
  BF8:  		DoesScriptExist  *Var1 *Var0
  C08:  		If  *Var0  ==  00000000
  C18:  			BreakLoop
  C20:  		EndIf
  C28:  		Wait  1`
  C34:  	EndLoop
  C3C:  	Set   *Var0  00000000
  C4C:  EndIf
    	Label	1	% new label for multiple questions
  C54:  Call  $Function_80240ED0    ( FFFFFFFF )
  C64:  Call  EnablePartnerAI ( )
  C70:  Thread
  C78:  	Wait  30`
  C84:  	Call  PlaySound ( 0000008F )
  C94:  EndThread
  C9C:  Thread
  CA4:  	Wait  45`
  CB0:  	Call  StopSound ( 00000089 )
  CC0:  EndThread
  CC8:  Call  $Function_80240F84 ( )
  CD4:  Call  $Function_80240DE8 ( )
  CE0:  ExecWait  $Script_802440DC
  CEC:  Exec  $Script_80244424
  CF8:  Call  $Function_802409D8 ( )
  D04:  Call  $Function_8024058C ( )
  D10:  Set   *GF_Quizmo_TakingQuiz  .False
  D20:  Return
  D28:  End
}

% Since we never loaded the O/X icon, don't try to free it.
@ $Function_80240DE8[9C]
{
	NOP
}

#new:Function $Function_IsNextQuestionAvailable
{
	PUSH	RA, S0, S1
	DADDU	S1, A0, R0
	DADDU	A0, R0, R0
	LIO		A1, *GB_CompletedQuizzes
	JAL		~Func:get_variable
	RESERVED
	DADDU	A0, R0, R0
	DADDU	S0, V0, R0
	LIO		A1, *GB_StoryProgress
	JAL		~Func:get_variable
	RESERVED
	DADDU	A1, V0, R0
	LIA		A0, $QuizRequirements
    .FindStoryProgress
	LW		V0, 0 (A0)
	SLT		V0, A1, V0
	BNE		V0, R0, .CompareQuizIndex
	NOP
	BEQ		R0, R0, .FindStoryProgress
	ADDIU	A0, A0, 8
	.CompareQuizIndex
	LW		V0, 4 (A0)
	SLT		V0, S0, V0
	SW		V0, 84 (S1)
	.Done
	POP		RA, S0, S1
	JR		RA
	ADDIU	V0, R0, 2
}

@ $QuizRequirements
{
% if (story progress) < (col 1), the player can complete up to (col 2) quizzes
FFFFFF94 00000000 % < chapter 1 start
FFFFFFB4 00000006 % < chapter 2 start
FFFFFFCA 0000000C % < chapter 3 start
FFFFFFF2 00000012 % < chapter 4 start
00000006 0000001A % < chapter 5 start
00000027 00000022 % < chapter 6 start
0000003A 0000002A % < chapter 7 start
00000058 00000034 % < chapter 8 start
0000005F 00000040 % end game
00000060 00000040 % all
}

@ $QuizAnswers
{
01010200 01000200 01020001 01020200 
02010202 01000201 00010201 00020100 
02000102 00000001 00020002 02010001
02020102 02010102 00020102 01000201
}
