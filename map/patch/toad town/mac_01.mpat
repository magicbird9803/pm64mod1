@ $Function_8024522C
{
  [A4]  LA        A3, $Global_ItemHudScripts
}


%Figure out partner letters
%$Function_80244E90		returns whether you have unread mail (FFFFFFFF can also be returned though, which does no dialogue)
%	0 = no, 1 = yes

%Letter data tables (but why are they split up like this? (star rod probably got confused by weird table referencing))


%$Script_Init_80257210 sets all the letter unlocked flags

%The letter unlocked / read flags have to be next to each other to work properly :P
%	Potential thing to do later: rewrite this to use a table of flags

%These really should be one table I think
/%
#new:Unknown $???_80256ADC
{
	00000001 00000054 0020001B 0020001C
}

#new:IntTable $IntTable_80256AEC					%partner ID, ???, sender, description, letter text
{
										0020001D 
	00000001 00000054 00200018 00200019 0020001A 
	00000001 00000054 0020001E 0020001F 00200020 
	00000002 00000054 00200027 00200028 00200029
	00000002 00000054 00200024 00200025 00200026
	00000002 00000054 00200021 00200022 00200023 
	00000003 00000054 0020002D 0020002E 0020002F 
	00000003 00000054 00200030 00200031 00200032 
	00000003 00000054 0020002A 0020002B 0020002C 
	00000004 00000054 00200033 00200034 00200035 
	00000004 00000054 00200036 00200037 00200038 
	00000009 00000054 00200039 0020003A 0020003B
	00000009 00000054 0020003C 0020003D 0020003E 
	00000006 00000054 0020003F 00200040 00200041 
	00000006 00000054 00200042 00200043 00200044 
	00000007 00000054 00200048 00200049 0020004A 
	00000007 00000054 00200045 00200046 00200047 
	00000008 00000054 0020004E 0020004F 00200050 
	00000008 00000054 0020004B 0020004C 0020004D
}
%/



%Bulletin board text
%front?, back?, story progress required
/%
$???_802485E8
{
	00170000 00180000 FFFFFF80 
	00170001 00180001 FFFFFF96 
	00170002 00180002 FFFFFF9F 
	00170003 00180003 FFFFFFB5 
	00170004 00180004 FFFFFFBD 
	00170005 00180005 FFFFFFC5 
	00170006 00180006 FFFFFFCC 
	00170007 00180007 FFFFFFD0
	00170008 00180008 FFFFFFDF 
	00170009 00180009 FFFFFFF1 
	0017000A 0018000A FFFFFFF6 
	0017000B 0018000B FFFFFFFA 
	0017000C 0018000C FFFFFFFD 
	0017000D 0018000D 00000002 
	0017000E 0018000E 00000005 
	0017000F 0018000F 0000000B
	00170010 00180010 00000018 
	00170011 00180011 00000028 
	00170012 00180012 0000002B 
	00170013 00180013 00000032 
	00170014 00180014 00000039 
	00170015 00180015 0000003D 
	00170016 00180016 0000003E 
	00170017 00180017 00000057
	00170018 00180018 0000005C
}
%/



%Imported from pro mode


% ====================================================
% Changed the way Rowf selects badges from his table.
% Now you can supply up to 64` badges. As a bonus,
% Flag_MAC_03 through Flag_MAC_12 are no longer used.
% ====================================================

% When the number of badges in the table is changed,
% be sure to update this number! Maximum is 40 (64`).
#define .NumRowfBadges 28`

% Revised format includes both required story progress and 'bought' flag.
@ $RowfBadgeInventory
{
 FFFFFF80  .Item:FirstAttack     100`    00240087 % Lets Mario destroy a weaker  enemy with a First St ...
 FFFFFF80  .Item:Multibounce      75`    0024005E % Jumps on all enemies in a row if action command is ...
 FFFFFF80  .Item:DDownPound       75`    00240069 % Disables an enemy's defense power and injures it.
 FFFFFF80  .Item:SpinSmash        75`    00240068 % If Mario hits an enemy, it smashes into the ones b ...
 FFFFFFCB  .Item:DodgeMaster     100`    00240080 % Makes the action command work more frequently.
 FFFFFFCB  .Item:SleepStomp       75`    0024005C % If it works, the enemy Mario jumps on falls asleep ...
 FFFFFFCB  .Item:DoubleDip       100`    0024006D % During battle, lets you use two items during one t ...
 FFFFFFCB  .Item:DefSpotter     100`    002F00BC % def spotter
 FFFFFFF3  .Item:JumpCharge       50`    0024005A % When charged, Mario's Jump power goes up by 2.
 FFFFFFF3  .Item:HPPlusC         150`    00240071 % Increases maximum HP by 5.
 FFFFFFF3  .Item:FPPlusC         150`    00240072 % Increases maximum FP by 5.
 FFFFFFF3  .Item:PityFlower      150`    002F00DB % pity flower
 00000007  .Item:AllorNothing    100`    00240093 % If the action command works, attack power +1. If n ...
 00000007  .Item:FrigidStomp		 100`	 002F0007 % now is Frigid Stomp
 00000007  .Item:DamageDodgeA    150`    00240075 % If you do the action command, decreases Mario's da ...
 00000007  .Item:ParalyzingStomp	100`	 002F00E5 % static stomp (also known as paralyzing stomp)
 00000029  .Item:SSmashChg       100`    00240065 % When supercharged, Mario's  Hammer power goes up b ...
 00000029  .Item:MegaQuake       200`    0024006C % Severely damages all enemies on the ground or ceil ...
 00000029  .Item:FlameSmash        75`    002F0009 % now is Flame Smash
 00000029  .Item:DualSmash      200`    002F003E % now is Dual Smash
 00000029  .Item:TruthStomp      75`    002F00F7 % now is Truth Stomp
 0000003B  .Item:UltraJumpCharge	 200`	 002F0021 % ultra jump charge
 0000003B  .Item:UltraSmashCharge	 200`	 002F0015 % ultra hammer charge
 0000003B  .Item:MegaBounce 250`	 002F0050 % mega bounce
 0000003B  .Item:HPPlusX         150`    00240071 % Increases maximum HP by 5.
 0000003B  .Item:FPPlusX         150`    00240072 % Increases maximum FP by 5.
 0000003B  .Item:StopSmash       200`    002F00E8 % stop smash
 0000003B  .Item:DarkSmash       200`    002F00FA % dark smash
}

%too lazy to find a place to put HP/FP plus X, so just dump it here

/%
#new:BadgeShopInventory $RowfBadgeInventory
.Item:SpeedySpin      50`    0024008B % Increases the distance Mario can Spin Dash.
.Item:FirstAttack    100`    00240087 % Lets Mario destroy a weaker  enemy with a First St ...
.Item:Multibounce     75`    0024005E % Jumps on all enemies in a row if action command is ...
.Item:DDownPound      75`    00240069 % Disables an enemy's defense power and injures it.
.Item:DodgeMaster    100`    00240080 % Makes the action command work more frequently.
.Item:SleepStomp      75`    0024005C % If it works, the enemy Mario jumps on falls asleep ...
.Item:DoubleDip      100`    0024006D % During battle, lets you use two items during one t ...
.Item:JumpCharge      50`    0024005A % When charged, Mario's Jump power goes up by 2.
.Item:SpinSmash       75`    00240068 % If Mario hits an enemy, it smashes into the ones b ...
.Item:GroupFocus     100`    0024006F % Lets Mario's party members use the Focus command a ...
.Item:AllorNothing   100`    00240093 % If the action command works, attack power +1. If n ...
.Item:HPPlusC        150`    00240071 % Increases maximum HP by 5.
.Item:FPPlusC        150`    00240072 % Increases maximum FP by 5.
.Item:SSmashChg      100`    00240065 % When supercharged, Mario's  Hammer power goes up b ...
.Item:DamageDodgeA   150`    00240075 % If you do the action command, decreases Mario's da ...
.Item:MegaQuake      200`    0024006C % Severely damages all enemies on the ground or ceil ...
%/


%if you get everything, get a cool new badge (pay for moves with coins)
@ $Script_Interact_802546EC
{
    0:  Set   *Var0  *GF_MAC01_RowfBadgeAvailableA
   10:  Add   *Var0  *GF_MAC01_RowfBadgeAvailableB
   20:  Add   *Var0  *GF_MAC01_RowfBadgeAvailableC
   30:  If  *Var0  ==  00000003
   40:  	If  *GB_StoryProgress  <  .Story:Ch5_ReturnedToToadTown % 29
   50:  		Set   *Var1  00030005
   60:  	Else
   68:  		Call  $Function_80244984 ( )
   74:  		If  *Var0  ==  00000000
   84:  			Set   *Var1  00030006
   94:  		Else
   9C:  			Set   *Var1  00030005
   AC:  		EndIf
   B4:  	EndIf
			If *Var1 == 00030006
				If *GF_MAC01_AllRowfBadges == .False
					Call  SpeakToPlayer ( 00000001 00A70004 00A70005 00000000 $GotEverything ) % variable string ID
					Set *GF_MAC01_AllRowfBadges .True
					Set 	*Var2 .Item:FlowerCoins
					Call	ShowGotItem	( *Var2 00000000 00000000 )		%Last chance
					Call	AddBadge	( *Var2 *Var7 )								
				Else
   BC:  			Call  SpeakToPlayer ( 00000001 00A70004 00A70005 00000000 *Var1 ) % variable string ID
				EndIf
			Else
				Call  SpeakToPlayer ( 00000001 00A70004 00A70005 00000000 *Var1 ) % variable string ID
			EndIf
   DC:  	Return
   E4:  EndIf
   EC:  If  *GF_MAC01_Met_Rowf_Late  ==  .False
   FC:  	Set   *GF_MAC01_Met_Rowf_Late  .True
  10C:  	Call  SpeakToPlayer ( 00000001 00A70004 00A70005 00000000 00030003 ) % Hey! Welcome, buddy! Well, we got it open! What do ...
  12C:  Else
  134:  	Call  SpeakToPlayer ( 00000001 00A70004 00A70005 00000000 00030004 ) % Hey, bud! How ya been? Take a look around. I wanna ...
  154:  EndIf
  15C:  Return
  164:  End
}

#new:String $GotEverything
{
	[Style Right]
	Aw, buddy...[BR]
	[Pause 10]I'm cleaned out![BR]
	I've got nothing more to sell![BR]
	[Wait][Next]
	You were one serious repeat[BR]
	customer, bud! [BR]
	You know, I think you deserve[BR]
	something for that...[BR]
	[Wait][NEXT]
	I know! Take this![BR]
	[Pause 10]This is a special Badge, bud,[BR]
	so use it with care.[Wait][End]
}


% Do not change anything below this point!
% =================================================

#new:Function $Function_HasBadge % args: A0 = badgeID
{
	LIO		A2, 8010F344
	ADDIU	A3, A2, 100
	.Loop
	LH		A1, 0 (A2)
	BEQL	A0, A1, .End
	ADDIU	V0, R0, 1 % return true
	BNE		A2, A3, .Loop
	ADDIU	A2, A2, 2
	ADDIU	V0, R0, 0 % return false
	.End
	JR		RA
	NOP
}

% How does the game know to refresh the badges?
% A bunch of maps set Flag_Rowf_Badges_Chosen to false in their Main script.
% Some examples: mim_10, flo_00, hos_00, kmr_10, etc.
	
% Modified to support more badges and work with the more detailed table.
@ $Function_802400C8
{
	ADDIU	SP, SP, -80
	SW		RA, 3C (SP)
	SW		S8, 38 (SP)
	SW		S7, 34 (SP)
	SW		S6, 30 (SP)
	SW		S5, 2C (SP)
	SW		S4, 28 (SP)
	SW		S3, 24 (SP)
	SW		S2, 20 (SP)
	SW		S1, 1C (SP)
	SW		S0, 18 (SP)
	% save story progress to S5
	LIO		A1, *GB_StoryProgress
	JAL		~Func:get_variable
	DADDU	S8, A0, R0
	DADDU	S5, V0, R0
	% allocate memory
	JAL		8002ACE4	% allocate 0x30 bytes for shop inventory
	ADDIU	A0, R0, 30
	DADDU	S7, V0, R0
	SW		R0, 0 (V0)
	SW		R0, 4 (V0)
	SW		R0, 8 (V0)
	SW		R0, 0 (S7)
	SW		R0, C (S7)
	SW		R0, 18 (S7)
	SW		R0, 24 (S7)
	% check whether we should refresh shop inventory
	LIO		A1, *GF_MAC01_RowfBadgesChosen
	JAL		~Func:get_variable
	DADDU	A0, S8, R0
	BNE		V0, R0, .LoadBadges
	DADDU	A0, S8, R0
	% loop0: for each badge in Rowf's stock, copy the index
	% of available badges to a temporary array on the stack
	DADDU	S1, R0, R0 % badge table counter (0 to NumRowfBadges-1)
	ADDIU	S2, SP, 50 % index array position
	DADDU	S3, R0, R0 % saved badge count
	DADDU	A0, R0, R0
	.Loop0
	LIA		S6, $RowfBadgeInventory
	SLL		S0, S1, 4
	DADDU	S0, S0, S6 % get ith entry in badge data table
	% check required story progress
	LW		V0, 0 (S0)
	SLT		S4, S5, V0
	BNEL	S4, R0, .EndLoop0
	ADDIU	S1, S1, 1
	% check if player has the badge
	JAL		$Function_HasBadge
	LW		A0, 4 (S0)
	BNEL	V0, R0, .EndLoop0
	ADDIU	S1, S1, 1
	% save index to array
	SB		S1, 0 (S2)
	ADDIU	S2, S2, 1
	ADDIU	S3, S3, 1
	ADDIU	S1, S1, 1
	.EndLoop0
	SLTIU	V0, S1, .NumRowfBadges
	BNE		V0, R0, .Loop0
	% did we find any?
	DADDU	A0, R0, R0
	BEQ		S3, R0, .Done1
	DADDU	S5, R0, R0
	% randomly choose 3 badges for the shop
	ADDIU	S4, SP, 50
	ADDIU	S2, S3, FFFF
	DADDU	S0, S7, R0
	.Loop1
	% get random badge index (0 to num-1)
	JAL		~Func:rand_int
	DADDU	A0, S2, R0
	DADDU	S1, V0, R0
	ADDU	V0, S4, V0
	LBU		A2, 0 (V0)
	% get badge from table (entry size increased: C -> 10 bytes)
	LIA		A3, $RowfBadgeInventory
	SLL		V1, A2, 4
	ADDU	V1, V1, A3
	% copy selected badge to inventory
	LW		V0, 4 (V1)
	SW		V0, 0 (S0)
	LW		V0, 8 (V1)
	SW		V0, 4 (S0)
	LW		V0, C (V1)
	SW		V0, 8 (S0)
	% save index to (Byte_Rowf_Badge0 + i)
	LIO		A1, *GB_MAC01_Rowf_Badge0
	ADDU	A1, S5, A1
	JAL		~Func:set_variable
	DADDU	A0, S8, R0
  	ADDIU	S5, S5, 1
	SLTI	V0, S5, 3
	BEQ		V0, R0, .Done1
	ADDIU	S0, S0, C
	% if chosen index < max, remove it from the table
	SLT		V0, S1, S2
	BEQ		V0, R0, .EndLoop1
	DADDU	V1, S1, R0
	.ShiftTable
	ADDIU	V0, S1, 1
	DADDU	S1, V0, R0
	ADDU	V0, S4, V0
	LBU		V0, 0 (V0)
	ADDU	V1, S4, V1
	SB		V0, 0 (V1)
	SLT		V0, S1, S2
	BNE		V0, R0, .ShiftTable
	DADDU	V1, S1, R0
	.EndLoop1
	ADDIU	S3, S3, FFFF
	BNE		S3, R0, .Loop1
	ADDIU	S2, S2, FFFF
	.Done1
	DADDU	A0, S8, R0
	LIO		A1, *GB_MAC01_Rowf_NumBadges
	JAL		~Func:set_variable
	DADDU	A2, S5, R0
	DADDU	A0, S8, R0
	LIO		A1, *GF_MAC01_RowfBadgesChosen
	JAL		~Func:set_variable
	ADDIU	A2, R0, 1
	% Return with Var[3] == 0
	BEQ		R0, R0, .Return
	SW		R0, 90 (S8)
	%
	.LoadBadges
	LIO		A1, *GB_MAC01_Rowf_NumBadges
	JAL		~Func:get_variable
	RESERVED
	DADDU	S5, V0, R0
	BLEZ	S5, .Return1
	DADDU	S1, R0, R0
	LIO		S3, *GB_MAC01_Rowf_Badge0
	LIA		S6, $RowfBadgeInventory
	DADDU	S0, S7, R0
	.Loop3
	% Load the previously chosen badges to the inventory.
	% Very similar to the code in Loop1
	DADDU	A0, S8, R0
	JAL		~Func:get_variable
	ADDU	A1, S1, S3
	DADDU	A2, V0, R0
	% get badge from table (entry size increased: C -> 10 bytes)
	SLL		V1, A2, 4
	ADDU	V1, V1, S6
	% copy selected badge to inventory
	LW		V0, 4 (V1)
	SW		V0, 0 (S0)
	LW		V0, 8 (V1)
	SW		V0, 4 (S0)
	LW		V0, C (V1)
	SW		V0, 8 (S0)
	ADDIU	S1, S1, 1
	SLT		V0, S1, S5
	BNE		V0, R0, .Loop3
	ADDIU	S0, S0, C
	.Return1
	ADDIU	V0, R0, 1
	SW		V0, 90 (S8) % var[3] = 1
	.Return
	SW		S5, 84 (S8) % var[0] = num badges
	SW		S7, 8C (S8) % var[2] = inventory ptr
	LW		RA, 3C (SP)
	LW		S8, 38 (SP)
	LW		S7, 34 (SP)
	LW		S6, 30 (SP)
	LW		S5, 2C (SP)
	LW		S4, 28 (SP)
	LW		S3, 24 (SP)
	LW		S2, 20 (SP)
	LW		S1, 1C (SP)
	LW		S0, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 80
}
	
% this function returns the number of badges remaining on *Var[0]
% all references to the 'bought' flags are removed
@ $Function_80244984
{
	PUSH	RA, S0, S1, S2, S3
	DADDU	S3, A0, R0
	LIA		S0, $RowfBadgeInventory
	DADDU	S1, R0, R0
	DADDU	S2, R0, R0
	.CheckBadgesLoop
	JAL		$Function_HasBadge
	LW		A0, 4 (S0)
	XORI	V0, V0, 1
	DADDU	S1, S1, V0
	ADDIU	S2, S2, 1
	SLTIU	V0, S2, .NumRowfBadges
	BNE		V0, R0, .CheckBadgesLoop
	ADDIU	S0, S0, 10
	SW		S1, 84 (S3)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ADDIU	V0, R0, 2
}

% Story progress checks are now part of Function_802400C8, do not set flags here.
@ $Script_80248070
{
		% -- Removed --
  1C0:  Call     $Function_802400C8 ( )
%  1CC:  Set      *MapVar[2] *Var[1] 
  1DC:  If       *Var[3] ==  00000000 
  1EC:     Set      *GF_MAC01_RowfBadgeAvailableA 00000000 
  1FC:     Set      *GF_MAC01_RowfBadgeAvailableB 00000000 
  20C:     Set      *GF_MAC01_RowfBadgeAvailableC 00000000 
  21C:     If       *Var[0]  <  00000003 
  22C:        Set      *GF_MAC01_RowfBadgeAvailableC 00000001 
  23C:     EndIf
  244:     If       *Var[0]  <  00000002 
  254:        Set      *GF_MAC01_RowfBadgeAvailableB 00000001 
  264:     EndIf
  26C:     If       *Var[0]  <  00000001 
  27C:        Set      *GF_MAC01_RowfBadgeAvailableA 00000001 
  28C:     EndIf
  294:  EndIf
  29C:  Call     MakeShop    	( $RowfItemPositions *Var[2] $RowfDummyPriceList 00000000 )
  2B8:  Call     MakeShopOwner 	( $ShopOwnerRowf )
  2C8:  If       *Var[3] ==  00000001 
  2D8:     If       *Var[0] >=  00000003 
  2E8:        If       *GF_MAC01_RowfBadgeAvailableC ==  00000001 
  2F8:           Call     $Function_80240044 ( 00000002 )
  308:        EndIf
  310:     EndIf
  318:     If       *Var[0] >=  00000002 
  328:        If       *GF_MAC01_RowfBadgeAvailableB ==  00000001 
  338:           Call     $Function_80240044 ( 00000001 )
  348:        EndIf
  350:     EndIf
  358:     If       *Var[0] >=  00000001 
  368:        If       *GF_MAC01_RowfBadgeAvailableA ==  00000001 
  378:           Call     $Function_80240044 ( 00000000 )
  388:        EndIf
  390:     EndIf
  398:  EndIf
  3A0:  Return
  3A8:  End
}

% this is where the 'bought' flag is usually set,
% so the function has been modified to skip that.
@ $Function_80240044
{
	PUSH	RA
	LW		V0, C (A0)
	JAL		~Func:get_variable
	LW		A1, 0 (V0)
	LAW		V1, 8007419C
	ADDIU	A1, R0, 40
	LW		A0, 140 (V1)
	SLL		V1, V0, 4
	ADDU	V1, V1, A0
	JAL		80134148
	LW		A0, 0 (V1)
	POP		RA
	JR		RA
	ADDIU	V0, R0, 2
}

% ====================================================
% Chuck Quizmo will continue asking questions so long
% as another is available.
%
% The existing script is modified by adding two labels
% for flow control and new code to check for the next
% question after the player recieves a star piece.
% ====================================================

@ $Script_8024A370
{
	0:  If  *GB_CompletedQuizzes  >  0000003F
   10:  	Set   *Var0  00000000
   20:  	Return
   28:  EndIf
   30:  Call  GetPlayerPos  ( *Array[1] *Array[2] *Array[3] )
   48:  Call  NpcFacePlayer ( .Npc:Self 00000010 )
   5C:  If  *GB_CompletedQuizzes  ==  0000003F
   6C:  	Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 0008000A ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   8C:  Else
   94:  	If  *GF_Met_ChuckQuizmo  ==  .True
   A4:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 00080009 ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   C4:  	Else
   CC:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 00080008 ) % Kaaaa-wiiiizzz! Chuck Quizmo's the name, and quizz ...
   EC:  		Set   *GF_Met_ChuckQuizmo  .True
   FC:  	EndIf
  104:  EndIf
  10C:  Call  ShowChoice    ( 001E000D ) % Yes No
  11C:  If  *Var0  ==  00000001
  12C:  	Call  ContinueSpeech    ( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
  14C:  	ExecWait  $Script_80248D24
  158:  	Set   *Var0  00000000
  168:  	Return
  170:  EndIf
  178:  Set   *GF_Quizmo_TakingQuiz  .True
  188:  Call  $Function_80242028 ( )
  194:  Call  $Function_8024233C ( )
  1A0:  Exec  $Script_80248DD4
  1AC:  Call  DisablePartnerAI  ( 00000000 )
  1BC:  Call  SetNpcFlagBits    ( .Npc:Partner 00000200 .False )
  1D4:  Call  SetNpcFlagBits    ( 00000005 00000200 .False )
  1EC:  Call  SetNpcFlagBits    ( .Npc:Partner 00000148 .True )
  204:  Call  SetNpcFlagBits    ( 00000005 00000100 .True )
  21C:  Call  SetNpcAnimation   ( .Npc:Partner 00000106 )
  230:  Exec  $Script_802494FC *Var1
  240:  Call  ContinueSpeech    ( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
  260:  Call  PlaySound ( 00000089 )
  270:  Loop
  27C:  	DoesScriptExist  *Var1 *Var0
  28C:  	If  *Var0  ==  00000000
  29C:  		BreakLoop
  2A4:  	EndIf
  2AC:  	Wait  1`
  2B8:  EndLoop
  2C0:  Call  $Function_80242680 ( )
  2CC:  Loop  00000005
  2D8:  	Call  GetPlayerPos  ( *Var0 *Var1 *Var2 )
  2F0:  	Add   *Var1  00000001
  300:  	Call  SetPlayerPos  ( *Var0 *Var1 *Var2 )
  318:  	Wait  2`
  324:  EndLoop
      	Label	0	% new label for multiple questions
  32C:  Set   *Var0  002C0000
  33C:  Add   *Var0  *GB_CompletedQuizzes
  34C:  Call  SpeakToPlayer ( .Npc:Self 00AF0005 00AF0006 00000000 *Var0 ) % variable string ID
  36C:  Call  SetPlayerAnimation    ( .PlayerAnim:Question )
  37C:  Set   *Var0  002D0000
  38C:  Add   *Var0  *GB_CompletedQuizzes
  39C:  Call  PlaySound     ( 0000008E )
  3AC:  Call  ShowChoice    ( *Var0 ) % variable string ID
  3BC:  Kill  *Var1
  3C8:  Call  StopSound     ( 0000008E )
  3D8:  Exec  $Script_80249570
  3E4:  Wait  15`
  3F0:  Call  PlaySound     ( 0000008D )
  400:  Call  $Function_80242980    ( *Var0 )
  410:  Set   *Array[4]  00000000
  %420:  Call  $Function_80242F74 ( )
  42C:  Wait  40`
  438:  Call  $Function_802425FC ( )
  444:  Thread
  44C:  	Wait  110`
  458:  	Call  CloseChoice ( )
  464:  	Set   *Array[4]  00000000
  474:  EndThread
  47C:  If  *Var0  ==  00000001
  48C:  	Call  SetNpcAnimation   ( 00000005 00AF0007 )
  4A0:  	Set   *Array[4]  00000001
  4B0:  	Thread
  4B8:  		Call  $Function_8024294C    ( 00000001 )
  4C8:  		Wait  6`
  4D4:  		Wait  6`
  4E0:  		Wait  6`
  4EC:  		Call  $Function_8024294C    ( 00000002 )
  4FC:  	EndThread
  504:  	Thread
  50C:  		Call  PlaySound ( 0000021C )
  51C:  		Wait  6`
  528:  		Call  PlaySound ( 0000021C )
  538:  		Wait  6`
  544:  		Call  PlaySound ( 0000021C )
  554:  		Wait  6`
  560:  		Call  PlaySound ( 0000021C )
  570:  	EndThread
  578:  	Call  PlaySound ( 0000008A )
  588:  	Call  $Function_80242A18 ( )
  594:  	Thread
  59C:  		Wait  15`
  5A8:  		Call  GetPlayerPos  ( *Var0 *Var1 *Var2 )
  5C0:  		Add   *Var1  00000032
  5D0:  		Call  $Function_80242B90    ( 00000000 00000000 00000053 *Var0 *Var2 )
  5F0:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  634:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  678:  		Wait  15`
  684:  		Add   *Var1  FFFFFFFD
  694:  		Call  $Function_80242B90    ( 00000000 00000000 0000003A *Var0 *Var2 )
  6B4:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  6F8:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  73C:  		Wait  15`
  748:  		Add   *Var1  0000001E
  758:  		Call  $Function_80242B90    ( 00000000 00000000 0000005D *Var0 *Var2 )
  778:  		Call  PlayEffect    ( ~FX:Steam:Ring *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  7BC:  		Call  PlayEffect    ( ~FX:Confetti:Burst2 *Var0 *Var1 *Var2 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  800:  		Wait  15`
  80C:  	EndThread
  814:  	Wait  20`
  820:  	Exec  $Script_8024A210 *Var1
  830:  	Add   *GB_CompletedQuizzes  00000001
  840:  	If  *GB_CompletedQuizzes  >  0000003F
  850:  		Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 00080010 ) % Correct!! Congratulations! This is my last prize!  ...
  870:  		Call  SetNpcAnimation   ( 00000005 00AF0006 )
  884:  		Loop
  890:  			DoesScriptExist  *Var1 *Var0
  8A0:  			If  *Var0  ==  00000000
  8B0:  				BreakLoop
  8B8:  			EndIf
  8C0:  			Wait  1`
  8CC:  		EndLoop
  8D4:  		Call  SetNpcAnimation   ( 00000005 00AF0005 )
  8E8:  		Set   *Var0  0000015C
  8F8:  		Set   *Var1  00000003
  908:  		ExecWait  $Script_80248C34
  914:  		Call  AddStarPieces     ( 00000001 )
  924:  		Call  $Function_8024294C    ( 0000000F )
  934:  		Call  $Function_80242A00 ( )
  940:  		Call  SetMessageValue   ( *GB_CompletedQuizzes 00000000 )
  954:  		Call  SpeakToPlayer     ( .Npc:Self 00AF0004 00AF0001 00000000 00080011 ) % You've managed to correctly answer all questions.  ...
  974:  	Else
  97C:  		Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000E ) % Correct! Congratulations! Here's your Star Piece!
  99C:  		Call  SetNpcAnimation   ( 00000005 00AF0006 )
  9B0:  		Loop
  9BC:  			DoesScriptExist  *Var1 *Var0
  9CC:  			If  *Var0  ==  00000000
  9DC:  				BreakLoop
  9E4:  			EndIf
  9EC:  			Wait  1`
  9F8:  		EndLoop
  A00:  		Call  SetNpcAnimation   ( 00000005 00AF0005 )
  A14:  		Set   *Var0  0000015C
  A24:  		Set   *Var1  00000001
  A34:  		ExecWait  $Script_80248C34
  A40:  		Call  AddStarPieces     ( 00000001 )
  A50:  		Call  $Function_8024294C    ( 0000000F )
  A60:  		Call  $Function_80242A00 ( )
  A6C:  		Call  SetMessageValue   ( *GB_CompletedQuizzes 00000000 )
  A80:  		If  *GB_CompletedQuizzes  ==  00000001
  A90:  			Call  SetMessageString  ( 8014C294 00000001 )
  AA4:  		Else
  AAC:  			Call  SetMessageString  ( 8014C290 00000001 )
  AC0:  		EndIf
  AC8:  		Call  SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 0008000F ) % You've correctly answered question so far. Good lu ...
			% ====================================================
			% new: multiple quizzes can be completed at a time
				Wait	10`
				Call	$Function_IsNextQuestionAvailable ( )
				If  *Var[0]  ==  00000000 
					Call     SpeakToPlayer	( .Npc:Self 00AF0004 00AF0001 00000000 0008004A ) % Looks like that's it for now ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     SpeakToPlayer		( .Npc:Self 00AF0004 00AF0001 00000000 00080049 ) % But we're not done yet ...
				Call     ShowChoice			( 001E000D ) % Yes No 
				If	*Var[0] ==  00000001 
					Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
				Thread
					Call     $Function_80242B90 ( *Array[1] *Array[3] 0000006C *Var[0] *Var[1] )
					SetF     *Var[2] *Array[1] 
					AddF     *Var[2] *Var[0] 
					SetF     *Var[3] *Array[3] 
					AddF     *Var[3] *Var[1] 
					Call     SetNpcAnimation 	( .Npc:Partner 00000102 )
					Call     NpcMoveTo   		( .Npc:Partner *Var[2] *Var[3] 00000028 )
					Call     SetNpcAnimation 	( .Npc:Partner 00000106 )
					Call     NpcFacePlayer 		( .Npc:Partner 00000000 )
				EndThread
				Call     $Function_80242B90 ( *Array[1] *Array[3] 00000053 *Var[0] *Var[1] )
				SetF     *Var[3] *Var[0] 
				SetF     *Var[4] *Var[1] 
				AddF     *Var[3] *Array[1]
				AddF     *Var[4] *Array[3]
				Call     PlayerMoveTo 	( *Var[3] *Var[4] 40` )
				Loop     00000005 
					Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Add      *Var[1] 00000001 
					Call     SetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Wait     00000002 
				EndLoop
				Goto	0
		%/new
		% ====================================================
  AE8:  	EndIf
  AF0:  	Set   *Var0  00000001
  B00:  Else
  B08:  	Call  SetNpcAnimation   ( 00000005 00AF0009 )
  B1C:  	Set   *Array[4]  00000002
  B2C:  	Call  PlaySound ( 0000021D )
  B3C:  	Call  PlaySound ( 0000008B )
  B4C:  	Exec  $Script_8024A2C0 *Var1
  B5C:  	Call  GetPlayerPos      ( *Var2 *Var3 *Var4 )
  B74:  	Call  PlayEffect        ( ~FX:DeadLeaves:Gust1 *Var2 *Var3 *Var4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  BB8:  	Call  ContinueSpeech    ( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000D ) % Oops! Tough luck, pal! Wrong answer! Better luck n ...
  BD8:  	Call  SetNpcAnimation   ( 00000005 00AF000A )
  BEC:  	Loop
  BF8:  		DoesScriptExist  *Var1 *Var0
  C08:  		If  *Var0  ==  00000000
  C18:  			BreakLoop
  C20:  		EndIf
  C28:  		Wait  1`
  C34:  	EndLoop
  C3C:  	Set   *Var0  00000000
  C4C:  EndIf
      	Label	1	% new label for multiple questions
  C54:  Call  $Function_80242980    ( FFFFFFFF )
  C64:  Call  EnablePartnerAI ( )
  C70:  Thread
  C78:  	Wait  30`
  C84:  	Call  PlaySound ( 0000008F )
  C94:  EndThread
  C9C:  Thread
  CA4:  	Wait  45`
  CB0:  	Call  StopSound ( 00000089 )
  CC0:  EndThread
  CC8:  Call  $Function_80242A34 ( )
  CD4:  Call  $Function_80242898 ( )
  CE0:  ExecWait  $Script_80248D24
  CEC:  Exec  $Script_8024906C
  CF8:  Call  $Function_80242488 ( )
  D04:  Call  $Function_8024203C ( )
  D10:  Set   *GF_Quizmo_TakingQuiz  .False
  D20:  Return
  D28:  End
}

% Since we never loaded the O/X icon, don't try to free it.
@ $Function_80242898[9C]
{
	NOP
}
 
#new:Function $Function_IsNextQuestionAvailable
{
	PUSH	RA, S0, S1
	DADDU	S1, A0, R0
	DADDU	A0, R0, R0
	LIO		A1, *GB_CompletedQuizzes
	JAL		~Func:get_variable
	RESERVED
	DADDU	A0, R0, R0
	DADDU	S0, V0, R0
	LIO		A1, *GB_StoryProgress
	JAL		~Func:get_variable
	RESERVED
	DADDU	A1, V0, R0
	LIA		A0, $QuizRequirements
    .FindStoryProgress
	LW		V0, 0 (A0)
	SLT		V0, A1, V0
	BNE		V0, R0, .CompareQuizIndex
	NOP
	BEQ		R0, R0, .FindStoryProgress
	ADDIU	A0, A0, 8
	.CompareQuizIndex
	LW		V0, 4 (A0)
	SLT		V0, S0, V0
	SW		V0, 84 (S1)
	.Done
	POP		RA, S0, S1
	JR		RA
	ADDIU	V0, R0, 2
}

@ $QuizRequirements
{
% if (story progress) < (col 1), the player can complete up to (col 2) quizzes
FFFFFF94 00000000 % < chapter 1 start
FFFFFFB4 00000006 % < chapter 2 start
FFFFFFCA 0000000C % < chapter 3 start
FFFFFFF2 00000012 % < chapter 4 start
00000006 0000001A % < chapter 5 start
00000027 00000022 % < chapter 6 start
0000003A 0000002A % < chapter 7 start
00000058 00000034 % < chapter 8 start
0000005F 00000040 % end game
00000060 00000040 % all
}

@ $QuizAnswers
{
01010200 01000200 01020001 01020200 
02010202 01000201 00010201 00020100 
02000102 00000001 00020002 02010001
02020102 02010102 00020102 01000201
}



@ $Script_Interact_8025FC84
{
	%check stones, change the regular "not impressed" message to the impressed one
	Set *Var7 0`
	Call  FindKeyItem ( .Item:GreedStone *VarF )
	If *VarF == FFFFFFFF
		Set *Var7 1`
	EndIf
	Call  FindKeyItem ( .Item:BadgeStone *VarF )
	If *VarF == FFFFFFFF			
		Set *Var7 1`		
	EndIf
	Switch *GB_FileCodeMode
		CaseOR == 0`			
		CaseOR == 6`
		CaseOR == 7`
			If *Var7 == 1`
				Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootImpressed ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
			Else
				Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootMad ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
			EndIf
		EndCaseGroup
		CaseOR == 1`
		CaseOR == 11`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootReallyMad ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
		EndCaseGroup
		CaseOR == 2`
		CaseOR == 10`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootReallyMadEasy ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
		EndCaseGroup
		Case == 3`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootReallyMadAnarchy ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
		Case == 13`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootReallyMadSpeed ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
		CaseOR == 4`			
		CaseOR == 5`
		CaseOR == 8`
		CaseOR == 9`
		CaseOR == 12`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootImpressed ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
		EndCaseGroup		
		Case == 15`
			Call  SpeakToPlayer ( .Npc:Self 00B50004 00B50001 00000000 $KoopaKootReallyMadAnarchy2 ) % Who's that? Is it Mario? Why, it's me, Koopa Koot. ...
	EndSwitch
	Return
	End
}

#new:String $KoopaKootMad
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]You know, you young folk[BR]
	have it really easy in life.[BR]
	[Wait][Next]
	Back in my day, I had to[BR]
	actually think in order to[BR]
	beat people up...[BR]
	[Wait][Next]
	Nowadays, you young folk can[BR]
	eat those biscuit thingies and[BR]
	all those weird cakes to make[BR]
	things way too easy![BR]
	[Wait][Next]
	How about this: You start[BR]
	the game over from the very[BR]
	beginning but you name your[BR]
	file "[COLOR:20]NewGame[STAR][COLOR:0A]"
	[Wait][Next]
	Then you'll see what a real[BR]
	challenge looks like![BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMad
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that cheating[BR]
	code, aren't you?[BR]
	[Wait][Next]
	Well I never! You young[BR]
	folk never know the value[BR]
	of hard work![BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say anything to some[BR]
	cheater![BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMadEasy
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that easy mode[BR]
	code, aren't you?[BR]
	[Wait][Next]
	Well I never! You young[BR]
	folk never know the value[BR]
	of hard work![BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say a thing to you[BR]
	unless you stop using that code![BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMadAnarchy
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that anarchy[BR]
	code, aren't you?[BR]
	[Wait][Next]
	Well I never! You young[BR]
	folk have it way too easy[BR]
	these days![BR]
	[Wait][Next]
	Back in my day, I had to[BR]
	choose the best badges to[BR]
	wear. I couldn't just wear[BR]
	all of them at the same time![BR]
	[Wait][Next]
	All you young people are so[BR]
	lazy nowadays![BR]
	[Wait][Next]
	If you keep up this laziness,[BR]
	you're going to turn into[BR]
	a fat guy, you know...[BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say a thing to you[BR]
	unless you stop using that code![BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMadSpeed
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that infinite[BR]
	hustle code, aren't you?[BR]
	[Wait][Next]
	Well I never! People like[BR]
	you are the worst part[BR]
	of your generation![BR]
	[Wait][Next]
	Kids these days are always[BR]
	going too fast and rushing[BR]
	through things...[BR]
	[Wait][Next]
	They never know when to slow[BR]
	down and do things Right![BR]
	[Wait][Next]
	They're the type of people who[BR]
	don't care about making things[BR]
	look Right, or making sure everything[BR]
	fits in the text boxes...[BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say a thing to you[BR]
	unless you stop using that code![BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMadBiscuit
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that biscuit[BR]
	code, aren't you?[BR]
	[Wait][Next]
	Well I never! People like[BR]
	you are the worst part[BR]
	of your generation![BR]
	[Wait][Next]
	Back in my day, we didn't have[BR]
	all these fancy biscuits and[BR]
	mushroom cakes...[BR]
	[Wait][Next]
	All we had were those expensive[BR]
	Hustle Drinks and those Repel[BR]
	Gels that barely lasted a few[BR]
	seconds![BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say a thing to you[BR]
	unless you stop using that code![BR]
	[Wait][End]
}

#new:String $KoopaKootImpressed
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]I have to say I'm impressed![BR]
	Seems like you young folk[BR]
	aren't so lazy after all...[BR]
	[Wait][Next]
	Hey, I'll give you a few more[BR]
	file codes, if you're up for[BR]
	them.[BR]
	[Wait][Next]
	"[COLOR:20]NewGame[STAR][COLOR:0A]" - 2.0x curse[BR]
	"[COLOR:20]GetGood[COLOR:0A]"  - 3.0x curse[BR]
	"[COLOR:20]CantWin[COLOR:0A]"  - 4.5x curse[BR]
	[Wait][End]
}

#new:String $KoopaKootReallyMadAnarchy2
{
	[Style Right]
	[Shake]Who's that? Is it Mario?[BR]
	[Pause 10]Why, it's me,[Pause 10] Koopa Koot.[BR]
	[Wait][Next]
	[Shake]Hang on, what is that?[BR]
	You're using that other[BR]
	anarchy code, aren't you?[BR]
	[Wait][Next]
	Well I never! You young[BR]
	folk have it way too easy[BR]
	these days![BR]
	[Wait][Next]
	Back in my day, I had to[BR]
	choose the best badges to[BR]
	wear. I couldn't just wear[BR]
	all of them at the same time![BR]
	[Wait][Next]
	And now you don't even need[BR]
	to think about what move to[BR]
	do since it happens on its[BR]
	own![BR]
	[Wait][Next]
	All you young people are so[BR]
	lazy nowadays![BR]
	[Wait][Next]
	If you keep up this laziness,[BR]
	you're going to turn into[BR]
	a fat guy, you know...[BR]
	[Wait][Next]
	I was going to tell you about[BR]
	some more file codes, but I[BR]
	won't say a thing to you[BR]
	unless you stop using that code![BR]
	[Wait][End]
}
