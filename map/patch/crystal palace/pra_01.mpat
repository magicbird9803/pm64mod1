#new:NpcGroup $NpcGroup_8024B1D8
{
	0000000D $NpcSettings_80243EE0 ~Vec3f:NPC_Chet % 410 20 -200
	00002D01 $Script_Init_802497B0 00000000 00000000 0000010E
	~NoDrops
	~Movement:NPC_Chet
	~AnimationTable:NPC_Chet % .Sprite:ChetRippo
	00000000 00000000 00000000 $ChetTattle % He claims that he can upgrade your point levels... ...
}

#new:NpcGroupList $NpcGroupList_8024DC88
{
	00000001 $NpcGroup_8024B1D8 00000000
	00000000 00000000 00000000
}

@ $NpcGroupList_80242F60
{
	00000001 $NpcGroup_80242D70 21010001
	00000001 $NpcGroup_8024B1D8 00000000
	00000000 00000000 00000000
}

#new:NpcSettings $NpcSettings_80243EE0
{
	00000000 00160019 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00630000
}

@ $Script_Main
{
    0:  Set   *GB_WorldLocation  .Location:ShiverMountain
   10:  Call  SetSpriteShading  ( .Shading:None )
   20:  Call  SetCamPerspective ( .Cam:Default 00000003 00000019 00000010 00001000 )
   40:  Call  SetCamBGColor     ( .Cam:Default 00000000 00000000 00000000 )
   5C:  Call  SetCamLeadPlayer  ( .Cam:Default .False )
   70:  Call  SetCamEnabled     ( .Cam:Default .True )
   84:  Set   *GF_Map_CrystalPalace  .True
   94:  If  *GB_StoryProgress  ==  .Story:Ch7_BeganPeachMission % 58
   A4:  	Call  MakeNpcs  ( .True $NpcGroupList_80242F60 )
   B8:  Else
			Call  MakeNpcs  ( .True $NpcGroupList_8024DC88 )
		EndIf
   C0:  ExecWait  $Script_80242F80
   CC:  ExecWait  $Script_80241440
   D8:  Call  $Function_80240F20 ( )
   E4:  Call  $Function_80240F60 ( )
   F0:  Set   *Var0  0000001E
  100:  Set   *Var1  0000001E
  110:  Set   *Var2  00000000
  120:  Exec  $Script_80241678
  12C:  Set   *Var0  00000002
  13C:  Set   *Var1  *GF_PRA_BrokeIllusion
  14C:  Exec  $Script_802415D0
  158:  Call  ModifyColliderFlags   ( 00000003 ~Collider:deilisw 00000008 )
  170:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1328 00000008 )
  188:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1368 00000008 )
  1A0:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1338 00000008 )
  1B8:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1389 00000008 )
  1D0:  Call  ModifyColliderFlags   ( 00000003 ~Collider:deilinw 00000008 )
  1E8:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1327 00000008 )
  200:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1373 00000008 )
  218:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1337 00000008 )
  230:  Call  ModifyColliderFlags   ( 00000003 ~Collider:o1386 00000008 )
  248:  Exec  $Script_EnterWalk_80241AB4
  254:  Call  GetEntryID    ( *Var0 )
  264:  If  *Var0  ==  ~Entry:Entry4
  274:  	Wait  65`
  280:  Else
  288:  	Wait  1`
  294:  EndIf
  29C:  Return
  2A4:  End
}

#new:Script $Script_Init_802497B0
{
		%When should chet rippo not appear?
		%Stats can't be lowered AND no star tokens to raise stats
		Set *Var0 0
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					If *StarTokenCount <= 0`
						Set *Var0 1`
					EndIf
				EndIf
			EndIf
		EndIf		
   D0:  If  *Var0  ==  00000000
   E0:  	Call  SetNpcCollisionSize   ( .Npc:Self 00000016 00000019 )
   F8:  	Call  $Function_80241BB8    ( FFFFFFFF *Fixed[2.0] )
  10C:  	Call  SetNpcFlagBits        ( .Npc:Self 00010000 .True )
  124:  	Call  BindNpcInteract       ( .Npc:Self $Script_Interact_80249184 )
  138:  Else
  140:  	Call  RemoveNpc ( .Npc:Self )
  150:  EndIf
		Set *MapFlag[6] .False
  158:  Return
  160:  End
}

#new:Function $Function_802419E4
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        S1, 14 (SP)
   10:  LA        S1, 8010F290
   18:  SW        RA, 20 (SP)
   1C:  SW        S3, 1C (SP)
   20:  SW        S2, 18 (SP)
   24:  LW        V0, C (S0)
   28:  LB        A2, 4 (S1)
   2C:  LW        A1, 0 (V0)
   30:  ADDIU     V0, V0, 4
   34:  LW        S2, 0 (V0)
   38:  JAL       ~Func:set_variable
   3C:  LW        S3, 4 (V0)
   40:  COPY      A0, S0
   44:  LB        A2, 7 (S1)
   48:  JAL       ~Func:set_variable
   4C:  COPY      A1, S2
   50:  COPY      A0, S0
   54:  LB        A2, 8 (S1)
   58:  JAL       ~Func:set_variable
   5C:  COPY      A1, S3
   60:  LW        RA, 20 (SP)
   64:  LW        S3, 1C (SP)
   68:  LW        S2, 18 (SP)
   6C:  LW        S1, 14 (SP)
   70:  LW        S0, 10 (SP)
   74:  LI        V0, 2
   78:  JR        RA
   7C:  ADDIU     SP, SP, 28
}

#new:Function $Function_80241BB8
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  SDC1      F20, 20 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  COPY      A0, S1
   2C:  LW        A1, 0 (S0)
   30:  JAL       ~Func:get_float_variable
   34:  COPY      S0, V0
   38:  COPY      A0, S1
   3C:  COPY      A1, S0
   40:  JAL       ~Func:resolve_npc
   44:  MOV.S     F20, F0
   48:  SWC1      F20, 7C (V0)
   4C:  LW        RA, 18 (SP)
   50:  LW        S1, 14 (SP)
   54:  LW        S0, 10 (SP)
   58:  LDC1      F20, 20 (SP)
   5C:  LI        V0, 2
   60:  JR        RA
   64:  ADDIU     SP, SP, 28
}

#new:Script $Script_Interact_80249184
{
	If  *GF_Met_MouseBrother  ==  .False
		Set   *Var0  $String_ChetRippoFirst
		Set   *GF_Met_MouseBrother  .True
	Else
		If *MapFlag[6] == .True
			Set   *Var0  $String_ChetRippoStartShort
		Else
			Set   *Var0  $String_ChetRippoStart
		EndIf
	EndIf
	Call  $Function_80241C20 ( )		%Not sure what this does
	Call  SpeakToPlayer     ( 0000000D 00BC0104 00BC0101 00000000 *Var0 ) % variable string ID
	%Now open a Choice menu depending on what you can do
	Label InitialChoice
	%Determine what is possible
	If *StarTokenCount > 0`
		Set *Var0 0`
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					Set *Var0 1`
				EndIf
				If *Var3 == 16`
					Set *Var0 1`
				EndIf
				If *Var3 == 20`
					Set *Var0 1`
				EndIf
			EndIf
		EndIf			
		%Call  ShowCoinCounter   ( .True )
		If *Var0 == 0`
			Call	ShowChoice	( $String_ChetRippoNormalOptions )
		Else
			Call	ShowChoice	( $String_ChetRippoNoLower )
		EndIf
	Else
		%if you have no star tokens you can never get into a state where you can't raise stats
		%(You can lower your stats below the starting values)
		Call	ShowChoice	( $String_ChetRippoNoRaise )
	EndIf
	Switch	*Var[0]
		Case  ==  0  % raise
			% flush Choice message with EndSpeech, don't know if this is the 'correct' way to do it
			%Call  ShowCoinCounter   ( .False )
			Call	EndSpeech	( 0000000D 00BC0104 00BC0101 00000000 )
			Goto Raise
		Case  ==  1  % lower
			% flush Choice message with EndSpeech, don't know if this is the 'correct' way to do it
			%Call  ShowCoinCounter   ( .False )
			Call	EndSpeech	( 0000000D 00BC0104 00BC0101 00000000 )
			Goto Lower
		Case  ==  2  % cancel
			Call	ContinueSpeech	( 0000000D 00BC0104 00BC0101 00000000 000600AA )
			%Call  ShowCoinCounter   ( .False )
			Call  $Function_80241C40 ( )
			Return
	EndSwitch
	%now to your menu selection
	%
	%raising (costs star tokens and coins)
	Label Raise
	If *StarTokenCount <= 0`
		Set *Var0 0`
		Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
		If *Var1 <= 1`
			If *Var2 <= 0`
				If *Var3 <= 0`
					Set *Var0 1`
				EndIf
				If *Var3 == 16`
					Set *Var0 1`
				EndIf
				If *Var3 == 20`
					Set *Var0 1`
				EndIf			
			EndIf
		EndIf			
		If *Var0 == 1`
			%Uh oh, paradox
			Call	SpeakToPlayer	( 0000000D 00BC0104 00BC0101 00000000 $String_Paradox )
			Call  GetNpcPos     ( 0000000D *Var0 *Var1 *Var2 )
			Call  PlaySoundAtNpc    ( 0000000D 00002098 00000000 )
			Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000001 00000001 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call  SetNpcPos     ( 0000000D 00000000 FFFFFC18 00000000 )
			Call  $Function_80241C40 ( )
			Return
		EndIf
		Call	SpeakToPlayer	( 0000000D 00BC0104 00BC0101 00000000 $String_ChetRippoNoStarTokens )
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now check coins
	%
	Call  $Function_802419D0 ( )
	If  *Var0  <  00000000
		Call  SpeakToPlayer    ( 0000000D 00BC0104 00BC0101 00000000 $String_ChetRippoTooPoor ) % What are you trying to pull? You don't have 39 coi ...
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now the menu
	Call  $Function_80241B90 ( )
	Call  SetMessageValue   ( *Var0 00000000 )
	Call  SetMessageValue   ( *Var1 00000001 )
	Call  SetMessageValue   ( *Var2 00000002 )
	Call  SpeakToPlayer    ( 0000000D 00BC0104 00BC0101 00000000 $String_RaiseMenu ) % There you go! Good call! Here's your current statu ...
	Call  ShowChoice        ( 001E000B ) % H P F P B P
	If  *Var0  ==  00000003
		%Call  ShowCoinCounter   ( .False )
		Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 000600AD ) % Aw, man. You're backing out...? Oh, well. Your los ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Double check that it isn't banned
	Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
	Call  FindKeyItem ( .Item:GreedStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 0`
			%but Wait, check that max hp is 5 first
			If *Var6 >= 5`
				Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_GreedCurse )
				Call  $Function_80241C40 ( )
				Return
			EndIf
		EndIf
	EndIf
	Call  FindKeyItem ( .Item:BadgeStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 2`
			Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_BadgeCurse )
			Call  $Function_80241C40 ( )
			Return
		EndIf
	EndIf	
	Switch *Var0
		Case == 0`
			If *Var6 >= 50`
				Set *Var2 1`
			EndIf
			Set   *Var1  001D00D1
		Case == 1`
			Call  FindKeyItem ( .Item:GreedStone *VarF )
			If *VarF != FFFFFFFF
				If *Var7 >= 70`
					Set *Var2 1`
				EndIf		
			Else
				If *Var7 >= 50`
					Set *Var2 1`
				EndIf		
			EndIf
			Set   *Var1  001D00D2
		Case == 2`
			Call  FindKeyItem ( .Item:GreedStone *VarF )
			If *VarF != FFFFFFFF
				If *Var8 >= 42`
					Set *Var2 1`
				EndIf		
			Else
				If *Var8 >= 30`
					Set *Var2 1`
				EndIf		
			EndIf
			Set   *Var1  001D00D3
	EndSwitch
	Set *VarA *Var0
	If  *Var2  ==  00000001
		Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_CantUpgradeThat ) % Oh, too bad, man. That one can't be upgraded any m ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Pay stuff
	%Call  AddCoin   ( FFFFFFF7 )
	Sub   *StarTokenCount 1`
	%get rid of star token if 0
	If *StarTokenCount <= 0`
		Call 	FindKeyItem ( .Item:StarToken *VarF )
		If *VarF != FFFFFFFF
			Call 	RemoveKeyItemAt ( *VarF )
		EndIf
	EndIf
	Call  SetMessageString  ( *Var1 00000000 )
	Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_UpgradeStat ) % All Right. So you want to be upgraded. Here goes!
	Wait  10`
	Call  SetNpcAnimation   ( 0000000D 00BC0105 )
	Wait  10`
	Call  PlaySoundAtNpc    ( 0000000D 0000024B 00000000 )
	Call  GetNpcPos ( 0000000D *Var6 *Var7 *Var8 )
	Add   *Var7  0000001A
	Call  PlayEffect        ( ~FX:ShimmerBurst:White *Var6 *Var7 *Var8 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call  SetNpcAnimation   ( 0000000D 00BC0105 )
	Wait  80`
	Call  SetNpcAnimation   ( 0000000D 00BC0101 )
	Switch *VarA
		Case == 0`
			Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
			If *Var6 == 1`
				Call $Function_AddMaxHP4 ( )
			Else
				Call $Function_AddMaxHP ( )
			EndIf
		Case == 1`
			Call $Function_AddMaxFP ( )
		Case == 2`
			Call $Function_AddMaxBP ( )		
	EndSwitch
	Call  SpeakToPlayer ( 0000000D 00BC0104 00BC0101 00000000 $String_UpgradeSuccess ) % variable string ID
	%Call	DisablePlayerInput	( .False )
	Call  $Function_80241C60 ( )
	Set *MapFlag[6] .True
	Return
	%
	%
	%lowering
	Label Lower
	Set *Var0 0`
	Call  $Function_802419E4    ( *Var1 *Var2 *Var3 )
	If *Var1 <= 1`
		If *Var2 <= 0`
			If *Var3 <= 0`
				Set *Var0 1`
			EndIf
			If *Var3 == 16`
				Set *Var0 1`
			EndIf
			If *Var3 == 20`
				Set *Var0 1`
			EndIf			
		EndIf
	EndIf			
	If *Var0 == 1`
		If *StarTokenCount <= 0`
			%Uh oh, paradox
			Call	SpeakToPlayer	( 0000000D 00BC0104 00BC0101 00000000 $String_Paradox )
			Call  GetNpcPos     ( 0000000D *Var0 *Var1 *Var2 )
			Call  PlaySoundAtNpc    ( 0000000D 00002098 00000000 )
			Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000001 00000001 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call  SetNpcPos     ( 0000000D 00000000 FFFFFC18 00000000 )
			Call  $Function_80241C40 ( )
			Return
		EndIf
		Call	SpeakToPlayer	( 0000000D 00BC0104 00BC0101 00000000 $String_ChetRippoNoLowerError )
		Call  $Function_80241C40 ( )
		Return
	EndIf
	%Now the menu
	Call  $Function_80241B90 ( )
	Call  SetMessageValue   ( *Var0 00000000 )
	Call  SetMessageValue   ( *Var1 00000001 )
	Call  SetMessageValue   ( *Var2 00000002 )
	Call  SpeakToPlayer    ( 0000000D 00BC0104 00BC0101 00000000 $String_LowerMenu ) % There you go! Good call! Here's your current statu ...
	Call  ShowChoice        ( 001E000B ) % H P F P B P
	If  *Var0  ==  00000003
		%Call  ShowCoinCounter   ( .False )
		Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 000600AD ) % Aw, man. You're backing out...? Oh, well. Your los ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Double check that it isn't banned
	Call  FindKeyItem ( .Item:BadgeStone *VarF )
	If *VarF != FFFFFFFF
		If *Var0 == 2`
			Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_BadgeCurse )
			Call  $Function_80241C40 ( )
			Return
		EndIf
	EndIf	
	Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
	Switch *Var0
		Case == 0`
			If *Var6 <= 1`
				Set *Var2 1`
			EndIf
			Set   *Var1  001D00D1
		Case == 1`
			If *Var7 <= 0`
				Set *Var2 1`
			EndIf		
			Set   *Var1  001D00D2
		Case == 2`
			If *Var8 <= 0`
				Set *Var2 1`
			EndIf		
			Set   *Var1  001D00D3
	EndSwitch
	Set *VarA *Var0
	If  *Var2  ==  00000001
		Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_CantDowngradeThat ) % Oh, too bad, man. That one can't be upgraded any m ...
		Call  $Function_80241C40 ( )
		Return
	EndIf	
	%Pay stuff
	Add   *StarTokenCount 1`
	%add star token if you have none
	If *StarTokenCount > 0`
		Call 	FindKeyItem ( .Item:StarToken *VarF )
		If *VarF == FFFFFFFF
			Call 	AddKeyItem ( .Item:StarToken )
		EndIf
	EndIf
	Call  SetMessageString  ( *Var1 00000000 )
	Call  ContinueSpeech    ( 0000000D 00BC0104 00BC0101 00000000 $String_DowngradeStat ) % All Right. So you want to be upgraded. Here goes!
	Wait  10`
	Call  SetNpcAnimation   ( 0000000D 00BC0105 )
	Wait  10`
	Call  PlaySoundAtNpc    ( 0000000D 000003EF 00000000 )
	Call  GetNpcPos ( 0000000D *Var6 *Var7 *Var8 )
	Add   *Var7  0000001A
	Call  PlayEffect        ( ~FX:ShimmerBurst:Pink *Var6 *Var7 *Var8 00000001 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call  $Function_SetEffectPalette ( *VarF )
	Call  SetNpcAnimation   ( 0000000D 00BC0105 )
	Wait  30`
	Call  SetNpcAnimation   ( 0000000D 00BC0101 )
	Switch *VarA
		Case == 0`
			Call  $Function_802419E4    ( *Var6 *Var7 *Var8 )
			If *Var6 <= 5`
				Call $Function_SubMaxHP4 ( )
			Else
				Call $Function_SubMaxHP ( )
			EndIf
		Case == 1`
			Call $Function_SubMaxFP ( )
		Case == 2`
			Call $Function_SubMaxBP ( )		
	EndSwitch
	Call  $Function_EnforceStatMaximums ( )
	Call  $Function_802418AC    ( *Var6 )
	If  *Var6  ==  00000000
		Set   *Var7  $String_DowngradeSuccess
	Else
		Set   *Var7  $String_DowngradeSuccessBP
	EndIf
	Call  SpeakToPlayer ( 0000000D 00BC0104 00BC0101 00000000 *Var7 ) % variable string ID	
	%Call	DisablePlayerInput	( .False )
	Call  $Function_80241C60 ( )
	Set *MapFlag[6] .True
	Return
	Label End
	Return
	End
}

#new:Function $Function_SetEffectPalette
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  ADDIU        A0, R0, 00                %R
   1C:  SW            A0, 50 (V1)
   20:  LW            V1, C (V0)
        ADDIU        A0, R0, 00                %G
   24:  SW            A0, 54 (V1)
   28:  LW            V1, C (V0)
   2C:  ADDIU        A1, R0, 00                %B
   30:  SW            A1, 58 (V1)
   34:  LW            A0, C (V0)
   38:  ADDIU        V1, R0, FF                %A
   3C:  SW            V1, 5C (A0)
   40:  LW            A0, C (V0)
   54:  LW            RA, 10 (SP)
   58:  ADDIU        V0, R0, 2
   5C:  JR            RA
   60:  ADDIU        SP, SP, 18
}

#new:Function $Function_AddMaxHP4
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, 4
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, 4
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxHP4
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, FFFC
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, FFFC
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxHP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, 5
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, 5
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxFP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 6 (S0)
	ADDI	S1, S1, 5
	SB		S1, 6 (S0)
	LB		S1, 7 (S0)
	ADDI	S1, S1, 5
	SB		S1, 7 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_AddMaxBP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 8 (S0)
	ADDI	S1, S1, 3
	SB		S1, 8 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxHP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 3 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 3 (S0)
	LB		S1, 4 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 4 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxFP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 6 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 6 (S0)
	LB		S1, 7 (S0)
	ADDI	S1, S1, FFFB
	SB		S1, 7 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_SubMaxBP
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 8 (S0)
	ADDI	S1, S1, FFFD
	SB		S1, 8 (S0)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:Function $Function_EnforceStatMaximums
{
	PUSH	RA, S0, S1, S2, S3
	LI		S0, 8010F290
	LB		S1, 5 (S0)
	LB		S2, 6 (S0)
	BGT		S2, S1 .okfp
	NOP
	SB		S2, 5 (S0)
	.okfp	
	LB		S1, 2 (S0)
	LB		S2, 3 (S0)
	BGT		S2, S1 .okhp
	NOP
	SB		S2, 2 (S0)
	.okhp
	POP		RA, S0, S1, S2, S3
	JR		RA
	ORI		V0, R0, 2
}

#new:String $ChetTattle
{
	[Style Tattle]
	[EnableCDownNext]Huh? A Nomadimouse?[BR]
	All the way out here?[BR]
	That doesn't really make sense...[BR]
	[Wait][Next]
	Didn't we have to use the Star[BR]
	Stone just to even open the path[BR]
	to here?[BR]
	[Wait][Next]
	Although... I could say that[BR]
	for everyone else in this place.[BR]
	[Wait][Next]
	Either way, I get the feeling[BR]
	that this guy is here for a[BR]
	reason.[BR]
	[Wait][End]
}

%Strings
#new:String $String_ChetRippoFirst
{
	[Style Right]
	A palace was built in nowhere,[BR]
	and left without purpose...[BR]
	But from the depths of[BR]
	nothingness, you may draw power.[BR]
	[Wait][Next]
	I have the power to modify[BR]
	your stats.[BR]
	[Wait][Next]
	You may upgrade your stats,[BR]
	but this must come from the[BR]
	sacrifice of another stat.[BR]
	[Wait][Next]
	Make your decision carefully.[BR]
	[Yield][End]
}

#new:String $String_ChetRippoStart
{
	[Style Right]
	A palace was built in nowhere,[BR]
	and left without purpose...[BR]
	But from the depths of[BR]
	nothingness, you may draw power.[BR]
	[Wait][Next]
	I have the power to modify[BR]
	your stats.[BR]
	[Wait][Next]
	You may upgrade your stats,[BR]
	but this must come from the[BR]
	sacrifice of another stat.[BR]
	[Wait][Next]
	Make your decision carefully.[BR]
	[Yield][End]
}

#new:String $String_ChetRippoStartShort
{
	[Style Right]
	From the depths of nothingness,[BR]
	you may draw power.[BR]
	[Wait][Next]
	You may upgrade your stats,[BR]
	but this must come from the[BR]
	sacrifice of another stat in[BR]
	the form of a Star Token.[BR]
	[Wait][Next]
	Make your decision carefully.[BR]
	[Yield][End]
}

#new:String $String_ChetRippoTooPoor
{
	[Style Right]
	What are you trying to pull?[BR]
	[Pause 10]You don't have 9 coins![BR]
	[Wait][Next]
	Too bad for you...[BR]
	[Pause 10]Try coming back when you have a[BR]
	few coins in your pocket.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNoLowerError
{
	[Style Right]
	If I try to draw more power[BR]
	from your soul, there will[BR]
	be nothing left.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNoStarTokens
{
	[Style Right]
	This power does not come[BR]
	without sacrifice.[BR]
	[Wait][End]
}

#new:String $String_ChetRippoNormalOptions
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (Free)[BR]
[Cursor:01][Option:01]Lower Stats (Free)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_ChetRippoNoRaise
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (X)[BR]
[Cursor:01][Option:01]Lower Stats (Free)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_ChetRippoNoLower
{
[STYLE:Choice:40:70:C0:3E][DelayOff]
[Cursor:00][Option:00]Raise Stats (Free)[BR]
[Cursor:01][Option:01]Lower Stats (X)[BR]
[Cursor:02][Option:02]Cancel[BR]
[Option:FF][DelayOn][SetCancel:02]
[EndChoice:03][END] 
}

#new:String $String_Paradox
{
	[Style Right]
	It seems that you have[BR]
	encountered the impossible.[BR]
	[Wait][NEXT]
	I cannot help you.[BR]
	[Wait][End]
}

#new:String $String_RaiseMenu
{
	[Style Right]
	Very well.[BR]
	[Wait][Next]
	This is your current status.[BR]
	Maximum HP is "[Var 0],"[BR]
	FP is "[Var 1]," and BP is "[Var 2]."[BR]
	[Wait][Next]
	Choose the one you want to[BR]
	upgrade.[BR]
	[Yield][End]
}

#new:String $String_LowerMenu
{
	[Style Right]
	Very well.[BR]
	[Wait][Next]
	This is your current status.[BR]
	Maximum HP is "[Var 0],"[BR]
	FP is "[Var 1]," and BP is "[Var 2]."[BR]
	[Wait][Next]
	Choose the one you want to[BR]
	downgrade.[BR]
	[Yield][End]
}

#new:String $String_UpgradeStat
{
	[Next]
	All Right.[BR]
	So you want [Var 0] to [BR]
	be upgraded.[BR]
	[Pause 10]Very well.[Wait][End]
}

#new:String $String_DowngradeStat
{
	[Next]
	All Right.[BR]
	So you want [Var 0] to [BR]
	be downgraded.[BR]
	[Pause 10]Very well.[Wait][End]
}

#new:String $String_UpgradeSuccess
{
	[Style Right]
	Your [Var 0] have been[BR]
	upgraded.[BR]
	[Wait][Next]
	Goodbye.[Wait][End]
}

#new:String $String_DowngradeSuccess
{
	[Style Right]
	Your [Var 0] have been[BR]
	downgraded.[BR]
	[Wait][Next]
	The missing energy has become[BR]
	a [Color:25]Star Token[Color:0A], which can be[BR]
	converted back into a stat[BR]
	increase.[BR]
	[Wait][Next]
	Goodbye.[Wait][End]
}

#new:String $String_DowngradeSuccessBP
{
	[Style Right]
	Your [Var 0] have been[BR]
	downgraded.[BR]
	[Wait][Next]
	The missing energy has become[BR]
	a [Color:25]Star Token[Color:0A], which can be[BR]
	converted back into a stat[BR]
	increase.[BR]
	[Wait][Next]
	Your badges have been removed[BR]
	as well.[BR]
	[Wait][Next]
	Goodbye.[Wait][End]
}

#new:String $String_CantUpgradeThat
{
	[Next]
	Your soul cannot handle the[BR]
	increasing of that stat.[Wait][End]
}

#new:String $String_CantDowngradeThat
{
	[Next]
	Your soul cannot handle the[BR]
	decreasing of that stat.[Wait][End]
}

#new:String $String_GreedCurse
{
	[Next]
	Oh. You are the bearer of[BR]
	that [Color:26]cursed stone[Color:0A].[BR]
	The power of greed has consumed[BR]
	your soul.[BR]
	[Wait][NEXT]
	[PAUSE:10]You must now accept the[BR]
	consequences of your actions.[BR]
	[Wait][END]
}

#new:String $String_BadgeCurse
{
	[Next]
	That part of your soul has[BR]
	been sealed by [Color:25]that stone[Color:0A].[BR]
	[PAUSE:10]There is nothing I can[BR]
	do to bypass it.[BR]
	[Wait][END]
}


#new:Function $Function_80241C20
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       800E9894
    C:  NOP
   10:  LW        RA, 10 (SP)
   14:  LI        V0, 2
   18:  JR        RA
   1C:  ADDIU     SP, SP, 18
}

#new:Function $Function_80241C40
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       800E98C4
    C:  NOP
   10:  LW        RA, 10 (SP)
   14:  LI        V0, 2
   18:  JR        RA
   1C:  ADDIU     SP, SP, 18
}

#new:Function $Function_80241C60
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  JAL       800E98C4
    C:  NOP
   10:  JAL       ~Func:open_status_menu_long
   14:  NOP
   18:  LW        RA, 10 (SP)
   1C:  LI        V0, 2
   20:  JR        RA
   24:  ADDIU     SP, SP, 18
}

#new:Function $Function_802419D0
{
    0:  LAH       V0, 8010F29C
    8:  SW        V0, 84 (A0)
    C:  JR        RA
   10:  LI        V0, 2
}

#new:Function $Function_80241B90
{
    0:  LA        V1, 8010F290
    8:  LB        V0, 3 (V1)
    C:  SW        V0, 84 (A0)
   10:  LB        V0, 6 (V1)
   14:  SW        V0, 88 (A0)
   18:  LB        V0, 8 (V1)
   1C:  SW        V0, 8C (A0)
   20:  JR        RA
   24:  LI        V0, 2
}

#new:Function $Function_802418AC
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        RA, 1C (SP)
   10:  SW        S2, 18 (SP)
   14:  SW        S1, 14 (SP)
   18:  LW        V0, C (S0)
   1C:  JAL       $Function_80241848
   20:  LW        S2, 0 (V0)
   24:  LA        S1, 8010F290
   2C:  LB        V1, 8 (S1)
   30:  SLT       V1, V1, V0
   34:  BNE       V1, R0, .o4C
   38:  LI        V1, 3F
   3C:  COPY      A0, S0
   40:  COPY      A1, S2
   44:  BEQ       R0, R0, .o74
   48:  CLEAR     A2
        .o4C
   4C:  ADDIU     V0, S1, 286
        .o50
   50:  SH        R0, 0 (V0)
   54:  ADDIU     V1, V1, FFFF
   58:  BGEZ      V1, .o50
   5C:  ADDIU     V0, V0, FFFE
   60:  JAL       ~Func:enforce_hpfp_limits
   64:  NOP
   68:  COPY      A0, S0
   6C:  COPY      A1, S2
   70:  LI        A2, 1
        .o74
   74:  JAL       ~Func:set_variable
   78:  NOP
   7C:  LI        V0, 2
   80:  LW        RA, 1C (SP)
   84:  LW        S2, 18 (SP)
   88:  LW        S1, 14 (SP)
   8C:  LW        S0, 10 (SP)
   90:  JR        RA
   94:  ADDIU     SP, SP, 20
}

#new:Function $Function_80241848
{
    0:  CLEAR     A2
    4:  COPY      A1, A2
    8:  LA        T0, 800878E0
   10:  LA        A3, 8008F060
   18:  LA        A0, 8010F290
        .o20
   20:  LH        V0, 208 (A0)
   24:  BEQ       V0, R0, .o50
   28:  ADDIU     A1, A1, 1
   2C:  SLL       V0, V0, 5
   30:  ADDU      V0, V0, T0
   34:  LBU       V1, 1A (V0)
   38:  SLL       V0, V1, 2
   3C:  ADDU      V0, V0, V1
   40:  SLL       V0, V0, 2
   44:  ADDU      V0, V0, A3
   48:  LB        V0, 12 (V0)
   4C:  ADDU      A2, A2, V0
        .o50
   50:  SLTI      V0, A1, 40
   54:  BNE       V0, R0, .o20
   58:  ADDIU     A0, A0, 2
   5C:  JR        RA
   60:  COPY      V0, A2
}